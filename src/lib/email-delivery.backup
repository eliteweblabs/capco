/**
 * Client email delivery - Step 3a in the chain
 */

import type { ProcessedStatusData } from "./process-status-data";

export interface ClientEmailResult {
  success: boolean;
  message: string;
  recipient: string;
}

/**
 * Handle client email delivery for status updates
 */
export async function handleClientEmailDelivery(
  processedData: ProcessedStatusData
): Promise<ClientEmailResult> {
  console.log("📧 [CLIENT-EMAIL] ==========================================");
  console.log("📧 [CLIENT-EMAIL] Starting client email delivery");
  console.log("📧 [CLIENT-EMAIL] ==========================================");

  try {
    // Always notify the project author (client)
    const recipient = processedData.profile.email;
    console.log("📧 [CLIENT-EMAIL] Client details:", {
      company_name: processedData.profile.company_name,
      email: recipient
    });

    console.log(`📧 [CLIENT-EMAIL] 📤 Sending email to client: ${recipient}`);
    console.log("📧 [CLIENT-EMAIL] Email content would include:");
    console.log("📧 [CLIENT-EMAIL] - Project address:", processedData.project.address);
    console.log("📧 [CLIENT-EMAIL] - Status update notification");

    // Here you would integrate with your email service (Resend, etc.)
    // For now, just log the action
    console.log("📧 [CLIENT-EMAIL] ✅ Client email delivery completed (simulated)");

    const result = {
      success: true,
      message: "Client email sent successfully",
      recipient,
    };

    console.log("📧 [CLIENT-EMAIL] ==========================================");
    console.log("📧 [CLIENT-EMAIL] ✅ Client email result:", result);
    console.log("📧 [CLIENT-EMAIL] ==========================================");

    return result;
  } catch (error) {
    console.error("📧 [CLIENT-EMAIL] ❌ Error in client email delivery:", error);
    const result = {
      success: false,
      message: "Client email delivery failed",
      recipient: "",
    };
    console.log("📧 [CLIENT-EMAIL] ❌ Client email error result:", result);
    return result;
  }
}
