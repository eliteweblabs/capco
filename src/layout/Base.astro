---
interface Props {
  title: string;
  description: string;
  user?: {
    id: string;
    email: string;
  };
}

// const ogImageURL = new URL("hero.png", Astro.site).href;
// const canonicalURL = new URL(Astro.url).href;
import Header from "../components/index/Header.astro";
// import SectionContainer from "../components/SectionContainer.astro";
import ToastAlerts from "../components/ToastAlerts.astro";
import "../styles/boxicons.css"; // Import Boxicons CSS first
import "../styles/global.css"; // Importa el CSS desde src/styles - Tailwind should come last

import { getLangFromUrl } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const { title, description, user } = Astro.props;
---

<!doctype html>
<html {lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/img/capco-logo.svg" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#ef4444" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Fire Pro" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.svg" />
    <meta property="og:url" content="{Astro.url}" />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.svg" />

    <title>{title}</title>

    <!-- Theme management - early initialization to prevent flash -->
    <script>
      // Global theme manager
      declare global {
        interface Window {
          ThemeManager: {
            toggle: () => void;
            applyTheme: (theme: string) => void;
            getCurrentTheme: () => string;
          };
        }
      }

      window.ThemeManager = (function () {
        const storageKey = "theme";
        const htmlElement = document.documentElement;

        console.log("ðŸŽ¨ [THEME] Theme manager initializing...");

        function applyTheme(theme: string) {
          if (theme === "dark") {
            htmlElement.classList.remove("light");
            htmlElement.classList.add("dark");
            localStorage.setItem(storageKey, "dark");
            console.log("ðŸŽ¨ [THEME] Applied dark theme");
          } else {
            htmlElement.classList.remove("dark");
            htmlElement.classList.add("light");
            localStorage.setItem(storageKey, "light");
            console.log("ðŸŽ¨ [THEME] Applied light theme");
          }
        }

        function getCurrentTheme() {
          return htmlElement.classList.contains("dark") ? "dark" : "light";
        }

        function initializeTheme() {
          const savedTheme = localStorage.getItem(storageKey);
          let currentTheme;

          if (savedTheme) {
            currentTheme = savedTheme;
            console.log("ðŸŽ¨ [THEME] Using saved theme:", currentTheme);
          } else {
            currentTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
              ? "dark"
              : "light";
            console.log("ðŸŽ¨ [THEME] Using system preference:", currentTheme);
          }

          applyTheme(currentTheme);
          console.log("ðŸŽ¨ [THEME] Initial theme applied:", currentTheme);
        }

        function toggle() {
          const newTheme = getCurrentTheme() === "dark" ? "light" : "dark";
          applyTheme(newTheme);
          console.log("ðŸŽ¨ [THEME] Theme toggled to:", newTheme);
        }

        // Initialize immediately
        initializeTheme();

        // Return public API
        return {
          toggle,
          applyTheme,
          getCurrentTheme,
        };
      })();
    </script>
  </head>
  <body class="bg-hub-background dark:bg-hub-background-dark md:flex md:justify-center">
    <main class="w-full md:max-w-[2000px]">
      <Header />
      <slot />
    </main>
    <ToastAlerts />

    <!-- Flowbite JavaScript -->
    <script src="/js/flowbite.min.js" crossorigin="anonymous"></script>

    <!-- Inject Supabase environment variables and user data for client-side use -->
    <script
      set:html={`window.SUPABASE_URL = "${import.meta.env.SUPABASE_URL || ""}"; window.SUPABASE_ANON_KEY = "${(import.meta.env.SUPABASE_ANON_KEY || "").replace(/\s/g, "")}"; ${user ? `window.USER_DATA = ${JSON.stringify(user)};` : ""}`}
    />

    <!-- Inject session tokens for client-side Supabase auth -->
    <script
      set:html={`
        const accessToken = "${Astro.cookies.get("sb-access-token")?.value || ""}";
        const refreshToken = "${Astro.cookies.get("sb-refresh-token")?.value || ""}";
        if (accessToken) window.SUPABASE_ACCESS_TOKEN = accessToken;
        if (refreshToken) window.SUPABASE_REFRESH_TOKEN = refreshToken;
      `}
    />
  </body>
</html>

<script>
  // Theme toggle functionality using the global ThemeManager
  document.addEventListener("DOMContentLoaded", function () {
    const themeToggle = document.getElementById("toggle-theme");

    console.log("ðŸŽ¨ [THEME] Setting up theme toggle button");

    // Theme toggle button click handler
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        window.ThemeManager.toggle();
      });
      console.log("ðŸŽ¨ [THEME] Theme toggle button connected");
    } else {
      console.warn("ðŸŽ¨ [THEME] Theme toggle button not found");
    }

    // Listen for system color scheme changes
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (event) => {
      const currentSavedTheme = localStorage.getItem("theme");
      // Only apply system change if user hasn't set a manual preference
      if (!currentSavedTheme) {
        window.ThemeManager.applyTheme(event.matches ? "dark" : "light");
        console.log(
          "ðŸŽ¨ [THEME] Applied system preference change:",
          event.matches ? "dark" : "light"
        );
      }
    });
  });
</script>
