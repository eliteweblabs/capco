---
interface Props {
  title: string;
  description: string;
  user?: {
    id: string;
    email: string;
  };
}

// const ogImageURL = new URL("hero.png", Astro.site).href;
// const canonicalURL = new URL(Astro.url).href;
import Header from "../components/index/Header.astro";
// import SectionContainer from "../components/SectionContainer.astro";
import NotificationSystem from "../components/NotificationSystem.astro";
import "../styles/global.css"; // Importa el CSS desde src/styles
import "../styles/boxicons.css"; // Import Boxicons CSS

import { getLangFromUrl } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const { title, description, user } = Astro.props;
---

<!doctype html>
<html {lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/img/capco-logo.svg" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#ef4444" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Fire Pro" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.svg" />
    <meta property="og:url" content="{Astro.url}" />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.svg" />

    <title>{title}</title>
  </head>
  <body
    class="bg-hub-background dark:bg-hub-background-dark md:flex md:justify-center"
  >
    <main class="w-full md:max-w-[2000px]">
      <Header />
      <slot />
    </main>
    <NotificationSystem />
    <script src="/js/flowbite.min.js" is:inline></script>

    <!-- Inject Supabase environment variables and user data for client-side use -->
    <script
      set:html={`window.SUPABASE_URL = "${import.meta.env.SUPABASE_URL || ""}"; window.SUPABASE_ANON_KEY = "${(import.meta.env.SUPABASE_ANON_KEY || "").replace(/\s/g, "")}"; ${user ? `window.USER_DATA = ${JSON.stringify(user)};` : ""}`}
    />

    <!-- Inject session tokens for client-side Supabase auth -->
    <script
      set:html={`
        const accessToken = "${Astro.cookies.get("sb-access-token")?.value || ""}";
        const refreshToken = "${Astro.cookies.get("sb-refresh-token")?.value || ""}";
        if (accessToken) window.SUPABASE_ACCESS_TOKEN = accessToken;
        if (refreshToken) window.SUPABASE_REFRESH_TOKEN = refreshToken;
      `}
    />
  </body>
</html>

<script>
  const themeToggle = document.getElementById("toggle-theme");
  const htmlElement = document.documentElement;
  const storageKey = "theme"; // Clave para el almacenamiento local

  // Función para aplicar el tema
  function applyTheme(theme: string) {
    if (theme === "dark") {
      htmlElement.classList.add("dark");
      localStorage.setItem(storageKey, "dark");
    } else {
      htmlElement.classList.remove("dark");
      localStorage.setItem(storageKey, "light");
    }
  }

  // Obtener el tema guardado o el preferido por el sistema
  const savedTheme = localStorage.getItem(storageKey);
  if (savedTheme) {
    applyTheme(savedTheme);
  } else {
    const preferredTheme = window.matchMedia("(prefers-color-scheme: dark)")
      .matches
      ? "dark"
      : "light";
    applyTheme(preferredTheme);
  }

  // Escuchar cambios en el esquema de color del sistema
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (event) => {
      applyTheme(event.matches ? "dark" : "light");
    });

  // Alternar el tema manualmente con el botón
  if (themeToggle) {
    themeToggle.addEventListener("click", () => {
      const newTheme = htmlElement.classList.contains("dark")
        ? "light"
        : "dark";
      applyTheme(newTheme);
    });
  }
</script>

<script>
  // Custom validation tooltip system
  class ValidationTooltip {
    constructor() {
      this.init();
    }

    init() {
      // Disable native validation UI
      document.addEventListener(
        "invalid",
        (e) => {
          e.preventDefault();
          this.showTooltip(e.target as HTMLElement);
        },
        true
      );

      // Hide tooltip on input
      document.addEventListener(
        "input",
        (e) => {
          this.hideTooltip(e.target as HTMLElement);
        },
        true
      );

      // Hide tooltip on focus out
      document.addEventListener(
        "blur",
        (e) => {
          setTimeout(() => this.hideTooltip(e.target as HTMLElement), 100);
        },
        true
      );

      // Handle form submit
      document.addEventListener("submit", (e) => {
        const form = e.target as HTMLFormElement;
        if (form && typeof form.querySelector === "function") {
          const firstInvalid = form.querySelector(":invalid") as HTMLElement;
          if (firstInvalid) {
            e.preventDefault();
            this.showTooltip(firstInvalid);
            firstInvalid.focus();
          }
        }
      });
    }

    showTooltip(element: HTMLElement) {
      // Remove existing tooltip
      this.hideTooltip(element);

      // Get validation message
      const inputElement = element as HTMLInputElement;
      const message = inputElement.validationMessage;
      if (!message) return;

      // Create tooltip
      const tooltip = document.createElement("div");
      tooltip.className = "validation-tooltip show";
      tooltip.textContent = message;
      tooltip.setAttribute("data-validation-tooltip", "");

      // Position tooltip relative to element
      element.style.position = "relative";
      const parentElement = element.parentNode as HTMLElement;
      if (parentElement && parentElement.style) {
        parentElement.style.position = "relative";
        parentElement.appendChild(tooltip);
      }

      // Focus the invalid element
      element.focus();
    }

    hideTooltip(element: HTMLElement) {
      if (!element || !element.parentNode) return;

      const parentElement = element.parentNode as HTMLElement;
      if (parentElement && typeof parentElement.querySelector === "function") {
        const existingTooltip = parentElement.querySelector(
          "[data-validation-tooltip]"
        );
        if (existingTooltip) {
          existingTooltip.classList.remove("show");
          setTimeout(() => {
            if (existingTooltip.parentNode) {
              existingTooltip.parentNode.removeChild(existingTooltip);
            }
          }, 200);
        }
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new ValidationTooltip();
    });
  } else {
    new ValidationTooltip();
  }
</script>
