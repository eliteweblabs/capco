---
import App from "../components/common/App.astro";
import DiscussionPartial from "../components/partials/DiscussionPartial.astro";

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../lib/auth";
const { isAuth, currentUser, session } = await checkAuth(Astro.cookies);
const currentRole = currentUser?.profile?.role || "Client";

// Redirect if not authenticated
if (!isAuth) {
  console.log("üåê [DISCUSSIONS] Not authenticated, redirecting to login");
  return Astro.redirect("/login");
}
---

<App
  currentUser={currentUser}
  session={session}
  globalInputClasses=""
  globalSecondaryTextClasses=""
  globalPrimaryTextClasses=""
>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Global Discussions</h1>
            <p class="mt-2 text-gray-600 dark:text-gray-400">
              Company-wide discussions and announcements
            </p>
          </div>

          <!-- Stats Cards -->
          <div class="flex gap-4">
            <div class="rounded-lg bg-white p-4 shadow-sm dark:bg-gray-800">
              <div
                class="text-2xl font-bold text-primary-600 dark:text-primary-400"
                id="total-discussions"
              >
                -
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">Total Discussions</div>
            </div>
            <div class="rounded-lg bg-white p-4 shadow-sm dark:bg-gray-800">
              <div
                class="text-2xl font-bold text-green-600 dark:text-green-400"
                id="recent-discussions"
              >
                -
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">Recent (24h)</div>
            </div>
            <div class="rounded-lg bg-white p-4 shadow-sm dark:bg-gray-800">
              <div class="text-2xl font-bold text-blue-600 dark:text-blue-400" id="active-users">
                -
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">Active Users</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Filters -->
      <div class="mb-6 flex flex-wrap gap-4">
        <div class="flex items-center gap-2">
          <label for="internal-filter" class="text-sm font-medium text-gray-700 dark:text-gray-300">
            Type:
          </label>
          <select
            id="internal-filter"
            class="rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          >
            <option value="all">All Discussions</option>
            <option value="false">Public Only</option>
            <option value="true">Internal Only</option>
          </select>
        </div>

        <div class="flex items-center gap-2">
          <label
            for="completed-filter"
            class="text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Status:
          </label>
          <select
            id="completed-filter"
            class="rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          >
            <option value="all">All Status</option>
            <option value="false">Open</option>
            <option value="true">Completed</option>
          </select>
        </div>

        <button
          id="refresh-discussions"
          class="inline-flex items-center gap-2 rounded-lg bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
        >
          <i class="bx bx-refresh text-lg"></i>
          Refresh
        </button>
      </div>

      <!-- Discussion Component -->
      <div class="rounded-lg bg-white shadow-sm dark:bg-gray-800">
        <DiscussionPartial
          project={null}
          currentUser={currentUser}
          authorProfile={currentUser?.profile}
          globalInputClasses=""
          globalSecondaryTextClasses=""
          globalPrimaryTextClasses=""
        />
      </div>
    </div>
  </div>
</App>

<script>
  // Global discussion page functionality
  let currentFilters = {
    internal: "all",
    completed: "all",
  };

  document.addEventListener("DOMContentLoaded", function () {
    initializeGlobalDiscussions();
  });

  function initializeGlobalDiscussions() {
    console.log("üåê [GLOBAL-DISCUSSIONS] Initializing global discussion system");

    // Setup filter handlers
    setupFilters();

    // Load initial stats
    loadStats();
  }

  function setupFilters() {
    const internalFilter = document.getElementById("internal-filter");
    const completedFilter = document.getElementById("completed-filter");
    const refreshBtn = document.getElementById("refresh-discussions");

    if (internalFilter) {
      internalFilter.addEventListener("change", (e) => {
        currentFilters.internal = e.target.value;
        refreshDiscussions();
      });
    }

    if (completedFilter) {
      completedFilter.addEventListener("change", (e) => {
        currentFilters.completed = e.target.value;
        refreshDiscussions();
      });
    }

    if (refreshBtn) {
      refreshBtn.addEventListener("click", () => {
        refreshDiscussions();
        loadStats();
      });
    }
  }

  async function refreshDiscussions() {
    // Trigger the discussion partial to reload with new filters
    const discussionPartial = document.querySelector('[data-project-id=""]');
    if (discussionPartial) {
      // The discussion partial will handle the reload
      console.log("üåê [GLOBAL-DISCUSSIONS] Refreshing discussions with filters:", currentFilters);
    }
  }

  async function loadStats() {
    try {
      const response = await fetch("/api/discussions?limit=1", {
        credentials: "include",
      });

      const data = await response.json();

      if (data.success && data.stats) {
        updateStatsDisplay(data.stats);
      }
    } catch (error) {
      console.error("Error loading stats:", error);
    }
  }

  function updateStatsDisplay(stats) {
    const totalEl = document.getElementById("total-discussions");
    const recentEl = document.getElementById("recent-discussions");
    const activeEl = document.getElementById("active-users");

    if (totalEl) totalEl.textContent = stats.total || 0;
    if (recentEl) recentEl.textContent = stats.recent_24h || 0;
    if (activeEl) activeEl.textContent = stats.active_users_24h || 0;
  }
</script>
