---
// Test page for Cal.com database access
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cal.com Database Test</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background: #f5f5f5;
      }
      .container {
        background: white;
        border-radius: 8px;
        padding: 30px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }
      .test-section {
        margin: 20px 0;
        padding: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
      }
      .test-result {
        margin: 10px 0;
        padding: 10px;
        border-radius: 4px;
      }
      .success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      .error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      .info {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
      }
      .warning {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
      }
      button {
        background: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        margin: 5px;
      }
      button:hover {
        background: #0056b3;
      }
      button:disabled {
        background: #6c757d;
        cursor: not-allowed;
      }
      pre {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 4px;
        overflow-x: auto;
        font-size: 12px;
      }
      .loading {
        color: #007bff;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>üß™ Cal.com Database Test</h1>
      <p>This page tests the Cal.com database connection and credentials.</p>

      <div class="test-section">
        <h2>Database Connection Tests</h2>
        <button onclick="testDatabaseConnection()">Test Database Connection</button>
        <button onclick="testTables()">List Available Tables</button>
        <button onclick="testUsers()">Test Users Query</button>
        <button onclick="testEventTypes()">Test Event Types Query</button>
        <button onclick="runAllTests()">Run All Tests</button>

        <div id="test-results"></div>
      </div>

      <div class="test-section">
        <h2>Connection Information</h2>
        <div id="connection-info">
          <p><strong>Connection:</strong> Using CALCOM_DATABASE_URL environment variable</p>
          <p><strong>SSL:</strong> Required (rejectUnauthorized: false)</p>
          <p>
            <strong>Note:</strong> Database credentials are stored securely in environment variables
          </p>
        </div>
      </div>

      <div class="test-section">
        <h2>Test Results</h2>
        <div id="results-container">
          <p class="info">Click a test button above to run tests.</p>
        </div>
      </div>
    </div>

    <script>
      let testResults = [];

      function addResult(message, type = "info") {
        const timestamp = new Date().toLocaleTimeString();
        testResults.push({ message, type, timestamp });
        updateResults();
      }

      function updateResults() {
        const container = document.getElementById("results-container");
        container.innerHTML = testResults
          .map(
            (result) =>
              `<div class="test-result ${result.type}">
                    <strong>[${result.timestamp}]</strong> ${result.message}
                </div>`
          )
          .join("");
      }

      async function testDatabaseConnection() {
        addResult("Testing database connection...", "loading");

        try {
          const response = await fetch("/api/vapi/cal-integration", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "get_users" }),
          });

          const data = await response.json();

          if (data.success) {
            addResult(
              `‚úÖ Database connection successful! Found ${data.data.length} users.`,
              "success"
            );
            addResult(`Users: ${JSON.stringify(data.data, null, 2)}`, "info");
          } else {
            addResult(`‚ùå Database connection failed: ${data.error}`, "error");
          }
        } catch (error) {
          addResult(`‚ùå Database connection error: ${error.message}`, "error");
        }
      }

      async function testTables() {
        addResult("Testing database tables...", "loading");

        try {
          const response = await fetch("/api/test-db-tables", {
            method: "GET",
          });

          if (response.ok) {
            const data = await response.json();
            addResult(`‚úÖ Tables query successful!`, "success");
            addResult(`Available tables: ${JSON.stringify(data.tables, null, 2)}`, "info");
          } else {
            addResult(`‚ùå Tables query failed: ${response.status}`, "error");
          }
        } catch (error) {
          addResult(`‚ùå Tables query error: ${error.message}`, "error");
        }
      }

      async function testUsers() {
        addResult("Testing users query...", "loading");

        try {
          const response = await fetch("/api/vapi/cal-integration", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "get_users" }),
          });

          const data = await response.json();

          if (data.success) {
            addResult(`‚úÖ Users query successful!`, "success");
            addResult(`Found ${data.data.length} users:`, "info");
            data.data.forEach((user) => {
              addResult(`  - ${user.name} (${user.email}) - ID: ${user.id}`, "info");
            });
          } else {
            addResult(`‚ùå Users query failed: ${data.error}`, "error");
          }
        } catch (error) {
          addResult(`‚ùå Users query error: ${error.message}`, "error");
        }
      }

      async function testEventTypes() {
        addResult("Testing event types query...", "loading");

        try {
          const response = await fetch("/api/vapi/cal-integration", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ action: "get_event_types" }),
          });

          const data = await response.json();

          if (data.success) {
            addResult(`‚úÖ Event types query successful!`, "success");
            addResult(`Found ${data.data.length} event types:`, "info");
            data.data.forEach((eventType) => {
              addResult(
                `  - ${eventType.title} (${eventType.slug}) - ${eventType.length}min`,
                "info"
              );
            });
          } else {
            addResult(`‚ùå Event types query failed: ${data.error}`, "error");
          }
        } catch (error) {
          addResult(`‚ùå Event types query error: ${error.message}`, "error");
        }
      }

      async function runAllTests() {
        addResult("üöÄ Running all database tests...", "loading");
        testResults = []; // Clear previous results

        await testDatabaseConnection();
        await new Promise((resolve) => setTimeout(resolve, 1000));

        await testUsers();
        await new Promise((resolve) => setTimeout(resolve, 1000));

        await testEventTypes();
        await new Promise((resolve) => setTimeout(resolve, 1000));

        addResult("üèÅ All tests completed!", "info");
      }
    </script>
  </body>
</html>
