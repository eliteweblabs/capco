---
// Magic Link Proxy Page
// This page prevents email clients from prefetching magic links
// and provides a clean redirect experience

import type { APIRoute } from "astro";

export const GET: APIRoute = async ({ url, redirect }) => {
  const magicLink = url.searchParams.get("link");

  if (!magicLink) {
    console.log("ðŸ”— [MAGIC-LINK-PROXY] No magic link provided");
    return redirect("/login?error=invalid_magic_link");
  }

  console.log("ðŸ”— [MAGIC-LINK-PROXY] Processing magic link:", magicLink.substring(0, 100) + "...");

  try {
    // Decode the magic link URL - handle multiple levels of encoding
    let decodedLink = decodeURIComponent(magicLink);

    // If it's still encoded, decode again
    if (decodedLink.includes("%")) {
      decodedLink = decodeURIComponent(decodedLink);
    }

    console.log("ðŸ”— [MAGIC-LINK-PROXY] Decoded link:", decodedLink.substring(0, 100) + "...");

    // Extract the actual Supabase magic link from the complex URL
    const supabaseUrlMatch = decodedLink.match(
      /https:\/\/[^\/]+\.supabase\.co\/auth\/v1\/verify[^&]+/
    );
    if (supabaseUrlMatch) {
      const supabaseLink = supabaseUrlMatch[0];
      console.log(
        "ðŸ”— [MAGIC-LINK-PROXY] Extracted Supabase link:",
        supabaseLink.substring(0, 100) + "..."
      );

      // Redirect to our verify endpoint with the Supabase link
      const verifyUrl = new URL("/api/auth/verify", url.origin);

      // Parse the Supabase URL to extract parameters
      const supabaseUrl = new URL(supabaseLink);
      const token = supabaseUrl.searchParams.get("token");
      const type = supabaseUrl.searchParams.get("type");
      const redirectTo = supabaseUrl.searchParams.get("redirect_to");

      if (token && type) {
        verifyUrl.searchParams.set("token", token);
        verifyUrl.searchParams.set("type", type);
        if (redirectTo) {
          verifyUrl.searchParams.set("redirect", redirectTo);
        }

        console.log("ðŸ”— [MAGIC-LINK-PROXY] Redirecting to verify endpoint:", verifyUrl.toString());
        return redirect(verifyUrl.toString());
      }
    }

    // Fallback: redirect to the decoded link
    console.log("ðŸ”— [MAGIC-LINK-PROXY] Fallback: redirecting to decoded link");
    return redirect(decodedLink);
  } catch (error) {
    console.error("ðŸ”— [MAGIC-LINK-PROXY] Error processing magic link:", error);
    return redirect("/login?error=invalid_magic_link");
  }
};
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Redirecting...</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      }
      .container {
        text-align: center;
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      }
      .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
      }
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
      h1 {
        color: #333;
        margin-bottom: 1rem;
      }
      p {
        color: #666;
        margin-bottom: 1rem;
      }
      .button {
        background: #667eea;
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        text-decoration: none;
        display: inline-block;
        margin-top: 1rem;
      }
      .button:hover {
        background: #5a6fd8;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="spinner"></div>
      <h1>Redirecting to your dashboard...</h1>
      <p>Please wait while we authenticate your account.</p>
      <p>If you're not redirected automatically, click the button below:</p>
      <a href="#" id="redirectButton" class="button">Continue to Dashboard</a>
    </div>

    <script>
      // Get the magic link from URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      const magicLink = urlParams.get("link");

      const redirectButton = document.getElementById("redirectButton") as HTMLAnchorElement;
      const h1Element = document.querySelector("h1");
      const pElement = document.querySelector("p");

      if (magicLink && redirectButton) {
        // Set the button href to the magic link
        redirectButton.href = decodeURIComponent(magicLink);

        // Auto-redirect after a short delay
        setTimeout(() => {
          window.location.href = decodeURIComponent(magicLink);
        }, 2000);
      } else {
        // No magic link provided, redirect to login
        if (redirectButton) {
          redirectButton.href = "/login?error=invalid_magic_link";
          redirectButton.textContent = "Go to Login";
        }
        if (h1Element) {
          h1Element.textContent = "Invalid Link";
        }
        if (pElement) {
          pElement.textContent = "The magic link is invalid or has expired.";
        }
      }
    </script>
  </body>
</html>
