---
// OAuth callback page for handling PKCE flow client-side
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Completing Sign In...</title>
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
  </head>
  <body>
    <div
      style="display: flex; justify-content: center; align-items: center; height: 100vh; font-family: system-ui;"
    >
      <div style="text-align: center;">
        <div
          style="width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 20px;"
        >
        </div>
        <h2>Completing Sign In...</h2>
        <p>Please wait while we finish setting up your account.</p>
      </div>
    </div>

    <style>
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>

    <script>
      // Pass server-side environment variables to client
      const supabaseUrl = `${supabaseUrl}`;
      const supabaseAnonKey = `${supabaseAnonKey}`;

      async function handleOAuthCallback() {
        try {
          console.log("üîÑ [OAUTH-CALLBACK] Starting OAuth callback handling...");

          // Get the code from URL parameters
          const urlParams = new URLSearchParams(window.location.search);
          const code = urlParams.get("code");

          if (!code) {
            console.error("‚ùå [OAUTH-CALLBACK] No authorization code found");
            window.location.href = "/login?error=oauth_failed";
            return;
          }

          console.log("‚úÖ [OAUTH-CALLBACK] Authorization code found");

          if (!supabaseUrl || !supabaseAnonKey) {
            console.error("‚ùå [OAUTH-CALLBACK] Missing Supabase configuration");
            window.location.href = "/login?error=oauth_failed";
            return;
          }

          const supabase = window.supabase.createClient(supabaseUrl, supabaseAnonKey, {
            auth: {
              flowType: "pkce",
              autoRefreshToken: true,
              detectSessionInUrl: true,
              persistSession: true,
            },
          });

          console.log("üîÑ [OAUTH-CALLBACK] Exchanging code for session...");

          // Exchange the code for a session
          const { data, error } = await supabase.auth.exchangeCodeForSession(code);

          if (error) {
            console.error("‚ùå [OAUTH-CALLBACK] Session exchange failed:", error);
            window.location.href = "/login?error=oauth_failed";
            return;
          }

          if (!data.session) {
            console.error("‚ùå [OAUTH-CALLBACK] No session created");
            window.location.href = "/login?error=oauth_failed";
            return;
          }

          console.log("‚úÖ [OAUTH-CALLBACK] Session created successfully");
          console.log("üë§ [OAUTH-CALLBACK] User:", data.user?.email);

          // Set session cookies for server-side authentication
          const response = await fetch("/api/auth/set-session", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              access_token: data.session.access_token,
              refresh_token: data.session.refresh_token,
            }),
          });

          if (!response.ok) {
            console.error("‚ùå [OAUTH-CALLBACK] Failed to set session cookies");
            window.location.href = "/login?error=oauth_failed";
            return;
          }

          console.log("‚úÖ [OAUTH-CALLBACK] Session cookies set successfully");

          // Redirect to dashboard
          window.location.href = "/project/dashboard?success=oauth_success";
        } catch (error) {
          console.error("‚ùå [OAUTH-CALLBACK] Unexpected error:", error);
          window.location.href = "/login?error=oauth_failed";
        }
      }

      // Run the callback handler when the page loads
      document.addEventListener("DOMContentLoaded", handleOAuthCallback);
    </script>
  </body>
</html>
