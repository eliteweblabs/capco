---
// Handle OAuth callback if code is present (MUST be first)
const authCode = Astro.url.searchParams.get("code");
if (authCode) {
  return Astro.redirect(`/api/auth/callback?code=${authCode}`);
}

// Get auth data directly
import { checkAuth } from "../../lib/auth";

const authResult = await checkAuth(Astro.cookies);
console.log("üîê [LOGIN] Auth check result:", {
  isAuth: authResult.isAuth,
  hasUser: !!authResult.currentUser,
  hasSession: !!authResult.session,
  hasAccessToken: !!authResult.accessToken,
  currentRole: authResult.currentRole,
  rawUser: authResult.currentUser,
  rawSession: authResult.session,
});

const { isAuth, currentUser } = authResult;

// Redirect authenticated users to dashboard
if (isAuth) {
  console.log("üîê [LOGIN] User is authenticated, redirecting to dashboard");
  return Astro.redirect("/project/dashboard");
}

console.log("üîê [LOGIN] User is not authenticated, showing login page");
console.log("üîê [LOGIN] currentUser:", currentUser);

import { globalCompanyData } from "../../pages/api/global/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../../pages/api/global/global-classes";
const { globalInputClasses, primaryTextClasses, secondaryTextClasses } = globalClasses();

// Check for tab query parameter
const urlParams = new URLSearchParams(Astro.url.search);
const activeTab = urlParams.get("tab") || "login";

import App from "../../components/common/App.astro";
import AuthForm from "../../components/form/AuthForm.astro";
import Button from "../../components/common/Button.astro";
import Footer from "../../components/common/Footer.astro";
import RegisterForm from "../../components/form/RegisterForm.astro";
import SimpleIcon from "../../components/common/SimpleIcon.astro";

// Get auth data for conditional rendering
---

<App
  title="Login / Register"
  {currentUser}
  description="Login or register to access your dashboard"
  {globalCompanyName}
  {globalCompanySlogan}
  {globalCompanyAddress}
  {globalCompanyPhone}
  {globalCompanyEmail}
  {globalCompanyWebsite}
  {globalCompanyLogo}
  {globalCompanyLogoDark}
  {globalCompanyLogoLight}
  {globalInputClasses}
  {primaryTextClasses}
  {secondaryTextClasses}
>
  <!-- Tabs with Sliding Pill -->

  <div class="mx-auto grid max-w-7xl grid-cols-1 md:grid-cols-12 lg:gap-20 px-4 py-8 md:py-16">
    <div class="col-span-6 w-full">
      <div class="mx-auto max-w-2xl p-4 md:p-6">
        <div class="mb-8">
          <div
            id="auth-tabs"
            class="relative flex rounded-full b-gray-200 text-black b-2 border-primary border-2 offset-2 transition-all duration-200"
          >
            <!-- Sliding pill background -->
            <div
              id="auth-pill-bg"
              class="mix-blend-mode-multiply absolute top-0.5 h-14 rounded-full bg-primary-500 shadow-sm transition-all duration-300 ease-out dark:bg-primary-500"
              style="width: 0px; left: 0px; opacity: 0;"
            >
            </div>
            <Button
              id="login-tab"
              variant="anchor"
              size="sm"
              class="disabled"
              onclick="switchAuthTab('login')"
            >
              Sign In
            </Button>
            <Button
              id="register-tab"
              variant="anchor"
              size="sm"
              class="disabled"
              onclick="switchAuthTab('register')"
            >
              Create Account
            </Button>
          </div>
        </div>

        <!-- Login Form -->
        <div
          id="login-form"
          class={activeTab === "login" ? "auth-form-content" : "auth-form-content hidden"}
        >
          <AuthForm {globalInputClasses} />
        </div>

        <!-- Register Form -->
        <div
          id="register-form"
          class={activeTab === "register" ? "auth-form-content" : "auth-form-content hidden"}
        >
          <RegisterForm {globalInputClasses} />

          <!-- Link to Multi-Step Registration -->
          <div class="mt-6 text-center">
            <p class="text-sm text-gray-600 dark:text-gray-400">
              Prefer a guided experience?
              <a
                href="/auth/register-multi-step"
                class="font-medium text-primary-600 underline hover:text-primary-500 dark:text-primary-400"
              >
                Try our step-by-step registration
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>

    <div class="col-span-6 hidden md:block lg:block">
      <div class="mx-auto max-w-4xl text-center text-black dark:text-white">
        <h2 class="mb-8 text-2xl font-bold">Access Your Dashboard</h2>

        <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
          <div class="rounded-lg p-6 shadow-sm color-background">
            <div
              class="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-primary-100 dark:bg-primary-900/30"
            >
              <SimpleIcon name="cloud-upload" />
            </div>
            <h3 class="mb-2 font-semibold">Upload Documents</h3>
            <p class="text-sm">Securely submit PDFs &amp; project documentation</p>
          </div>

          <div class="rounded-lg p-6 shadow-sm color-background">
            <div
              class="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-green-100 dark:bg-green-900/30"
            >
              <SimpleIcon name="check-circle" />
            </div>
            <h3 class="mb-2 font-semibold">Track Progress</h3>
            <p class="text-sm">Monitor project statuses &amp; approval workflows</p>
          </div>

          <div class="rounded-lg p-6 shadow-sm color-background">
            <div
              class="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-purple-100 dark:bg-purple-900/30"
            >
              <SimpleIcon name="download" />
            </div>
            <h3 class="mb-2 font-semibold">Download Files</h3>
            <p class="text-sm">Quickly access stamped project deliverables &amp; archives</p>
          </div>
        </div>

        <!-- Contact Support -->
        <div class="mt-8 space-y-4 text-center">
          <div class="text-text-secondary dark:text-text-secondary-dark text-sm">
            <p>
              Need help? <Button variant="anchor" size="sm" onclick="triggerSMSForm()"
                >Contact our support team</Button
              >
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</App>

<script>
  // Sliding pill functionality
  function updateSlidingPill(activeButton: Element | null) {
    const pillBg = document.getElementById("auth-pill-bg");
    const tabContainer = document.getElementById("auth-tabs");

    if (!pillBg || !activeButton || !tabContainer) return;

    const containerRect = tabContainer.getBoundingClientRect();
    const buttonRect = activeButton.getBoundingClientRect();

    // Calculate position relative to the container
    const left = buttonRect.left - containerRect.left;
    const width = buttonRect.width;

    // Update pill position and size
    pillBg.style.left = `${left}px`;
    pillBg.style.width = `${width}px`;
    pillBg.style.opacity = "1";
  }

  // Global function for tab switching
  (window as any).switchAuthTab = function (tab: "login" | "register") {
    const loginTab = document.getElementById("login-tab");
    const registerTab = document.getElementById("register-tab");
    const loginForm = document.getElementById("login-form");
    const registerForm = document.getElementById("register-form");

    if (!loginTab || !registerTab || !loginForm || !registerForm) return;

    if (tab === "login") {
      // Show/hide forms
      loginForm.classList.remove("hidden");
      registerForm.classList.add("hidden");
      loginTab.classList.add("disabled");
      registerTab.classList.remove("disabled");

      // Update button text colors - active gets white text, inactive gets primary text
      loginTab.className =
        "relative z-1 flex-1 rounded-full px-3 py-5 text-sm font-medium transition-colors focus:outline-none disabled text-white";
      registerTab.className =
        "relative z-1 flex-1 rounded-full px-3 py-5 text-sm font-medium transition-colors focus:outline-none disabled";
      // Update sliding pill
      updateSlidingPill(loginTab);

      // Update URL without reload
      const url = new URL(window.location.href);
      url.searchParams.set("tab", "login");
      window.history.replaceState({}, "", url.toString());
    } else {
      // Show/hide forms
      loginForm.classList.add("hidden");
      registerForm.classList.remove("hidden");
      loginTab.classList.add("disabled");
      registerTab.classList.remove("disabled");
      // Update button text colors - active gets white text, inactive gets primary text
      registerTab.className =
        "relative z-1 flex-1 rounded-full px-3 py-5 text-sm font-medium transition-colors focus:outline-none disabled text-white";
      loginTab.className =
        "relative z-1 flex-1 rounded-full px-3 py-5 text-sm font-medium transition-colors focus:outline-none disabled";
      // Update sliding pill
      updateSlidingPill(registerTab);

      // Update URL without reload
      const url = new URL(window.location.href);
      url.searchParams.set("tab", "register");
      window.history.replaceState({}, "", url.toString());
    }

    console.log(`üîê [LOGIN] Switched to ${tab} tab`);
  };

  // Handle authentication tokens from URL hash (magic links, OAuth callbacks)
  function handleAuthTokens() {
    const hash = window.location.hash;
    if (!hash) return;

    console.log("üîê [LOGIN] Checking for auth tokens in URL hash");

    // Parse hash parameters
    const hashParams = new URLSearchParams(hash.substring(1));
    const accessToken = hashParams.get("access_token");
    const refreshToken = hashParams.get("refresh_token");
    const tokenType = hashParams.get("token_type");
    const expiresIn = hashParams.get("expires_in");
    const expiresAt = hashParams.get("expires_at");
    const type = hashParams.get("type");

    if (accessToken && refreshToken) {
      console.log("üîê [LOGIN] Found auth tokens in URL hash:", {
        hasAccessToken: !!accessToken,
        hasRefreshToken: !!refreshToken,
        tokenType,
        expiresIn,
        type,
      });

      // Send tokens to server to set session cookies
      fetch("/api/auth/callback", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          access_token: accessToken,
          refresh_token: refreshToken,
          expires_in: expiresIn,
          token_type: tokenType,
        }),
      })
        .then((response) => {
          if (response.ok) {
            console.log("‚úÖ [LOGIN] Auth tokens processed successfully");
            // Clear the hash and redirect to dashboard
            window.location.hash = "";
            window.location.href = "/dashboard";
          } else {
            console.error("‚ùå [LOGIN] Failed to process auth tokens:", response.status);
            // Show error message
            if (typeof window.showModal === "function") {
              window.showModal(
                "error",
                "Authentication Failed",
                "Failed to process authentication tokens. Please try again.",
                5000
              );
            }
          }
        })
        .catch((error) => {
          console.error("‚ùå [LOGIN] Error processing auth tokens:", error);
          if (typeof window.showModal === "function") {
            window.showModal(
              "error",
              "Authentication Error",
              "An error occurred while processing authentication. Please try again.",
              5000
            );
          }
        });
    }
  }

  // Initialize tab state on page load (in case JavaScript executes before server-side rendering is complete)
  document.addEventListener("DOMContentLoaded", function () {
    // Handle auth tokens
    handleAuthTokens();

    const urlParams = new URLSearchParams(window.location.search);
    const activeTab = urlParams.get("tab") || "login";

    if (activeTab === "register") {
      (window as any).switchAuthTab("register");
      console.log("üîê [LOGIN] Auto-switched to register tab from URL parameter");
    } else {
      // Initialize pill position and text colors for login tab
      setTimeout(() => {
        const loginTab = document.getElementById("login-tab");
        const registerTab = document.getElementById("register-tab");
        if (loginTab && registerTab) {
          // Set correct text colors for initial state
          loginTab.className =
            "relative z-10 flex-1 rounded-full px-3 py-5 text-sm font-medium transition-colors focus:outline-none text-white disabled";
          registerTab.className =
            "relative z-10 flex-1 rounded-full px-3 py-5 text-sm font-medium transition-colors focus:outline-none text-black dark:text-white disabled";
          updateSlidingPill(loginTab);
        }
      }, 100);
    }
  });
</script>
