---
import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import BoxIcon from "../components/common/BoxIcon.astro";
---

<App
  title="Reset Password - CAPCo Fire Protection"
  description="Reset your password to access your fire protection project management dashboard."
>
  <SectionContainer class="px-6 py-16">
    <div class="mx-auto max-w-md">
      <div class="mb-8 text-center">
        <div
          class="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-lg bg-blue-100 dark:bg-blue-900/30"
        >
          <BoxIcon name="lock" class="h-6 w-6 text-blue-600 dark:text-blue-400" />
        </div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Reset Your Password</h1>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-300">Enter your new password below</p>
      </div>

      <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
        <form id="reset-password-form" class="space-y-4">
          <div>
            <label
              for="new-password"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              New Password
            </label>
            <input
              type="password"
              id="new-password"
              name="password"
              required
              minlength="6"
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Enter your new password"
            />
          </div>

          <div>
            <label
              for="confirm-password"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Confirm New Password
            </label>
            <input
              type="password"
              id="confirm-password"
              name="confirm_password"
              required
              minlength="6"
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Confirm your new password"
            />
          </div>

          <button
            type="submit"
            id="reset-password-btn"
            class="w-full rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
          >
            Reset Password
          </button>
        </form>

        <div class="mt-4 text-center">
          <a
            href="/login"
            class="text-sm text-blue-600 underline hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
          >
            Back to Login
          </a>
        </div>
      </div>
    </div>
  </SectionContainer>
</App>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const resetPasswordForm = document.getElementById("reset-password-form") as HTMLFormElement;
    const newPasswordInput = document.getElementById("new-password") as HTMLInputElement;
    const confirmPasswordInput = document.getElementById("confirm-password") as HTMLInputElement;
    const resetPasswordBtn = document.getElementById("reset-password-btn") as HTMLButtonElement;

    resetPasswordForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const newPassword = newPasswordInput?.value;
      const confirmPassword = confirmPasswordInput?.value;

      // Validation
      if (!newPassword || !confirmPassword) {
        if (window.showError) {
          window.showError("Validation Error", "Please fill in all fields.", 5000);
        } else {
          console.error("ðŸ”” [Validation Error] Please fill in all fields.");
        }
        return;
      }

      if (newPassword.length < 6) {
        if (window.showError) {
          window.showError(
            "Validation Error",
            "Password must be at least 6 characters long.",
            5000
          );
        } else {
          console.error("ðŸ”” [Validation Error] Password must be at least 6 characters long.");
        }
        return;
      }

      if (newPassword !== confirmPassword) {
        if (window.showError) {
          window.showError("Validation Error", "Passwords do not match.", 5000);
        } else {
          console.error("ðŸ”” [Validation Error] Passwords do not match.");
        }
        return;
      }

      // Disable button and show loading state
      resetPasswordBtn.disabled = true;
      resetPasswordBtn.textContent = "Resetting...";

      try {
        // Get the access token from URL hash (Supabase magic link format)
        const hash = window.location.hash;
        const params = new URLSearchParams(hash.substring(1));
        const accessToken = params.get("access_token");
        const refreshToken = params.get("refresh_token");

        if (!accessToken) {
          throw new Error("No access token found in URL");
        }

        // Update password using Supabase
        const response = await fetch("/api/auth/reset-password", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            password: newPassword,
            accessToken,
            refreshToken,
          }),
        });

        const result = await response.json();

        if (response.ok) {
          if (window.showSuccess) {
            window.showSuccess(
              "Password Reset Successfully",
              "Your password has been updated. You will be redirected to the dashboard.",
              5000
            );
          } else {
            console.log(
              "ðŸ”” [Password Reset Successfully] Your password has been updated. You will be redirected to the dashboard."
            );
          }

          // Redirect to dashboard after a short delay
          setTimeout(() => {
            window.location.href = "/dashboard";
          }, 2000);
        } else {
          if (window.showError) {
            window.showError(
              "Reset Failed",
              result.error || "Failed to reset password. Please try again.",
              5000
            );
          } else {
            console.error(
              "ðŸ”” [Reset Failed]",
              result.error || "Failed to reset password. Please try again."
            );
          }
        }
      } catch (error) {
        console.error("Reset password error:", error);
        if (window.showError) {
          window.showError(
            "Error",
            "Failed to reset password. Please check your link and try again.",
            5000
          );
        } else {
          console.error(
            "ðŸ”” [Error] Failed to reset password. Please check your link and try again."
          );
        }
      } finally {
        // Re-enable button
        resetPasswordBtn.disabled = false;
        resetPasswordBtn.textContent = "Reset Password";
      }
    });
  });
</script>
