---
import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import BoxIcon from "../components/common/BoxIcon.astro";

// Check authentication
import { checkAuth } from "../lib/auth";
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Redirect if not authenticated or not admin
if (!isAuth || role !== "Admin") {
  return Astro.redirect("/login");
}
---

<App>
  <SectionContainer class="mx-6 mb-0 mt-0">
    <div class="mx-auto max-w-6xl" id="pdf-editor">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="mb-2 text-3xl font-bold text-gray-900 dark:text-white">PDF Editor</h1>
        <p class="text-gray-600 dark:text-gray-400">
          Edit, annotate, and manage PDF documents for fire protection systems
        </p>
      </div>

      <!-- PDF Editor Interface -->
      <div class="grid grid-cols-1 gap-6 lg:grid-cols-4">
        <!-- PDF List/File Browser -->
        <div class="lg:col-span-1">
          <div class="rounded-lg bg-white p-4 shadow-md dark:bg-gray-800">
            <h2 class="mb-4 flex items-center text-lg font-semibold text-gray-900 dark:text-white">
              <BoxIcon name="folder" class="mr-2" />
              PDF Files
            </h2>

            <!-- Upload Button -->
            <button
              id="upload-btn"
              class="mb-4 flex w-full items-center justify-center rounded-lg bg-blue-600 px-4 py-2 text-white transition-colors hover:bg-blue-700"
            >
              <BoxIcon name="upload" class="mr-2" />
              Upload PDF
            </button>

            <!-- File List -->
            <div id="pdf-file-list" class="space-y-2">
              <div class="py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                No PDF files loaded
              </div>
            </div>
          </div>
        </div>

        <!-- PDF Viewer and Editor -->
        <div class="lg:col-span-3">
          <div class="rounded-lg bg-white shadow-md dark:bg-gray-800">
            <!-- Editor Toolbar -->
            <div class="border-b border-gray-200 p-4 dark:border-gray-700">
              <div class="flex flex-wrap items-center gap-2">
                <!-- File Operations -->
                <div
                  class="mr-4 flex items-center gap-2 border-r border-gray-300 pr-4 dark:border-gray-600"
                >
                  <button
                    id="save-btn"
                    class="flex items-center rounded-md bg-green-600 px-3 py-2 text-white transition-colors hover:bg-green-700"
                    disabled
                  >
                    <BoxIcon name="save" class="mr-1" />
                    Save
                  </button>

                  <button
                    id="download-btn"
                    class="flex items-center rounded-md bg-blue-600 px-3 py-2 text-white transition-colors hover:bg-blue-700"
                    disabled
                  >
                    <BoxIcon name="download" class="mr-1" />
                    Download
                  </button>
                </div>

                <!-- Annotation Tools -->
                <div
                  class="mr-4 flex items-center gap-2 border-r border-gray-300 pr-4 dark:border-gray-600"
                >
                  <button
                    id="text-tool"
                    class="flex items-center rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                  >
                    <BoxIcon name="text" class="mr-1" />
                    Text
                  </button>

                  <button
                    id="highlight-tool"
                    class="flex items-center rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                  >
                    <BoxIcon name="highlight" class="mr-1" />
                    Highlight
                  </button>

                  <button
                    id="draw-tool"
                    class="flex items-center rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                  >
                    <BoxIcon name="pencil" class="mr-1" />
                    Draw
                  </button>
                </div>

                <!-- Navigation -->
                <div class="flex items-center gap-2">
                  <button
                    id="prev-page"
                    class="rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                    disabled
                  >
                    <BoxIcon name="chevron-left" />
                  </button>

                  <span
                    id="page-info"
                    class="min-w-[100px] text-center text-sm text-gray-600 dark:text-gray-400"
                  >
                    No PDF loaded
                  </span>

                  <button
                    id="next-page"
                    class="rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                    disabled
                  >
                    <BoxIcon name="chevron-right" />
                  </button>
                </div>

                <!-- Zoom Controls -->
                <div class="ml-auto flex items-center gap-2">
                  <button
                    id="zoom-out"
                    class="rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                    disabled
                  >
                    <BoxIcon name="zoom-out" />
                  </button>

                  <span
                    id="zoom-level"
                    class="min-w-[60px] text-center text-sm text-gray-600 dark:text-gray-400"
                  >
                    100%
                  </span>

                  <button
                    id="zoom-in"
                    class="rounded-md bg-gray-200 px-3 py-2 text-gray-800 transition-colors hover:bg-gray-300 dark:bg-gray-600 dark:text-white dark:hover:bg-gray-500"
                    disabled
                  >
                    <BoxIcon name="zoom-in" />
                  </button>
                </div>
              </div>
            </div>

            <!-- PDF Canvas Area -->
            <div
              id="pdf-container"
              class="relative h-[calc(100vh-300px)] overflow-auto bg-gray-100 dark:bg-gray-900"
            >
              <div id="pdf-canvas-container" class="flex h-full items-center justify-center">
                <div class="text-center text-gray-500 dark:text-gray-400">
                  <BoxIcon name="file-pdf" class="mx-auto mb-4 text-6xl" />
                  <p class="text-lg font-medium">No PDF Selected</p>
                  <p class="text-sm">Upload or select a PDF file to start editing</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Hidden file input -->
      <input type="file" id="file-input" accept=".pdf" multiple class="hidden" />
    </div>
  </SectionContainer>
</App>

<script src="/js/pdf.min.js" defer></script>
<script type="module">
  class PDFEditor {
    constructor() {
      this.pdfDoc = null;
      this.currentPage = 1;
      this.totalPages = 0;
      this.scale = 1.0;
      this.canvas = null;
      this.context = null;
      this.annotations = [];
      this.currentTool = null;

      this.init();
    }

    init() {
      this.setupElements();
      this.setupEventListeners();
      this.setupPDFJS();
    }

    setupElements() {
      this.uploadBtn = document.getElementById("upload-btn");
      this.fileInput = document.getElementById("file-input");
      this.fileList = document.getElementById("pdf-file-list");
      this.pdfContainer = document.getElementById("pdf-container");
      this.canvasContainer = document.getElementById("pdf-canvas-container");
      this.pageInfo = document.getElementById("page-info");
      this.prevBtn = document.getElementById("prev-page");
      this.nextBtn = document.getElementById("next-page");
      this.zoomInBtn = document.getElementById("zoom-in");
      this.zoomOutBtn = document.getElementById("zoom-out");
      this.zoomLevel = document.getElementById("zoom-level");
      this.saveBtn = document.getElementById("save-btn");
      this.downloadBtn = document.getElementById("download-btn");

      // Tool buttons
      this.textTool = document.getElementById("text-tool");
      this.highlightTool = document.getElementById("highlight-tool");
      this.drawTool = document.getElementById("draw-tool");
    }

    setupEventListeners() {
      // File upload
      this.uploadBtn.addEventListener("click", () => {
        this.fileInput.click();
      });

      this.fileInput.addEventListener("change", (e) => {
        this.handleFileUpload(e.target.files);
      });

      // Navigation
      this.prevBtn.addEventListener("click", () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.renderPage();
        }
      });

      this.nextBtn.addEventListener("click", () => {
        if (this.currentPage < this.totalPages) {
          this.currentPage++;
          this.renderPage();
        }
      });

      // Zoom
      this.zoomInBtn.addEventListener("click", () => {
        this.scale = Math.min(this.scale * 1.25, 3.0);
        this.updateZoomLevel();
        this.renderPage();
      });

      this.zoomOutBtn.addEventListener("click", () => {
        this.scale = Math.max(this.scale / 1.25, 0.25);
        this.updateZoomLevel();
        this.renderPage();
      });

      // Tools
      this.textTool.addEventListener("click", () => {
        this.setActiveTool("text");
      });

      this.highlightTool.addEventListener("click", () => {
        this.setActiveTool("highlight");
      });

      this.drawTool.addEventListener("click", () => {
        this.setActiveTool("draw");
      });

      // Save and download
      this.saveBtn.addEventListener("click", () => {
        this.savePDF();
      });

      this.downloadBtn.addEventListener("click", () => {
        this.downloadPDF();
      });

      // Drag and drop
      this.pdfContainer.addEventListener("dragover", (e) => {
        e.preventDefault();
        this.pdfContainer.classList.add("border-blue-400", "border-2", "border-dashed");
      });

      this.pdfContainer.addEventListener("dragleave", (e) => {
        e.preventDefault();
        this.pdfContainer.classList.remove("border-blue-400", "border-2", "border-dashed");
      });

      this.pdfContainer.addEventListener("drop", (e) => {
        e.preventDefault();
        this.pdfContainer.classList.remove("border-blue-400", "border-2", "border-dashed");
        this.handleFileUpload(e.dataTransfer.files);
      });
    }

    async setupPDFJS() {
      await this.waitForPDFJS();
      const pdfjsLib = window.pdfjsLib;
      pdfjsLib.GlobalWorkerOptions.workerSrc = "/js/pdf.worker.min.js";
    }

    waitForPDFJS() {
      return new Promise((resolve) => {
        function check() {
          if (window.pdfjsLib) {
            resolve();
          } else {
            setTimeout(check, 50);
          }
        }
        check();
      });
    }

    async handleFileUpload(files) {
      if (files.length === 0) return;

      for (const file of files) {
        if (file.type === "application/pdf") {
          await this.loadPDF(file);
          this.addFileToList(file);
        }
      }
    }

    async loadPDF(file) {
      try {
        const arrayBuffer = await file.arrayBuffer();
        const pdfjsLib = window.pdfjsLib;

        this.pdfDoc = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
        this.totalPages = this.pdfDoc.numPages;
        this.currentPage = 1;

        this.createCanvas();
        this.renderPage();
        this.enableControls();
      } catch (error) {
        console.error("Error loading PDF:", error);
        alert("Error loading PDF file");
      }
    }

    createCanvas() {
      // Clear existing canvas
      this.canvasContainer.innerHTML = "";

      // Create new canvas
      this.canvas = document.createElement("canvas");
      this.canvas.className = "border border-gray-300 dark:border-gray-600 shadow-lg";
      this.context = this.canvas.getContext("2d");

      this.canvasContainer.appendChild(this.canvas);
    }

    async renderPage() {
      if (!this.pdfDoc) return;

      try {
        const page = await this.pdfDoc.getPage(this.currentPage);
        const viewport = page.getViewport({ scale: this.scale });

        this.canvas.width = viewport.width;
        this.canvas.height = viewport.height;

        const renderContext = {
          canvasContext: this.context,
          viewport: viewport,
        };

        await page.render(renderContext).promise;

        this.updatePageInfo();
        this.updateNavigationButtons();
      } catch (error) {
        console.error("Error rendering page:", error);
      }
    }

    updatePageInfo() {
      this.pageInfo.textContent = `${this.currentPage} / ${this.totalPages}`;
    }

    updateNavigationButtons() {
      this.prevBtn.disabled = this.currentPage <= 1;
      this.nextBtn.disabled = this.currentPage >= this.totalPages;
    }

    updateZoomLevel() {
      this.zoomLevel.textContent = `${Math.round(this.scale * 100)}%`;
    }

    enableControls() {
      const buttons = [
        this.prevBtn,
        this.nextBtn,
        this.zoomInBtn,
        this.zoomOutBtn,
        this.saveBtn,
        this.downloadBtn,
        this.textTool,
        this.highlightTool,
        this.drawTool,
      ];

      buttons.forEach((btn) => {
        if (btn) btn.disabled = false;
      });
    }

    setActiveTool(tool) {
      // Remove active state from all tools
      [this.textTool, this.highlightTool, this.drawTool].forEach((btn) => {
        btn.classList.remove("bg-blue-600", "text-white");
        btn.classList.add("bg-gray-200", "dark:bg-gray-600", "text-gray-800", "dark:text-white");
      });

      // Set active tool
      this.currentTool = tool;
      const activeBtn = document.getElementById(`${tool}-tool`);
      if (activeBtn) {
        activeBtn.classList.remove(
          "bg-gray-200",
          "dark:bg-gray-600",
          "text-gray-800",
          "dark:text-white"
        );
        activeBtn.classList.add("bg-blue-600", "text-white");
      }
    }

    addFileToList(file) {
      const fileItem = document.createElement("div");
      fileItem.className =
        "p-3 bg-gray-50 dark:bg-gray-700 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors";
      fileItem.innerHTML = `
        <div class="flex items-center">
          <i class="bx bxs-file-pdf text-red-500 text-xl mr-3"></i>
          <div class="flex-1 min-w-0">
            <p class="text-sm font-medium text-gray-900 dark:text-white truncate">
              ${file.name}
            </p>
            <p class="text-xs text-gray-500 dark:text-gray-400">
              ${(file.size / 1024 / 1024).toFixed(2)} MB
            </p>
          </div>
        </div>
      `;

      fileItem.addEventListener("click", () => {
        this.loadPDF(file);
      });

      // Replace the "no files" message if it exists
      if (
        this.fileList.children.length === 1 &&
        this.fileList.children[0].textContent.includes("No PDF files")
      ) {
        this.fileList.innerHTML = "";
      }

      this.fileList.appendChild(fileItem);
    }

    savePDF() {
      // TODO: Implement save functionality with annotations
      alert("Save functionality will be implemented here");
    }

    downloadPDF() {
      // TODO: Implement download functionality
      alert("Download functionality will be implemented here");
    }
  }

  // Initialize PDF Editor when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new PDFEditor();
    });
  } else {
    new PDFEditor();
  }
</script>
