---
// Socket.io Chat Test Page
// This page allows you to test the Socket.io-based chat system

import App from "../components/common/App.astro";
import SocketChatWidget from "../components/common/SocketChatWidget.astro";
import { supabase } from "../lib/supabase";

// Get actual authenticated user
let currentUser = null;
let currentRole = "Client";

try {
  if (!supabase) {
    return new Response(JSON.stringify({ error: "Database connection not available" }), {
      status: 500,
      headers: { "Content-Type": "application/json" },
    });
  }
  const {
    data: { user },
  } = await supabase.auth.getUser();

  console.log("üîî [SOCKETIO-TEST] Auth user:", user);

  if (user) {
    // Get user profile data (should exist due to middleware)
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("name, role")
      .eq("id", user.id)
      .single();

    console.log("üîî [SOCKETIO-TEST] Profile data:", profile);
    console.log("üîî [SOCKETIO-TEST] Profile error:", profileError);

    if (profileError) {
      console.error(
        "üîî [SOCKETIO-TEST] Profile error - this should be handled by middleware:",
        profileError
      );
      // Fall back to test data if profile doesn't exist
      currentUser = {
        id: "test-user-123",
        email: "test@capcofire.com",
        companyName: "Test User",
      };
      currentRole = "Admin";
    } else {
      currentUser = {
        id: user.id,
        email: user.email || "",
        companyName: profile.name || "Unknown User",
      };

      currentRole = profile.role || "Client";
    }

    console.log("üîî [SOCKETIO-TEST] Final user data:", currentUser);
    console.log("üîî [SOCKETIO-TEST] Final role:", currentRole);
  } else {
    console.log("üîî [SOCKETIO-TEST] No authenticated user, using fallback");
    // Fallback to test data if no authenticated user
    currentUser = {
      id: "test-user-123",
      email: "test@capcofire.com",
      companyName: "Test User",
    };
    currentRole = "Admin";
  }
} catch (error) {
  console.error("‚ùå [SOCKETIO-TEST] Error getting user:", error);
  // Fallback to test data
  currentUser = {
    id: "test-user-123",
    email: "test@capcofire.com",
    companyName: "Test User",
  };
  currentRole = "Admin";
}
---

<App title="Socket.io Chat Test">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Header -->
    <div class="bg-gray-100 shadow dark:bg-gray-800">
      <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Socket.io Chat Test</h1>
            <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
              Test the real-time Socket.io chat system
            </p>
          </div>
          <div class="flex items-center space-x-4">
            <div class="text-sm text-gray-500 dark:text-gray-400">
              Role: <span class="font-medium text-primary-600 dark:text-primary-400"
                >{currentRole}</span
              >
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400">
              User: <span class="font-medium">{currentUser?.companyName}</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
      <div class="rounded-lg bg-gray-100 p-6 shadow dark:bg-gray-800">
        <div class="mb-6">
          <h2 class="mb-4 text-xl font-semibold text-gray-900 dark:text-white">
            Socket.io Chat System Test
          </h2>

          <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
            <!-- Instructions -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">How to Test</h3>
              <div class="space-y-3 text-sm text-gray-600 dark:text-gray-400">
                <div class="flex items-start space-x-2">
                  <span
                    class="flex h-5 w-5 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-medium text-blue-600 dark:bg-blue-900 dark:text-blue-400"
                    >1</span
                  >
                  <span
                    >Start the Socket.io chat server: <code
                      class="rounded bg-gray-100 px-2 py-1 text-xs dark:bg-gray-700"
                      >node socketio-chat-server.js</code
                    ></span
                  >
                </div>
                <div class="flex items-start space-x-2">
                  <span
                    class="flex h-5 w-5 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-medium text-blue-600 dark:bg-blue-900 dark:text-blue-400"
                    >2</span
                  >
                  <span>Open this page in multiple browser tabs/windows</span>
                </div>
                <div class="flex items-start space-x-2">
                  <span
                    class="flex h-5 w-5 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-medium text-blue-600 dark:bg-blue-900 dark:text-blue-400"
                    >3</span
                  >
                  <span>Look for the chat icon in the bottom-right corner</span>
                </div>
                <div class="flex items-start space-x-2">
                  <span
                    class="flex h-5 w-5 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-medium text-blue-600 dark:bg-blue-900 dark:text-blue-400"
                    >4</span
                  >
                  <span>Click the icon to open the chat widget</span>
                </div>
                <div class="flex items-start space-x-2">
                  <span
                    class="flex h-5 w-5 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 text-xs font-medium text-blue-600 dark:bg-blue-900 dark:text-blue-400"
                    >5</span
                  >
                  <span>Start chatting between different tabs</span>
                </div>
              </div>
            </div>

            <!-- Features -->
            <div class="space-y-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">Socket.io Features</h3>
              <div class="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Real-time WebSocket connections</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Instant message delivery</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Typing indicators</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Online presence tracking</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Database persistence</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Chat history loading</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>User join/leave notifications</span>
                </div>
                <div class="flex items-center space-x-2">
                  <i class="bx bx-check text-green-500"></i>
                  <span>Connection status indicators</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Server Status -->
        <div class="border-t border-gray-200 pt-6 dark:border-gray-700">
          <h3 class="mb-4 text-lg font-medium text-gray-900 dark:text-white">Server Status</h3>
          <div class="grid grid-cols-1 gap-4 md:grid-cols-3">
            <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
              <div class="flex items-center space-x-2">
                <div id="connection-status" class="h-3 w-3 rounded-full bg-red-500"></div>
                <span class="text-sm font-medium text-gray-900 dark:text-white">Connection</span>
              </div>
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400" id="connection-text">
                Disconnected
              </p>
            </div>
            <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
              <div class="flex items-center space-x-2">
                <i class="bx bx-server text-blue-500"></i>
                <span class="text-sm font-medium text-gray-900 dark:text-white">Server</span>
              </div>
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Port 3001</p>
            </div>
            <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
              <div class="flex items-center space-x-2">
                <i class="bx bx-database text-green-500"></i>
                <span class="text-sm font-medium text-gray-900 dark:text-white">Database</span>
              </div>
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Supabase</p>
            </div>
          </div>
        </div>

        <!-- Comparison -->
        <div class="mt-6 border-t border-gray-200 pt-6 dark:border-gray-700">
          <h3 class="mb-4 text-lg font-medium text-gray-900 dark:text-white">
            Socket.io vs HTTP Chat Comparison
          </h3>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th
                    class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400"
                  >
                    Feature
                  </th>
                  <th
                    class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400"
                  >
                    Socket.io
                  </th>
                  <th
                    class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-400"
                  >
                    HTTP Chat
                  </th>
                </tr>
              </thead>
              <tbody
                class="divide-y divide-gray-200 bg-gray-100 dark:divide-gray-700 dark:bg-gray-800"
              >
                <tr>
                  <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900 dark:text-white">
                    Real-time delivery
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-green-600 dark:text-green-400"
                  >
                    ‚úÖ Instant
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-yellow-600 dark:text-yellow-400"
                  >
                    ‚è±Ô∏è 5s delay
                  </td>
                </tr>
                <tr>
                  <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900 dark:text-white">
                    Typing indicators
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-green-600 dark:text-green-400"
                  >
                    ‚úÖ Real-time
                  </td>
                  <td class="whitespace-nowrap px-6 py-4 text-sm text-red-600 dark:text-red-400">
                    ‚ùå Not available
                  </td>
                </tr>
                <tr>
                  <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900 dark:text-white">
                    Connection status
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-green-600 dark:text-green-400"
                  >
                    ‚úÖ Live status
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-yellow-600 dark:text-yellow-400"
                  >
                    ‚ö†Ô∏è Polling-based
                  </td>
                </tr>
                <tr>
                  <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900 dark:text-white">
                    Server requirements
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-yellow-600 dark:text-yellow-400"
                  >
                    ‚ö†Ô∏è Separate server
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-green-600 dark:text-green-400"
                  >
                    ‚úÖ Integrated
                  </td>
                </tr>
                <tr>
                  <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-900 dark:text-white">
                    Dependencies
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-yellow-600 dark:text-yellow-400"
                  >
                    ‚ö†Ô∏è Socket.io, Express
                  </td>
                  <td
                    class="whitespace-nowrap px-6 py-4 text-sm text-green-600 dark:text-green-400"
                  >
                    ‚úÖ None
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Socket.io Chat Widget -->
  <SocketChatWidget currentUser={currentUser} />
</App>

<script>
  // Update connection status indicator
  function updateConnectionStatus(connected: boolean) {
    const statusElement = document.getElementById("connection-status");
    const textElement = document.getElementById("connection-text");

    if (statusElement && textElement) {
      if (connected) {
        statusElement.className = "w-3 h-3 bg-green-500 rounded-full";
        textElement.textContent = "Connected";
      } else {
        statusElement.className = "w-3 h-3 bg-red-500 rounded-full";
        textElement.textContent = "Disconnected";
      }
    }
  }

  // Listen for Socket.io connection events
  document.addEventListener("DOMContentLoaded", () => {
    // Check if Socket.io is available
    if (typeof (window as any).io !== "undefined") {
      console.log("üîî [SOCKETIO-TEST] Socket.io library loaded");

      // Try to connect to test server status
      const testSocket = (window as any).io("http://localhost:3001", {
        transports: ["websocket", "polling"],
        timeout: 5000,
      });

      testSocket.on("connect", () => {
        console.log("‚úÖ [SOCKETIO-TEST] Test connection successful");
        updateConnectionStatus(true);
        testSocket.disconnect();
      });

      testSocket.on("connect_error", (error: any) => {
        console.log("‚ùå [SOCKETIO-TEST] Test connection failed:", error.message);
        updateConnectionStatus(false);
      });

      // Timeout after 5 seconds
      setTimeout(() => {
        if (testSocket.connected === false) {
          updateConnectionStatus(false);
        }
      }, 5000);
    } else {
      console.log("‚ùå [SOCKETIO-TEST] Socket.io library not loaded");
      updateConnectionStatus(false);
    }
  });
</script>
