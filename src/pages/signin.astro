---
import App from "../components/App.astro";
import SectionContainer from "../components/SectionContainer.astro";
import { checkAuth } from "../lib/auth";

// Check if user is already authenticated
const { isAuth } = await checkAuth(Astro.cookies);

// Redirect if already authenticated
if (isAuth) {
  return Astro.redirect("/");
}
---

<App>
  <SectionContainer class="max-w-md mx-auto mt-16">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
      <!-- Header -->
      <div class="text-center mb-8">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">
          Sign In to CAPCo
        </h1>
        <p class="text-gray-600 dark:text-gray-400">
          Access your fire protection system account
        </p>
      </div>

      <!-- Success/Error Messages -->
      <div id="message-container" class="mb-6 hidden">
        <div
          id="success-message"
          class="hidden bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-md dark:bg-green-900/20 dark:border-green-800 dark:text-green-400"
        >
          <div class="flex items-center">
            <i class="bx bx-check-circle text-lg mr-2"></i>
            <span id="success-text"></span>
          </div>
        </div>
        <div
          id="error-message"
          class="hidden bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-md dark:bg-red-900/20 dark:border-red-800 dark:text-red-400"
        >
          <div class="flex items-center">
            <i class="bx bx-error-circle text-lg mr-2"></i>
            <span id="error-text"></span>
          </div>
        </div>
      </div>

      <!-- Sign In Form -->
      <form id="signin-form" class="space-y-6">
        <!-- Email -->
        <div>
          <label
            for="email"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
          >
            Email Address *
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400 dark:focus:ring-blue-400 dark:focus:border-blue-400"
            placeholder="Enter your email address"
          />
        </div>

        <!-- Password (hidden when magic link is selected) -->
        <div id="password-section">
          <label
            for="password"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
          >
            Password *
          </label>
          <input
            type="password"
            id="password"
            name="password"
            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400 dark:focus:ring-blue-400 dark:focus:border-blue-400"
            placeholder="Enter your password"
          />
        </div>

        <!-- Authentication Method Toggle -->
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="use-magic-link"
              name="magicLink"
              value="true"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label
              for="use-magic-link"
              class="ml-2 block text-sm text-gray-700 dark:text-gray-300"
            >
              Use magic link instead of password
            </label>
          </div>
        </div>

        <!-- Submit Button -->
        <button
          type="submit"
          id="submit-btn"
          class="w-full px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center"
        >
          <span id="submit-text">Sign In</span>
          <i id="submit-spinner" class="bx bx-loader-alt bx-spin ml-2 hidden"
          ></i>
        </button>
      </form>

      <!-- Additional Links -->
      <div class="mt-6 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Don't have an account? Contact your administrator.
        </p>
        <a
          href="/"
          class="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 mt-2 inline-block"
        >
          ‚Üê Back to Home
        </a>
      </div>
    </div>
  </SectionContainer>
</App>

<script>
  class SignInForm {
    private form: HTMLFormElement;
    private submitBtn: HTMLButtonElement;
    private submitText: HTMLElement;
    private submitSpinner: HTMLElement;
    private messageContainer: HTMLElement;
    private successMessage: HTMLElement;
    private errorMessage: HTMLElement;
    private successText: HTMLElement;
    private errorText: HTMLElement;
    private passwordSection: HTMLElement;
    private useMagicLink: HTMLInputElement;

    constructor() {
      this.form = document.getElementById("signin-form") as HTMLFormElement;
      this.submitBtn = document.getElementById(
        "submit-btn"
      ) as HTMLButtonElement;
      this.submitText = document.getElementById("submit-text") as HTMLElement;
      this.submitSpinner = document.getElementById(
        "submit-spinner"
      ) as HTMLElement;
      this.messageContainer = document.getElementById(
        "message-container"
      ) as HTMLElement;
      this.successMessage = document.getElementById(
        "success-message"
      ) as HTMLElement;
      this.errorMessage = document.getElementById(
        "error-message"
      ) as HTMLElement;
      this.successText = document.getElementById("success-text") as HTMLElement;
      this.errorText = document.getElementById("error-text") as HTMLElement;
      this.passwordSection = document.getElementById(
        "password-section"
      ) as HTMLElement;
      this.useMagicLink = document.getElementById(
        "use-magic-link"
      ) as HTMLInputElement;

      this.setupEventListeners();
    }

    setupEventListeners() {
      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
      this.useMagicLink.addEventListener("change", () =>
        this.togglePasswordSection()
      );
    }

    togglePasswordSection() {
      const passwordInput = document.getElementById(
        "password"
      ) as HTMLInputElement;
      if (this.useMagicLink.checked) {
        this.passwordSection.classList.add("hidden");
        passwordInput.removeAttribute("required");
        this.submitText.textContent = "Send Magic Link";
      } else {
        this.passwordSection.classList.remove("hidden");
        passwordInput.setAttribute("required", "required");
        this.submitText.textContent = "Sign In";
      }
    }

    async handleSubmit(e: Event) {
      e.preventDefault();

      const formData = new FormData(this.form);
      const email = formData.get("email") as string;
      const password = formData.get("password") as string;
      const magicLink = formData.get("magicLink") === "true";

      // Validate required fields
      if (!email.trim()) {
        this.showError("Please enter your email address.");
        return;
      }

      if (!magicLink && !password?.trim()) {
        this.showError("Please enter your password.");
        return;
      }

      this.setLoading(true);
      this.hideMessages();

      try {
        const response = await fetch("/api/auth/signin", {
          method: "POST",
          body: formData,
        });

        if (magicLink) {
          // Handle magic link response
          const result = await response.json();
          if (response.ok && result.success) {
            this.showSuccess(
              "Magic link sent! Check your email and click the link to sign in."
            );
            this.form.reset();
          } else {
            this.showError(
              result.message || "Failed to send magic link. Please try again."
            );
          }
        } else {
          // Handle password sign in - should redirect
          if (response.ok) {
            // Redirect to home page
            window.location.href = "/";
          } else {
            const errorText = await response.text();
            this.showError(
              errorText || "Sign in failed. Please check your credentials."
            );
          }
        }
      } catch (error) {
        console.error("Sign in error:", error);
        this.showError(
          "Network error. Please check your connection and try again."
        );
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(loading: boolean) {
      this.submitBtn.disabled = loading;
      if (loading) {
        this.submitText.textContent = this.useMagicLink.checked
          ? "Sending..."
          : "Signing In...";
        this.submitSpinner.classList.remove("hidden");
      } else {
        this.submitText.textContent = this.useMagicLink.checked
          ? "Send Magic Link"
          : "Sign In";
        this.submitSpinner.classList.add("hidden");
      }
    }

    showSuccess(message: string) {
      this.successText.textContent = message;
      this.messageContainer.classList.remove("hidden");
      this.successMessage.classList.remove("hidden");
      this.errorMessage.classList.add("hidden");
    }

    showError(message: string) {
      this.errorText.textContent = message;
      this.messageContainer.classList.remove("hidden");
      this.errorMessage.classList.remove("hidden");
      this.successMessage.classList.add("hidden");
    }

    hideMessages() {
      this.messageContainer.classList.add("hidden");
      this.successMessage.classList.add("hidden");
      this.errorMessage.classList.add("hidden");
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new SignInForm();
    });
  } else {
    new SignInForm();
  }
</script>
