---
import App from "../../../components/common/App.astro";
import { checkAuth } from "../../../lib/auth";

const { id } = Astro.params;

// Get auth data directly since App component handles auth requirements
const { currentUser = undefined, currentRole = "Client" } = await checkAuth(Astro.cookies);

console.log("üèóÔ∏è [GENERATE-PDF] Current user:", currentUser);
console.log("üèóÔ∏è [GENERATE-PDF] Current role:", currentRole);

if (!currentUser) {
  return Astro.redirect("/login");
}

// Fetch project data using existing API
const projectResponse = await fetch(`${Astro.url.origin}/api/get-project/${id}`, {
  headers: {
    Cookie: Astro.request.headers.get("cookie") || "",
  },
});

if (!projectResponse.ok) {
  return Astro.redirect("/dashboard");
}

console.log("üèóÔ∏è [GENERATE-PDF] Project response:", projectResponse);
const projectResult = await projectResponse.json();
if (!projectResult.success || !projectResult.project) {
  return Astro.redirect("/dashboard");
}
console.log("üèóÔ∏è [GENERATE-PDF] Project result:", projectResult);

const project = projectResult.project;
const projectAuthor = projectResult.projectAuthor;

// Check if user has access to this project
const isAdmin = currentUser.role === "Admin" || currentUser.role === "Staff";
const isOwner = project.author_id === currentUser.id;

// if (!isAdmin && !isOwner) {
//   return Astro.redirect("/dashboard");
// }

const projectId = id;
const projectTitle = project.title || "Untitled Project";
---

<App
  title={`Generate PDF - ${projectTitle}`}
  currentUser={currentUser}
  currentRole={currentUser.role}
  isAuth={true}
>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Generate PDF Document</h1>
            <p class="mt-2 text-gray-600 dark:text-gray-400">
              Create a custom PDF document for <strong>{projectTitle}</strong>
            </p>
          </div>
          <a
            href={`/project/${projectId}`}
            class="inline-flex items-center rounded-lg bg-gray-600 px-4 py-2 text-white transition-colors hover:bg-gray-700"
          >
            <i class="bx bx-arrow-back mr-2"></i>
            Back to Project
          </a>
        </div>
      </div>

      <!-- Main Content -->
      <div class="grid grid-cols-1 gap-8 lg:grid-cols-3">
        <!-- Left Panel - Configuration -->
        <div class="lg:col-span-1">
          <div class="rounded-lg bg-white p-6 shadow-lg dark:bg-gray-800">
            <h2 class="mb-6 text-xl font-semibold text-gray-900 dark:text-white">
              Document Configuration
            </h2>

            <!-- Document Name -->
            <div class="mb-6">
              <label
                for="documentName"
                class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Document Name
              </label>
              <input
                type="text"
                id="documentName"
                class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-transparent focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                placeholder="e.g., Fire Protection Plan"
                value="Fire Protection System Plan"
              />
            </div>

            <!-- Template Selection -->
            <div class="mb-6">
              <label
                for="templateSelect"
                class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Select Template
              </label>
              <select
                id="templateSelect"
                class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:border-transparent focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              >
                <option value="">Loading templates...</option>
              </select>
            </div>

            <!-- Component Selection -->
            <div class="mb-6">
              <label class="mb-3 block text-sm font-medium text-gray-700 dark:text-gray-300">
                Add Components
              </label>
              <div id="componentList" class="max-h-64 space-y-3 overflow-y-auto">
                <div class="text-sm text-gray-500 dark:text-gray-400">
                  Select a template to see available components
                </div>
              </div>
            </div>

            <!-- Generate Button -->
            <button
              id="generateBtn"
              class="w-full rounded-lg bg-blue-600 px-4 py-3 font-medium text-white transition-colors hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50"
              disabled
            >
              <i class="bx bx-file-blank mr-2"></i>
              Generate PDF
            </button>
          </div>
        </div>

        <!-- Right Panel - Preview -->
        <div class="lg:col-span-2">
          <div class="rounded-lg bg-white p-6 shadow-lg dark:bg-gray-800">
            <div class="mb-6 flex items-center justify-between">
              <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Document Preview</h2>
              <div class="flex space-x-2">
                <button
                  id="refreshPreview"
                  class="rounded bg-gray-100 px-3 py-1 text-gray-700 transition-colors hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                >
                  <i class="bx bx-refresh mr-1"></i>
                  Refresh
                </button>
                <button
                  id="downloadBtn"
                  class="hidden rounded bg-green-100 px-3 py-1 text-green-700 transition-colors hover:bg-green-200 dark:bg-green-900 dark:text-green-300 dark:hover:bg-green-800"
                >
                  <i class="bx bx-download mr-1"></i>
                  Download PDF
                </button>
              </div>
            </div>

            <!-- Preview Area -->
            <div class="space-y-3">
              <!-- Zoom Controls -->
              <div
                id="zoomControls"
                class="flex hidden items-center justify-between rounded-lg border border-gray-300 bg-white p-3 dark:border-gray-600 dark:bg-gray-800"
              >
                <div class="flex items-center space-x-2">
                  <button
                    id="zoomOut"
                    class="flex h-8 w-8 items-center justify-center rounded border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                    title="Zoom Out"
                  >
                    <i class="bx bx-minus text-sm"></i>
                  </button>
                  <span
                    id="zoomLevel"
                    class="min-w-12 text-center text-sm font-medium text-gray-700 dark:text-gray-300"
                    >100%</span
                  >
                  <button
                    id="zoomIn"
                    class="flex h-8 w-8 items-center justify-center rounded border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                    title="Zoom In"
                  >
                    <i class="bx bx-plus text-sm"></i>
                  </button>
                  <button
                    id="resetZoom"
                    class="ml-2 rounded border border-gray-300 bg-white px-3 py-1 text-xs text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                    title="Reset Zoom"
                  >
                    Reset
                  </button>
                </div>
                <div class="flex items-center space-x-2">
                  <button
                    id="fitToWidth"
                    class="rounded border border-gray-300 bg-white px-3 py-1 text-xs text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                    title="Fit to Width"
                  >
                    Fit Width
                  </button>
                  <button
                    id="fitToPage"
                    class="rounded border border-gray-300 bg-white px-3 py-1 text-xs text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
                    title="Fit to Page"
                  >
                    Fit Page
                  </button>
                </div>
              </div>

              <!-- Preview Container -->
              <div
                id="previewArea"
                class="min-h-96 rounded-lg border border-gray-300 bg-gray-50 dark:border-gray-600 dark:bg-gray-900"
              >
                <div class="flex h-96 items-center justify-center text-gray-500 dark:text-gray-400">
                  <div class="text-center">
                    <i class="bx bx-file-blank mb-2 text-4xl"></i>
                    <p>Select a template to see preview</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Loading Overlay -->
      <div
        id="loadingOverlay"
        class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50"
      >
        <div class="rounded-lg bg-white p-8 text-center dark:bg-gray-800">
          <div class="mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600">
          </div>
          <p class="text-gray-700 dark:text-gray-300">Generating PDF...</p>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ projectId, projectTitle }}>
    let selectedTemplate = null;
    let selectedComponents = [];
    let generatedDocument = null;

    // Load templates on page load
    document.addEventListener("DOMContentLoaded", async () => {
      await loadTemplates();
    });

    async function loadTemplates() {
      try {
        const response = await fetch("/api/pdf/templates");
        const result = await response.json();

        if (result.success) {
          const templateSelect = document.getElementById("templateSelect");
          templateSelect.innerHTML = '<option value="">Select a template...</option>';

          result.templates.forEach((template) => {
            const option = document.createElement("option");
            option.value = template.id;
            option.textContent = template.name;
            templateSelect.appendChild(option);
          });
        }
      } catch (error) {
        console.error("Error loading templates:", error);
      }
    }

    // Template selection handler
    document.getElementById("templateSelect").addEventListener("change", async (e) => {
      const templateId = e.target.value;
      console.log(`üîß [PDF-TEMPLATE] Template changed to: ${templateId}`);
      if (templateId) {
        selectedTemplate = templateId;
        await loadComponents(templateId);
        updateGenerateButton();
      } else {
        selectedTemplate = null;
        selectedComponents = [];
        document.getElementById("componentList").innerHTML =
          '<div class="text-gray-500 dark:text-gray-400 text-sm">Select a template to see available components</div>';
        updateGenerateButton();
      }
    });

    async function loadComponents(templateId) {
      try {
        console.log(`üîß [PDF-COMPONENTS] Loading components for template ${templateId}`);
        const response = await fetch(`/api/pdf/components?templateId=${templateId}`);
        const result = await response.json();

        if (result.success) {
          console.log(
            `üîß [PDF-COMPONENTS] Found ${result.components.length} components for template ${templateId}`
          );
          const componentList = document.getElementById("componentList");
          componentList.innerHTML = "";

          if (result.components.length === 0) {
            componentList.innerHTML =
              '<div class="text-gray-500 dark:text-gray-400 text-sm">No components available for this template</div>';
            return;
          }

          result.components.forEach((component) => {
            const componentDiv = document.createElement("div");
            componentDiv.className =
              "flex items-center space-x-3 p-3 border border-gray-200 dark:border-gray-600 rounded-lg";

            componentDiv.innerHTML = `
              <input 
                type="checkbox" 
                id="component-${component.id}" 
                value="${component.id}"
                class="component-checkbox rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <div class="flex-1">
                <label for="component-${component.id}" class="text-sm font-medium text-gray-900 dark:text-white cursor-pointer">
                  ${component.name}
                </label>
                <p class="text-xs text-gray-500 dark:text-gray-400">${component.component_type}</p>
                ${component.description ? `<p class="text-xs text-gray-600 dark:text-gray-300 mt-1">${component.description}</p>` : ""}
              </div>
            `;

            componentList.appendChild(componentDiv);
          });

          // Remove any existing event listeners first
          document.querySelectorAll(".component-checkbox").forEach((checkbox) => {
            checkbox.removeEventListener("change", updateSelectedComponents);
          });

          // Add event listeners to checkboxes
          document.querySelectorAll(".component-checkbox").forEach((checkbox) => {
            checkbox.addEventListener("change", updateSelectedComponents);
          });
        }
      } catch (error) {
        console.error("Error loading components:", error);
      }
    }

    function updateSelectedComponents() {
      selectedComponents = Array.from(document.querySelectorAll(".component-checkbox:checked")).map(
        (cb) => parseInt(cb.value)
      );
      updateGenerateButton();
    }

    function updateGenerateButton() {
      const generateBtn = document.getElementById("generateBtn");
      const documentName = document.getElementById("documentName").value.trim();

      generateBtn.disabled = !selectedTemplate || !documentName;
    }

    // Document name change handler
    document.getElementById("documentName").addEventListener("input", updateGenerateButton);

    // Generate PDF handler
    document.getElementById("generateBtn").addEventListener("click", async () => {
      const documentName = document.getElementById("documentName").value.trim();

      if (!selectedTemplate || !documentName) {
        alert("Please select a template and enter a document name");
        return;
      }

      const loadingOverlay = document.getElementById("loadingOverlay");
      loadingOverlay.classList.remove("hidden");
      loadingOverlay.classList.add("flex");

      try {
        const response = await fetch("/api/pdf/generate", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            projectId,
            templateId: selectedTemplate,
            documentName,
            selectedComponents,
          }),
        });

        const result = await response.json();

        if (result.success) {
          generatedDocument = result.document;

          // Show preview
          showPreview(result.document.htmlContent);

          // Show download button
          document.getElementById("downloadBtn").classList.remove("hidden");

          // Show success message
          if (window.showModal) {
            window.showModal(
              "success",
              "PDF Generated",
              "Your document has been generated successfully!",
              3000
            );
          }
        } else {
          throw new Error(result.message || "Failed to generate PDF");
        }
      } catch (error) {
        console.error("Error generating PDF:", error);
        if (window.showModal) {
          window.showModal("error", "Generation Failed", error.message, 5000);
        }
      } finally {
        loadingOverlay.classList.add("hidden");
        loadingOverlay.classList.remove("flex");
      }
    });

    let currentZoom = 100;
    let previewIframe = null;

    function showPreview(htmlContent) {
      const previewArea = document.getElementById("previewArea");
      const zoomControls = document.getElementById("zoomControls");

      // Show zoom controls
      zoomControls.classList.remove("hidden");

      previewArea.innerHTML = `
        <div id="previewContainer" class="overflow-auto border-0 rounded-lg" style="height: 600px;">
          <iframe 
            id="previewIframe"
            srcdoc="${htmlContent.replace(/"/g, "&quot;")}" 
            class="border-0"
            style="width: 100%; height: 100%; transform-origin: top left;"
          ></iframe>
        </div>
      `;

      previewIframe = document.getElementById("previewIframe");
      updateZoom();
    }

    function updateZoom() {
      if (previewIframe) {
        previewIframe.style.transform = `scale(${currentZoom / 100})`;
        previewIframe.style.width = `${100 / (currentZoom / 100)}%`;
        previewIframe.style.height = `${600 / (currentZoom / 100)}px`;
        document.getElementById("zoomLevel").textContent = `${currentZoom}%`;
      }
    }

    function zoomIn() {
      if (currentZoom < 300) {
        currentZoom += 25;
        updateZoom();
      }
    }

    function zoomOut() {
      if (currentZoom > 25) {
        currentZoom -= 25;
        updateZoom();
      }
    }

    function resetZoom() {
      currentZoom = 100;
      updateZoom();
    }

    function fitToWidth() {
      if (previewIframe) {
        const container = document.getElementById("previewContainer");
        const containerWidth = container.clientWidth;
        // Assuming document width is around 800px (A4 width)
        currentZoom = Math.round((containerWidth / 800) * 100);
        updateZoom();
      }
    }

    function fitToPage() {
      if (previewIframe) {
        const container = document.getElementById("previewContainer");
        const containerWidth = container.clientWidth;
        const containerHeight = container.clientHeight;
        // Assuming document size is 800x600
        const widthZoom = (containerWidth / 800) * 100;
        const heightZoom = (containerHeight / 600) * 100;
        currentZoom = Math.round(Math.min(widthZoom, heightZoom));
        updateZoom();
      }
    }

    // Download handler
    document.getElementById("downloadBtn").addEventListener("click", async () => {
      if (generatedDocument) {
        const downloadBtn = document.getElementById("downloadBtn");
        const originalText = downloadBtn.innerHTML;

        // Show loading state
        downloadBtn.disabled = true;
        downloadBtn.innerHTML =
          '<i class="bx bx-loader-alt animate-spin mr-1"></i>Generating PDF...';

        try {
          const response = await fetch("/api/pdf/download", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              htmlContent: generatedDocument.htmlContent,
              documentName: generatedDocument.name,
            }),
          });

          if (response.ok) {
            // Get the PDF blob
            const pdfBlob = await response.blob();

            // Create download link
            const url = URL.createObjectURL(pdfBlob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `${generatedDocument.name.replace(/[^a-zA-Z0-9]/g, "_")}.pdf`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            // Show success message
            if (window.showModal) {
              window.showModal(
                "success",
                "PDF Downloaded",
                "Your PDF has been downloaded successfully!",
                3000
              );
            }
          } else {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to generate PDF");
          }
        } catch (error) {
          console.error("Error downloading PDF:", error);
          if (window.showModal) {
            window.showModal("error", "Download Failed", error.message, 5000);
          }
        } finally {
          // Reset button state
          downloadBtn.disabled = false;
          downloadBtn.innerHTML = originalText;
        }
      }
    });

    // Refresh preview handler
    document.getElementById("refreshPreview").addEventListener("click", () => {
      if (generatedDocument) {
        showPreview(generatedDocument.htmlContent);
      }
    });

    // Zoom control event listeners
    document.getElementById("zoomIn").addEventListener("click", zoomIn);
    document.getElementById("zoomOut").addEventListener("click", zoomOut);
    document.getElementById("resetZoom").addEventListener("click", resetZoom);
    document.getElementById("fitToWidth").addEventListener("click", fitToWidth);
    document.getElementById("fitToPage").addEventListener("click", fitToPage);

    // Keyboard shortcuts for zoom
    document.addEventListener("keydown", (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case "=":
          case "+":
            e.preventDefault();
            zoomIn();
            break;
          case "-":
            e.preventDefault();
            zoomOut();
            break;
          case "0":
            e.preventDefault();
            resetZoom();
            break;
        }
      }
    });
  </script>
</App>
