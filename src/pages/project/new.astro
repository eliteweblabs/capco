---
// import { navigation } from "@/pages/api/navigation";

// interface Props {
//   requireAuthRedirect?: string;
//   title?: string;
//   description?: string;
//   currentUser?: any;
//   session?: any;
//   project?: any;
//   supabase?: any;
//   supabaseAdmin?: any;
// }

const requireAuthRedirect = undefined;
import { checkAuth } from "../../lib/auth";
import { isBackendPage } from "../api/utils/backend-page-check";

const isBackend = isBackendPage(Astro.url.pathname);

const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);
// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalCompanyData } from "../api/global/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../api/global/global-classes";
const { globalInputClasses, primaryTextClasses, secondaryTextClasses } = globalClasses();

const currentRole = currentUser?.profile.role;
const currentUserId = currentUser?.id;

import App from "../../components/common/App.astro";
import Hero from "../../components/common/Hero.astro";
import ProjectForm from "../../components/project/ProjectForm.astro";

// Fetch project statuses using the unified API
const statusApiUrl = new URL("/api/status/get", Astro.url.origin);
const statusResponse = await fetch(statusApiUrl.toString(), {
  method: "GET",
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});

const statusResponseData = await statusResponse.json();
const statusData = statusResponseData.statuses || [];

// Get auth data for conditional rendering
---

<App
  title="New Project"
  description="Create a new project"
  {currentUser}
  session={session || undefined}
  project={undefined}
  {supabase}
  {isBackend}
  {globalCompanyName}
  {globalCompanySlogan}
  {primaryTextClasses}
  {secondaryTextClasses}
  {globalInputClasses}
>
  <Hero
    title="Create a New Project"
    description=""
    {primaryTextClasses}
    {secondaryTextClasses}
    {globalInputClasses}
  />

  <ProjectForm
    {currentUser}
    isNewProject={true}
    project={undefined}
    projectStatus={0}
    {globalInputClasses}
    {secondaryTextClasses}
    {primaryTextClasses}
  />
</App>
