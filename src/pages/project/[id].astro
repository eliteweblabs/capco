---
import App from "../../components/common/App.astro";
import SectionContainer from "../../components/common/SectionContainer.astro";
import Hero from "../../components/common/Hero.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import ProjectForm from "../../components/project/ProjectForm.astro";
import PDFUpload from "../../components/project/PDFUpload.astro";
import SimpleProjectLog from "../../components/project/SimpleProjectLog.astro";
import ProposalManager from "../../components/project/ProposalManager.astro";
import PaymentForm from "../../components/project/PaymentForm.astro";
import Discussions from "../../components/project/Discussions.astro";
import { getI18N } from "@/i18n";
import { supabase } from "../../lib/supabase";
import { supabaseAdmin } from "../../lib/supabase-admin";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get the project ID from the URL parameter
const { id } = Astro.params;

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../../lib/auth";
const { isAuth, currentUser, currentRole } = await checkAuth(Astro.cookies);

// Server-side function to get author info directly from database
async function getAuthorInfoServer(userId: string) {
  if (!supabaseAdmin) {
    console.error("Supabase Admin not available");
    return null;
  }

  const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.getUserById(userId);

  if (authError || !authUser.user) {
    console.error("Error fetching auth user:", authError);
    return null;
  }

  if (!supabase) {
    console.error("Supabase not available");
    return null;
  }

  // Get user profile from profiles table
  const { data: profile, error: profileError } = await supabase
    .from("profiles")
    .select("*")
    .eq("id", userId)
    .single();

  // Combine auth user data with profile data
  const userInfo = {
    id: authUser.user.id,
    email: authUser.user.email,
    profile: profile || null,
    display_name:
      profile?.company_name ||
      authUser.user.user_metadata?.full_name ||
      authUser.user.email?.split("@")[0] ||
      "Unknown User",
    company_name: profile?.company_name || null,
    first_name: profile?.first_name || null,
    last_name: profile?.last_name || null,
    phone: profile?.phone || null,
    role: profile?.role || "Unknown",
  };

  return userInfo;
}


// Get the tab parameter from URL query string
const tabParam = Astro.url.searchParams.get("tab");
const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "deliverables",
  "final-invoice",
  "activity-log",
];
const defaultTab = validTabs.includes(tabParam || "") ? tabParam : "project-form";


// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let projectAuthorProfile = null;
let statusLabels: Record<number, { status_name: string; [key: string]: any }> = {};

if (supabase) {
  // Get project data
  const { data: projectData, error: projectError } = await supabase
    .from("projects")
    .select("*")
    .eq("id", id)
    .single();

  if (projectError) {
    console.error("Error fetching project:", projectError);
    console.log("üåê [PROJECT] Project not found or no access, redirecting to dashboard");
    return Astro.redirect("/dashboard");
  } else {
    project = projectData;

    // Get project author's profile data (not current user's profile)
    if (project.author_id) {
      try {
        projectAuthorProfile = await getAuthorInfoServer(project.author_id);
      } catch (error) {
        console.error("Error fetching project author profile:", error);
      }
    }

    // Get assigned user's profile data if project has an assigned user
    if (project.assigned_to_id) {
      const { data: assignedProfileData, error: assignedProfileError } = await supabase
        .from("profiles")
        .select("id, company_name")
        .eq("id", project.assigned_to_id)
        .maybeSingle();

      if (assignedProfileError) {
        console.error("Error fetching assigned user profile:", assignedProfileError);
        project.assigned_to_name = null;
      } else if (assignedProfileData) {
        // Add assigned user name to the project data
        project.assigned_to_name = assignedProfileData.company_name || assignedProfileData.id;
      } else {
        // Profile not found for assigned user ID
        console.log("No profile found for assigned user ID:", project.assigned_to_id);
        project.assigned_to_name = null;
      }
    } else {
      project.assigned_to_name = null;
    }
  }

  // Fetch status labels using API
  try {
    const statusesResponse = await fetch(`${Astro.url.origin}/api/get-project-statuses`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "X-User-Role": "Client", // Default role for status fetching
        Cookie: `sb-access-token=${Astro.cookies.get("sb-access-token")?.value}; sb-refresh-token=${Astro.cookies.get("sb-refresh-token")?.value}`,
      },
    });

    if (statusesResponse.ok) {
      const statusesResult = await statusesResponse.json();
      if (statusesResult.success) {
        statusLabels = statusesResult.statuses || {};
      }
    }
  } catch (error) {
    console.error("Error fetching status labels:", error);
  }
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}

// Get status color based on status code
function getStatusColor(status: number): string {
  if (status <= 50) return "blue"; // Early stages
  if (status <= 100) return "yellow"; // Invoice stages
  if (status <= 140) return "purple"; // Submittals
  if (status <= 180) return "orange"; // Final invoice
  if (status <= 220) return "green"; // Deliverables and complete
  return "gray"; // Unknown
}
---

<App title={i18n.SEO_TITLE} description={i18n.SEO_DESCRIPTION} requireAuth={true}>
  <Hero
    title={project?.address || project?.title || "Untitled Project"}
    description={`<div class="space-y-1">
      <div class="inline-flex items-center">
        <i class="bx bx-user mr-2 text-gray-500"></i>
        <span class="font-medium">${projectAuthorProfile?.company_name || "Unknown Author"}</span>
      </div>
      <div class="text-sm text-gray-600 dark:text-gray-400">
        ${projectAuthorProfile?.first_name || projectAuthorProfile?.last_name ? 
          `<br/>${projectAuthorProfile?.first_name || ""} ${projectAuthorProfile?.last_name || ""}` : ""}
        ${projectAuthorProfile?.phone ? `<br/>${projectAuthorProfile.phone}` : ""}
      </div>
    </div>`}
    statusLabel={project?.status
      ? (statusLabels[project.status]?.status_name || `Status ${project.status}`)
      : undefined}
    statusColor={project?.status ? getStatusColor(project.status) : undefined}
    projectId={project?.id}
    projectStatus={project?.status}
    currentRole={currentRole || "Client"}
    project={project}
    statuses={Object.values(statusLabels)}
    authorProfile={projectAuthorProfile}
  />
  <SectionContainer>
    <div class="flex items-center justify-between">
      <a
        href="/dashboard"
        class="inline-flex items-center rounded-lg bg-gray-500 px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-600"
      >
        <BoxIcon name="arrow-back" class="mr-2" />
        Back to Projects
      </a>
    </div>

    <!-- Tab Navigation -->
    <nav
      id="project-tab-nav"
      class="scrollbar-hide relative my-4 flex gap-1 overflow-x-auto whitespace-nowrap dark:border-gray-700"
      aria-label="Tabs"
    >
      <button
        id="tab-project-form"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('project-form')"
      >
        <BoxIcon name="edit" class="mr-2 inline h-4 w-4" />
        Project Form
      </button>
      <button
        id="tab-discussion"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('discussion')"
        data-count="0"
      >
        <BoxIcon name="message-rounded-dots" class="mr-2 inline h-4 w-4" />
        Discussion
        <span class="incomplete-comments-count absolute -right-2 -top-2 flex h-5 w-5 items-center justify-center rounded-full border border-blue-500 bg-white text-xs font-medium text-blue-500 hidden">
          0
        </span>
      </button>
      <!-- {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <button
            id="tab-comments"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('comments')"
          >
            <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
            Comments
          </button>
        ) : (
          ""
        )
      } -->
      <button
        id="tab-documents"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('documents')"
      >
        <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
        Documents
      </button>
      <button
        id="tab-proposal"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('proposal')"
      >
        <BoxIcon name="grid" class="mr-2 inline h-4 w-4" />
        Proposal
      </button>
      <button
        id="tab-deliverables"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deliverables')"
      >
        <BoxIcon name="package" class="mr-2 inline h-4 w-4" />
        Deliverables
      </button>
      <button
        id="tab-final-invoice"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('final-invoice')"
      >
        <BoxIcon name="receipt" class="mr-2 inline h-4 w-4" />
        Final Invoice
      </button>
      {currentRole === "Admin" || currentRole === "Staff" ? (

      <button
        id="tab-activity-log"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('activity-log')"
      >
        <BoxIcon name="history" class="mr-2 inline h-4 w-4" />
        Activity Log
      </button>
      ) : (
        ""
      )}
    </nav>

    <!-- Tab Content -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-1">
      <!-- Project Form Tab -->
      <div
        id="content-project-form"
        class="tab-content rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <ProjectForm
          project={project}
          projectId={id ?? ""}
          isNewProject={false}
          currentRole={currentRole}
          projectStatus={project?.status}
        />
      </div>

      <!-- Discussion Tab -->
      <div
        id="content-discussion"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <Discussions 
          projectId={id ?? ""} 
          currentRole={currentRole || "Client"} 
          userId={currentUser?.id || ""} 
          userName={currentUser?.company_name || currentUser?.email || "Unknown User"} 
        />
      </div>

      <!-- Documents Tab -->
      <div id="content-documents" class="tab-content hidden">
        <PDFUpload
          projectId={id ?? ""}
          fileType="media"
          currentRole={currentRole || undefined}
          projectStatus={project?.status}
        />
      </div>

      <!-- Proposal Tab -->
      <div id="content-proposal" class="tab-content hidden">
        <ProposalManager 
          projectId={id ?? ""} 
          project={project} 
          authorProfile={projectAuthorProfile} 
          currentRole={currentRole || undefined}
          projectStatus={project?.status}
        />
      </div>

      <!-- Deliverables Tab -->
      <div
        id="content-deliverables"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="package" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Deliverables</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Final project deliverables will be displayed here.
          </p>
        </div>
      </div>

      <!-- Final Invoice Tab -->
      <div
        id="content-final-invoice"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="mb-6">
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Final Invoice - Balance Due</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Pay the remaining balance for your project.
          </p>
        </div>
        
        <!-- Payment Form for Final Invoice (Balance) -->
        <PaymentForm 
          invoiceId={parseInt(id ?? "0")} 
          amount={2000}
          currency="usd"
          paymentType="balance"
          clientProfile={projectAuthorProfile}
        />
      </div>

      {currentRole === "Admin" || currentRole === "Staff" ? (
      <!-- Activity Log Tab -->
      <div id="content-activity-log" class="tab-content hidden">
        <SimpleProjectLog projectId={parseInt(id ?? "0")} />
      </div>
      ) : (
        ""
      )}
    </div>
  </SectionContainer>
</App>

<script define:vars={{ userRole: currentRole }}>
window.PROJECT_USER_ROLE = userRole;</script>

<script>
  // Tab switching functionality
  function switchTab(tabName: string) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.classList.remove("active", "bg-red-500", "text-white", "border-red-500");
      button.classList.add(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${tabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Add active class to selected tab button
    const selectedButton = document.getElementById(`tab-${tabName}`);
    if (selectedButton) {
      selectedButton.classList.remove(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
      selectedButton.classList.add("active", "bg-red-500", "text-white", "border-red-500");

      // Center the active button in the navigation
      selectedButton.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
        inline: "center",
      });
    }

    // Update URL with tab parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (tabName === "project-form") {
      // Remove tab parameter for default tab
      currentUrl.searchParams.delete("tab");
    } else {
      // Add or update tab parameter
      currentUrl.searchParams.set("tab", tabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Get tab from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "deliverables",
      "final-invoice",
      "activity-log",
    ];
    const initialTab = validTabs.includes(tabFromUrl || "") ? tabFromUrl! : "project-form";

    // Switch to the initial tab
    switchTab(initialTab);
  });

  // Make switchTab globally available for other components
  (window as any).switchTab = switchTab;
</script>