---
// import { isBackendPage } from "../../pages/api/backend-page-check";
// import { navigation } from "@/pages/api/navigation";

// interface Props {
//   requireAuthRedirect?: string;
//   title?: string;
//   description?: string;
//   currentUser?: any;
//   session?: any;
//   project?: any;
//   supabase?: any;
//   supabaseAdmin?: any;
// }

// const {
//   requireAuthRedirect = "",
//   currentUser = undefined,
//   title = undefined,
//   description = undefined,
//   session = undefined,
//   project = undefined,
//   supabase = undefined,
//   supabaseAdmin = undefined,
// } = Astro.props;

const requireAuthRedirect = "/login";
import { checkAuth } from "../../lib/auth";
const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);
// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

import { isBackendPage } from "../../pages/api/backend-page-check";

// Debug: Let's see what's actually in currentUser
// // console.log("🔍 [PROJECT PAGE] currentUser object:", {
  hasCurrentUser: !!currentUser,
  currentUserId: currentUser?.id,
  hasProfile: !!currentUser?.profile,
  profileKeys: currentUser?.profile ? Object.keys(currentUser.profile) : "no profile",
  role: currentUser?.profile?.role,
  fullProfile: currentUser?.profile,
});

const currentRole = currentUser?.profile?.role;
const currentUserId = currentUser?.id;
const { id } = Astro.params;

import App from "../../components/common/App.astro";
import Footer from "../../components/common/Footer.astro";
import HeroProject from "../../components/common/HeroProject.astro";
import SlidingPillNav from "../../components/common/SlidingPillNav.astro";
import TabDocuments from "../../components/project/TabDocuments.astro";
import TabDiscussions from "../../components/project/TabDiscussions.astro";
import TabProjectForm from "../../components/project/TabProjectForm.astro";
import TabProposal from "../../components/project/TabProposal.astro";
import TabContract from "../../components/project/TabContract.astro";
import TabDeposit from "../../components/project/TabDeposit.astro";
import TabFinalInvoice from "../../components/project/TabFinalInvoice.astro";
import TabActivityLog from "../../components/project/TabActivityLog.astro";
import TabGeneratePdf from "../../components/project/TabGeneratePdf.astro";
import "../../lib/refresh-manager.ts";

// Get the project ID from the URL parameter

// // console.log("🚀 [PROJECT] Front matter starting execution for project ID:", id);

// // console.log("🚀 [PROJECT] Current user:", currentUser);
// Removed getAuthorInfoServer function - using direct database queries for better performance

// Get the status parameter from URL query string
const statusParam = Astro.url.searchParams.get("status");
const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "activity-log",
  "generate-pdf",
];
const defaultTab = validTabs.includes(statusParam || "") ? statusParam : "project-form";

// Calculate active tab index for SlidingPillNav
const tabOrder = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "activity-log",
  "generate-pdf",
];
const activeTabIndex =
  tabOrder.indexOf(defaultTab || "project-form") >= 0
    ? tabOrder.indexOf(defaultTab || "project-form")
    : 0;

// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let authorProfile = null;
// let invoiceData = null;
let totalAmount = 0;
let invoiceId = "0";
let statusesResult: any = null;
let statuses: any[] = [];

// Status-related variables (will be defined after data fetching)
let projectId = "";
let currentStatusObj: any = {};
let currentStatusTab: string | null = null;
let currentStatusSlug: string | null = null;
let currentStatusName: string | null = null;
let currentStatusInt = 0;
let currentStatusColor = "gray";
let currentStatusProjectAction: string | null = null;
let statusesObject: any = {};

// // console.log("🚀 [PROJECT] About to start database queries, supabase available:", !!supabase);
// // console.log("🚀 [PROJECT] Supabase object:", supabase);
// // console.log("🚀 [PROJECT] SupabaseAdmin object:", supabaseAdmin);

// Initialize invoiceResult with default value
let invoiceResult = { data: null, error: null };

if (supabase) {
  // // console.log("🔍 [PROJECT-DEBUG] Looking for project with ID:", id, "Type:", typeof id);

  // OPTIMIZED: Run all database queries in parallel for much faster loading
  const [projectResult, invoiceResultData, statusesResultData] = await Promise.all([
    // 1. Get project data
    supabase.from("projects").select("*").eq("id", id).single(),

    // 2. Get invoice data (parallel with project query)
    supabase
      .from("invoices")
      .select("id, catalog_line_items, status, project_id")
      .eq("project_id", id)
      .single(),

    // 3. Get status labels (parallel with other queries)
    supabase.from("project_statuses").select("*").order("status_code"),
  ]);

  const invoiceResult = invoiceResultData || { data: null, error: null };
  // Assign the statuses result (legacy - will be replaced)
  statusesResult = statusesResultData;

  // // console.log("🔍 [PROJECT-DEBUG] Project query result:", projectResult);
  // // console.log("🔍 [PROJECT-DEBUG] Project data:", projectResult.data);
  // // console.log("🔍 [PROJECT-DEBUG] Project error:", projectResult.error);

  project = projectResult.data;
  // // console.log("🔍 [PROJECT] Project data:", project.featured_image_data);
  projectId = project?.id?.toString() || id || "";

  // Fetch project statuses using the unified API
  const statusApiUrl = new URL("/api/project-statuses", Astro.url.origin);
  statusApiUrl.searchParams.set("projectId", projectId);
  statusApiUrl.searchParams.set("projectAddress", project?.address || "");
  statusApiUrl.searchParams.set(
    "clientName",
    (authorProfile as any)?.company_name ||
      (authorProfile as any)?.first_name + " " + (authorProfile as any)?.last_name ||
      "Client"
  );
  statusApiUrl.searchParams.set("clientEmail", (authorProfile as any)?.email || "");

  const statusResponse = await fetch(statusApiUrl.toString(), {
    method: "GET",
    headers: {
      Cookie: Astro.request.headers.get("Cookie") || "",
    },
  });

  let statusData: any = { success: false, roleBasedStatuses: {}, statusesMap: {} };
  if (statusResponse.ok) {
    statusData = await statusResponse.json();
    // // console.log("✅ [PROJECT] Unified status API response received:", statusData);
  } else {
    console.error(
      "❌ [PROJECT] Status API failed:",
      statusResponse.status,
      statusResponse.statusText
    );
  }

  // // console.log("🔍 [PROJECT] Status data:", statusData);
  // Use unified API data if available
  if (statusData.success) {
    statusesObject = statusData.roleBasedStatuses;
    // // console.log(
      "🔍 [PROJECT-SERVER] Looking for status code:",
      project.status,
      "type:",
      typeof project.status
    );
    // // console.log("🔍 [PROJECT-SERVER] Available status codes:", Object.keys(statusesObject));
    // // console.log(
      "🔍 [PROJECT-SERVER] Available status codes types:",
      Object.keys(statusesObject).map((k) => `${k} (${typeof k})`)
    );
    // // console.log(
      "🔍 [PROJECT-SERVER] Status object for project.status:",
      statusesObject[project.status]
    );
    // // console.log(
      "🔍 [PROJECT-SERVER] Status object for project.status (string):",
      statusesObject[project.status.toString()]
    );
    // // console.log(
      "🔍 [PROJECT-SERVER] Status object for project.status (number):",
      statusesObject[Number(project.status)]
    );
    currentStatusObj = statusesObject[project.status] || {};
  }
  currentStatusTab = currentStatusObj.status_tab || null;
  currentStatusSlug = currentStatusObj.status_slug || null;
  currentStatusName = currentStatusObj.status_name || null;
  currentStatusInt = project.status || 0;
  currentStatusColor = currentStatusObj.status_color || "gray";
  currentStatusProjectAction = currentStatusObj.status_action || null;

  // Define variables for component props

  // Convert statusesObject back to array for components that expect it
  statuses = Object.values(statusesObject);

  // // console.log("🔍 [PROJECT] Current statusesObject:", statusesObject);
  // // console.log("🔍 [PROJECT] Current statuses:", statuses);

  // // console.log("🔍 [PROJECT] Current status object:", currentStatusObj);
  // // console.log("🔍 [PROJECT] Current status tab:", currentStatusTab);
  // // console.log("🔍 [PROJECT] Current status slug:", currentStatusSlug);
  // // console.log("🔍 [PROJECT] Current status name:", currentStatusName);
  // // console.log("🔍 [PROJECT] Current status int:", currentStatusInt);
  // // console.log("🔍 [PROJECT] Current status color:", currentStatusColor);
  // // console.log("🔍 [PROJECT] Current status project action:", currentStatusProjectAction);
  // Check project query result
  if (projectResult.error) {
    console.error("Error fetching project:", projectResult.error);
    // // console.log("🌐 [PROJECT] Project not found or no access, redirecting to dashboard");
    return Astro.redirect("/dashboard");
  }

  // // console.log("🔍 [PROJECT] Project data loaded:", {
  //   id: project.id,
  //   title: project.title,
  //   author_id: project.author_id,
  //   assigned_to_id: project.assigned_to_id,
  //   hasAuthorId: !!project.author_id,
  // });

  // OPTIMIZED: Get author and assigned user profiles in parallel (only if needed)
  // // console.log("🔍 [PROJECT] Setting up profile queries:", {
  //   hasAuthorId: !!project.author_id,
  //   authorId: project.author_id,
  //   hasAssignedId: !!project.assigned_to_id,
  //   assignedId: project.assigned_to_id,
  // });

  if (project.author_id || project.assigned_to_id) {
    const profileQueries = [];

    if (project.author_id) {
      // // console.log("🔍 [PROJECT] Adding author profile query for:", project.author_id);
      profileQueries.push(
        supabase
          .from("profiles")
          .select("id, company_name, role, email")
          .eq("id", project.author_id)
          .maybeSingle()
      );
    }

    // if (project.assigned_to_id) {
    //   profileQueries.push(
    //     supabase
    //       .from("profiles")
    //       .select("id, company_name, role, email")
    //       .eq("id", project.assigned_to_id)
    //       .maybeSingle()
    //   );
    // }

    const profileResults = await Promise.all(profileQueries);

    // Process author profile
    // // console.log("🔍 [PROJECT] Processing author profile:", {
    //   hasAuthorId: !!project.author_id,
    //   authorId: project.author_id,
    //   profileResultsLength: profileResults.length,
    //   profileResults: profileResults,
    // });

    if (project.author_id && profileResults[0]) {
      const profileData = profileResults[0].data;
      const profileError = profileResults[0].error;

      // // console.log("🔍 [PROJECT] Profile data:", {
      //   profileData,
      //   profileError,
      //   hasData: !!profileData,
      //   hasError: !!profileError,
      //   currentRole,
      // });

      if (profileData && !profileError) {
        authorProfile = {
          id: profileData.id,
          role: profileData.role || "Unknown",
          company_name: profileData.company_name,
          email: profileData.email || "",
          profile: profileData,
        };
      } else {
        authorProfile = {
          id: project.author_id,
          role: "Unknown",
          company_name: project.company_name || null,
          email: "",
          profile: null,
        };
      }
    }

    // Process assigned user profile
    if (project.assigned_to_id) {
      const assignedIndex = project.author_id ? 1 : 0;
      const assignedResult = profileResults[assignedIndex];

      if (assignedResult?.data) {
        project.assigned_to_name = assignedResult.data.company_name || assignedResult.data.id;
      } else {
        project.assigned_to_name = null;
      }
    }
  }
} else {
  console.error("🚀 [PROJECT] Supabase not available - cannot fetch data");
  console.error("🚀 [PROJECT] This will cause the page to fail");
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}
---

<App
  title={`${project?.address || project?.title || "Untitled Project"} - CAPCo Fire Protection`}
  description={`${project?.address || project?.title || "Untitled Project"} - CAPCo Fire Protection`}
  currentUser={currentUser}
  project={project}
  session={session}
  supabase={supabase}
  supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
  noNavigation={false}
  isBackend={true}
  id={id}
>
  <div
    id="main-content"
    class="ahOqFrhzLjivRe8a1kX_ uLPch_bqyJDXwe5tynMV t6gkcSf0Bt4MLItXvDJ_ pdl952ted2i71qBLPIcQ jtAJHOc7mn7b4IKRO59D h8KYXnua2NT4kTVzieom MKeLnCkZhCbipNorZ2hW"
  >
    <main>
      <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU">
        <div
          class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi LSIxp7RSuOKhsg28v_u3"
        >
          <HeroProject
            title={project?.address || project?.title || "Untitled Project"}
            description={project?.company_name || "Unknown Author"}
            statusColor={currentStatusColor}
            projectId={id}
            currentStatusInt={currentStatusInt.toString()}
            currentStatusName={currentStatusName || undefined}
            currentRole={currentRole || "Client"}
            project={project}
            statuses={statusesObject}
            authorProfile={authorProfile}
            currentStatusTab={currentStatusTab || undefined}
          />

          <!-- Tab Navigation -->
          <SlidingPillNav
            navId="project-tab-nav"
            navClass="my-4 dark:border-gray-700"
            activeItem={activeTabIndex}
            items={[
              {
                id: "status-project-form",
                label: "Project Form",
                icon: "edit",
                variant: "anchor",
                onclick: "switchTab('project-form')",
              },
              {
                id: "status-discussion",
                label: "Discussion",
                icon: "message-rounded-dots",
                variant: "anchor",
                dataAttributes: { "data-count": "0" },
                onclick: "switchTab('discussion')",
              },
              {
                id: "status-documents",
                label: "Documents",
                icon: "file",
                variant: "anchor",
                onclick: "switchTab('documents')",
              },
              {
                id: "status-proposal",
                label: "Proposal",
                icon: "grid",
                variant: "anchor",
                onclick: "switchTab('proposal')",
              },
              {
                id: "status-contract",
                label: "Contract",
                icon: "pencil",
                variant: "anchor",
                onclick: "switchTab('contract')",
              },
              {
                id: "status-deposit",
                label: "Deposit",
                icon: "credit-card",
                variant: "anchor",
                onclick: "switchTab('deposit')",
              },
              {
                id: "status-activity-log",
                label: "Activity Log",
                icon: "history",
                variant: "anchor",
                onclick: "switchTab('activity-log')",
              },
              {
                id: "status-generate-pdf",
                label: "Generate PDF",
                icon: "history",
                variant: "anchor",
                onclick: "switchTab('generate-pdf')",
              },
            ]}
          />

          <!-- Tab Content -->
          <!-- <div class="grid grid-cols-1 gap-6 lg:grid-cols-1"> -->
          <!-- Project Form Tab -->
          <TabProjectForm
            project={project}
            currentUser={currentUser}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
          />

          <!-- Discussion Tab -->

          <TabDiscussions
            project={project}
            currentRole={currentRole || undefined}
            currentUser={currentUser}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
          />

          <!-- Documents Tab -->
          <TabDocuments
            project={project}
            currentUser={currentUser}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            fileType="media"
          />

          <!-- Proposal Tab -->
          <TabProposal
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            currentUser={currentUser}
            invoiceResult={invoiceResult || { data: null, error: null }}
          />

          <!-- Contract Tab -->
          <TabContract
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
          />

          <!-- Deposit Tab -->
          <TabDeposit
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            invoiceId={invoiceId || "0"}
            totalAmount={totalAmount}
          />

          <!-- Final Invoice Tab -->
          <TabFinalInvoice
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            invoiceId={invoiceId || "0"}
            totalAmount={totalAmount}
          />

          <TabActivityLog currentRole={currentRole || undefined} projectId={projectId} />

          <TabGeneratePdf projectId={projectId} currentRole={currentRole || undefined} />
          <!-- </div> -->
        </div>
      </div>
    </main>
    <Footer />
  </div>
</App>

<script
  type="module"
  define:vars={{
    userRole: currentRole,
    projectData: project,
    currentUserData: authorProfile,
    currentStatusInt: currentStatusInt.toString(),
    currentStatusName: currentStatusName,
    currentStatusProjectAction: currentStatusProjectAction,
  }}
>
  // Tab switching functionality
  function setPageLoadProjectStatus(tabName) {
    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [baseTabName, ...paramParts] = tabName.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // // Hide all tab contents
    // const tabContents = document.querySelectorAll(".tab-content");
    // tabContents.forEach((content) => {
    //   content.classList.add("hidden");
    // });

    // // Remove active class from all tab buttons
    // const tabButtons = document.querySelectorAll(".tab-button");
    // tabButtons.forEach((button) => {
    //   button.classList.remove("active");
    //   // button.classList.add(
    //   //   "text-gray-500",
    //   //   "hover:text-gray-700",
    //   //   "dark:text-gray-400",
    //   //   "dark:hover:text-gray-300"
    //   // );
    // });

    // // Show selected tab content
    // const selectedContent = document.getElementById(`content-${baseTabName}`);
    // if (selectedContent) {
    //   selectedContent.classList.remove("hidden");
    // }

    // Add active class to selected tab button
    // const selectedButton = document.getElementById(`status-${baseTabName}`);
    // if (selectedButton) {
    //   selectedButton.classList.remove(
    //     "text-gray-500",
    //     "hover:text-gray-700",
    //     "dark:text-gray-400",
    //     "dark:hover:text-gray-300"
    //   );
    //   selectedButton.classList.add("active");

    // Update sliding pill nav if it exists
    //   if (window.project_tab_nav_updateActiveButton && window.project_tab_nav_updateSlidingPill) {
    //     window.project_tab_nav_updateActiveButton(selectedButton);
    //     window.project_tab_nav_updateSlidingPill(selectedButton);
    //   } else {
    //     // Fallback: try again after a short delay if functions aren't available yet
    //     setTimeout(() => {
    //       if (
    //         window.project_tab_nav_updateActiveButton &&
    //         window.project_tab_nav_updateSlidingPill
    //       ) {
    //         window.project_tab_nav_updateActiveButton(selectedButton);
    //         window.project_tab_nav_updateSlidingPill(selectedButton);
    //       }
    //     }, 100);
    //   }

    //   // Center the active button in the navigation
    //   selectedButton.scrollIntoView({
    //     behavior: "smooth",
    //     block: "nearest",
    //     inline: "center",
    //   });
    // }

    // Handle tab-specific actions based on parameters
    if (baseTabName === "discussion" && params.get("new") === "true") {
      // Auto-trigger new comment form after a short delay to ensure tab is visible
      setTimeout(() => {
        if (window.toggleCommentForm) {
          window.toggleCommentForm();
        }
      }, 100);
    }

    // Check if client is viewing proposal tab and update status if needed
    // // console.log("📋 [PROPOSAL-VIEW] Tab switched to:", tabName);
    // // console.log("📋 [PROPOSAL-VIEW] User role:", userRole);

    const currentStatus = projectData?.status || 0;
    const currentUserId = currentUserData?.id;
    const projectId = projectData?.id;
    const hasExistingProposal = projectData?.invoice_id && projectData.invoice_id !== "0";
    let nextStatus = 0;
    // Viewed Update Tabs

    // // console.log("📋 [PROPOSAL-VIEW] Client viewing proposal tab, current status:", currentStatus);
    // // console.log("📋 [PROPOSAL-VIEW] Project data:", { projectId, currentUserId });

    if (
      baseTabName === "proposal" &&
      userRole === "Client" &&
      currentStatus >= 20 &&
      currentStatus < 40 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // // console.log(
      //   "📋 [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 40 (Proposal Viewed)"
      // );
      nextStatus = 40;
    } else if (
      baseTabName === "deposit" &&
      userRole === "Client" &&
      currentStatus >= 55 &&
      currentStatus < 65 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // // console.log(
      //   "📋 [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 65 (Deposit Viewed)"
      // );
      nextStatus = 65;
    } else if (
      baseTabName === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 150 &&
      currentStatus < 160 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // // console.log(
      //   "📋 [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 160 (Final Invoice Viewed)"
      // );
      nextStatus = 160;
    } else if (
      baseTabName === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 200 &&
      currentStatus < 210 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // // console.log(
      //   "📋 [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 220 (Final Deliverables Viewed)"
      // );
      nextStatus = 210;
    }

    // Update status to 40 (Proposal Viewed) if status is between 30-40

    if (nextStatus !== 0) {
      // Call update-status API
      fetch("/api/update-status", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          projectId: projectId,
          status: nextStatus,
          currentUserId: currentUserId,
          oldStatus: currentStatus,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // // console.log("✅ [PROPOSAL-VIEW] Status updated to 40 successfully");
            // Update the project data for future checks
            projectData.status = nextStatus;

            // Update UI elements using RefreshManager
            if (window.refreshManager) {
              window.refreshManager.updateField("status", nextStatus);
              window.refreshManager.updateField("status_name", "Status Updated");
            }

            // Show notification using new modal system
            window.handleUpdateStatusNotification(data, "PROPOSAL-VIEW");
          } else {
            console.error("❌ [PROPOSAL-VIEW] Failed to update status:", data.error);
          }
        })
        .catch((error) => {
          console.error("❌ [PROPOSAL-VIEW] Error updating status:", error);
        });
    } else {
      // // console.log("📋 [PROPOSAL-VIEW] No status update needed, current status:", currentStatus);
    }

    // Update URL with tab parameter (without page reload)
    // const currentUrl = new URL(window.location.href);
    // if (baseTabName === "project-form") {
    //   // Remove status parameter for default tab
    //   currentUrl.searchParams.delete("status");
    // } else {
    //   // Add or update status parameter with any additional parameters
    //   currentUrl.searchParams.set("status", tabName);
    // }

    // // Update browser history without reloading the page
    // window.history.replaceState({}, "", currentUrl.toString());
  }

  // Check for project action modal on page load
  function checkProjectActionModal() {
    // // console.log("🔍 [PROJECT] Checking for project action:", currentStatusProjectAction);

    if (currentStatusProjectAction && currentStatusProjectAction.trim() !== "") {
      // // console.log("🚀 [PROJECT] Found project action, showing modal:", currentStatusProjectAction);

      // Show modal with project action content
      if (typeof window.showModal === "function") {
        window.showModal(
          "info",
          "Project Status Update",
          currentStatusProjectAction,
          0 // No auto-hide
        );
      } else {
        // Fallback alert if modal function not available
        alert(`Project Status Update:\n\n${currentStatusProjectAction}`);
      }
    } else {
      // // console.log("🔍 [PROJECT] No project action to display");
    }
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Check for project action modal first
    checkProjectActionModal();

    // Get status from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const statusFromUrl = urlParams.get("status");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "final-invoice",
      "activity-log",
    ];

    // Parse status name and parameters
    let initialTab = "project-form";
    if (statusFromUrl) {
      const [baseTabName] = statusFromUrl.split("&");
      if (validTabs.includes(baseTabName)) {
        initialTab = statusFromUrl; // Keep full parameter string for processing
      }
    }

    // Switch to the initial tab
    setPageLoadProjectStatus(initialTab);
  });

  // Make switchTab globally available for other components
  window.setPageLoadProjectStatus = setPageLoadProjectStatus;
</script>

<script define:vars={{ currentRole }}>
  // Function to clean up backdrop
  function cleanupDrawerBackdrop() {
    const backdrops = document.querySelectorAll("[drawer-backdrop]");
    backdrops.forEach((backdrop) => {
      backdrop.remove();
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Check if we should open the drawer (you can add conditions here)
    const shouldOpenDrawer = true; // Add your condition here

    if (shouldOpenDrawer) {
      // Use Flowbite's proper Drawer API with right-side placement
      const drawerElement = document.getElementById("drawer-user-center");
      if (drawerElement && window.Drawer) {
        // Define options for right-side drawer
        const options = {
          placement: "right", // Positions the drawer on the right side
          backdrop: true, // Enables the backdrop
          bodyScrolling: false, // Disables body scrolling when the drawer is active
          edge: false, // Disables the edge functionality
          edgeOffset: "", // No offset for the edge
          backdropClasses: "bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30", // Custom backdrop classes
          onHide: () => {
            // // console.log("Drawer is hidden");

            // Remove the manually created backdrop when drawer closes
            const backdrop = document.querySelector("[drawer-backdrop]");
            if (backdrop) {
              backdrop.remove();
            }
          },
          onShow: () => {
            // // console.log("Drawer is shown");
          },
          onToggle: () => {
            // // console.log("Drawer has been toggled");
          },
        };

        // Initialize the drawer using Flowbite's API with options
        const drawer = new window.Drawer(drawerElement, options);

        // Add event listeners for drawer close buttons
        const closeButtons = document.querySelectorAll('[data-drawer-hide="drawer-user-center"]');
        closeButtons.forEach((button) => {
          button.addEventListener("click", cleanupDrawerBackdrop);
        });

        // Open the drawer using Flowbite's method
        if (currentRole !== "Client") {
          // Create backdrop element before showing drawer
          let backdrop = document.querySelector("[drawer-backdrop]");
          if (!backdrop) {
            backdrop = document.createElement("div");
            backdrop.setAttribute("drawer-backdrop", "");
            backdrop.className = "bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30";
            document.body.appendChild(backdrop);
            // // console.log("🔍 [DRAWER] Backdrop created:", backdrop);
          } else {
            // // console.log("🔍 [DRAWER] Backdrop already exists:", backdrop);
          }

          // Add event listener to backdrop for cleanup
          if (backdrop) {
            backdrop.addEventListener("click", () => {
              // Backdrop click will be handled by Flowbite, but we can also clean up
              setTimeout(cleanupDrawerBackdrop, 100);
            });
          }

          // Show the drawer after backdrop is created with a small delay
          setTimeout(() => {
            drawer.show();
          }, 10);
        }
      } else if (drawerElement) {
        // Fallback if Flowbite API is not available
        console.warn("Flowbite Drawer API not available, using manual approach");
        drawerElement.classList.remove("translate-x-full");
        drawerElement.classList.add("translate-x-0");
        drawerElement.setAttribute("aria-hidden", "false");
      }
    }
  });
</script>
