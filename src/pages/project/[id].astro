---
import App from "../../components/common/App.astro";
import SectionContainer from "../../components/common/SectionContainer.astro";
import Hero from "../../components/common/Hero.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import TabDocuments from "../../components/project/TabDocuments.astro";
import Discussions from "../../components/project/Discussions.astro";
import TabProjectForm from "../../components/project/TabProjectForm.astro";
import TabProposal from "../../components/project/TabProposal.astro";
import TabContract from "../../components/project/TabContract.astro";
import TabDeposit from "../../components/project/TabDeposit.astro";
import TabFinalInvoice from "../../components/project/TabFinalInvoice.astro";
import TabActivityLog from "../../components/project/TabActivityLog.astro";
import TabDeliverables from "../../components/project/TabDeliverables.astro";
import { getI18N } from "@/i18n";
import { supabase } from "../../lib/supabase";
// import { supabaseAdmin } from "../../lib/supabase-admin";
import "../../lib/refresh-manager.ts";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get the project ID from the URL parameter
const { id } = Astro.params;

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../../lib/auth";
const {
  isAuth = false,
  currentUser = undefined,
  currentRole = undefined,
} = await checkAuth(Astro.cookies);

// Server-side function to get author info via API
async function getAuthorInfoServer(userId: string) {
  try {
    const response = await fetch(`${Astro.url.origin}/api/get-user-info`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Cookie: Astro.request.headers.get("cookie") || "",
      },
      body: JSON.stringify({ userId }),
    });

    if (!response.ok) {
      console.error("Failed to fetch user info:", response.status, response.statusText);
      return null;
    }

    const data = await response.json();

    if (!data.success || !data.user) {
      console.error("API returned error:", data.error);
      return null;
    }

    return data.user;
  } catch (error) {
    console.error("Error calling get-user-info API:", error);
    return null;
  }
}

// Get the tab parameter from URL query string
const tabParam = Astro.url.searchParams.get("tab");
const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "deliverables",
  "final-invoice",
  "activity-log",
];
const defaultTab = validTabs.includes(tabParam || "") ? tabParam : "project-form";

// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let authorProfile = null;
let invoiceData = null;
let totalAmount = 0;
let invoiceId = "0";
let statusLabels: Record<number, { status_name: string; [key: string]: any }> = {};

if (supabase) {
  // Get project data
  const { data: projectData, error: projectError } = await supabase
    .from("projects")
    .select("*")
    .eq("id", id)
    .single();

  if (projectError) {
    console.error("Error fetching project:", projectError);
    console.log("üåê [PROJECT] Project not found or no access, redirecting to dashboard");
    return Astro.redirect("/dashboard");
  } else {
    project = projectData;

    // Get project author's profile data (not current user's profile)
    if (project.author_id) {
      try {
        authorProfile = await getAuthorInfoServer(project.author_id);
        console.log("üîç [PROJECT] Fetched authorProfile:", authorProfile);
        console.log("üîç [PROJECT] authorProfile.user_metadata:", authorProfile?.user_metadata);
        console.log("üîç [PROJECT] first_name:", authorProfile?.user_metadata?.first_name);
        console.log("üîç [PROJECT] last_name:", authorProfile?.user_metadata?.last_name);
      } catch (error) {
        console.error("Error fetching project author profile:", error);
      }
    }

    // Get assigned user's profile data if project has an assigned user
    if (project.assigned_to_id) {
      const { data: assignedProfileData, error: assignedProfileError } = await supabase
        .from("profiles")
        .select("id, company_name")
        .eq("id", project.assigned_to_id)
        .maybeSingle();

      if (assignedProfileError) {
        console.error("Error fetching assigned user profile:", assignedProfileError);
        project.assigned_to_name = null;
      } else if (assignedProfileData) {
        // Add assigned user name to the project data
        project.assigned_to_name = assignedProfileData.company_name || assignedProfileData.id;
      } else {
        // Profile not found for assigned user ID
        console.log("No profile found for assigned user ID:", project.assigned_to_id);
        project.assigned_to_name = null;
      }
    } else {
      project.assigned_to_name = null;
    }

    // Fetch invoice data and calculate total amount
    // Query the invoices table by project ID to get the proper invoice ID
    const { data: invoice, error: invoiceError } = await supabase
      .from("invoices")
      .select("id, catalog_line_items, status, project_id")
      .eq("project_id", project.id)
      .single();

    console.log("üîç [PROJECT] Invoice query result:", {
      invoice,
      invoiceError,
      projectId: project.id,
      hasInvoice: !!invoice,
    });
    if (!invoiceError && invoice) {
      invoiceId = invoice.id.toString();
      invoiceData = invoice;

      // Calculate total by looping through catalog line items
      if (invoice.catalog_line_items && Array.isArray(invoice.catalog_line_items)) {
        totalAmount = invoice.catalog_line_items.reduce((sum: number, item: any) => {
          const quantity = parseFloat(item.quantity) || 0;
          const unitPrice = parseFloat(item.unit_price) || 0;
          const itemTotal = quantity * unitPrice;
          console.log("üîç [PROJECT] Line item calculation:", {
            name: item.name,
            quantity,
            unitPrice,
            itemTotal,
            runningSum: sum + itemTotal,
          });
          return sum + itemTotal;
        }, 0);

        // Convert to cents for Stripe (multiply by 100)
        totalAmount = Math.round(totalAmount * 100);

        console.log("üîç [PROJECT] Total amount calculated:", {
          totalAmount,
          lineItemsCount: invoice.catalog_line_items.length,
          invoiceId: invoice.id,
        });
      }
    } else {
      // No invoice found for this project
      invoiceId = "0";
      console.log("‚ùå [PROJECT] No invoice found for project:", {
        projectId: project.id,
        invoiceError: invoiceError?.message,
        invoiceErrorCode: invoiceError?.code,
        invoiceErrorDetails: invoiceError?.details,
      });
    }

    // Fallback to hardcoded amount if no invoice data found
    if (totalAmount === 0) {
      totalAmount = 2000;
    }
  }

  // Fetch status labels using API
  try {
    const statusesResponse = await fetch(`${Astro.url.origin}/api/get-project-statuses`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "X-User-Role": "Client", // Default role for status fetching
        Cookie: `sb-access-token=${Astro.cookies.get("sb-access-token")?.value}; sb-refresh-token=${Astro.cookies.get("sb-refresh-token")?.value}`,
      },
    });

    if (statusesResponse.ok) {
      const statusesResult = await statusesResponse.json();
      if (statusesResult.success) {
        statusLabels = statusesResult.statuses || {};
      }
    }
  } catch (error) {
    console.error("Error fetching status labels:", error);
  }
}

// Calculate projectStatus and projectStatusLabel
const projectStatus = project?.status || 0;
const projectStatusLabel = statusLabels[projectStatus]?.status_name || "Unknown Status";

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}

// Standardize project ID - use project.id when available, fallback to URL param
// This ensures we always use the authoritative database ID when possible
const projectId = project?.id?.toString() || id || "";

// Get status color based on status code
function getStatusColor(status: number): string {
  if (status <= 50) return "blue"; // Early stages
  if (status <= 100) return "yellow"; // Invoice stages
  if (status <= 140) return "purple"; // Submittals
  if (status <= 180) return "orange"; // Final invoice
  if (status <= 220) return "green"; // Deliverables and complete
  return "gray"; // Unknown
}
---

<App title={i18n.SEO_TITLE} description={i18n.SEO_DESCRIPTION} requireAuth={true}>
  <Hero
    title={project?.address || project?.title || "Untitled Project"}
    description={`<div class="space-y-1">
      <div class="inline-flex items-center">
        <i class="bx bx-user mr-2 text-gray-500"></i>
        <span class="font-medium">${authorProfile?.company_name || "Unknown Author"}</span>
      </div>
      <div class="text-sm text-gray-600 dark:text-gray-400">
        ${
          authorProfile?.profile?.first_name || authorProfile?.profile?.last_name
            ? `<br/>${authorProfile?.profile?.first_name || ""} ${authorProfile?.profile?.last_name || ""}`
            : ""
        }
        ${authorProfile?.user_metadata?.phone || authorProfile?.phone ? `<br/>${authorProfile?.user_metadata?.phone || authorProfile?.phone}` : ""}
      </div>
    </div>`}
    statusLabel={projectStatusLabel
      ? statusLabels[project.status]?.status_name || `Status ${project.status}`
      : undefined}
    statusColor={projectStatus ? getStatusColor(project.status) : undefined}
    projectId={projectId}
    projectStatus={projectStatus}
    currentRole={currentRole || "Client"}
    project={project}
    statuses={Object.values(statusLabels)}
    authorProfile={authorProfile}
  />
  <SectionContainer>
    <!-- Tab Navigation -->
    <nav
      id="project-tab-nav"
      class="scrollbar-hide relative my-4 flex gap-1 overflow-x-auto whitespace-nowrap dark:border-gray-700"
      aria-label="Tabs"
    >
      <button
        id="tab-project-form"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('project-form')"
      >
        <BoxIcon name="edit" class="mr-2 inline h-4 w-4" />
        Project Form
      </button>
      <button
        id="tab-discussion"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('discussion')"
        data-count="0"
      >
        <BoxIcon name="message-rounded-dots" class="mr-2 inline h-4 w-4" />
        Discussion
        <span
          class="incomplete-comments-count absolute -right-2 -top-2 h-5 w-5 items-center justify-center rounded-full border border-blue-500 bg-white text-xs font-medium text-blue-500 hidden"
        >
          0
        </span>
      </button>
      <!-- {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <button
            id="tab-comments"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('comments')"
          >
            <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
            Comments
          </button>
        ) : (
          ""
        )
      } -->
      <button
        id="tab-documents"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('documents')"
      >
        <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
        Documents
      </button>
      <button
        id="tab-proposal"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('proposal')"
      >
        <BoxIcon name="grid" class="mr-2 inline h-4 w-4" />
        Proposal
      </button>
      <button
        id="tab-contract"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('contract')"
      >
        <BoxIcon name="file-text" class="mr-2 inline h-4 w-4" />
        Contract
      </button>
      <button
        id="tab-deposit"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deposit')"
      >
        <BoxIcon name="credit-card" class="mr-2 inline h-4 w-4" />
        Deposit
      </button>
      <button
        id="tab-deliverables"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deliverables')"
      >
        <BoxIcon name="package" class="mr-2 inline h-4 w-4" />
        Deliverables
      </button>
      <button
        id="tab-final-invoice"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('final-invoice')"
      >
        <BoxIcon name="receipt" class="mr-2 inline h-4 w-4" />
        Final Invoice
      </button>
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <button
            id="tab-activity-log"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('activity-log')"
          >
            <BoxIcon name="history" class="mr-2 inline h-4 w-4" />
            Activity Log
          </button>
        ) : (
          ""
        )
      }
    </nav>

    <!-- Tab Content -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-1">
      <!-- Project Form Tab -->
      <TabProjectForm
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
      />

      <!-- Discussion Tab -->
      <div
        id="content-discussion"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <Discussions
          project={project}
          currentRole={currentRole || undefined}
          projectId={projectId}
          projectStatus={projectStatus}
          projectStatusLabel={projectStatusLabel}
          authorProfile={authorProfile}
        />
      </div>

      <!-- Documents Tab -->
      <TabDocuments
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
        fileType="media"
      />

      <!-- Proposal Tab -->
      <TabProposal
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
        currentUser={currentUser}
      />

      <!-- Contract Tab -->
      <TabContract
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
      />

      <!-- Deposit Tab -->
      <TabDeposit
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
        invoiceId={invoiceId || "0"}
        totalAmount={totalAmount}
      />

      <!-- Deliverables Tab -->
      <TabDeliverables
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
      />

      <!-- Final Invoice Tab -->
      <TabFinalInvoice
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        authorProfile={authorProfile}
        invoiceData={invoiceData}
        totalAmount={totalAmount}
      />

      <TabActivityLog currentRole={currentRole || undefined} projectId={projectId} />
    </div>
  </SectionContainer>
</App>

<script
  type="module"
  define:vars={{ userRole: currentRole, projectData: project, currentUserData: authorProfile }}
>
  // Tab switching functionality
  function switchTab(tabName) {
    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [baseTabName, ...paramParts] = tabName.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.classList.remove("active", "bg-red-500", "text-white", "border-red-500");
      button.classList.add(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${baseTabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Add active class to selected tab button
    const selectedButton = document.getElementById(`tab-${baseTabName}`);
    if (selectedButton) {
      selectedButton.classList.remove(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
      selectedButton.classList.add("active", "bg-red-500", "text-white", "border-red-500");

      // Center the active button in the navigation
      selectedButton.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
        inline: "center",
      });
    }

    // Handle tab-specific actions based on parameters
    if (baseTabName === "discussion" && params.get("new") === "true") {
      // Auto-trigger new comment form after a short delay to ensure tab is visible
      setTimeout(() => {
        if (window.toggleCommentForm) {
          window.toggleCommentForm();
        }
      }, 100);
    }

    // Check if client is viewing proposal tab and update status if needed
    console.log("üìã [PROPOSAL-VIEW] Tab switched to:", tabName);
    console.log("üìã [PROPOSAL-VIEW] User role:", userRole);

    const currentStatus = projectData?.status || 0;
    const currentUserId = currentUserData?.id;
    const projectId = projectData?.id;
    const hasExistingProposal = projectData?.invoice_id && projectData.invoice_id !== "0";
    let nextStatus = 0;
    // Viewed Update Tabs

    console.log("üìã [PROPOSAL-VIEW] Client viewing proposal tab, current status:", currentStatus);
    console.log("üìã [PROPOSAL-VIEW] Project data:", { projectId, currentUserId });

    if (
      tabName === "proposal" &&
      userRole === "Client" &&
      currentStatus >= 20 &&
      currentStatus < 40 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      console.log(
        "üìã [PROPOSAL-VIEW] Updating status from",
        currentStatus,
        "to 40 (Proposal Viewed)"
      );
      nextStatus = 40;
    } else if (
      tabName === "deposit" &&
      userRole === "Client" &&
      currentStatus >= 55 &&
      currentStatus < 65 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      console.log(
        "üìã [PROPOSAL-VIEW] Updating status from",
        currentStatus,
        "to 65 (Deposit Viewed)"
      );
      nextStatus = 65;
    } else if (
      tabName === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 150 &&
      currentStatus < 160 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      console.log(
        "üìã [PROPOSAL-VIEW] Updating status from",
        currentStatus,
        "to 160 (Final Invoice Viewed)"
      );
      nextStatus = 160;
    } else if (
      tabName === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 200 &&
      currentStatus < 210 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      console.log(
        "üìã [PROPOSAL-VIEW] Updating status from",
        currentStatus,
        "to 220 (Final Deliverables Viewed)"
      );
      nextStatus = 210;
    }

    // Update status to 40 (Proposal Viewed) if status is between 30-40

    if (nextStatus !== 0) {
      // Call update-status API
      fetch("/api/update-status", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          projectId: projectId,
          status: nextStatus,
          currentUserId: currentUserId,
          oldStatus: currentStatus,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            console.log("‚úÖ [PROPOSAL-VIEW] Status updated to 40 successfully");
            // Update the project data for future checks
            projectData.status = nextStatus;

            // Update UI elements using RefreshManager
            if (window.refreshManager) {
              window.refreshManager.updateField("status", nextStatus);
              window.refreshManager.updateField("status_name", "Status Updated");
            }

            // Show notification using new modal system
            if (data.notificationData && window.showModal) {
              const notification = data.notificationData.client || data.notificationData.admin;
              if (notification) {
                window.showModal(
                  notification.type,
                  notification.title,
                  notification.message,
                  notification.duration,
                  notification.redirect
                );
              }
            } else if (data.message && window.showSuccess) {
              // Fallback to old toast system
              window.showSuccess("Proposal Viewed", data.message);
            }
          } else {
            console.error("‚ùå [PROPOSAL-VIEW] Failed to update status:", data.error);
          }
        })
        .catch((error) => {
          console.error("‚ùå [PROPOSAL-VIEW] Error updating status:", error);
        });
    } else {
      console.log("üìã [PROPOSAL-VIEW] No status update needed, current status:", currentStatus);
    }

    // Update URL with tab parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (baseTabName === "project-form") {
      // Remove tab parameter for default tab
      currentUrl.searchParams.delete("tab");
    } else {
      // Add or update tab parameter with any additional parameters
      currentUrl.searchParams.set("tab", tabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Get tab from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "deliverables",
      "final-invoice",
      "activity-log",
    ];

    // Parse tab name and parameters
    let initialTab = "project-form";
    if (tabFromUrl) {
      const [baseTabName] = tabFromUrl.split("&");
      if (validTabs.includes(baseTabName)) {
        initialTab = tabFromUrl; // Keep full parameter string for processing
      }
    }

    // Switch to the initial tab
    switchTab(initialTab);
  });

  // Make switchTab globally available for other components
  window.switchTab = switchTab;

  // Payment method switching functionality
  document.addEventListener("DOMContentLoaded", function () {
    const paymentMethodRadios = document.querySelectorAll('input[name="payment-method"]');
    const cardForm = document.getElementById("card-payment-form");
    const bankForm = document.getElementById("bank-payment-form");
    const checkForm = document.getElementById("check-payment-form");

    paymentMethodRadios.forEach((radio) => {
      radio.addEventListener("change", function () {
        // Hide all forms
        if (cardForm) cardForm.classList.add("hidden");
        if (bankForm) bankForm.classList.add("hidden");
        if (checkForm) checkForm.classList.add("hidden");

        // Show selected form
        if (this.value === "card" && cardForm) {
          cardForm.classList.remove("hidden");
        } else if (this.value === "bank" && bankForm) {
          bankForm.classList.remove("hidden");
        } else if (this.value === "check" && checkForm) {
          checkForm.classList.remove("hidden");
        }
      });
    });
  });

  // Payment processing function
  function processDepositPayment() {
    const selectedMethodElement = document.querySelector('input[name="payment-method"]:checked');
    const selectedMethod = selectedMethodElement?.value;

    if (!selectedMethod) {
      alert("Please select a payment method");
      return;
    }

    // Get the amount (this would come from the proposal total in a real implementation)
    const amount = 0.0; // Placeholder - should be calculated from proposal

    console.log("Processing deposit payment:", {
      method: selectedMethod,
      amount: amount,
      projectId: projectData?.id,
    });

    // Show loading state
    const button = document.querySelector('button[onclick="processDepositPayment()"]');
    if (button) {
      const originalText = button.innerHTML;
      button.innerHTML =
        '<BoxIcon name="loader" class="mr-2 inline h-5 w-5 animate-spin" />Processing...';
      button.disabled = true;

      // Simulate payment processing
      setTimeout(() => {
        button.innerHTML = originalText;
        button.disabled = false;

        // Show success message
        if (window.showSuccess) {
          window.showSuccess("Deposit payment processed successfully!");
        } else {
          alert("Deposit payment processed successfully!");
        }
      }, 2000);
    }
  }

  // Make payment function globally available
  window.processDepositPayment = processDepositPayment;
</script>
