---
// Define requireAuthRedirect
const requireAuthRedirect = "/login";
// Make sure to check above value before redirecting
import { checkAuth } from "../../lib/auth";
// Handle OAuth callback if code is present
const { currentUser, session, supabase } = await checkAuth(Astro.cookies);
// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalCompanyData } from "../../pages/api/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../../pages/api/global-classes";
const { globalInputClasses, globalPrimaryTextClasses, globalSecondaryTextClasses } =
  globalClasses();

const currentRole = currentUser?.profile?.role;
const { id } = Astro.params;
import App from "../../components/common/App.astro";
import HeroProject from "../../components/common/HeroProject.astro";
import SlidingPillNav from "../../components/common/SlidingPillNav.astro";
import TabDocuments from "../../components/project/TabDocuments.astro";
import TabDiscussions from "../../components/project/TabDiscussions.astro";
import TabProjectForm from "../../components/project/TabProjectForm.astro";
import TabProposal from "../../components/project/TabProposal.astro";
import TabContract from "../../components/project/TabContract.astro";
import TabDeposit from "../../components/project/TabDeposit.astro";
import TabFinalInvoice from "../../components/project/TabFinalInvoice.astro";
import TabActivityLog from "../../components/project/TabActivityLog.astro";
import TabGeneratePdf from "../../components/project/TabGeneratePdf.astro";
import "../../lib/refresh-manager.ts";

const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "activity-log",
  "generate-pdf",
  "deliverables",
  "final-invoice",
];

const statusParam = Astro.url.searchParams.get("status");
const defaultTab = validTabs.includes(statusParam || "")
  ? statusParam || "project-form"
  : "project-form";
const activeTabIndex = validTabs.indexOf(defaultTab);

// Track which tab should load content server-side

// Fetch project data and project author profile - RLS will handle authorization
let project: any = null;
// let invoiceData = null;

// Status-related variables (will be defined after data fetching)

// Debug authentication and ID (can be removed once working)
// console.log("üîç [PROJECT] Debug info:", {
//   id,
//   hasCurrentUser: !!currentUser,
//   currentUserId: currentUser?.id,
//   currentRole: currentUser?.profile?.role,
//   url: Astro.url.href,
//   cookies: Astro.request.headers.get("Cookie") ? "Present" : "Missing",
// });

// Fetch single project using the API endpoint
if (id) {
  try {
    const baseUrl = Astro.url.origin;
    const apiUrl = `${baseUrl}/api/get-project?id=${id}`;

    console.log("üèóÔ∏è [PROJECT] Fetching project from API:", apiUrl);
    const response = await fetch(apiUrl, {
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    console.log("üèóÔ∏è [PROJECT] Response status:", response.status);

    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [PROJECT] Data:", data);
      if (data.success) {
        project = data.project;
        console.log("‚úÖ [PROJECT] Project loaded:", project?.title);
      } else {
        console.error("üèóÔ∏è [PROJECT] API returned error:", data.error);
        return Astro.redirect("/dashboard");
      }
    } else {
      console.error("üèóÔ∏è [PROJECT] Error fetching project:", response.status, response.statusText);
      return Astro.redirect("/dashboard");
    }
  } catch (error) {
    console.error("üèóÔ∏è [PROJECT] Error fetching project:", error);

    return Astro.redirect("/dashboard");
  }
} else {
  console.error("üèóÔ∏è [PROJECT] No project ID provided");
  return Astro.redirect("/dashboard");
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}

const currentStatusInt = project?.status;
let currentStatusName;

// Status-related variables
let currentStatusTab: string | null = null;
let currentStatusColor = "gray";
let currentStatusProjectAction: string | null = null;

// Initialize data arrays (same as dashboard)
// Fetch project statuses using the unified API (POST to avoid URL length limits)
const statusResponse = await fetch(`${Astro.url.origin}/api/project-statuses`, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
  body: JSON.stringify({ project }),
});

if (!statusResponse.ok) {
  console.error(
    "‚ùå [PROJECT-PAGE] Status API failed:",
    statusResponse.status,
    statusResponse.statusText
  );
  throw new Error(`Status API failed: ${statusResponse.status}`);
}

const statusResponseData = await statusResponse.json();
const statusData = statusResponseData.statuses || [];
const statusOptions = statusResponseData.selectOptions || [];

// Get current status data by keying into the project status code (API already handles role-based filtering)
if (currentStatusInt && statusData[currentStatusInt]) {
  const currentStatusObj = statusData[currentStatusInt];
  // Use the role-based values directly from the API (no additional filtering needed)
  currentStatusName = currentStatusObj.current.statusName;
  currentStatusTab = currentStatusObj.current.status_tab;
  currentStatusProjectAction = currentStatusObj.current.status_action;
  currentStatusColor = currentStatusObj.current.statusColor || "gray";
  // search currentStatusProjectAction for "status=" + statusParam
  const statusParamIndex = currentStatusProjectAction?.indexOf("status=" + statusParam) || 0;
  if (statusParamIndex !== -1 && currentStatusProjectAction) {
    // remove HTML tags from currentStatusProjectAction
    // currentStatusProjectAction = currentStatusProjectAction.replace(/<[^>]*>?/g, "");
    currentStatusProjectAction = null;
  }
}

// Fetch client data for staff selection
let staffOptions: any[] = [];
if (currentRole === "Admin" || currentRole === "Staff") {
  try {
    // Use the clients API to get only clients
    const clientResponse = await fetch(`${Astro.url.origin}/api/clients`);

    if (clientResponse.ok) {
      const clientData = await clientResponse.json();
      if (clientData.success && clientData.clients) {
        staffOptions = [
          { value: "", label: "Unassigned" },
          ...clientData.clients.map((client: any) => ({
            value: client.id || "",
            label:
              client.companyName ||
              `${client.firstName || ""} ${client.lastName || ""}`.trim() ||
              "Unknown Client",
          })),
        ];
      }
    } else {
      console.error(
        "Failed to fetch client data:",
        clientResponse.status,
        clientResponse.statusText
      );
      staffOptions = [{ value: "", label: "Unassigned" }];
    }
  } catch (error) {
    console.error("Failed to fetch client data:", error);
    staffOptions = [{ value: "", label: "Unassigned" }];
  }
}

// console.log("üîç [PROJECT] currentStatusName:", currentStatusName);
---

<App
  currentUser={currentUser}
  project={project}
  title={project?.title || "Untitled Project"}
  description={project?.authorProfile?.companyName || "Unknown Author"}
  session={session}
  supabase={supabase}
  supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
  isBackend={true}
  id={id}
  globalPrimaryTextClasses={globalPrimaryTextClasses}
  globalSecondaryTextClasses={globalSecondaryTextClasses}
  globalInputClasses={globalInputClasses}
  globalCompanyName={globalCompanyName}
  globalCompanySlogan={globalCompanySlogan}
  globalCompanyAddress={globalCompanyAddress}
  globalCompanyPhone={globalCompanyPhone}
  globalCompanyEmail={globalCompanyEmail}
  globalCompanyWebsite={globalCompanyWebsite}
  globalCompanyLogo={globalCompanyLogo}
  globalCompanyLogoDark={globalCompanyLogoDark}
  globalCompanyLogoLight={globalCompanyLogoLight}
>
  <HeroProject
    title={project?.address || project?.title || "Untitled Project"}
    description={currentUser?.profile?.role === "Client"
      ? project?.createdAt
        ? "<b>Created:</b> " + new Date(project.createdAt).toLocaleDateString()
        : "Unknown Date"
      : project?.authorProfile?.companyName + " ‚Üí " + project?.authorProfile?.email ||
        "Unknown Author"}
    statusColor={currentStatusColor}
    currentUser={currentUser}
    currentStatusInt={currentStatusInt.toString()}
    currentStatusName={currentStatusName || undefined}
    project={project}
    statusesOptions={statusOptions}
    currentStatusTab={currentStatusTab || undefined}
    staffOptions={staffOptions}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
  />

  <!-- Tab Navigation -->
  <SlidingPillNav
    navId="project-tab-nav"
    navClass="my-4 dark:border-gray-700"
    activeItem={activeTabIndex}
    currentUser={currentUser}
    items={[
      {
        id: "status-project-form",
        label: "Project Form",
        icon: "edit",
        variant: "anchor",
        onclick: "window.switchTab('project-form')",
      },
      {
        id: "status-discussion",
        label: "Discussion",
        icon: "message-rounded-dots",
        variant: "anchor",
        dataAttributes: { "data-count": "0" },
        onclick: "window.switchTab('discussion')",
      },
      {
        id: "status-documents",
        label: "Documents",
        icon: "file",
        variant: "anchor",
        onclick: "window.switchTab('documents')",
      },
      {
        id: "status-proposal",
        label: "Proposal",
        icon: "grid",
        variant: "anchor",
        onclick: "window.switchTab('proposal')",
      },
      {
        id: "status-contract",
        label: "Contract",
        icon: "pencil",
        variant: "anchor",
        onclick: "window.switchTab('contract')",
      },
      {
        id: "status-deposit",
        label: "Deposit",
        icon: "credit-card",
        variant: "anchor",
        onclick: "window.switchTab('deposit')",
      },
      {
        id: "status-activity-log",
        label: "Activity Log",
        icon: "history",
        variant: "anchor",
        onclick: "window.switchTab('activity-log')",
        clientHide: true,
      },
      {
        id: "status-generate-pdf",
        label: "Generate PDF",
        icon: "history",
        variant: "anchor",
        onclick: "window.switchTab('generate-pdf')",
        clientHide: true,
      },
    ]}
  />
  <!-- Tab Content -->
  <!-- <div class="grid grid-cols-1 gap-6 lg:grid-cols-1"> -->
  <!-- Project Form Tab -->
  <TabProjectForm
    project={project}
    currentUser={currentUser}
    projectStatus={currentStatusInt}
    projectStatusLabel={currentStatusName || undefined}
    globalInputClasses={globalInputClasses}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
  />

  <!-- Discussion Tab -->

  <TabDiscussions
    project={project}
    currentUser={currentUser}
    supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
    globalInputClasses={globalInputClasses}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
  />

  <!-- Documents Tab -->
  <TabDocuments
    project={project}
    currentUser={currentUser}
    projectStatus={currentStatusInt}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    statusData={statusData}
  />

  <!-- Proposal Tab -->
  <TabProposal
    project={project}
    projectStatus={currentStatusInt}
    currentUser={currentUser}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    statusData={statusData}
  />

  <!-- Contract Tab -->
  <TabContract
    project={project}
    currentUser={currentUser}
    projectStatus={currentStatusInt}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    statusData={statusData}
  />

  <!-- Deposit Tab -->
  <TabDeposit
    project={project}
    currentUser={currentUser}
    projectStatus={currentStatusInt}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    statusData={statusData}
  />

  <!-- Final Invoice Tab -->
  <TabFinalInvoice
    project={project}
    projectStatus={currentStatusInt}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    statusData={statusData}
  />

  <TabActivityLog
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    currentUser={currentUser}
    project={project}
    statusData={statusData}
  />

  <TabGeneratePdf
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    project={project}
    currentUser={currentUser}
    statusData={statusData}
  />
</App>

<script
  type="module"
  define:vars={{
    project,
    currentUser,
    currentStatusProjectAction,
    baseUrl: Astro.url.origin,
    statusData,
  }}
>
  const currentStatus = project?.status || 0;
  const projectId = project?.id;
  const currentRole = currentUser?.profile?.role;
  // Tab switching functionality
  function setPageLoadProjectStatus(statusNameFromUrl) {
    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [statusSlug, ...paramParts] = statusNameFromUrl.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // Check if the target tab needs lazy loading
    const targetPanel = document.querySelector(`[data-status-panel="${statusSlug}"]`);
    const needsLazyLoad = targetPanel?.getAttribute("data-lazy-load") === "true";

    if (needsLazyLoad) {
      console.log(`üîÑ [LAZY-LOAD] Tab "${statusSlug}" needs to be loaded. Redirecting...`);
      const currentUrl = new URL(window.location.href);
      currentUrl.searchParams.set("status", statusNameFromUrl);
      window.location.href = currentUrl.toString();
      return; // Stop execution
    }

    // Handle tab-specific actions based on parameters
    if (statusSlug === "discussion" && params.get("new") === "true") {
      console.log("üîî [PROJECT-PAGE] Auto-triggering new comment form");
      // Auto-trigger new comment form after a short delay to ensure tab is visible
      setTimeout(() => {
        if (window.toggleCommentForm) {
          console.log("üîî [PROJECT-PAGE] Calling toggleCommentForm");
          window.toggleCommentForm();
        } else {
          console.error("üîî [PROJECT-PAGE] toggleCommentForm not available");
        }
      }, 100);
    }

    let nextStatus = 0;
    // Viewed Update Tabs

    // console.log("üìã [PROPOSAL-VIEW] Client viewing proposal tab, current status:", currentStatus);
    // console.log("üìã [PROPOSAL-VIEW] Project data:", { projectId, currentUserId });

    if (
      statusSlug === "proposal" &&
      currentRole === "Client" &&
      currentStatus >= 30 &&
      currentStatus <= 35 &&
      currentUser &&
      project.id
    ) {
      nextStatus = 40;
    } else if (
      statusSlug === "deposit" &&
      currentRole === "Client" &&
      currentStatus >= 55 &&
      currentStatus <= 60 &&
      currentUser &&
      project.id
    ) {
      nextStatus = 65;
    } else if (
      statusSlug === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 150 &&
      currentStatus < 160 &&
      currentUser &&
      project.id
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 160 (Final Invoice Viewed)"
      // );
      nextStatus = 160;
    } else if (
      statusSlug === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 200 &&
      currentStatus < 210 &&
      currentUser &&
      project.id
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 220 (Final Deliverables Viewed)"
      // );
      nextStatus = 210;
    }

    // Update status to 40 (Proposal Viewed) if status is between 30-40

    if (nextStatus !== 0 && nextStatus !== currentStatus) {
      // Call global updateStatus function
      window.updateStatus(project, nextStatus, statusData[nextStatus]).then((data) => {
        if (data.success) {
          // NO NOTIFICATIONS FOR BEHIND THE SCENES UPDATES
          // window.handleNewStatusNotification(data, "PROPOSAL-VIEW");
        } else {
          console.error("‚ùå [PROPOSAL-VIEW] Failed to update status:", data.error);
        }
      });
    }
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Check for project action modal first
    checkProjectActionModal();
  });

  // Check for project action modal on page load
  function checkProjectActionModal() {
    console.log("üîç [PROJECT] Checking for project action:", currentStatusProjectAction);

    if (currentStatusProjectAction && currentStatusProjectAction.trim() !== "") {
      console.log("üöÄ [PROJECT] Found project action, showing modal:", currentStatusProjectAction);

      // Show modal with project action content
      if (typeof window.showModal === "function") {
        window.showModal(
          "alert",
          "Project Action Required",
          currentStatusProjectAction,
          2000 // No auto-hide
        );
      } else {
        // Fallback alert if modal function not available
        alert(`Project Status Update:\n\n${currentStatusProjectAction}`);
      }
    } else {
      console.log("üîç [PROJECT] No project action to display");
    }
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Check for project action modal first
    checkProjectActionModal();

    // Get status from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const statusFromUrl = urlParams.get("status");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "final-invoice",
      "activity-log",
      "generate-pdf",
      "deliverables",
    ];

    // Parse status name and parameters
    let initialTab = "project-form";
    if (statusFromUrl) {
      const [statusSlug] = statusFromUrl.split("&");
      if (validTabs.includes(statusSlug)) {
        // Build parameter string from URL params (e.g., "discussion&new=true")
        let tabWithParams = statusFromUrl;

        // Check for additional parameters like 'new'
        const newParam = urlParams.get("new");
        if (newParam) {
          tabWithParams += `&new=${newParam}`;
        }

        initialTab = tabWithParams;
        console.log("üîî [PROJECT-PAGE] Setting initial tab with params:", initialTab);
      }
    }

    // Switch to the initial tab
    setPageLoadProjectStatus(initialTab);
  });

  // Remove this placeholder - the real switchTab is defined later
  // Tab switching function for navigation
  function switchTab(tabName) {
    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [baseTabName, ...paramParts] = tabName.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // Check if the target tab needs lazy loading
    // const targetPanel = document.querySelector(`[data-status-panel="${baseTabName}"]`);
    // const needsLazyLoad = targetPanel?.getAttribute("data-lazy-load") === "true";

    // if (needsLazyLoad) {
    //   console.log(`üîÑ [LAZY-LOAD] Tab "${baseTabName}" needs to be loaded. Redirecting...`);
    //   const urlParam = nav?.getAttribute("data-url-param") || "status";
    //   const currentUrl = new URL(window.location.href);
    //   currentUrl.searchParams.set(urlParam, tabName);
    //   window.location.href = currentUrl.toString();
    //   return; // Stop execution
    // }

    // load the content from the global function matching the status = slug
    if (baseTabName === "discussion") {
      window.initializeDiscussion();
    } else if (baseTabName === "documents") {
      window.initializeDocuments();
    } else if (baseTabName === "proposal") {
      window.initializeProposal();
    }

    window.initializeDiscussion();

    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${baseTabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Find and update the active button
    if (!nav) return;
    const urlParam = nav.getAttribute("data-url-param") || "status";
    const selectedButton = document.getElementById(`${urlParam}-${baseTabName}`);
    if (selectedButton) {
      updateActiveButton(selectedButton);
      updateSlidingPill(selectedButton);
    }

    // Update URL with status parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (baseTabName === "project-form") {
      // Remove status parameter for default tab
      currentUrl.searchParams.delete(urlParam);
    } else {
      // Add or update status parameter with only the base tab name
      currentUrl.searchParams.set(urlParam, baseTabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Expose functions globally for external control
  // window[`${navId}_updateActiveButton`] = updateActiveButton;
  // window[`${navId}_updateSlidingPill`] = updateSlidingPill;
  window.switchTab = switchTab;

  // Make switchTab globally available for other components
  window.setPageLoadProjectStatus = setPageLoadProjectStatus;
</script>

<script>
  // Global tab switching function - source of truth for all tab navigation
  (window as any).switchTab = async function (tabName: string) {
    console.log(`üîÑ [SWITCH-TAB] Switching to: ${tabName}`);

    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [baseTabName, ...paramParts] = tabName.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // Only handle lazy loading for discussion tab for now
    if (baseTabName === "discussion") {
      const targetPanel = document.querySelector(`[data-status-panel="discussion"]`);
      const needsLazyLoad = targetPanel?.getAttribute("data-lazy-load") === "true";

      if (needsLazyLoad) {
        console.log(`üîÑ [LAZY-LOAD] Discussion tab needs initialization`);

        if (typeof (window as any).initializeDiscussion === "function") {
          console.log(`üîÑ [LAZY-LOAD] Calling initializeDiscussion()`);

          try {
            await (window as any).initializeDiscussion();
            // Mark as loaded
            targetPanel?.setAttribute("data-lazy-load", "false");
          } catch (error) {
            console.error(`‚ùå [LAZY-LOAD] Error initializing discussion:`, error);
            return;
          }
        } else {
          console.warn(`‚ö†Ô∏è [LAZY-LOAD] initializeDiscussion function not found`);
        }
      }
    }

    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${baseTabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Update URL with status parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (baseTabName === "project-form") {
      // Remove status parameter for default tab
      currentUrl.searchParams.delete("status");
    } else {
      // Add or update status parameter with only the base tab name
      currentUrl.searchParams.set("status", baseTabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());

    console.log(`‚úÖ [SWITCH-TAB] Switched to: ${baseTabName}`);
  };

  // Example: Initialize Discussion tab function (to be implemented)
  (window as any).initializeDiscussion = async function () {
    console.log("üé¨ [INIT-DISCUSSION] Initializing discussion tab...");
    // TODO: Fetch and populate discussion content
    // This is where you'll load the TabDiscussions content dynamically
  };
</script>
