---
import App from "../../components/common/App.astro";
import SectionContainer from "../../components/common/SectionContainer.astro";
import Hero from "../../components/common/Hero.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import ProjectForm from "../../components/project/ProjectForm.astro";
import PDFUpload from "../../components/project/PDFUpload.astro";
import SimpleProjectLog from "../../components/project/SimpleProjectLog.astro";
import ProposalManager from "../../components/project/ProposalManager.astro";
import PaymentForm from "../../components/project/PaymentForm.astro";
import Discussions from "../../components/project/Discussions.astro";
import DigitalSignature from "../../components/project/DigitalSignature.astro";
import { getI18N } from "@/i18n";
import { supabase } from "../../lib/supabase";
import { supabaseAdmin } from "../../lib/supabase-admin";
import "../../lib/refresh-manager.ts";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get the project ID from the URL parameter
const { id } = Astro.params;

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../../lib/auth";
const { isAuth, currentUser, currentRole } = await checkAuth(Astro.cookies);

// Server-side function to get author info directly from database
async function getAuthorInfoServer(userId: string) {
  if (!supabaseAdmin) {
    console.error("Supabase Admin not available");
    return null;
  }

  const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.getUserById(userId);

  if (authError || !authUser.user) {
    console.error("Error fetching auth user:", authError);
    return null;
  }

  if (!supabase) {
    console.error("Supabase not available");
    return null;
  }

  // Get user profile from profiles table
  const { data: profile, error: profileError } = await supabase
    .from("profiles")
    .select("*")
    .eq("id", userId)
    .single();

  // Combine auth user data with profile data
  const userInfo = {
    id: authUser.user.id,
    email: authUser.user.email,
    profile: profile || null,
    display_name:
      profile?.company_name ||
      authUser.user.user_metadata?.full_name ||
      authUser.user.email?.split("@")[0] ||
      "Unknown User",
    company_name: profile?.company_name || null,
    first_name: profile?.first_name || null,
    last_name: profile?.last_name || null,
    phone: profile?.phone || null,
    role: profile?.role || "Unknown",
  };

  return userInfo;
}


// Get the tab parameter from URL query string
const tabParam = Astro.url.searchParams.get("tab");
const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "deliverables",
  "final-invoice",
  "activity-log",
];
const defaultTab = validTabs.includes(tabParam || "") ? tabParam : "project-form";


// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let projectAuthorProfile = null;
let statusLabels: Record<number, { status_name: string; [key: string]: any }> = {};

if (supabase) {
  // Get project data
  const { data: projectData, error: projectError } = await supabase
    .from("projects")
    .select("*")
    .eq("id", id)
    .single();

  if (projectError) {
    console.error("Error fetching project:", projectError);
    console.log("üåê [PROJECT] Project not found or no access, redirecting to dashboard");
    return Astro.redirect("/dashboard");
  } else {
    project = projectData;

    // Get project author's profile data (not current user's profile)
    if (project.author_id) {
      try {
        projectAuthorProfile = await getAuthorInfoServer(project.author_id);
      } catch (error) {
        console.error("Error fetching project author profile:", error);
      }
    }

    // Get assigned user's profile data if project has an assigned user
    if (project.assigned_to_id) {
      const { data: assignedProfileData, error: assignedProfileError } = await supabase
        .from("profiles")
        .select("id, company_name")
        .eq("id", project.assigned_to_id)
        .maybeSingle();

      if (assignedProfileError) {
        console.error("Error fetching assigned user profile:", assignedProfileError);
        project.assigned_to_name = null;
      } else if (assignedProfileData) {
        // Add assigned user name to the project data
        project.assigned_to_name = assignedProfileData.company_name || assignedProfileData.id;
      } else {
        // Profile not found for assigned user ID
        console.log("No profile found for assigned user ID:", project.assigned_to_id);
        project.assigned_to_name = null;
      }
    } else {
      project.assigned_to_name = null;
    }
  }

  // Fetch status labels using API
  try {
    const statusesResponse = await fetch(`${Astro.url.origin}/api/get-project-statuses`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "X-User-Role": "Client", // Default role for status fetching
        Cookie: `sb-access-token=${Astro.cookies.get("sb-access-token")?.value}; sb-refresh-token=${Astro.cookies.get("sb-refresh-token")?.value}`,
      },
    });

    if (statusesResponse.ok) {
      const statusesResult = await statusesResponse.json();
      if (statusesResult.success) {
        statusLabels = statusesResult.statuses || {};
      }
    }
  } catch (error) {
    console.error("Error fetching status labels:", error);
  }
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}

// Standardize project ID - use project.id when available, fallback to URL param
// This ensures we always use the authoritative database ID when possible
const projectId = project?.id?.toString() || id || "";

// Get status color based on status code
function getStatusColor(status: number): string {
  if (status <= 50) return "blue"; // Early stages
  if (status <= 100) return "yellow"; // Invoice stages
  if (status <= 140) return "purple"; // Submittals
  if (status <= 180) return "orange"; // Final invoice
  if (status <= 220) return "green"; // Deliverables and complete
  return "gray"; // Unknown
}
---

<App title={i18n.SEO_TITLE} description={i18n.SEO_DESCRIPTION} requireAuth={true}>
  <Hero
    title={project?.address || project?.title || "Untitled Project"}
    description={`<div class="space-y-1">
      <div class="inline-flex items-center">
        <i class="bx bx-user mr-2 text-gray-500"></i>
        <span class="font-medium">${projectAuthorProfile?.company_name || "Unknown Author"}</span>
      </div>
      <div class="text-sm text-gray-600 dark:text-gray-400">
        ${projectAuthorProfile?.first_name || projectAuthorProfile?.last_name ? 
          `<br/>${projectAuthorProfile?.first_name || ""} ${projectAuthorProfile?.last_name || ""}` : ""}
        ${projectAuthorProfile?.phone ? `<br/>${projectAuthorProfile.phone}` : ""}
      </div>
    </div>`}
    statusLabel={project?.status
      ? (statusLabels[project.status]?.status_name || `Status ${project.status}`)
      : undefined}
    statusColor={project?.status ? getStatusColor(project.status) : undefined}
    projectId={projectId}
    projectStatus={project?.status}
    currentRole={currentRole || "Client"}
    project={project}
    statuses={Object.values(statusLabels)}
    authorProfile={projectAuthorProfile}
  />
  <SectionContainer 
    data-project-id={id}
    data-project-status={project?.status}
    data-current-user-id={currentUser?.id}
  >
    <div class="flex items-center justify-between">
      <a
        href="/dashboard"
        class="inline-flex items-center rounded-lg bg-gray-500 px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-600"
      >
        <BoxIcon name="arrow-back" class="mr-2" />
        Back to Projects
      </a>
    </div>

    <!-- Tab Navigation -->
    <nav
      id="project-tab-nav"
      class="scrollbar-hide relative my-4 flex gap-1 overflow-x-auto whitespace-nowrap dark:border-gray-700"
      aria-label="Tabs"
    >
      <button
        id="tab-project-form"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('project-form')"
      >
        <BoxIcon name="edit" class="mr-2 inline h-4 w-4" />
        Project Form
      </button>
      <button
        id="tab-discussion"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('discussion')"
        data-count="0"
      >
        <BoxIcon name="message-rounded-dots" class="mr-2 inline h-4 w-4" />
        Discussion
        <span class="incomplete-comments-count absolute -right-2 -top-2 flex h-5 w-5 items-center justify-center rounded-full border border-blue-500 bg-white text-xs font-medium text-blue-500 hidden">
          0
        </span>
      </button>
      <!-- {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <button
            id="tab-comments"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('comments')"
          >
            <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
            Comments
          </button>
        ) : (
          ""
        )
      } -->
      <button
        id="tab-documents"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('documents')"
      >
        <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
        Documents
      </button>
      <button
        id="tab-proposal"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('proposal')"
      >
        <BoxIcon name="grid" class="mr-2 inline h-4 w-4" />
        Proposal
      </button>
      <button
        id="tab-contract"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('contract')"
      >
        <BoxIcon name="file-text" class="mr-2 inline h-4 w-4" />
        Contract
      </button>
      <button
        id="tab-deposit"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deposit')"
      >
        <BoxIcon name="credit-card" class="mr-2 inline h-4 w-4" />
        Deposit
      </button>
      <button
        id="tab-deliverables"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deliverables')"
      >
        <BoxIcon name="package" class="mr-2 inline h-4 w-4" />
        Deliverables
      </button>
      <button
        id="tab-final-invoice"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('final-invoice')"
      >
        <BoxIcon name="receipt" class="mr-2 inline h-4 w-4" />
        Final Invoice
      </button>
      {currentRole === "Admin" || currentRole === "Staff" ? (

      <button
        id="tab-activity-log"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('activity-log')"
      >
        <BoxIcon name="history" class="mr-2 inline h-4 w-4" />
        Activity Log
      </button>
      ) : (
        ""
      )}
    </nav>

    <!-- Tab Content -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-1">
      <!-- Project Form Tab -->
      <div
        id="content-project-form"
        class="tab-content rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <ProjectForm
          project={project}
          projectId={projectId}
          isNewProject={false}
          currentRole={currentRole}
          projectStatus={project?.status}
        />
      </div>

      <!-- Discussion Tab -->
      <div
        id="content-discussion"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <Discussions 
          projectId={projectId} 
          currentRole={currentRole || "Client"} 
          userId={currentUser?.id || ""} 
          userName={currentUser?.company_name || currentUser?.email || "Unknown User"} 
        />
      </div>

      <!-- Documents Tab -->
      <div id="content-documents" class="tab-content hidden">
        <PDFUpload
          projectId={projectId}
          fileType="media"
          currentRole={currentRole || undefined}
          projectStatus={project?.status}
        />
      </div>

      <!-- Proposal Tab -->
      <div id="content-proposal" class="tab-content hidden">
        <ProposalManager 
          projectId={projectId} 
          project={project} 
          authorProfile={projectAuthorProfile} 
          currentRole={currentRole || undefined}
          projectStatus={project?.status}
        />
      </div>

      <!-- Contract Tab -->
      <div
        id="content-contract"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="mb-6">
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Contract</h3>
          <p class="text-gray-500 dark:text-gray-400">
            It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose.
          </p>
          <p class="text-gray-500 dark:text-gray-400">
            It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose.
          </p>
          <p class="text-gray-500 dark:text-gray-400">
            It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose.
          </p>
          <p class="text-gray-500 dark:text-gray-400">
            It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose.
          </p>
        </div>
        

              
      {project?.status >= 30 && currentRole === "Client" && project?.status < 50 && (


      <div class="mt-8 rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
        <div class="mb-6">
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal Payment - 50% Deposit</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Pay 50% deposit to approve this proposal and begin work.
          </p>
          <button onclick="window.switchTab('discussion')" class="inline-flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700">To Request Edits Leave a Comment</button>
        </div>  
        
        
        <!-- Import PaymentForm component -->
        <DigitalSignature id="proposal-signature" required={true} width={1200} height={580} placeholder="Proposal Signature" />  

        <PaymentForm 
          invoiceId={parseInt(projectId)} 
          amount={0}
          currency="usd"
          paymentType="deposit"
          clientProfile={projectAuthorProfile}
        />

        
      </div>
      )}


        <!-- Placeholder Buttons -->
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
          <button
            class="flex h-32 w-full items-center justify-center rounded-lg border-2 border-dashed border-gray-300 bg-gray-50 px-4 py-6 text-center hover:border-gray-400 hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:border-gray-500 dark:hover:bg-gray-600"
          >
            <div class="text-center">
              <BoxIcon name="upload" class="mx-auto mb-2 h-8 w-8 text-gray-400" />
              <p class="text-sm font-medium text-gray-900 dark:text-white">Upload Contract</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">Click to upload contract file</p>
            </div>
          </button>
          
          <button
            class="flex h-32 w-full items-center justify-center rounded-lg border-2 border-dashed border-gray-300 bg-gray-50 px-4 py-6 text-center hover:border-gray-400 hover:bg-gray-100 dark:border-gray-600 dark:bg-gray-700 dark:hover:border-gray-500 dark:hover:bg-gray-600"
          >
            <div class="text-center">
              <BoxIcon name="file-text" class="mx-auto mb-2 h-8 w-8 text-gray-400" />
              <p class="text-sm font-medium text-gray-900 dark:text-white">View Contract</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">View current contract</p>
            </div>
          </button>
        </div>
      </div>

      <!-- Deposit Tab -->
      <div
        id="content-deposit"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="mb-6">
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Deposit Payment</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Secure your project with a deposit payment. This ensures we can begin work on your fire protection system.
          </p>
        </div>
        
        <!-- Deposit Payment Form -->
        <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
          <!-- Payment Information -->
          <div class="space-y-4">
            <div class="rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-600 dark:bg-gray-700">
              <h4 class="mb-2 font-medium text-gray-900 dark:text-white">Payment Details</h4>
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Project Total:</span>
                  <span class="font-medium text-gray-900 dark:text-white">$0.00</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Deposit (50%):</span>
                  <span class="font-medium text-green-600 dark:text-green-400">$0.00</span>
                </div>
                <hr class="border-gray-200 dark:border-gray-600" />
                <div class="flex justify-between">
                  <span class="font-medium text-gray-900 dark:text-white">Amount Due:</span>
                  <span class="font-bold text-lg text-green-600 dark:text-green-400">$0.00</span>
                </div>
              </div>
            </div>
            
            <!-- Payment Methods -->
            <div class="space-y-3">
              <h4 class="font-medium text-gray-900 dark:text-white">Payment Methods</h4>
              <div class="space-y-2">
                <label class="flex items-center space-x-3">
                  <input type="radio" name="payment-method" value="card" class="text-blue-600 focus:ring-blue-500" checked />
                  <BoxIcon name="credit-card" class="h-5 w-5 text-gray-400" />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Credit/Debit Card</span>
                </label>
                <label class="flex items-center space-x-3">
                  <input type="radio" name="payment-method" value="bank" class="text-blue-600 focus:ring-blue-500" />
                  <BoxIcon name="bank" class="h-5 w-5 text-gray-400" />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Bank Transfer</span>
                </label>
                <label class="flex items-center space-x-3">
                  <input type="radio" name="payment-method" value="check" class="text-blue-600 focus:ring-blue-500" />
                  <BoxIcon name="file-text" class="h-5 w-5 text-gray-400" />
                  <span class="text-sm text-gray-700 dark:text-gray-300">Check</span>
                </label>
              </div>
            </div>
          </div>
          
          <!-- Payment Form -->
          <div class="space-y-4">
            <div class="rounded-lg border border-gray-200 bg-white p-4 dark:border-gray-600 dark:bg-gray-800">
              <h4 class="mb-4 font-medium text-gray-900 dark:text-white">Payment Information</h4>
              
              <!-- Card Payment Form (shown by default) -->
              <div id="card-payment-form" class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Card Number</label>
                  <input 
                    type="text" 
                    placeholder="1234 5678 9012 3456"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Expiry Date</label>
                    <input 
                      type="text" 
                      placeholder="MM/YY"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    />
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">CVV</label>
                    <input 
                      type="text" 
                      placeholder="123"
                      class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                    />
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Cardholder Name</label>
                  <input 
                    type="text" 
                    placeholder="John Doe"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                  />
                </div>
              </div>
              
              <!-- Bank Transfer Form (hidden by default) -->
              <div id="bank-payment-form" class="space-y-4 hidden">
                <div class="text-sm text-gray-600 dark:text-gray-400">
                  <p class="mb-2">Please transfer the deposit amount to:</p>
                  <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                    <p><strong>Bank:</strong> Your Bank Name</p>
                    <p><strong>Account:</strong> 1234567890</p>
                    <p><strong>Routing:</strong> 987654321</p>
                    <p><strong>Reference:</strong> Project #{projectId}</p>
                  </div>
                </div>
              </div>
              
              <!-- Check Payment Form (hidden by default) -->
              <div id="check-payment-form" class="space-y-4 hidden">
                <div class="text-sm text-gray-600 dark:text-gray-400">
                  <p class="mb-2">Please mail your check to:</p>
                  <div class="bg-gray-50 dark:bg-gray-700 p-3 rounded-md">
                    <p><strong>Company Name</strong></p>
                    <p>123 Business Street</p>
                    <p>City, State 12345</p>
                    <p class="mt-2"><strong>Memo:</strong> Project #{projectId}</p>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Payment Button -->
            <button 
              class="w-full bg-green-600 text-white py-3 px-4 rounded-md font-medium hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors"
              onclick="processDepositPayment()"
            >
              <BoxIcon name="credit-card" class="mr-2 inline h-5 w-5" />
              Pay Deposit - $0.00
            </button>
            
            <p class="text-xs text-gray-500 dark:text-gray-400 text-center">
              Secure payment processing powered by Stripe
            </p>
          </div>
        </div>
      </div>

      <!-- Deliverables Tab -->
      <div
        id="content-deliverables"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="package" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Deliverables</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Final project deliverables will be displayed here.
          </p>
        </div>
      </div>

      <!-- Final Invoice Tab -->
      <div
        id="content-final-invoice"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="mb-6">
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Final Invoice - Balance Due</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Pay the remaining balance for your project.
          </p>
        </div>
        
        <!-- Payment Form for Final Invoice (Balance) -->
        <PaymentForm 
          invoiceId={parseInt(id ?? "0")} 
          amount={2000}
          currency="usd"
          paymentType="balance"
          clientProfile={projectAuthorProfile}
        />
      </div>

      {currentRole === "Admin" || currentRole === "Staff" ? (
      <!-- Activity Log Tab -->
      <div id="content-activity-log" class="tab-content hidden">
        <SimpleProjectLog projectId={projectId} />
      </div>
      ) : (
        ""
      )}
    </div>
  </SectionContainer>
</App>

<script define:vars={{ userRole: currentRole, projectData: project, currentUserData: currentUser }}>
window.PROJECT_USER_ROLE = userRole;
window.PROJECT_DATA = projectData;
window.CURRENT_USER_DATA = currentUserData;</script>

<script>
  // Tab switching functionality
  function switchTab(tabName: string) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.classList.remove("active", "bg-red-500", "text-white", "border-red-500");
      button.classList.add(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${tabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Add active class to selected tab button
    const selectedButton = document.getElementById(`tab-${tabName}`);
    if (selectedButton) {
      selectedButton.classList.remove(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
      selectedButton.classList.add("active", "bg-red-500", "text-white", "border-red-500");

      // Center the active button in the navigation
      selectedButton.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
        inline: "center",
      });
    }

    // Check if client is viewing proposal tab and update status if needed
    console.log("üìã [PROPOSAL-VIEW] Tab switched to:", tabName);
    console.log("üìã [PROPOSAL-VIEW] User role:", (window as any).PROJECT_USER_ROLE);
    
    if (tabName === "proposal" && (window as any).PROJECT_USER_ROLE === "Client") {
      const currentStatus = (window as any).PROJECT_DATA?.status || 0;
      const currentUserId = (window as any).CURRENT_USER_DATA?.id;
      const projectId = (window as any).PROJECT_DATA?.id;
      
      console.log("üìã [PROPOSAL-VIEW] Client viewing proposal tab, current status:", currentStatus);
      console.log("üìã [PROPOSAL-VIEW] Project data:", { projectId, currentUserId });
      
      // Update status to 40 (Proposal Viewed) if status is between 30-40
      if (currentStatus >= 20 && currentStatus < 40) {
        console.log("üìã [PROPOSAL-VIEW] Updating status from", currentStatus, "to 40 (Proposal Viewed)");
        
        if (currentUserId && projectId) {
          // Call update-status API
          fetch('/api/update-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
              projectId: projectId,
              status: 40,
              currentUserId: currentUserId,
              oldStatus: currentStatus
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              console.log("‚úÖ [PROPOSAL-VIEW] Status updated to 40 successfully");
              // Update the project data for future checks
              (window as any).PROJECT_DATA.status = 40;
              
              // Update UI elements using RefreshManager
              if ((window as any).refreshManager) {
                (window as any).refreshManager.updateField('status', 40);
                (window as any).refreshManager.updateField('status_name', 'Proposal Viewed');
              }
              
              // Show toast notification if available
              if (data.message && (window as any).showSuccess) {
                (window as any).showSuccess("Proposal Viewed", data.message);
              }
            } else {
              console.error("‚ùå [PROPOSAL-VIEW] Failed to update status:", data.error);
            }
          })
          .catch(error => {
            console.error("‚ùå [PROPOSAL-VIEW] Error updating status:", error);
          });
        } else {
          console.error("‚ùå [PROPOSAL-VIEW] Missing required data attributes:", { currentUserId, projectId });
        }
      } else {
        console.log("üìã [PROPOSAL-VIEW] No status update needed, current status:", currentStatus);
      }
    }

    // Update URL with tab parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (tabName === "project-form") {
      // Remove tab parameter for default tab
      currentUrl.searchParams.delete("tab");
    } else {
      // Add or update tab parameter
      currentUrl.searchParams.set("tab", tabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Get tab from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "deliverables",
      "final-invoice",
      "activity-log",
    ];
    const initialTab = validTabs.includes(tabFromUrl || "") ? tabFromUrl! : "project-form";

    // Switch to the initial tab
    switchTab(initialTab);
  });

  // Make switchTab globally available for other components
  (window as any).switchTab = switchTab;

  // Payment method switching functionality
  document.addEventListener("DOMContentLoaded", function() {
    const paymentMethodRadios = document.querySelectorAll('input[name="payment-method"]');
    const cardForm = document.getElementById('card-payment-form');
    const bankForm = document.getElementById('bank-payment-form');
    const checkForm = document.getElementById('check-payment-form');

    paymentMethodRadios.forEach(radio => {
      radio.addEventListener('change', function(this: HTMLInputElement) {
        // Hide all forms
        if (cardForm) cardForm.classList.add('hidden');
        if (bankForm) bankForm.classList.add('hidden');
        if (checkForm) checkForm.classList.add('hidden');

        // Show selected form
        if (this.value === 'card' && cardForm) {
          cardForm.classList.remove('hidden');
        } else if (this.value === 'bank' && bankForm) {
          bankForm.classList.remove('hidden');
        } else if (this.value === 'check' && checkForm) {
          checkForm.classList.remove('hidden');
        }
      });
    });
  });

  // Payment processing function
  function processDepositPayment() {
    const selectedMethodElement = document.querySelector('input[name="payment-method"]:checked') as HTMLInputElement;
    const selectedMethod = selectedMethodElement?.value;
    
    if (!selectedMethod) {
      alert('Please select a payment method');
      return;
    }

    // Get the amount (this would come from the proposal total in a real implementation)
    const amount = 0.00; // Placeholder - should be calculated from proposal
    
    console.log('Processing deposit payment:', {
      method: selectedMethod,
      amount: amount,
      projectId: (window as any).PROJECT_DATA?.id
    });

    // Show loading state
    const button = document.querySelector('button[onclick="processDepositPayment()"]') as HTMLButtonElement;
    if (button) {
      const originalText = button.innerHTML;
      button.innerHTML = '<BoxIcon name="loader" class="mr-2 inline h-5 w-5 animate-spin" />Processing...';
      button.disabled = true;

      // Simulate payment processing
      setTimeout(() => {
        button.innerHTML = originalText;
        button.disabled = false;
        
        // Show success message
        if ((window as any).showSuccess) {
          (window as any).showSuccess('Deposit payment processed successfully!');
        } else {
          alert('Deposit payment processed successfully!');
        }
      }, 2000);
    }
  }

  // Make payment function globally available
  (window as any).processDepositPayment = processDepositPayment;
</script>