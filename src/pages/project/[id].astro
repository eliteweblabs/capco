---
import App from "../../components/common/App.astro";
import SectionContainer from "../../components/common/SectionContainer.astro";
import Hero from "../../components/common/Hero.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import ProjectForm from "../../components/project/ProjectForm.astro";
import PDFUpload from "../../components/project/PDFUpload.astro";
import SimpleProjectLog from "../../components/project/SimpleProjectLog.astro";

// Para cambiar idioma de textos
import { getI18N } from "@/i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get the project ID from the URL parameter
const { id } = Astro.params;

// Check authentication
import { checkAuth } from "../../lib/auth";
import { supabase } from "../../lib/supabase";

const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Get the tab parameter from URL query string
const tabParam = Astro.url.searchParams.get("tab");
const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "deliverables",
  "final-invoice",
  "activity-log",
];
const defaultTab = validTabs.includes(tabParam || "") ? tabParam : "project-form";

console.log("üåê [PROJECT] Project ID:", id);
console.log("üåê [PROJECT] Authentication check:", { isAuth, hasUser: !!user, role });

// Redirect if not authenticated
if (!isAuth) {
  console.log("üåê [PROJECT] Not authenticated, redirecting to login");
  return Astro.redirect("/login");
}

console.log("üåê [PROJECT] User authenticated:", { userId: user?.id, userEmail: user?.email, role });

// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let projectAuthorProfile = null;
if (supabase && user) {
  // Get project data
  const { data: projectData, error: projectError } = await supabase
    .from("projects")
    .select("*")
    .eq("id", id)
    .single();

  if (projectError) {
    console.error("Error fetching project:", projectError);
    console.log("üåê [PROJECT] Project not found or no access, redirecting to dashboard");
    return Astro.redirect("/dashboard");
  } else {
    project = projectData;
    console.log("üåê [PROJECT] Project loaded:", project.title);

    // Get project author's profile data (not current user's profile)
    if (project.author_id) {
      const { data: authorProfileData, error: authorProfileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", project.author_id)
        .single();

      if (authorProfileError) {
        console.error("Error fetching project author profile:", authorProfileError);
      } else {
        projectAuthorProfile = authorProfileData;
        console.log(
          "üåê [PROJECT] Project author profile loaded:",
          projectAuthorProfile.company_name
        );
      }
    }

    // Get assigned user's profile data if project has an assigned user
    if (project.assigned_to_id) {
      const { data: assignedProfileData, error: assignedProfileError } = await supabase
        .from("profiles")
        .select("id, name, company_name")
        .eq("id", project.assigned_to_id)
        .single();

      if (assignedProfileError) {
        console.error("Error fetching assigned user profile:", assignedProfileError);
      } else {
        // Add assigned user name to the project data
        project.assigned_to_name = assignedProfileData.company_name || assignedProfileData.name;
        console.log("üåê [PROJECT] Assigned user profile loaded:", project.assigned_to_name);
      }
    } else {
      project.assigned_to_name = null;
    }
  }
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  console.log("üåê [PROJECT] No project data available, redirecting to dashboard");
  return Astro.redirect("/dashboard");
}

// Initialize with fallback status labels
let statusLabels: Record<number, string> = {
  10: "Specs Received",
  20: "Generating Proposal",
  30: "Proposal Shipped",
  40: "Proposal Viewed",
  50: "Proposal Signed Off",
  60: "Generating Deposit Invoice",
  70: "Deposit Invoice Shipped",
  80: "Deposit Invoice Viewed",
  90: "Deposit Invoice Paid",
  100: "Generating Submittals",
  110: "Submittals Shipped",
  120: "Submittals Viewed",
  130: "Submittals Signed Off",
  140: "Generating Final Invoice",
  150: "Final Invoice Shipped",
  160: "Final Invoice Viewed",
  170: "Final Invoice Paid",
  180: "Generating Final Deliverables",
  190: "Stamping Final Deliverables",
  200: "Final Deliverables Shipped",
  210: "Final Deliverables Viewed",
  220: "Project Complete",
};

// Note: Status labels will be updated client-side via JavaScript
// to ensure they're always current and handle any missing statuses

// Fallback to basic labels if no data from API
if (Object.keys(statusLabels).length === 0) {
  console.warn("No status labels from API, using fallback labels");
  statusLabels = {
    10: "Specs Received",
    20: "Generating Proposal",
    30: "Proposal Shipped",
    40: "Proposal Viewed",
    50: "Proposal Signed Off",
    60: "Generating Deposit Invoice",
    70: "Deposit Invoice Shipped",
    80: "Deposit Invoice Viewed",
    90: "Deposit Invoice Paid",
    100: "Generating Submittals",
    110: "Submittals Shipped",
    120: "Submittals Viewed",
    130: "Submittals Signed Off",
    140: "Generating Final Invoice",
    150: "Final Invoice Shipped",
    160: "Final Invoice Viewed",
    170: "Final Invoice Paid",
    180: "Generating Final Deliverables",
    190: "Stamping Final Deliverables",
    200: "Final Deliverables Shipped",
    210: "Final Deliverables Viewed",
    220: "Project Complete",
  };
}

// Get status color based on status code
function getStatusColor(status: number): string {
  if (status <= 50) return "blue"; // Early stages
  if (status <= 100) return "yellow"; // Invoice stages
  if (status <= 140) return "purple"; // Submittals
  if (status <= 180) return "orange"; // Final invoice
  if (status <= 220) return "green"; // Deliverables and complete
  return "gray"; // Unknown
}
---

<App title={i18n.SEO_TITLE} description={i18n.SEO_DESCRIPTION}>
  <script>
    // Client-side debugging
    console.log("üåê [PROJECT-CLIENT] Page loaded");
    console.log(
      "üåê [PROJECT-CLIENT] Project ID from URL:",
      window.location.pathname.split("/").pop()
    );
    console.log(
      "üåê [PROJECT-CLIENT] Current tab:",
      new URLSearchParams(window.location.search).get("tab")
    );
  </script>
  <Hero
    title={project?.address || project?.title || "Untitled Project"}
    description={`<span class="inline-flex items-center"><i class="bx bx-user mr-2 text-gray-500"></i>${
      projectAuthorProfile?.company_name || projectAuthorProfile?.name || "Unknown Author"
    }</span>`}
    statusLabel={project?.status
      ? statusLabels[project.status] || `Status ${project.status}`
      : undefined}
    statusColor={project?.status ? getStatusColor(project.status) : undefined}
    projectId={project?.id}
    currentStatus={project?.status}
    userRole={role || "Client"}
    projectTitle={project?.title || project?.address || "Project"}
    clientEmail={(projectAuthorProfile?.email || user?.email || "Client") as string}
    project={project}
  />
  <SectionContainer>
    <div class="flex items-center justify-between">
      <a
        href="/dashboard"
        class="inline-flex items-center rounded-lg bg-gray-500 px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-600"
      >
        <BoxIcon name="arrow-back" class="mr-2" />
        Back to Projects
      </a>
    </div>

    <!-- Tab Navigation -->
    <nav
      id="project-tab-nav"
      class="scrollbar-hide relative my-4 flex gap-1 overflow-x-auto whitespace-nowrap dark:border-gray-700"
      aria-label="Tabs"
    >
      <button
        id="tab-project-form"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('project-form')"
      >
        <BoxIcon name="edit" class="mr-2 inline h-4 w-4" />
        Project Form
      </button>
      <button
        id="tab-discussion"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('discussion')"
      >
        <BoxIcon name="message-rounded-dots" class="mr-2 inline h-4 w-4" />
        Discussion
      </button>
      <!-- {
        role === "Admin" || role === "Staff" ? (
          <button
            id="tab-comments"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('comments')"
          >
            <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
            Comments
          </button>
        ) : (
          ""
        )
      } -->
      <button
        id="tab-documents"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('documents')"
      >
        <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
        Documents
      </button>
      <button
        id="tab-proposal"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('proposal')"
      >
        <BoxIcon name="grid" class="mr-2 inline h-4 w-4" />
        Proposal
      </button>
      <button
        id="tab-deliverables"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deliverables')"
      >
        <BoxIcon name="package" class="mr-2 inline h-4 w-4" />
        Deliverables
      </button>
      <button
        id="tab-final-invoice"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('final-invoice')"
      >
        <BoxIcon name="receipt" class="mr-2 inline h-4 w-4" />
        Final Invoice
      </button>
      {role === "Admin" || role === "Staff" ? (

      <button
        id="tab-activity-log"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('activity-log')"
      >
        <BoxIcon name="history" class="mr-2 inline h-4 w-4" />
        Activity Log
      </button>
      ) : (
        ""
      )}
    </nav>

    <!-- Tab Content -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-1">
      <!-- Project Form Tab -->
      <div
        id="content-project-form"
        class="tab-content rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <ProjectForm
          project={project}
          projectId={id ?? ""}
          isNewProject={false}
          role={role}
          projectStatus={project?.status}
        />
      </div>

      <!-- Discussion Tab -->
      <div
        id="content-discussion"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div id="discussion-container" data-project-id={id}>
          <div class="mb-6 flex items-center justify-between">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">Project Discussion</h3>
            <button
              id="new-comment-btn"
              class="inline-flex items-center rounded-lg bg-red-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-red-700"
            >
              <BoxIcon name="plus" class="mr-2 h-4 w-4" />
              New Comment
            </button>
          </div>

          <!-- Comment Form (hidden by default) -->
          <div
            id="comment-form"
            class="mb-6 hidden rounded-lg border border-gray-200 p-4 dark:border-gray-700"
          >
            <textarea
              id="comment-message"
              placeholder="Write your comment here..."
              class="w-full resize-none rounded-lg border border-gray-300 p-3 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              rows="4"></textarea>
            
            {/* Admin/Staff Only Toggles */}
            {(role === "Admin" || role === "Staff") && (
              <div class="mt-3 flex flex-wrap gap-4 border-t border-gray-200 pt-3 dark:border-gray-600">
                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    id="internal-toggle"
                    class="h-4 w-4 rounded border-gray-300 text-red-600 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700"
                  />
                  <span class="text-sm text-gray-700 dark:text-gray-300">
                    <i class="bx bx-lock mr-1"></i>
                    Internal Only
                  </span>
                </label>
                
                <label class="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    id="sms-alert-toggle"
                    class="h-4 w-4 rounded border-gray-300 text-red-600 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700"
                  />
                  <span class="text-sm text-gray-700 dark:text-gray-300">
                    <i class="bx bx-mobile mr-1"></i>
                    SMS Alert
                  </span>
                </label>
              </div>
            )}
            
            <div class="mt-3 flex justify-end gap-2">
              <button
                id="cancel-comment-btn"
                class="px-4 py-2 text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200"
              >
                Cancel
              </button>
              <button
                id="submit-comment-btn"
                class="rounded-lg bg-red-600 px-4 py-2 text-white transition-colors hover:bg-red-700"
              >
                Post Comment
              </button>
            </div>
          </div>

          <!-- Comments List -->
          <div id="comments-list" class="space-y-4">
            <div class="py-8 text-center text-gray-500 dark:text-gray-400">
              <BoxIcon name="message-rounded-dots" class="mx-auto mb-4 h-12 w-12" />
              <p>Loading comments...</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Documents Tab -->
      <div id="content-documents" class="tab-content hidden">
        <PDFUpload
          projectId={id ?? ""}
          fileType="media"
          role={role || undefined}
          projectAuthorEmail={projectAuthorProfile?.email || user?.email || "admin@capco.com"}
          status={project?.status}
        />
      </div>

      <!-- Proposal Tab -->
      <div
        id="content-proposal"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="file-pdf" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Project proposal and estimates will be displayed here.
          </p>
        </div>
      </div>

      <!-- Deliverables Tab -->
      <div
        id="content-deliverables"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="package" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Deliverables</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Final project deliverables will be displayed here.
          </p>
        </div>
      </div>

      <!-- Final Invoice Tab -->
      <div
        id="content-final-invoice"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="receipt" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Final Invoice</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Final project invoice and billing information will be displayed here.
          </p>
        </div>
      </div>

      {role === "Admin" || role === "Staff" ? (
      <!-- Activity Log Tab -->
      <div id="content-activity-log" class="tab-content hidden">
        <SimpleProjectLog projectId={parseInt(id ?? "0")} />
      </div>
      ) : (
        ""
      )}
    </div>
  </SectionContainer>
</App>

<script define:vars={{ userRole: role }}>
window.PROJECT_USER_ROLE = userRole;</script>

<script>
  // Tab switching functionality
  function switchTab(tabName: string) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.classList.remove("active", "bg-red-500", "text-white", "border-red-500");
      button.classList.add(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${tabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Add active class to selected tab button
    const selectedButton = document.getElementById(`tab-${tabName}`);
    if (selectedButton) {
      selectedButton.classList.remove(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
      selectedButton.classList.add("active", "bg-red-500", "text-white", "border-red-500");

      // Center the active button in the navigation
      selectedButton.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
        inline: "center",
      });
    }

    // Update URL with tab parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (tabName === "project-form") {
      // Remove tab parameter for default tab
      currentUrl.searchParams.delete("tab");
    } else {
      // Add or update tab parameter
      currentUrl.searchParams.set("tab", tabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Get tab from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "deliverables",
      "final-invoice",
      "activity-log",
    ];
    const initialTab = validTabs.includes(tabFromUrl || "") ? tabFromUrl! : "project-form";

    console.log("üìã [Tabs] Initializing with tab:", initialTab);

    // Switch to the initial tab
    switchTab(initialTab);
  });

  // Form handling functions
  function buildProposal(projectId: string) {
    // Add build estimate logic here
    console.log("Building estimate for project:", projectId);
  }

  function editProposal(projectId: string) {
    // Add edit estimate logic here
    console.log("Editing estimate for project:", projectId);
  }

  // Discussion functionality
  let discussions: any[] = [];
  let currentProjectId = "";
  const userRole = (window as any).PROJECT_USER_ROLE || 'Client'; // Get role from global variable

  async function loadDiscussions(projectId: string) {
    try {
      const response = await fetch(`/api/get-project-discussions?projectId=${projectId}`);
      const data = await response.json();

      if (data.success) {
        discussions = data.discussions;
        renderDiscussions();
      } else {
        console.error("Failed to load discussions:", data.error);
        showDiscussionError("Failed to load discussions");
      }
    } catch (error) {
      console.error("Error loading discussions:", error);
      showDiscussionError("Failed to load discussions");
    }
  }

  function renderDiscussions() {
    const commentsList = document.getElementById("comments-list");
    if (!commentsList) return;

    console.log("üîç [DEBUG] renderDiscussions called with:", {
      userRole,
      discussionsCount: discussions.length,
      discussions: discussions.map(d => ({ id: d.id, internal: d.internal, author_id: d.author_id }))
    });

    if (discussions.length === 0) {
      commentsList.innerHTML = `
        <div class="text-center py-8 text-gray-500 dark:text-gray-400">
          <i class="bx bx-message-rounded-dots mx-auto mb-4 text-4xl"></i>
          <p>No comments yet. Be the first to start the discussion!</p>
        </div>
      `;
      return;
    }

    commentsList.innerHTML = discussions
      .map(
        (discussion) => `
      <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
        <div class="flex items-start justify-between mb-3">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center">
              <i class="bx bx-user text-red-600 dark:text-red-400 text-sm"></i>
            </div>
            <div>
              <h4 class="font-medium text-gray-900 dark:text-white text-sm">
                ${discussion.profiles?.company_name || discussion.profiles?.display_name || discussion.profiles?.name || discussion.profiles?.email?.split("@")[0] || `User ${discussion.author_id?.slice(0, 8)}...`}
              </h4>
              <p class="text-xs text-gray-500 dark:text-gray-400">
                ${new Date(discussion.created_at).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "short",
                  day: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </p>
            </div>
          </div>
          ${(() => {
            const shouldShow = (userRole === "Admin" || userRole === "Staff") && discussion.internal;
            console.log("üîç [DEBUG] Badge condition:", { userRole, discussionInternal: discussion.internal, shouldShow });
            return shouldShow ? `
              <div class="flex items-center space-x-2">
                <div class="inline-flex items-center px-2 py-1 bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-300 text-xs font-medium rounded-full" title="Internal Comment - Only visible to Admin and Staff">
                  <i class="bx bx-lock-alt mr-1"></i>
                  Internal
                </div>
              </div>
            ` : '';
          })()}
        </div>
        <div class="prose dark:prose-invert max-w-none">
          <p class="text-gray-700 dark:text-gray-300 text-sm whitespace-pre-wrap">
            ${discussion.message}
          </p>
        </div>
      </div>
    `
      )
      .join("");
  }

  function showDiscussionError(message: string) {
    const commentsList = document.getElementById("comments-list");
    if (commentsList) {
      commentsList.innerHTML = `
        <div class="text-center py-8 text-red-500">
          <i class="bx bx-error-circle mx-auto mb-4 text-4xl"></i>
          <p>${message}</p>
        </div>
      `;
    }
  }

  function toggleCommentForm() {
    console.log("üîî [DISCUSSION] toggleCommentForm called");
    const commentForm = document.getElementById("comment-form");
    const newCommentBtn = document.getElementById("new-comment-btn");

    console.log("üîî [DISCUSSION] Elements found:", {
      commentForm: !!commentForm,
      newCommentBtn: !!newCommentBtn,
    });

    if (commentForm && newCommentBtn) {
      const isHidden = commentForm.classList.contains("hidden");
      console.log("üîî [DISCUSSION] Form is hidden:", isHidden);

      if (isHidden) {
        commentForm.classList.remove("hidden");
        newCommentBtn.textContent = "Cancel";
        newCommentBtn.innerHTML = '<i class="bx bx-x mr-2 h-4 w-4"></i>Cancel';
        document.getElementById("comment-message")?.focus();
        console.log("üîî [DISCUSSION] Form shown");
      } else {
        commentForm.classList.add("hidden");
        newCommentBtn.textContent = "New Comment";
        newCommentBtn.innerHTML = '<i class="bx bx-plus mr-2 h-4 w-4"></i>New Comment';
        (document.getElementById("comment-message") as HTMLTextAreaElement).value = "";
        
        // Reset toggles if they exist
        const internalToggle = document.getElementById("internal-toggle") as HTMLInputElement;
        const smsAlertToggle = document.getElementById("sms-alert-toggle") as HTMLInputElement;
        if (internalToggle) internalToggle.checked = false;
        if (smsAlertToggle) smsAlertToggle.checked = false;
        
        console.log("üîî [DISCUSSION] Form hidden");
      }
    }
  }

  async function submitComment() {
    const messageInput = document.getElementById("comment-message") as HTMLTextAreaElement;
    const message = messageInput?.value?.trim();

    if (!message) {
      alert("Please enter a message");
      return;
    }

    // Get toggle values (only if elements exist - for Admin/Staff only)
    const internalToggle = document.getElementById("internal-toggle") as HTMLInputElement;
    const smsAlertToggle = document.getElementById("sms-alert-toggle") as HTMLInputElement;
    
    const isInternal = internalToggle?.checked || false;
    const smsAlert = smsAlertToggle?.checked || false;

    const submitBtn = document.getElementById("submit-comment-btn") as HTMLButtonElement;
    if (submitBtn) {
      submitBtn.textContent = "Posting...";
      submitBtn.disabled = true;
    }

    try {
      const response = await fetch("/api/add-discussion", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          projectId: currentProjectId,
          message: message,
          internal: isInternal,
          sms_alert: smsAlert,
        }),
      });

      const data = await response.json();

      if (data.success) {
        // Add new comment to the beginning of the list
        discussions.unshift(data.discussion);
        renderDiscussions();

        // Reset form
        if (messageInput) messageInput.value = "";
        
        // Reset toggles if they exist
        const internalToggle = document.getElementById("internal-toggle") as HTMLInputElement;
        const smsAlertToggle = document.getElementById("sms-alert-toggle") as HTMLInputElement;
        if (internalToggle) internalToggle.checked = false;
        if (smsAlertToggle) smsAlertToggle.checked = false;
        
        toggleCommentForm();
      } else {
        alert("Failed to post comment: " + data.error);
      }
    } catch (error) {
      console.error("Error posting comment:", error);
      alert("Failed to post comment");
    } finally {
      if (submitBtn) {
        submitBtn.textContent = "Post Comment";
        submitBtn.disabled = false;
      }
    }
  }

  // Initialize discussion functionality when discussion tab is shown
  function initializeDiscussion() {
    const discussionContainer = document.getElementById("discussion-container");
    if (discussionContainer) {
      currentProjectId = discussionContainer.dataset.projectId || "";
      if (currentProjectId) {
        loadDiscussions(currentProjectId);
      }
    }

    // Remove existing event listeners to prevent duplicates
    const newCommentBtn = document.getElementById("new-comment-btn");
    const cancelCommentBtn = document.getElementById("cancel-comment-btn");
    const submitCommentBtn = document.getElementById("submit-comment-btn");

    if (newCommentBtn) {
      // Remove all existing event listeners by cloning the node
      const newBtn = newCommentBtn.cloneNode(true) as HTMLButtonElement;
      newCommentBtn.parentNode?.replaceChild(newBtn, newCommentBtn);
      
      // Add single clean event listener
      newBtn.addEventListener("click", function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log("üîî [DISCUSSION] New comment button clicked!");
        toggleCommentForm();
      });
    }

    if (cancelCommentBtn) {
      cancelCommentBtn.removeEventListener("click", toggleCommentForm);
      cancelCommentBtn.addEventListener("click", toggleCommentForm);
    }

    if (submitCommentBtn) {
      submitCommentBtn.removeEventListener("click", submitComment);
      submitCommentBtn.addEventListener("click", submitComment);
    }

    console.log("üîî [DISCUSSION] Event listeners attached");
  }

  // Create enhanced switchTab function that initializes discussion
  function enhancedSwitchTab(tabName: string) {
    switchTab(tabName);

    if (tabName === "discussion") {
      // Small delay to ensure DOM is ready
      setTimeout(initializeDiscussion, 100);
    }
  }

  // Also initialize discussion functionality on page load if discussion tab is active
  document.addEventListener("DOMContentLoaded", function () {
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");

    if (tabFromUrl === "discussion") {
      console.log("üîî [DISCUSSION] Discussion tab active on page load, initializing...");
      setTimeout(initializeDiscussion, 200);
    }
  });

  // Make functions globally available
  (window as any).switchTab = enhancedSwitchTab;
  (window as any).buildProposal = buildProposal;
  (window as any).editProposal = editProposal;
</script>
