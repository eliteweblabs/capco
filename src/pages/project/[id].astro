---
// Define requireAuthRedirect
const requireAuthRedirect = "/auth/login";
// Make sure to check above value before redirecting
import { checkAuth } from "../../lib/auth";
// Handle OAuth callback if code is present
const { currentUser, session, supabase } = await checkAuth(Astro.cookies);
// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalClasses } from "../api/global/global-classes.ts";
const { globalInputClasses, primaryTextClasses, secondaryTextClasses } = globalClasses();

const currentRole = currentUser?.profile?.role;
const { id } = Astro.params;
console.log("üèóÔ∏è [PROJECT] Project ID:", id);
import App from "../../components/common/App.astro";
import HeroProject from "../../components/common/HeroProject.astro";
import SlidingPillNav from "../../components/common/SlidingPillNav.astro";
import TabDocuments from "../../components/project/TabDocuments.astro";
import TabDiscussions from "../../components/project/TabDiscussions.astro";
import TabProjectForm from "../../components/project/TabProjectForm.astro";
import TabProposal from "../../components/project/TabProposal.astro";
import TabContract from "../../components/project/TabContract.astro";
import TabDeposit from "../../components/project/TabDeposit.astro";
import TabFinalInvoice from "../../components/project/TabFinalInvoice.astro";
import TabActivityLog from "../../components/project/TabActivityLog.astro";
import TabGeneratePdf from "../../components/project/TabGeneratePdf.astro";
import "../../lib/refresh-manager.ts";

const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "activity-log",
  "generate-pdf",
  "deliverables",
  "final-invoice",
];

const statusParam = Astro.url.searchParams.get("status");
const defaultTab = validTabs.includes(statusParam || "")
  ? statusParam || "project-form"
  : "project-form";
const activeTabIndex = validTabs.indexOf(defaultTab);

// Track which tab should load content server-side

// Fetch project data and project author profile - RLS will handle authorization
let project: any = null;
// let invoiceData = null;

// Status-related variables (will be defined after data fetching)

// Debug authentication and ID (can be removed once working)
// console.log("üîç [PROJECT] Debug info:", {
//   id,
//   hasCurrentUser: !!currentUser,
//   currentUserId: currentUser?.id,
//   currentRole: currentUser?.profile?.role,
//   url: Astro.url.href,
//   cookies: Astro.request.headers.get("Cookie") ? "Present" : "Missing",
// });

// Fetch single project using the API endpoint

if (id) {
  try {
    const baseUrl = Astro.url.origin;
    const apiUrl = `${baseUrl}/api/projects/get?id=${id}`;

    console.log("üèóÔ∏è [PROJECT] Fetching project from API:", apiUrl);
    const response = await fetch(apiUrl, {
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    console.log("üèóÔ∏è [PROJECT] Response status:", response.status);

    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [PROJECT] Data:", data);
      if (data.data) {
        project = data.data;
        console.log("‚úÖ [PROJECT] Project loaded:", project?.title);
      } else {
        console.error("üèóÔ∏è [PROJECT] API returned error:", data.error);
        return Astro.redirect("/dashboard");
      }
    } else {
      console.error("üèóÔ∏è [PROJECT] Error fetching project:", response.status, response.statusText);
      return Astro.redirect("/dashboard");
    }
  } catch (error) {
    console.error("üèóÔ∏è [PROJECT] Error fetching project:", error);

    return Astro.redirect("/dashboard");
  }
} else {
  console.error("üèóÔ∏è [PROJECT] No project ID provided");
  return Astro.redirect("/dashboard");
}

const currentStatusInt = project?.status;
let currentStatusName;

// Status-related variables
let currentStatusTab: string | null = null;
let currentStatusColor = "gray";
let currentStatusProjectAction: string | null = null;

// Initialize data arrays (same as dashboard)
// Fetch project statuses using the unified API (POST to avoid URL length limits)
const statusResponse = await fetch(`${Astro.url.origin}/api/status/get`, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
  body: JSON.stringify({ project }),
});

if (!statusResponse.ok) {
  console.error(
    "‚ùå [PROJECT-PAGE] Status API failed:",
    statusResponse.status,
    statusResponse.statusText
  );
  throw new Error(`Status API failed: ${statusResponse.status}`);
}

const statusResponseData = await statusResponse.json();
const statusData = statusResponseData.statuses || [];
const statusOptions = statusResponseData.selectOptions || [];

// Get current status data by keying into the project status code (API already handles role-based filtering)
if (currentStatusInt && statusData[currentStatusInt]) {
  const currentStatusObj = statusData[currentStatusInt];
  // Use the role-based values directly from the API (no additional filtering needed)
  currentStatusName = currentStatusObj.current.statusName;
  currentStatusTab = currentStatusObj.current.statusTab;
  currentStatusProjectAction = currentStatusObj.current.statusAction;
  currentStatusColor = currentStatusObj.current.statusColor || "gray";
  // search currentStatusProjectAction for "status=" + statusParam
  const statusParamIndex = currentStatusProjectAction?.indexOf("status=" + statusParam) || 0;
  if (statusParamIndex !== -1 && currentStatusProjectAction) {
    // remove HTML tags from currentStatusProjectAction
    // currentStatusProjectAction = currentStatusProjectAction.replace(/<[^>]*>?/g, "");
    currentStatusProjectAction = null;
  }
}
---

<App
  {currentUser}
  {project}
  title={project?.title || "Untitled Project"}
  description={project?.authorProfile?.companyName || "Unknown Author"}
  {session}
  {supabase}
  supabaseUrl={import.meta.env.SUPABASE_URL}
  isBackend={true}
  {id}
  globalCompanyName={project?.authorProfile?.companyName}
  globalCompanySlogan={project?.authorProfile?.slogan}
  globalCompanyAddress={project?.authorProfile?.address}
  globalCompanyPhone={project?.authorProfile?.phone}
  globalCompanyEmail={project?.authorProfile?.email}
  globalCompanyWebsite={project?.authorProfile?.website}
  globalCompanyLogo={project?.authorProfile?.logo}
  globalCompanyLogoDark={project?.authorProfile?.logoDark}
  globalCompanyLogoLight={project?.authorProfile?.logoLight}
  {globalInputClasses}
  {primaryTextClasses}
  {secondaryTextClasses}
>
  <HeroProject
    title={project?.address || project?.title || "Untitled Project"}
    description={currentUser?.profile?.role === "Client"
      ? project?.createdAt
        ? "<b>Created:</b> " + new Date(project.createdAt).toLocaleDateString()
        : "Unknown Date"
      : project?.authorProfile?.companyName + " ‚Üí " + project?.authorProfile?.email ||
        "Unknown Author"}
    statusColor={currentStatusColor}
    {currentUser}
    currentStatusInt={currentStatusInt.toString()}
    currentStatusName={currentStatusName || undefined}
    {project}
    statusesOptions={statusOptions}
    currentStatusTab={currentStatusTab || undefined}
    {secondaryTextClasses}
    {primaryTextClasses}
    {globalInputClasses}
  />

  <!-- Tab Navigation -->
  <SlidingPillNav
    navId="project-tab-nav"
    navClass="my-4 dark:border-gray-700"
    activeItem={activeTabIndex}
    {currentUser}
    items={[
      {
        id: "status-project-form",
        label: "Project Form",
        icon: "edit",
        variant: "tab",
        onclick: "window.switchTab('project-form')",
      },
      {
        id: "status-discussion",
        label: "Discussion",
        icon: "message-rounded-dots",
        variant: "tab",
        dataAttributes: { "data-count": "0" },
        onclick: "window.switchTab('discussion')",
      },
      {
        id: "status-documents",
        label: "Documents",
        icon: "file",
        variant: "tab",
        onclick: "window.switchTab('documents')",
      },
      {
        id: "status-proposal",
        label: "Proposal",
        icon: "grid",
        variant: "tab",
        onclick: "window.switchTab('proposal')",
      },
      {
        id: "status-contract",
        label: "Contract",
        icon: "pencil",
        variant: "tab",
        onclick: "window.switchTab('contract')",
      },
      {
        id: "status-deposit",
        label: "Deposit",
        icon: "credit-card",
        variant: "tab",
        onclick: "window.switchTab('deposit')",
      },
      {
        id: "status-activity-log",
        label: "Activity Log",
        icon: "history",
        variant: "tab",
        onclick: "window.switchTab('activity-log')",
        clientHide: true,
      },
      {
        id: "status-generate-pdf",
        label: "Generate PDF",
        icon: "adobe",
        variant: "tab",
        onclick: "window.switchTab('generate-pdf')",
        clientHide: true,
      },
    ]}
  />
  <!-- Tab Content -->
  <!-- <div class="grid grid-cols-1 gap-6 lg:grid-cols-1"> -->
  <!-- Project Form Tab -->

  <div
    class="transition-all duration-200 transition: 0.3s cubic-bezier(0.4, 0, 0.2, 1) border-2 border-primary-200 dark:border-primary-800"
  >
    <TabProjectForm
      {project}
      {currentUser}
      projectStatus={currentStatusInt}
      projectStatusLabel={currentStatusName || undefined}
      {globalInputClasses}
      {secondaryTextClasses}
      {primaryTextClasses}
    />

    <!-- Discussion Tab -->

    <TabDiscussions
      {project}
      {currentUser}
      {globalInputClasses}
      {secondaryTextClasses}
      {primaryTextClasses}
    />

    <!-- Documents Tab -->
    <TabDocuments
      {project}
      {currentUser}
      projectStatus={currentStatusInt}
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {statusData}
    />

    <!-- Proposal Tab -->
    <TabProposal
      {project}
      projectStatus={currentStatusInt}
      {currentUser}
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {statusData}
    />

    <!-- Contract Tab -->
    <TabContract
      {project}
      {currentUser}
      projectStatus={currentStatusInt}
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {statusData}
    />

    <!-- Deposit Tab -->
    <TabDeposit
      {project}
      {currentUser}
      projectStatus={currentStatusInt}
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {statusData}
    />

    <!-- Final Invoice Tab -->
    <TabFinalInvoice
      {project}
      projectStatus={currentStatusInt}
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {statusData}
    />

    <TabActivityLog
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {currentUser}
      {project}
      {statusData}
    />

    <TabGeneratePdf
      {secondaryTextClasses}
      {primaryTextClasses}
      {globalInputClasses}
      {project}
      {currentUser}
      {statusData}
    />
  </div>
</App>

<script
  type="module"
  define:vars={{
    project,
    currentUser,
    currentStatusProjectAction,
    baseUrl: Astro.url.origin,
    statusData,
  }}
  is:inline
>
  const currentStatus = project?.status || 0;
  const projectId = project?.id;
  const currentRole = currentUser?.profile?.role;
  // Tab switching functionality

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Check for project action modal first
    checkProjectActionModal();
  });

  // Check for project action modal on page load
  function checkProjectActionModal() {
    console.log("üîç [PROJECT] Checking for project action:", currentStatusProjectAction);

    if (currentStatusProjectAction && currentStatusProjectAction.trim() !== "") {
      console.log("üöÄ [PROJECT] Found project action, showing modal:", currentStatusProjectAction);

      // Show modal with project action content
      if (typeof window.showModal === "function") {
        window.showModal(
          "info",
          "Project Action Required",
          currentStatusProjectAction,
          2000 // No auto-hide
        );
      } else {
        // Fallback alert if modal function not available
        alert(`Project Status Update:\n\n${currentStatusProjectAction}`);
      }
    } else {
      console.log("üîç [PROJECT] No project action to display");
    }
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Check for project action modal first
    checkProjectActionModal();

    // Load discussion count for status-discussion tab
    if (projectId) {
      try {
        // Inline discussion count loading
        fetch(`/api/discussions/get?projectId=${projectId}`)
          .then((response) => response.json())
          .then((result) => {
            if (result.success && result.incompleteCount !== undefined) {
              // Update the count bubble
              const countElement = document.querySelector("#status-discussion .count-bubble");
              if (countElement) {
                countElement.textContent = result.incompleteCount;
                countElement.style.display = result.incompleteCount > 0 ? "inline-flex" : "none";
              }
              console.log("üí¨ Discussion count updated:", result.incompleteCount);
            }
          })
          .catch((error) => {
            console.error("Error loading discussion count:", error);
          });
      } catch (error) {
        console.error("Error loading discussion count:", error);
      }
    }

    // Get status from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const statusFromUrl = urlParams.get("status");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "final-invoice",
      "activity-log",
      "generate-pdf",
      "deliverables",
    ];

    // Parse status name and parameters
    let initialTab = "project-form";
    if (statusFromUrl && validTabs.includes(statusFromUrl)) {
      initialTab = statusFromUrl;
      console.log("üîî [PROJECT-PAGE] Setting initial tab:", initialTab);
    }

    // Switch to the initial tab - wait for switchTab to be defined
    const trySwitchTab = () => {
      if (window.switchTab) {
        window.switchTab(initialTab);
      } else {
        setTimeout(trySwitchTab, 50);
      }
    };
    trySwitchTab();
  });
</script>

<script>
  // Global tab switching function - source of truth for all tab navigation
  (window as any).switchTab = async function (tabName: string) {
    console.log(`üîÑ [SWITCH-TAB] Switching to: ${tabName}`);

    // Parse tab name and parameters
    const [baseTabName] = tabName.split("&");

    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${baseTabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");

      // Try to call the initialization function if it exists (e.g., initializeDiscussion)
      const initFunc = (window as any)[
        `initialize${baseTabName.charAt(0).toUpperCase() + baseTabName.slice(1)}`
      ];
      if (typeof initFunc === "function") {
        console.log(`üîÑ [SWITCH-TAB] Found initialization function for ${baseTabName}`);
        try {
          await initFunc();
        } catch (error) {
          console.error(`‚ùå [SWITCH-TAB] Error initializing ${baseTabName}:`, error);
        }
      }
    }

    // Update URL with status parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (baseTabName === "project-form") {
      // Remove status parameter for default tab
      currentUrl.searchParams.delete("status");
    } else {
      // Add or update status parameter with only the base tab name
      currentUrl.searchParams.set("status", baseTabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());

    console.log(`‚úÖ [SWITCH-TAB] Switched to: ${baseTabName}`);
  };

  // Initialize Discussion tab function
  (window as any).initializeDiscussion = async function () {
    console.log("üé¨ [INIT-DISCUSSION] Initializing discussion tab...");

    // Find the discussions container
    const discussionsContainer = document.getElementById("content-discussion");
    if (!discussionsContainer) {
      console.error("‚ùå [INIT-DISCUSSION] Discussions container not found");
      return;
    }

    // Call the initialization function if it exists
    if (typeof (window as any).initializeDiscussions === "function") {
      console.log("üé¨ [INIT-DISCUSSION] Calling initializeDiscussions");
      try {
        await (window as any).initializeDiscussions();
        console.log("‚úÖ [INIT-DISCUSSION] Discussion system initialized");
      } catch (error) {
        console.error("‚ùå [INIT-DISCUSSION] Error initializing discussions:", error);
      }
    } else {
      console.error("‚ùå [INIT-DISCUSSION] initializeDiscussions function not found");
    }
  };
</script>
