---
import App from "../../components/common/App.astro";
import SectionContainer from "../../components/common/SectionContainer.astro";
import HeroProject from "../../components/common/HeroProject.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import TabDocuments from "../../components/project/TabDocuments.astro";
import Discussions from "../../components/project/Discussions.astro";
import TabProjectForm from "../../components/project/TabProjectForm.astro";
import TabProposal from "../../components/project/TabProposal.astro";
import TabContract from "../../components/project/TabContract.astro";
import TabDeposit from "../../components/project/TabDeposit.astro";
import TabFinalInvoice from "../../components/project/TabFinalInvoice.astro";
import TabActivityLog from "../../components/project/TabActivityLog.astro";
import TabFinalDocuments from "../../components/project/TabFinalDocuments.astro";
import { getI18N } from "@/i18n";
import { supabase } from "../../lib/supabase";
import { supabaseAdmin } from "../../lib/supabase-admin";
import "../../lib/refresh-manager.ts";
import { filteredStatusObj } from "../../pages/api/process-client-status";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get the project ID from the URL parameter
const { id } = Astro.params;

console.log("üöÄ [PROJECT] Front matter starting execution for project ID:", id);

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../../lib/auth";
const { currentUser = undefined, currentRole = "Client" } = await checkAuth(Astro.cookies);

// Removed getAuthorInfoServer function - using direct database queries for better performance

// Get the tab parameter from URL query string
const tabParam = Astro.url.searchParams.get("tab");
const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "deliverables",
  "final-invoice",
  "activity-log",
];
const defaultTab = validTabs.includes(tabParam || "") ? tabParam : "project-form";

// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let authorProfile = null;
// let invoiceData = null;
let totalAmount = 0;
let invoiceId = "0";
let statusesResult: any = null;
let statuses: any[] = [];

// Status-related variables (will be defined after data fetching)
let projectId = "";
let currentStatusObj: any = {};
let currentStatusTab: string | null = null;
let currentStatusSlug: string | null = null;
let currentStatusName: string | null = null;
let currentStatusInt = 0;
let currentStatusColor = "gray";
let currentStatusProjectAction: string | null = null;
let statusesObject: any = {};

// console.log("üöÄ [PROJECT] About to start database queries, supabase available:", !!supabase);
// console.log("üöÄ [PROJECT] Supabase object:", supabase);
// console.log("üöÄ [PROJECT] SupabaseAdmin object:", supabaseAdmin);

if (supabase) {
  // OPTIMIZED: Run all database queries in parallel for much faster loading
  const [projectResult, invoiceResult, statusesResultData] = await Promise.all([
    // 1. Get project data
    supabase.from("projects").select("*").eq("id", id).single(),

    // 2. Get invoice data (parallel with project query)
    supabase
      .from("invoices")
      .select("id, catalog_line_items, status, project_id")
      .eq("project_id", id)
      .single(),

    // 3. Get status labels (parallel with other queries)
    supabase
      .from("project_statuses")
      .select(
        "status_code, admin_status_name, client_status_name, project_action, client_status_tab, admin_status_tab"
      )
      .order("status_code"),
  ]);

  // Assign the statuses result
  statusesResult = statusesResultData;

  // console.log("üîç [PROJECT-PAGE] Database query results:", {
  //   statusesResult: statusesResult,
  //   statusesError: statusesResult?.error,
  //   statusesData: statusesResult?.data,
  //   statusesLength: statusesResult?.data?.length || 0,
  // });

  project = projectResult.data;
  projectId = project?.id?.toString() || id || "";

  // Convert statuses array to object for easier lookup
  statusesObject = (statusesResult?.data || []).reduce((acc: any, status: any) => {
    acc[status.status_code] = status;
    return acc;
  }, {});

  currentStatusObj = filteredStatusObj(statusesObject[project.status], currentRole || "Client");
  currentStatusTab = currentStatusObj.status_tab || null;
  currentStatusSlug = currentStatusObj.status_slug || null;
  currentStatusName = currentStatusObj.status_name || null;
  currentStatusInt = project.status || 0;
  currentStatusColor = currentStatusObj.status_color || "gray";
  currentStatusProjectAction = currentStatusObj.project_action || null;

  // Define variables for component props

  // Convert statusesObject back to array for components that expect it
  statuses = Object.values(statusesObject);

  // console.log("üîç [PROJECT] Current status object:", currentStatusObj);
  // console.log("üîç [PROJECT] Current status tab:", currentStatusTab);
  // console.log("üîç [PROJECT] Current status slug:", currentStatusSlug);
  // console.log("üîç [PROJECT] Current status name:", currentStatusName);
  // console.log("üîç [PROJECT] Current status int:", currentStatusInt);
  // console.log("üîç [PROJECT] Current status color:", currentStatusColor);
  // console.log("üîç [PROJECT] Current status project action:", currentStatusProjectAction);
  // Check project query result
  if (projectResult.error) {
    console.error("Error fetching project:", projectResult.error);
    console.log("üåê [PROJECT] Project not found or no access, redirecting to dashboard");
    return Astro.redirect("/dashboard");
  }

  // console.log("üîç [PROJECT] Project data loaded:", {
  //   id: project.id,
  //   title: project.title,
  //   author_id: project.author_id,
  //   assigned_to_id: project.assigned_to_id,
  //   hasAuthorId: !!project.author_id,
  // });

  // Process invoice data
  if (!invoiceResult.error && invoiceResult.data) {
    invoiceId = invoiceResult.data.id.toString();
    // invoiceData = invoiceResult.data;

    // Calculate total by looping through catalog line items
    if (
      invoiceResult.data.catalog_line_items &&
      Array.isArray(invoiceResult.data.catalog_line_items)
    ) {
      totalAmount = invoiceResult.data.catalog_line_items.reduce((sum: number, item: any) => {
        const quantity = parseFloat(item.quantity) || 0;
        const unitPrice = parseFloat(item.unit_price) || 0;
        return sum + quantity * unitPrice;
      }, 0);

      // Convert to cents for Stripe (multiply by 100)
      totalAmount = Math.round(totalAmount * 100);
    }
  } else {
    // No invoice found for this project
    invoiceId = "0";
  }

  // Fallback to hardcoded amount if no invoice data found
  if (totalAmount === 0) {
    totalAmount = 2000;
  }

  // OPTIMIZED: Get author and assigned user profiles in parallel (only if needed)
  // console.log("üîç [PROJECT] Setting up profile queries:", {
  //   hasAuthorId: !!project.author_id,
  //   authorId: project.author_id,
  //   hasAssignedId: !!project.assigned_to_id,
  //   assignedId: project.assigned_to_id,
  // });

  if (project.author_id || project.assigned_to_id) {
    const profileQueries = [];

    if (project.author_id) {
      // console.log("üîç [PROJECT] Adding author profile query for:", project.author_id);
      profileQueries.push(
        supabase
          .from("profiles")
          .select("id, company_name, role")
          .eq("id", project.author_id)
          .maybeSingle()
      );
    }

    if (project.assigned_to_id) {
      profileQueries.push(
        supabase
          .from("profiles")
          .select("id, company_name, role")
          .eq("id", project.assigned_to_id)
          .maybeSingle()
      );
    }

    const profileResults = await Promise.all(profileQueries);

    // Process author profile
    // console.log("üîç [PROJECT] Processing author profile:", {
    //   hasAuthorId: !!project.author_id,
    //   authorId: project.author_id,
    //   profileResultsLength: profileResults.length,
    //   profileResults: profileResults,
    // });

    if (project.author_id && profileResults[0]) {
      const profileData = profileResults[0].data;
      const profileError = profileResults[0].error;

      // console.log("üîç [PROJECT] Profile data:", {
      //   profileData,
      //   profileError,
      //   hasData: !!profileData,
      //   hasError: !!profileError,
      //   currentRole,
      // });

      if (profileData && !profileError) {
        // Get email from auth system
        let authorEmail = "";
        if (supabaseAdmin) {
          try {
            const { data: authData, error: authError } = await supabaseAdmin.auth.admin.getUserById(
              project.author_id
            );
            if (!authError && authData.user) {
              authorEmail = authData.user.email || "";
            }
          } catch (error) {
            console.error("Error fetching author email:", error);
          }
        }

        authorProfile = {
          id: profileData.id,
          display_name: profileData.company_name || "Unknown User",
          role: profileData.role || "Unknown",
          company_name: profileData.company_name,
          email: authorEmail,
          profile: profileData,
        };
      } else {
        authorProfile = {
          id: project.author_id,
          display_name: "Unknown User",
          role: "Unknown",
          company_name: null,
          email: "",
          profile: null,
        };
      }
    }

    // Process assigned user profile
    if (project.assigned_to_id) {
      const assignedIndex = project.author_id ? 1 : 0;
      const assignedResult = profileResults[assignedIndex];

      if (assignedResult?.data) {
        project.assigned_to_name = assignedResult.data.company_name || assignedResult.data.id;
      } else {
        project.assigned_to_name = null;
      }
    }
  }
} else {
  console.error("üöÄ [PROJECT] Supabase not available - cannot fetch data");
  console.error("üöÄ [PROJECT] This will cause the page to fail");
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}
---

<App title={i18n.SEO_TITLE} description={i18n.SEO_DESCRIPTION} requireAuth={true}>
  <HeroProject
    title={project?.address || project?.title || "Untitled Project"}
    description={`<div class="space-y-1">
      <div class="inline-flex items-center">
        <i class="bx bx-user mr-2 text-gray-500"></i>
        <span class="font-medium">${authorProfile?.company_name || "Unknown Author"}</span>
      </div>
      <div class="text-sm text-gray-600 dark:text-gray-400">
        ${authorProfile?.display_name ? `<br/>${authorProfile.display_name}` : ""}
      </div>
    </div>`}
    statusColor={currentStatusColor}
    projectId={projectId}
    currentStatusInt={currentStatusInt.toString()}
    currentStatusName={currentStatusName || undefined}
    currentRole={currentRole || "Client"}
    project={project}
    statuses={statusesObject}
    authorProfile={authorProfile}
    currentStatusTab={currentStatusTab || undefined}
  />
  <SectionContainer>
    <!-- Tab Navigation -->
    <nav
      id="project-tab-nav"
      class="scrollbar-hide relative my-4 flex gap-1 overflow-x-auto whitespace-nowrap dark:border-gray-700"
      aria-label="Tabs"
    >
      <button
        id="tab-project-form"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('project-form')"
      >
        <BoxIcon name="edit" class="mr-2 inline h-4 w-4" />
        Project Form
      </button>
      <button
        id="tab-discussion"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('discussion')"
        data-count="0"
      >
        <BoxIcon name="message-rounded-dots" class="mr-2 inline h-4 w-4" />
        Discussion
        <span
          class="incomplete-comments-count absolute -right-2 -top-2 h-5 w-5 items-center justify-center rounded-full border border-blue-500 bg-white text-xs font-medium text-blue-500 hidden"
        >
          0
        </span>
      </button>
      <!-- {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <button
            id="tab-comments"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('comments')"
          >
            <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
            Comments
          </button>
        ) : (
          ""
        )
      } -->
      <button
        id="tab-documents"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('documents')"
      >
        <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
        Documents
      </button>
      <button
        id="tab-proposal"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('proposal')"
      >
        <BoxIcon name="grid" class="mr-2 inline h-4 w-4" />
        Proposal
      </button>
      <button
        id="tab-contract"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('contract')"
      >
        <BoxIcon name="pencil" class="mr-2 inline h-4 w-4" />
        Contract
      </button>
      <button
        id="tab-deposit"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deposit')"
      >
        <BoxIcon name="credit-card" class="mr-2 inline h-4 w-4" />
        Deposit
      </button>
      <button
        id="tab-deliverables"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deliverables')"
      >
        <BoxIcon name="package" class="mr-2 inline h-4 w-4" />
        Deliverables
      </button>
      <button
        id="tab-final-invoice"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('final-invoice')"
      >
        <BoxIcon name="receipt" class="mr-2 inline h-4 w-4" />
        Final Invoice
      </button>
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <button
            id="tab-activity-log"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('activity-log')"
          >
            <BoxIcon name="history" class="mr-2 inline h-4 w-4" />
            Activity Log
          </button>
        ) : (
          ""
        )
      }
    </nav>

    <!-- Tab Content -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-1">
      <!-- Project Form Tab -->
      <TabProjectForm
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
      />

      <!-- Discussion Tab -->

      <Discussions
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
        client:load={defaultTab === "discussion"}
      />

      <!-- Documents Tab -->
      <TabDocuments
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        fileType="media"
        client:visible
      />

      <!-- Proposal Tab -->
      <TabProposal
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        currentUser={currentUser}
        client:visible
      />

      <!-- Contract Tab -->
      <TabContract
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        client:visible
      />

      <!-- Deposit Tab -->
      <TabDeposit
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        invoiceId={invoiceId || "0"}
        totalAmount={totalAmount}
        client:visible
      />

      <!-- Deliverables Tab -->
      <TabFinalDocuments
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        client:visible
      />

      <!-- Final Invoice Tab -->
      <TabFinalInvoice
        project={project}
        currentRole={currentRole || undefined}
        projectId={projectId}
        projectStatus={currentStatusInt}
        projectStatusLabel={currentStatusName || undefined}
        authorProfile={authorProfile}
        invoiceId={invoiceId || "0"}
        totalAmount={totalAmount}
        client:visible
      />

      <TabActivityLog currentRole={currentRole || undefined} projectId={projectId} />
    </div>
  </SectionContainer>
</App>

<script
  type="module"
  define:vars={{
    userRole: currentRole,
    projectData: project,
    currentUserData: authorProfile,
    currentStatusInt: currentStatusInt.toString(),
    currentStatusName: currentStatusName,
  }}
>
  // Tab switching functionality
  function switchTab(tabName) {
    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [baseTabName, ...paramParts] = tabName.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.classList.remove("active", "bg-gray-500", "text-white", "border-black");
      button.classList.add(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${baseTabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Add active class to selected tab button
    const selectedButton = document.getElementById(`tab-${baseTabName}`);
    if (selectedButton) {
      selectedButton.classList.remove(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
      selectedButton.classList.add("active", "bg-gray-500", "text-white", "border-black");

      // Center the active button in the navigation
      selectedButton.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
        inline: "center",
      });
    }

    // Handle tab-specific actions based on parameters
    if (baseTabName === "discussion" && params.get("new") === "true") {
      // Auto-trigger new comment form after a short delay to ensure tab is visible
      setTimeout(() => {
        if (window.toggleCommentForm) {
          window.toggleCommentForm();
        }
      }, 100);
    }

    // Check if client is viewing proposal tab and update status if needed
    // console.log("üìã [PROPOSAL-VIEW] Tab switched to:", tabName);
    // console.log("üìã [PROPOSAL-VIEW] User role:", userRole);

    const currentStatus = projectData?.status || 0;
    const currentUserId = currentUserData?.id;
    const projectId = projectData?.id;
    const hasExistingProposal = projectData?.invoice_id && projectData.invoice_id !== "0";
    let nextStatus = 0;
    // Viewed Update Tabs

    // console.log("üìã [PROPOSAL-VIEW] Client viewing proposal tab, current status:", currentStatus);
    // console.log("üìã [PROPOSAL-VIEW] Project data:", { projectId, currentUserId });

    if (
      tabName === "proposal" &&
      userRole === "Client" &&
      currentStatus >= 20 &&
      currentStatus < 40 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 40 (Proposal Viewed)"
      // );
      nextStatus = 40;
    } else if (
      tabName === "deposit" &&
      userRole === "Client" &&
      currentStatus >= 55 &&
      currentStatus < 65 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 65 (Deposit Viewed)"
      // );
      nextStatus = 65;
    } else if (
      tabName === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 150 &&
      currentStatus < 160 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 160 (Final Invoice Viewed)"
      // );
      nextStatus = 160;
    } else if (
      tabName === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 200 &&
      currentStatus < 210 &&
      currentUserId &&
      projectId &&
      hasExistingProposal
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 220 (Final Deliverables Viewed)"
      // );
      nextStatus = 210;
    }

    // Update status to 40 (Proposal Viewed) if status is between 30-40

    if (nextStatus !== 0) {
      // Call update-status API
      fetch("/api/update-status", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          projectId: projectId,
          status: nextStatus,
          currentUserId: currentUserId,
          oldStatus: currentStatus,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // console.log("‚úÖ [PROPOSAL-VIEW] Status updated to 40 successfully");
            // Update the project data for future checks
            projectData.status = nextStatus;

            // Update UI elements using RefreshManager
            if (window.refreshManager) {
              window.refreshManager.updateField("status", nextStatus);
              window.refreshManager.updateField("status_name", "Status Updated");
            }

            // Show notification using new modal system
            window.handleUpdateStatusNotification(data, "PROPOSAL-VIEW");
          } else {
            console.error("‚ùå [PROPOSAL-VIEW] Failed to update status:", data.error);
          }
        })
        .catch((error) => {
          console.error("‚ùå [PROPOSAL-VIEW] Error updating status:", error);
        });
    } else {
      // console.log("üìã [PROPOSAL-VIEW] No status update needed, current status:", currentStatus);
    }

    // Update URL with tab parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (baseTabName === "project-form") {
      // Remove tab parameter for default tab
      currentUrl.searchParams.delete("tab");
    } else {
      // Add or update tab parameter with any additional parameters
      currentUrl.searchParams.set("tab", tabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Get tab from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "deliverables",
      "final-invoice",
      "activity-log",
    ];

    // Parse tab name and parameters
    let initialTab = "project-form";
    if (tabFromUrl) {
      const [baseTabName] = tabFromUrl.split("&");
      if (validTabs.includes(baseTabName)) {
        initialTab = tabFromUrl; // Keep full parameter string for processing
      }
    }

    // Switch to the initial tab
    switchTab(initialTab);
  });

  // Make switchTab globally available for other components
  window.switchTab = switchTab;

  // Payment method switching functionality
  document.addEventListener("DOMContentLoaded", function () {
    const paymentMethodRadios = document.querySelectorAll('input[name="payment-method"]');
    const cardForm = document.getElementById("card-payment-form");
    const bankForm = document.getElementById("bank-payment-form");
    const checkForm = document.getElementById("check-payment-form");

    paymentMethodRadios.forEach((radio) => {
      radio.addEventListener("change", function () {
        // Hide all forms
        if (cardForm) cardForm.classList.add("hidden");
        if (bankForm) bankForm.classList.add("hidden");
        if (checkForm) checkForm.classList.add("hidden");

        // Show selected form
        if (this.value === "card" && cardForm) {
          cardForm.classList.remove("hidden");
        } else if (this.value === "bank" && bankForm) {
          bankForm.classList.remove("hidden");
        } else if (this.value === "check" && checkForm) {
          checkForm.classList.remove("hidden");
        }
      });
    });
  });

  // Payment processing function
  function processDepositPayment() {
    const selectedMethodElement = document.querySelector('input[name="payment-method"]:checked');
    const selectedMethod = selectedMethodElement?.value;

    if (!selectedMethod) {
      alert("Please select a payment method");
      return;
    }

    // Get the amount (this would come from the proposal total in a real implementation)
    const amount = 0.0; // Placeholder - should be calculated from proposal

    console.log("Processing deposit payment:", {
      method: selectedMethod,
      amount: amount,
      projectId: projectData?.id,
    });

    // Show loading state
    const button = document.querySelector('button[onclick="processDepositPayment()"]');
    if (button) {
      const originalText = button.innerHTML;
      button.innerHTML =
        '<BoxIcon name="loader" class="mr-2 inline h-5 w-5 animate-spin" />Processing...';
      button.disabled = true;

      // Simulate payment processing
      setTimeout(() => {
        button.innerHTML = originalText;
        button.disabled = false;

        // Show success message
        if (window.showModal) {
          window.showModal("success", "Success", "Deposit payment processed successfully!");
        } else {
          alert("Deposit payment processed successfully!");
        }
      }, 2000);
    }
  }

  // Make payment function globally available
  window.processDepositPayment = processDepositPayment;
</script>
