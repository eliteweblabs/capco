---
// Define requireAuthRedirect
const requireAuthRedirect = undefined;
// Make sure to check above value before redirecting
import { checkAuth } from "../../lib/auth";
// Handle OAuth callback if code is present
const { currentUser, session, supabase } = await checkAuth(Astro.cookies);
// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

console.log("üîç [PROJECT] Current user:", currentUser);

// Check if user is authenticated
if (!currentUser) {
  console.log("üîç [PROJECT] No authenticated user, redirecting to login");
  return Astro.redirect("/login");
}

import { globalCompanyData } from "../../pages/api/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../../pages/api/global-classes";
const { globalInputClasses, globalPrimaryTextClasses, globalSecondaryTextClasses } =
  globalClasses();

const currentRole = currentUser?.profile?.role;
const currentUserId = currentUser?.id;
const { id } = Astro.params;
import App from "../../components/common/App.astro";
import Footer from "../../components/common/Footer.astro";
import HeroProject from "../../components/common/HeroProject.astro";
import SlidingPillNav from "../../components/common/SlidingPillNav.astro";
import TabDocuments from "../../components/project/TabDocuments.astro";
import TabDiscussions from "../../components/project/TabDiscussions.astro";
import TabProjectForm from "../../components/project/TabProjectForm.astro";
import TabProposal from "../../components/project/TabProposal.astro";
import TabContract from "../../components/project/TabContract.astro";
import TabDeposit from "../../components/project/TabDeposit.astro";
import TabFinalInvoice from "../../components/project/TabFinalInvoice.astro";
import TabActivityLog from "../../components/project/TabActivityLog.astro";
import TabGeneratePdf from "../../components/project/TabGeneratePdf.astro";
import "../../lib/refresh-manager.ts";

const validTabs = [
  "project-form",
  "discussion",
  "documents",
  "proposal",
  "contract",
  "deposit",
  "activity-log",
  "generate-pdf",
  "deliverables",
  "final-invoice",
];

const statusParam = Astro.url.searchParams.get("status");
const defaultTab = validTabs.includes(statusParam || "")
  ? statusParam || "project-form"
  : "project-form";
const activeTabIndex = validTabs.indexOf(defaultTab);

// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let authorProfile = null;
// let invoiceData = null;
let totalAmount = 0;
let invoiceId = "0";
let statusesResult: any = null;
let statuses: any[] = [];

// Status-related variables (will be defined after data fetching)

// Debug authentication and ID (can be removed once working)
// console.log("üîç [PROJECT] Debug info:", {
//   id,
//   hasCurrentUser: !!currentUser,
//   currentUserId: currentUser?.id,
//   currentRole: currentUser?.profile?.role,
//   url: Astro.url.href,
//   cookies: Astro.request.headers.get("Cookie") ? "Present" : "Missing",
// });

// Fetch single project using the API endpoint
if (id) {
  try {
    const baseUrl = Astro.url.origin || "http://localhost:4321";
    const apiUrl = `${baseUrl}/api/get-project?id=${id}`;

    console.log("üèóÔ∏è [PROJECT] Fetching project from API:", apiUrl);
    const response = await fetch(apiUrl, {
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    console.log("üèóÔ∏è [PROJECT] Response status:", response.status);

    if (response.ok) {
      const data = await response.json();
      console.log("üèóÔ∏è [PROJECT] Data:", data);
      if (data.success) {
        project = data.project;
        authorProfile = data.projectAuthor;
        console.log("‚úÖ [PROJECT] Project loaded:", project?.title);
      } else {
        console.error("üèóÔ∏è [PROJECT] API returned error:", data.error);
        return Astro.redirect("/dashboard");
      }
    } else {
      console.error("üèóÔ∏è [PROJECT] Error fetching project:", response.status, response.statusText);
      return Astro.redirect("/dashboard");
    }
  } catch (error) {
    console.error("üèóÔ∏è [PROJECT] Error fetching project:", error);
    return Astro.redirect("/dashboard");
  }
} else {
  console.error("üèóÔ∏è [PROJECT] No project ID provided");
  return Astro.redirect("/dashboard");
}

// Safety check - if no project was found, redirect to dashboard
if (!project) {
  return Astro.redirect("/dashboard");
}

const projectId = project?.id;
const currentStatusInt = project?.status;
let currentStatusName = project?.status_name;

// Status-related variables
let currentStatusTab: string | null = null;
let currentStatusSlug: string | null = null;
let currentStatusColor = "gray";
let currentStatusProjectAction: string | null = null;

// Initialize data arrays (same as dashboard)
let project_statuses: any[] = [];
let project_statuses_object: any = {};

// Fetch project statuses using POST with project data for placeholder replacement
const statusApiUrl = new URL("/api/project-statuses", Astro.url.origin);
const statusResponse = await fetch(statusApiUrl.toString(), {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
  body: JSON.stringify({
    project: project,
    authorProfile: authorProfile,
  }),
});

let statusData: any = { success: false, roleBasedStatuses: {}, statusesMap: {} };
if (statusResponse.ok) {
  statusData = await statusResponse.json();
  project_statuses = statusData.statuses || [];
  project_statuses_object = statusData.roleBasedStatuses || {};
} else {
  console.error("üèóÔ∏è [PROJECT] Error fetching project statuses:");
}

// Get current status data by keying into the project status code (API already handles role-based filtering)
if (currentStatusInt && project_statuses_object[currentStatusInt]) {
  const currentStatusObj = project_statuses_object[currentStatusInt];
  // Use the role-based values directly from the API (no additional filtering needed)
  currentStatusName = currentStatusObj.status_name;
  currentStatusTab = currentStatusObj.status_tab;
  currentStatusProjectAction = currentStatusObj.status_action;
  currentStatusColor = currentStatusObj.status_color || "gray";
  currentStatusSlug = currentStatusObj.status_slug;
  // search currentStatusProjectAction for "status=" + statusParam
  const statusParamIndex = currentStatusProjectAction?.indexOf("status=" + statusParam) || 0;
  if (statusParamIndex !== -1 && currentStatusProjectAction) {
    // remove HTML tags from currentStatusProjectAction
    currentStatusProjectAction = currentStatusProjectAction.replace(/<[^>]*>?/g, "");
  }
}

// Fetch staff data for staff selection
let staffOptions: any[] = [];
if (currentRole === "Admin" || currentRole === "Staff") {
  try {
    const staffResponse = await fetch(`${Astro.url.origin}/api/get-user-emails-by-role`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        roles: ["Admin", "Staff"],
      }),
    });

    if (staffResponse.ok) {
      const staffData = await staffResponse.json();
      if (staffData.success && staffData.staffUsers) {
        staffOptions = [
          { value: "", label: "Unassigned" },
          ...staffData.staffUsers.map((staff: any) => ({
            value: staff.id || "",
            label:
              staff.company_name ||
              `${staff.first_name || ""} ${staff.last_name || ""}`.trim() ||
              "Unknown Staff",
          })),
        ];
      }
    } else {
      console.error("Failed to fetch staff data:", staffResponse.status, staffResponse.statusText);
      staffOptions = [{ value: "", label: "Unassigned" }];
    }
  } catch (error) {
    console.error("Failed to fetch staff data:", error);
    staffOptions = [{ value: "", label: "Unassigned" }];
  }
}
---

<App
  title={`${project?.address || project?.title || "Untitled Project"} - CAPCo Fire Protection`}
  description={`${project?.address || project?.title || "Untitled Project"} - CAPCo Fire Protection`}
  currentUser={currentUser}
  project={project}
  session={session}
  supabase={supabase}
  supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
  noNavigation={false}
  isBackend={true}
  id={id}
  globalPrimaryTextClasses={globalPrimaryTextClasses}
  globalSecondaryTextClasses={globalSecondaryTextClasses}
  globalInputClasses={globalInputClasses}
  globalCompanyName={globalCompanyName}
  globalCompanySlogan={globalCompanySlogan}
  globalCompanyAddress={globalCompanyAddress}
  globalCompanyPhone={globalCompanyPhone}
  globalCompanyEmail={globalCompanyEmail}
  globalCompanyWebsite={globalCompanyWebsite}
  globalCompanyLogo={globalCompanyLogo}
  globalCompanyLogoDark={globalCompanyLogoDark}
  globalCompanyLogoLight={globalCompanyLogoLight}
>
  <div
    id="main-content"
    class="ahOqFrhzLjivRe8a1kX_ uLPch_bqyJDXwe5tynMV t6gkcSf0Bt4MLItXvDJ_ pdl952ted2i71qBLPIcQ jtAJHOc7mn7b4IKRO59D h8KYXnua2NT4kTVzieom 12rem-REMOVED flex min-h-screen flex-col"
  >
    <main class="flex-grow">
      <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU">
        <div
          class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi LSIxp7RSuOKhsg28v_u3"
        >
          <HeroProject
            title={project?.address || project?.title || "Untitled Project"}
            description={project?.company_name || "Unknown Author"}
            statusColor={currentStatusColor}
            projectId={id}
            currentStatusInt={currentStatusInt.toString()}
            currentStatusName={currentStatusName || undefined}
            currentRole={currentRole || "Client"}
            project={project}
            statuses={project_statuses_object}
            authorProfile={authorProfile}
            currentStatusTab={currentStatusTab || undefined}
            staffOptions={staffOptions}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />

          <!-- Tab Navigation -->
          <SlidingPillNav
            navId="project-tab-nav"
            navClass="my-4 dark:border-gray-700"
            activeItem={activeTabIndex}
            currentUser={currentUser}
            items={[
              {
                id: "status-project-form",
                label: "Project Form",
                icon: "edit",
                variant: "anchor",
                onclick: "switchTab('project-form')",
              },
              {
                id: "status-discussion",
                label: "Discussion",
                icon: "message-rounded-dots",
                variant: "anchor",
                dataAttributes: { "data-count": "0" },
                onclick: "switchTab('discussion')",
              },
              {
                id: "status-documents",
                label: "Documents",
                icon: "file",
                variant: "anchor",
                onclick: "switchTab('documents')",
              },
              {
                id: "status-proposal",
                label: "Proposal",
                icon: "grid",
                variant: "anchor",
                onclick: "switchTab('proposal')",
              },
              {
                id: "status-contract",
                label: "Contract",
                icon: "pencil",
                variant: "anchor",
                onclick: "switchTab('contract')",
              },
              {
                id: "status-deposit",
                label: "Deposit",
                icon: "credit-card",
                variant: "anchor",
                onclick: "switchTab('deposit')",
              },
              {
                id: "status-activity-log",
                label: "Activity Log",
                icon: "history",
                variant: "anchor",
                onclick: "switchTab('activity-log')",
                clientHide: true,
              },
              {
                id: "status-generate-pdf",
                label: "Generate PDF",
                icon: "history",
                variant: "anchor",
                onclick: "switchTab('generate-pdf')",
                clientHide: true,
              },
            ]}
          />

          <!-- Tab Content -->
          <!-- <div class="grid grid-cols-1 gap-6 lg:grid-cols-1"> -->
          <!-- Project Form Tab -->
          <TabProjectForm
            project={project}
            currentUser={currentUser}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            globalInputClasses={globalInputClasses}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
          />

          <!-- Discussion Tab -->

          <TabDiscussions
            project={project}
            currentRole={currentRole || undefined}
            currentUser={currentUser}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            supabaseUrl={import.meta.env.PUBLIC_SUPABASE_URL}
            globalInputClasses={globalInputClasses}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
          />

          <!-- Documents Tab -->
          <TabDocuments
            project={project}
            currentUser={currentUser}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            fileType="media"
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />

          <!-- Proposal Tab -->
          <TabProposal
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            currentUser={currentUser}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />

          <!-- Contract Tab -->
          <TabContract
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />

          <!-- Deposit Tab -->
          <TabDeposit
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            invoiceId={invoiceId || "0"}
            totalAmount={totalAmount}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />

          <!-- Final Invoice Tab -->
          <TabFinalInvoice
            project={project}
            currentRole={currentRole || undefined}
            projectId={projectId}
            projectStatus={currentStatusInt}
            projectStatusLabel={currentStatusName || undefined}
            authorProfile={authorProfile}
            invoiceId={invoiceId || "0"}
            totalAmount={totalAmount}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />

          <TabActivityLog
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
            currentUser={currentUser}
            project={project}
          />

          <TabGeneratePdf
            projectId={projectId}
            currentRole={currentRole || undefined}
            globalSecondaryTextClasses={globalSecondaryTextClasses}
            globalPrimaryTextClasses={globalPrimaryTextClasses}
            globalInputClasses={globalInputClasses}
          />
          <!-- </div> -->
        </div>
      </div>
    </main>
  </div>
</App>

<script
  type="module"
  define:vars={{
    project: project,
    currentUser: currentUser,
    currentStatusName: currentStatusName,
    currentStatusProjectAction: currentStatusProjectAction,
  }}
>
  // Tab switching functionality
  function setPageLoadProjectStatus(statusNameFromUrl) {
    // Parse tab name and parameters (e.g., "discussion&new=true")
    const [statusSlug, ...paramParts] = statusNameFromUrl.split("&");
    const params = new URLSearchParams(paramParts.join("&"));

    // Handle tab-specific actions based on parameters
    if (statusSlug === "discussion" && params.get("new") === "true") {
      // Auto-trigger new comment form after a short delay to ensure tab is visible
      setTimeout(() => {
        if (window.toggleCommentForm) {
          window.toggleCommentForm();
        }
      }, 100);
    }

    const currentStatus = project?.status || 0;
    const currentUser = currentUser;
    const projectId = project?.id;
    let nextStatus = 0;
    // Viewed Update Tabs

    // console.log("üìã [PROPOSAL-VIEW] Client viewing proposal tab, current status:", currentStatus);
    // console.log("üìã [PROPOSAL-VIEW] Project data:", { projectId, currentUserId });

    if (
      statusSlug === "proposal" &&
      currentRole === "Client" &&
      currentStatus >= 20 &&
      currentStatus < 40 &&
      currentUser &&
      projectId
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 40 (Proposal Viewed)"
      // );
      nextStatus = 40;
    } else if (
      statusSlug === "deposit" &&
      currentRole === "Client" &&
      currentStatus >= 55 &&
      currentStatus < 65 &&
      currentUser &&
      projectId &&
      hasExistingProposal
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 65 (Deposit Viewed)"
      // );
      nextStatus = 65;
    } else if (
      statusSlug === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 150 &&
      currentStatus < 160 &&
      currentUser &&
      projectId
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 160 (Final Invoice Viewed)"
      // );
      nextStatus = 160;
    } else if (
      statusSlug === "final-invoice" &&
      userRole === "Client" &&
      currentStatus >= 200 &&
      currentStatus < 210 &&
      currentUser &&
      projectId
    ) {
      // console.log(
      //   "üìã [PROPOSAL-VIEW] Updating status from",
      //   currentStatus,
      //   "to 220 (Final Deliverables Viewed)"
      // );
      nextStatus = 210;
    }

    // Update status to 40 (Proposal Viewed) if status is between 30-40

    if (nextStatus !== 0) {
      // Call update-status API
      fetch("/api/update-status", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          projectId: projectId,
          status: nextStatus,
          currentUserId: currentUserId,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // console.log("‚úÖ [PROPOSAL-VIEW] Status updated to 40 successfully");
            // Update the project data for future checks
            projectData.status = nextStatus;

            // Update UI elements using RefreshManager
            if (window.refreshManager) {
              window.refreshManager.updateField("status", nextStatus);
              window.refreshManager.updateField("status_name", "Status Updated");
            }

            // Show notification using new modal system
            window.handleUpdateStatusNotification(data, "PROPOSAL-VIEW");
          } else {
            console.error("‚ùå [PROPOSAL-VIEW] Failed to update status:", data.error);
          }
        })
        .catch((error) => {
          console.error("‚ùå [PROPOSAL-VIEW] Error updating status:", error);
        });
    } else {
      // console.log("üìã [PROPOSAL-VIEW] No status update needed, current status:", currentStatus);
    }

    // Update URL with tab parameter (without page reload)
    // const currentUrl = new URL(window.location.href);
    // if (statusSlug === "project-form") {
    //   // Remove status parameter for default tab
    //   currentUrl.searchParams.delete("status");
    // } else {
    //   // Add or update status parameter with any additional parameters
    //   currentUrl.searchParams.set("status", statusNameFromUrl);
    // }

    // // Update browser history without reloading the page
    // window.history.replaceState({}, "", currentUrl.toString());
  }

  // Check for project action modal on page load
  function checkProjectActionModal() {
    console.log("üîç [PROJECT] Checking for project action:", currentStatusProjectAction);

    if (currentStatusProjectAction && currentStatusProjectAction.trim() !== "") {
      console.log("üöÄ [PROJECT] Found project action, showing modal:", currentStatusProjectAction);

      // Show modal with project action content
      if (typeof window.showModal === "function") {
        window.showModal(
          "alert",
          "Project Action Required",
          currentStatusProjectAction,
          2000 // No auto-hide
        );
      } else {
        // Fallback alert if modal function not available
        alert(`Project Status Update:\n\n${currentStatusProjectAction}`);
      }
    } else {
      console.log("üîç [PROJECT] No project action to display");
    }
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Check for project action modal first
    checkProjectActionModal();

    // Get status from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const statusFromUrl = urlParams.get("status");
    const validTabs = [
      "project-form",
      "discussion",
      "documents",
      "proposal",
      "contract",
      "deposit",
      "final-invoice",
      "activity-log",
      "generate-pdf",
      "deliverables",
    ];

    // Parse status name and parameters
    let initialTab = "project-form";
    if (statusFromUrl) {
      const [statusSlug] = statusFromUrl.split("&");
      if (validTabs.includes(statusSlug)) {
        initialTab = statusFromUrl; // Keep full parameter string for processing
      }
    }

    // Switch to the initial tab
    setPageLoadProjectStatus(initialTab);
  });

  // Make switchTab globally available for other components
  window.setPageLoadProjectStatus = setPageLoadProjectStatus;
</script>
