---
import Base from "../../layout/Base.astro";
import SectionContainer from "../../components/common/SectionContainer.astro";
import Hero from "../../components/common/Hero.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import ProjectForm from "../../components/project/ProjectForm.astro";
import PDFUpload from "../../components/project/PDFUpload.astro";
import SimpleProjectLog from "../../components/project/SimpleProjectLog.astro";

// Para cambiar idioma de textos
import { getI18N } from "@/i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get the project ID from the URL parameter
const { id } = Astro.params;

// Check authentication
import { checkAuth } from "../../lib/auth";
import { supabase } from "../../lib/supabase";

const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Get the tab parameter from URL query string
const tabParam = Astro.url.searchParams.get("tab");
const validTabs = [
  "project-form",
  "documents",
  "proposal",
  "deliverables",
  "final-invoice",
  "activity-log",
];
const defaultTab = validTabs.includes(tabParam || "") ? tabParam : "project-form";

console.log("üåê [PROJECT] Project ID:", id);
console.log("üåê [PROJECT] Authentication check:", { isAuth, hasUser: !!user, role });

// Redirect if not authenticated
if (!isAuth) {
  console.log("üåê [PROJECT] Not authenticated, redirecting to login");
  return Astro.redirect("/login");
}

console.log("üåê [PROJECT] User authenticated:", { userId: user?.id, userEmail: user?.email, role });

// Fetch project data and project author profile - RLS will handle authorization
let project = null;
let projectAuthorProfile = null;
if (supabase && user) {
  // Get project data
  const { data: projectData, error: projectError } = await supabase
    .from("projects")
    .select("*")
    .eq("id", id)
    .single();

  if (projectError) {
    console.error("Error fetching project:", projectError);
    // Project not found or no access - handled by RLS
  } else {
    project = projectData;
    console.log("üåê [PROJECT] Project loaded:", project.title);

    // Get project author's profile data (not current user's profile)
    if (project.author_id) {
      const { data: authorProfileData, error: authorProfileError } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", project.author_id)
        .single();

      if (authorProfileError) {
        console.error("Error fetching project author profile:", authorProfileError);
      } else {
        projectAuthorProfile = authorProfileData;
        console.log(
          "üåê [PROJECT] Project author profile loaded:",
          projectAuthorProfile.company_name
        );
      }
    }
  }
}

// Status labels mapping
const statusLabels: Record<number, string> = {
  10: "Specs Received",
  20: "Generating Proposal",
  30: "Proposal Shipped",
  40: "Proposal Viewed",
  50: "Proposal Signed Off",
  60: "Generating Deposit Invoice",
  70: "Deposit Invoice Shipped",
  80: "Deposit Invoice Viewed",
  90: "Deposit Invoice Paid",
  100: "Generating Submittals",
  110: "Submittals Shipped",
  120: "Submittals Viewed",
  130: "Submittals Signed Off",
  140: "Generating Final Invoice",
  150: "Final Invoice Shipped",
  160: "Final Invoice Viewed",
  170: "Final Invoice Paid",
  180: "Generating Final Deliverables",
  190: "Stamping Final Deliverables",
  200: "Final Deliverables Shipped",
  210: "Final Deliverables Viewed",
  220: "Project Complete",
};

// Get status color based on status code
function getStatusColor(status: number): string {
  if (status <= 50) return "blue"; // Early stages
  if (status <= 100) return "yellow"; // Invoice stages
  if (status <= 140) return "purple"; // Submittals
  if (status <= 180) return "orange"; // Final invoice
  if (status <= 220) return "green"; // Deliverables and complete
  return "gray"; // Unknown
}
---

<Base title={i18n.SEO_TITLE} description={i18n.SEO_DESCRIPTION}>
  <script>
    // Client-side debugging
    console.log("üåê [PROJECT-CLIENT] Page loaded");
    console.log(
      "üåê [PROJECT-CLIENT] Project ID from URL:",
      window.location.pathname.split("/").pop()
    );
    console.log(
      "üåê [PROJECT-CLIENT] Current tab:",
      new URLSearchParams(window.location.search).get("tab")
    );
  </script>
  <SectionContainer id="hero" class="mx-6 my-6">
    <Hero
      title={project?.address || project?.title || "Untitled Project"}
      description={projectAuthorProfile?.company_name ||
        projectAuthorProfile?.name ||
        "Unknown Author"}
      statusLabel={project?.status
        ? statusLabels[project.status] || `Status ${project.status}`
        : undefined}
      statusColor={project?.status ? getStatusColor(project.status) : undefined}
      projectId={project?.id}
      currentStatus={project?.status}
    />
  </SectionContainer>

  <SectionContainer class="mx-6 flex h-full flex-col gap-y-6">
    <div class="flex items-center justify-between">
      <a
        href="/dashboard"
        class="inline-flex items-center rounded-lg bg-gray-500 px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-600"
      >
        <BoxIcon name="arrow-back" class="mr-2" />
        Back to Projects
      </a>
    </div>

    <!-- Tab Navigation -->
    <nav
      id="project-tab-nav"
      class="scrollbar-hide relative flex gap-1 overflow-x-auto whitespace-nowrap dark:border-gray-700"
      aria-label="Tabs"
    >
      <button
        id="tab-project-form"
        class="tab-button active relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
        onclick="switchTab('project-form')"
      >
        <BoxIcon name="edit" class="mr-2 inline h-4 w-4" />
        Project Form
      </button>
      <!-- {
        role === "Admin" || role === "Staff" ? (
          <button
            id="tab-comments"
            class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
            onclick="switchTab('comments')"
          >
            <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
            Comments
          </button>
        ) : (
          ""
        )
      } -->
      <button
        id="tab-documents"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('documents')"
      >
        <BoxIcon name="file" class="mr-2 inline h-4 w-4" />
        Documents
      </button>
      <button
        id="tab-proposal"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('proposal')"
      >
        <BoxIcon name="file-pdf" class="mr-2 inline h-4 w-4" />
        Proposal
      </button>
      <button
        id="tab-deliverables"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('deliverables')"
      >
        <BoxIcon name="package" class="mr-2 inline h-4 w-4" />
        Deliverables
      </button>
      <button
        id="tab-final-invoice"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('final-invoice')"
      >
        <BoxIcon name="receipt" class="mr-2 inline h-4 w-4" />
        Final Invoice
      </button>
      <button
        id="tab-activity-log"
        class="tab-button relative mt-2 w-auto rounded-full px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        onclick="switchTab('activity-log')"
      >
        <BoxIcon name="history" class="mr-2 inline h-4 w-4" />
        Activity Log
      </button>
    </nav>

    <!-- Tab Content -->
    <div class="grid grid-cols-1 gap-6 lg:grid-cols-1">
      <!-- Project Form Tab -->
      <div
        id="content-project-form"
        class="tab-content rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <ProjectForm
          project={project}
          projectId={id ?? ""}
          isNewProject={false}
          role={role}
          projectStatus={project?.status}
        />
      </div>

      <!-- Documents Tab -->
      <div id="content-documents" class="tab-content hidden">
        <PDFUpload
          projectId={id ?? ""}
          fileType="media"
          role={role || undefined}
          projectAuthorEmail={projectAuthorProfile?.email || "admin@capco.com"}
          status={project?.status}
        />
      </div>

      <!-- Proposal Tab -->
      <div
        id="content-proposal"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="file-pdf" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Project proposal and estimates will be displayed here.
          </p>
        </div>
      </div>

      <!-- Deliverables Tab -->
      <div
        id="content-deliverables"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="package" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Deliverables</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Final project deliverables will be displayed here.
          </p>
        </div>
      </div>

      <!-- Final Invoice Tab -->
      <div
        id="content-final-invoice"
        class="tab-content hidden rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <div class="py-8 text-center">
          <BoxIcon name="receipt" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Final Invoice</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Final project invoice and billing information will be displayed here.
          </p>
        </div>
      </div>

      <!-- Activity Log Tab -->
      <div id="content-activity-log" class="tab-content hidden">
        <SimpleProjectLog projectId={parseInt(id ?? "0")} />
      </div>
    </div>
  </SectionContainer>
</Base>

<script>
  // Tab switching functionality
  function switchTab(tabName: string) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll(".tab-content");
    tabContents.forEach((content) => {
      content.classList.add("hidden");
    });

    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll(".tab-button");
    tabButtons.forEach((button) => {
      button.classList.remove("active", "bg-red-500", "text-white", "border-red-500");
      button.classList.add(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
    });

    // Show selected tab content
    const selectedContent = document.getElementById(`content-${tabName}`);
    if (selectedContent) {
      selectedContent.classList.remove("hidden");
    }

    // Add active class to selected tab button
    const selectedButton = document.getElementById(`tab-${tabName}`);
    if (selectedButton) {
      selectedButton.classList.remove(
        "text-gray-500",
        "hover:text-gray-700",
        "dark:text-gray-400",
        "dark:hover:text-gray-300"
      );
      selectedButton.classList.add("active", "bg-red-500", "text-white", "border-red-500");

      // Center the active button in the navigation
      selectedButton.scrollIntoView({
        behavior: "smooth",
        block: "nearest",
        inline: "center",
      });
    }

    // Update URL with tab parameter (without page reload)
    const currentUrl = new URL(window.location.href);
    if (tabName === "project-form") {
      // Remove tab parameter for default tab
      currentUrl.searchParams.delete("tab");
    } else {
      // Add or update tab parameter
      currentUrl.searchParams.set("tab", tabName);
    }

    // Update browser history without reloading the page
    window.history.replaceState({}, "", currentUrl.toString());
  }

  // Initialize tabs on page load
  document.addEventListener("DOMContentLoaded", function () {
    // Get tab from URL parameter or use default
    const urlParams = new URLSearchParams(window.location.search);
    const tabFromUrl = urlParams.get("tab");
    const validTabs = [
      "project-form",
      "documents",
      "proposal",
      "deliverables",
      "final-invoice",
      "activity-log",
    ];
    const initialTab = validTabs.includes(tabFromUrl || "") ? tabFromUrl! : "project-form";

    console.log("üìã [Tabs] Initializing with tab:", initialTab);

    // Switch to the initial tab
    switchTab(initialTab);
  });

  // Form handling functions
  function buildProposal(projectId: string) {
    // Add build estimate logic here
    console.log("Building estimate for project:", projectId);
  }

  function editProposal(projectId: string) {
    // Add edit estimate logic here
    console.log("Editing estimate for project:", projectId);
  }

  // Make functions globally available
  (window as any).switchTab = switchTab;
  (window as any).buildProposal = buildProposal;
  (window as any).editProposal = editProposal;
</script>
