---
const requireAuthRedirect = "/login";
import { checkAuth } from "../../lib/auth";
const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);
const currentRole = currentUser?.profile?.role || "Client";

// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalCompanyData } from "../../pages/api/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../../pages/api/global-classes";
const { globalInputClasses, globalPrimaryTextClasses, globalSecondaryTextClasses } =
  globalClasses();

import App from "../../components/common/App.astro";
import Button from "../../components/common/Button.astro";
import HeroDashboard from "../../components/common/HeroDashboard.astro";
import ProjectList from "../../components/project/ProjectList.astro";
import "../../lib/refresh-manager.ts";
// Get auth data directly since App component handles auth requirements

// console.log("üöÄ [DASHBOARD] Current user:", currentUser);
// Initialize data arrays
let projects: any[] = [];

// Fetch projects using the API endpoint that includes discussion counts
if (currentUser?.id) {
  try {
    const baseUrl = Astro.url.origin;
    let apiUrl = `${baseUrl}/api/get-project`;
    // Add assigned_to_id parameter for Staff role
    if (currentUser?.profile?.role === "Client") {
      apiUrl += `?author_id=${currentUser.id}`;
    }

    const response = await fetch(apiUrl);

    if (response.ok) {
      const data = await response.json();
      projects = data.projects || [];
    } else {
      console.error(
        "üèóÔ∏è [DASHBOARD] Error fetching projects:",
        response.status,
        response.statusText
      );
    }
  } catch (error) {
    console.error("üèóÔ∏è [DASHBOARD] Error fetching projects:", error);
  }
}

// Fetch project statuses using the unified API
const statusApiUrl = new URL("/api/project-statuses", Astro.url.origin);
const statusResponse = await fetch(statusApiUrl.toString(), {
  method: "GET",
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});

const statusResponseData = await statusResponse.json();
const statusData = statusResponseData.statuses || [];
---

<App
  title="Global Dashboard - CAPCo Fire Protection"
  description="View all projects."
  currentUser={currentUser}
  session={session}
  supabase={supabase}
  projects={projects}
  globalCompanyName={globalCompanyName}
  globalCompanySlogan={globalCompanySlogan}
  globalPrimaryTextClasses={globalPrimaryTextClasses}
  globalSecondaryTextClasses={globalSecondaryTextClasses}
  globalInputClasses={globalInputClasses}
  globalCompanyAddress={globalCompanyAddress}
  globalCompanyPhone={globalCompanyPhone}
  globalCompanyEmail={globalCompanyEmail}
  globalCompanyWebsite={globalCompanyWebsite}
  globalCompanyLogo={globalCompanyLogo}
  globalCompanyLogoDark={globalCompanyLogoDark}
  globalCompanyLogoLight={globalCompanyLogoLight}
>
  <!-- Dashboard Container -->

  <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU">
    <div
      class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi LSIxp7RSuOKhsg28v_u3"
    >
      <HeroDashboard
        title="Project Dashboard"
        description={currentUser?.profile?.role === "Client"
          ? "Manage and track your fire protection projects"
          : "Manage and track all fire protection projects"}
        projectLength={projects.length}
      />
    </div>
  </div>

  <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU">
    <div
      class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi LSIxp7RSuOKhsg28v_u3"
    >
      <!-- <ProjectNav projects={projects} statuses={project_statuses} currentUser={currentUser} /> -->
      <!-- <div
          class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi LSIxp7RSuOKhsg28v_u3"
        > -->
      {
        projects && projects.length > 0 ? (
          <ProjectList projects={projects} statusData={statusData} currentUser={currentUser} />
        ) : (
          // <!-- No projects - show only form -->

          <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU mx-auto flex h-[60dvh] max-w-2xl items-center justify-center pb-6">
            <div class="inset-0 mx-auto flex max-w-2xl items-center justify-center pb-6">
              <Button
                href="/project/new"
                variant="primary"
                size="lg"
                icon="plus"
                iconPosition="left"
                class="w-full"
              >
                New Project
              </Button>
            </div>
          </div>
        )
      }
    </div>
  </div>
</App>

<!-- </SectionContainer> -->
