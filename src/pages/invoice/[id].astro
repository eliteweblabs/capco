---
import Base from "../../layout/Base.astro";
import PaymentForm from "../../components/PaymentForm.astro";
import { checkAuth } from "../../lib/auth";

// Get invoice ID from URL
const { id } = Astro.params;
const invoiceId = id ? parseInt(id) : 0;

if (!invoiceId) {
  return Astro.redirect("/");
}

// Check auth for role-aware rendering
const { role } = await checkAuth(Astro.cookies);

// Fetch invoice data
const response = await fetch(`${Astro.url.origin}/api/get-invoice`, {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({ id: invoiceId }),
});

const data = await response.json();

console.log("Invoice page - API response:", { response: response.ok, data });

if (!data.success) {
  console.error("Invoice page - Failed to load invoice:", data);
  return Astro.redirect("/");
}

const { invoice, lineItems, project, client } = data;
---

<Base
  title={`Invoice #${invoice.invoice_number} - ${project.title}`}
  description={`Invoice details for ${project.title}`}
>
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-2000 mx-auto">
      <!-- Invoice Header -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <div class="flex justify-between items-start mb-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">
              Invoice #{invoice.invoice_number}
            </h1>
            <p class="text-gray-600 mt-2">
              Status: <span class="font-semibold capitalize">{invoice.status}</span>
            </p>
            {
              client && (
                <div class="mt-2 text-gray-700 text-sm">
                  <p>
                    <strong>Client:</strong> {client.name || "N/A"}
                  </p>
                  <p>
                    <strong>Email:</strong> {client.email || "N/A"}
                  </p>
                </div>
              )
            }
          </div>
          <div class="text-right">
            <p class="text-2xl font-bold text-gray-900">
              ${invoice.total_amount.toFixed(2)}
            </p>
            <p class="text-sm text-gray-600">
              Due: {new Date(invoice.due_date).toLocaleDateString()}
            </p>
          </div>
        </div>

        <!-- Project Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <h3 class="text-lg font-semibold mb-2">Project Details</h3>
            <p class="text-gray-700"><strong>Title:</strong> {project.title}</p>
            <p class="text-gray-700">
              <strong>Address:</strong>
              {project.address || "N/A"}
            </p>
            <p class="text-gray-700">
              <strong>Description:</strong>
              {project.description || "N/A"}
            </p>
          </div>
          <div>
            <h3 class="text-lg font-semibold mb-2">Invoice Details</h3>
            <p class="text-gray-700">
              <strong>Created:</strong>
              {new Date(invoice.created_at).toLocaleDateString()}
            </p>
            <p class="text-gray-700">
              <strong>Due Date:</strong>
              {new Date(invoice.due_date).toLocaleDateString()}
            </p>
            <p class="text-gray-700">
              <strong>Tax Rate:</strong>
              {invoice.tax_rate}%
            </p>
          </div>
        </div>
      </div>

      <!-- Line Items -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Line Items</h2>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Description</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Quantity</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Unit Price</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Total</th
                >
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >Actions</th
                >
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="line-items-container">
              {
                lineItems.map((item: any, index: number) => (
                  <tr class="line-item-row" data-item-id={item.id}>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <textarea
                        class="w-full p-2 border border-gray-300 rounded description-input"
                        rows="2"
                        data-field="description"
                      >
                        {item.description}
                      </textarea>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <input
                        type="number"
                        class="w-full p-2 border border-gray-300 rounded quantity-input"
                        value={item.quantity}
                        min="1"
                        step="1"
                        data-field="quantity"
                      />
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <input
                        type="number"
                        class="w-full p-2 border border-gray-300 rounded unit-price-input"
                        value={item.unit_price}
                        min="0"
                        step="0.01"
                        data-field="unit_price"
                      />
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900 total-cell">
                      <span class="total-display font-semibold">
                        ${item.total_price.toFixed(2)}
                      </span>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <button
                        type="button"
                        class="text-red-600 hover:text-red-800 delete-item-btn"
                        data-item-id={item.id}
                      >
                        <i class="bx bx-trash" />
                      </button>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>

        <!-- Add Line Item Button -->
        <div class="mt-4">
          <button
            type="button"
            id="add-line-item-btn"
            class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
          >
            <i class="bx bx-plus mr-1"></i>
            Add Line Item
          </button>
        </div>

        <!-- Totals -->
        <div class="mt-6 text-right">
          <div class="text-sm text-gray-600" id="invoice-totals">
            <p>
              Subtotal: $<span id="subtotal-display">{invoice.subtotal.toFixed(2)}</span>
            </p>
            <p>
              Tax ({invoice.tax_rate}%): $<span id="tax-display"
                >{invoice.tax_amount.toFixed(2)}</span
              >
            </p>
            <p class="text-lg font-semibold text-gray-900">
              Total: $<span id="total-display">{invoice.total_amount.toFixed(2)}</span>
            </p>
          </div>
        </div>

        <!-- Save Button -->
        <div class="mt-6 flex justify-between">
          <button
            type="button"
            id="save-invoice-btn"
            class="px-6 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 transition-colors"
          >
            <i class="bx bx-save mr-1"></i>
            Save Invoice
          </button>

          <button
            type="button"
            id="send-invoice-btn"
            class="px-6 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
          >
            <i class="bx bx-send mr-1"></i>
            Send Invoice
          </button>
        </div>
      </div>

      <!-- Notes -->
      {
        invoice.notes && (
          <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <h2 class="text-xl font-semibold mb-4">Notes</h2>
            <p class="text-gray-700">{invoice.notes}</p>
          </div>
        )
      }

      <!-- Payment Section (clients only) -->
      {
        role === "Client" && invoice.status === "sent" && (
          <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold mb-4">Payment</h2>
            <PaymentForm
              invoiceId={invoice.id}
              amount={Math.round(invoice.total_amount * 100)}
              currency="usd"
            />
          </div>
        )
      }

      <!-- Payment Status -->
      {
        invoice.status === "paid" && (
          <div class="bg-green-50 border border-green-200 rounded-lg p-6">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-green-800">Payment Complete</h3>
                <p class="text-sm text-green-700 mt-1">
                  This invoice was paid on {new Date(invoice.paid_at).toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>
        )
      }
    </div>
  </div>

  <script define:vars={{ invoiceId: invoice.id, taxRate: invoice.tax_rate }}>
    // Invoice editing functionality

    // Calculate totals for a line item
    function calculateLineTotal(row) {
      const quantity = parseFloat(row.querySelector(".quantity-input").value) || 0;
      const unitPrice = parseFloat(row.querySelector(".unit-price-input").value) || 0;
      const total = quantity * unitPrice;

      row.querySelector(".total-display").textContent = `$${total.toFixed(2)}`;
      return total;
    }

    // Calculate and update invoice totals
    function updateInvoiceTotals() {
      const rows = document.querySelectorAll(".line-item-row");
      let subtotal = 0;

      rows.forEach((row) => {
        subtotal += calculateLineTotal(row);
      });

      const taxAmount = subtotal * (taxRate / 100);
      const total = subtotal + taxAmount;

      document.getElementById("subtotal-display").textContent = subtotal.toFixed(2);
      document.getElementById("tax-display").textContent = taxAmount.toFixed(2);
      document.getElementById("total-display").textContent = total.toFixed(2);
    }

    // Add event listeners to all quantity and unit price inputs
    function addInputListeners() {
      document.querySelectorAll(".quantity-input, .unit-price-input").forEach((input) => {
        input.addEventListener("input", updateInvoiceTotals);
      });
    }

    // Add new line item
    function addLineItem() {
      const container = document.getElementById("line-items-container");
      const newRow = document.createElement("tr");
      newRow.className = "line-item-row";
      newRow.innerHTML = `
        <td class="px-6 py-4 text-sm text-gray-900">
          <textarea
            class="w-full p-2 border border-gray-300 rounded description-input"
            rows="2"
            data-field="description"
            placeholder="Enter description..."
          ></textarea>
        </td>
        <td class="px-6 py-4 text-sm text-gray-900">
          <input
            type="number"
            class="w-full p-2 border border-gray-300 rounded quantity-input"
            value="1"
            min="1"
            step="1"
            data-field="quantity"
          />
        </td>
        <td class="px-6 py-4 text-sm text-gray-900">
          <input
            type="number"
            class="w-full p-2 border border-gray-300 rounded unit-price-input"
            value="0"
            min="0"
            step="0.01"
            data-field="unit_price"
          />
        </td>
        <td class="px-6 py-4 text-sm text-gray-900 total-cell">
          <span class="total-display font-semibold">$0.00</span>
        </td>
        <td class="px-6 py-4 text-sm text-gray-900">
          <button
            type="button"
            class="text-red-600 hover:text-red-800 delete-item-btn"
          >
            <i class="bx bx-trash"></i>
          </button>
        </td>
      `;

      container.appendChild(newRow);
      addInputListeners();
      updateInvoiceTotals();
    }

    // Delete line item
    function deleteLineItem(button) {
      const row = button.closest(".line-item-row");
      const itemId = row.dataset.itemId;

      if (itemId) {
        // Delete from database
        fetch("/api/delete-line-item", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ itemId }),
        })
          .then(() => {
            row.remove();
            updateInvoiceTotals();
          })
          .catch((error) => {
            console.error("Error deleting line item:", error);
            alert("Error deleting line item");
          });
      } else {
        // Just remove from DOM (new unsaved item)
        row.remove();
        updateInvoiceTotals();
      }
    }

    // Save invoice
    async function saveInvoice() {
      const lineItems = [];

      document.querySelectorAll(".line-item-row").forEach((row) => {
        const itemId = row.dataset.itemId;
        const description = row.querySelector(".description-input").value;
        const quantity = parseFloat(row.querySelector(".quantity-input").value) || 0;
        const unitPrice = parseFloat(row.querySelector(".unit-price-input").value) || 0;
        const totalPrice = quantity * unitPrice;

        lineItems.push({
          id: itemId || null,
          description,
          quantity,
          unit_price: unitPrice,
          total_price: totalPrice,
        });
      });

      try {
        const response = await fetch("/api/update-invoice", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            invoiceId,
            lineItems,
          }),
        });

        const result = await response.json();

        if (result.success) {
          alert("Invoice saved successfully!");
          window.location.reload(); // Refresh to get updated IDs
        } else {
          alert("Error saving invoice: " + result.error);
        }
      } catch (error) {
        console.error("Error saving invoice:", error);
        alert("Error saving invoice");
      }
    }

    // Send invoice
    async function sendInvoice() {
      try {
        const response = await fetch("/api/send-invoice", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ invoiceId }),
        });

        const result = await response.json();

        if (result.success) {
          alert("Invoice sent successfully!");
          window.location.reload();
        } else {
          alert("Error sending invoice: " + result.error);
        }
      } catch (error) {
        console.error("Error sending invoice:", error);
        alert("Error sending invoice");
      }
    }

    // Initialize event listeners
    document.addEventListener("DOMContentLoaded", () => {
      addInputListeners();
      updateInvoiceTotals();

      document.getElementById("add-line-item-btn").addEventListener("click", addLineItem);
      document.getElementById("save-invoice-btn").addEventListener("click", saveInvoice);
      document.getElementById("send-invoice-btn").addEventListener("click", sendInvoice);

      // Delete button listeners
      document.addEventListener("click", (e) => {
        if (e.target.closest(".delete-item-btn")) {
          deleteLineItem(e.target.closest(".delete-item-btn"));
        }
      });
    });
  </script>
</Base>
