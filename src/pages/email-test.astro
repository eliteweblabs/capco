---
import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../lib/auth";
const { isAuth, currentUser, currentRole } = await checkAuth(Astro.cookies);

// Redirect to login if not authenticated
if (!isAuth || !currentUser) {
  return Astro.redirect("/login");
}

// Only allow admins to access this page
if (currentRole !== "Admin") {
  return Astro.redirect("/dashboard");
}
---

<App
  title="Email Test - CAPCo Fire Protection"
  description="Test email sending functionality using Resend."
>
  <SectionContainer class="px-6 py-16">
    <div class="mx-auto max-w-2xl">
      <!-- Header -->
      <div class="mb-8 text-center">
        <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900/30"
        >
          <i class="bx bx-mail-send h-8 w-8 text-blue-600 dark:text-blue-400"></i>
        </div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Email Test</h1>
        <p class="mt-2 text-gray-600 dark:text-gray-300">
          Test email sending functionality using Resend API
        </p>
      </div>

      <!-- Email Test Form -->
      <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
        <form id="email-test-form" class="space-y-6">
          <!-- To Email Field -->
          <div>
            <label
              for="to-email"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              To Email Address *
            </label>
            <input
              type="email"
              id="to-email"
              name="to"
              required
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="recipient@example.com"
            />
          </div>

          <!-- Subject Field -->
          <div>
            <label
              for="subject"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Subject *
            </label>
            <input
              type="text"
              id="subject"
              name="subject"
              required
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Test Email Subject"
            />
          </div>

          <!-- Body Field -->
          <div>
            <label
              for="body"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email Content (HTML) *
            </label>
            <textarea
              id="body"
              name="body"
              required
              rows="8"
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Your custom content here..."></textarea>
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              This content will be inserted into the CAPCo email template. Use HTML with inline
              styles for best email compatibility. The template includes the header and customizable
              button automatically.
            </p>
          </div>

          <!-- Button Text Field -->
          <div>
            <label
              for="button-text"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Button Text *
            </label>
            <input
              type="text"
              id="button-text"
              name="button_text"
              required
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="e.g., Pay Your Invoice, Submit Documents, View Project"
            />
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Customize the call-to-action button text. Examples: "Pay Your Invoice", "Submit
              Documents", "View Project Status"
            </p>
          </div>

          <!-- Action Buttons -->
          <div class="flex gap-3 pt-4">
            <button
              type="submit"
              id="send-email-btn"
              class="flex-1 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            >
              Send Test Email
            </button>
            <a
              href="/dashboard"
              class="flex-1 rounded-md border border-gray-300 bg-white px-4 py-2 text-center text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
            >
              Back to Dashboard
            </a>
          </div>
        </form>
      </div>

      <!-- Status Email Test Section -->
      <div
        class="mt-8 rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800"
      >
        <h2 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">
          Test Status-Specific Emails
        </h2>
        <p class="mb-4 text-sm text-gray-600 dark:text-gray-400">
          Test emails for specific project statuses using the database configuration.
        </p>

        <form id="status-email-test-form" class="space-y-4">
          <!-- Project ID Field -->
          <div>
            <label
              for="status-project-id"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Project ID *
            </label>
            <input
              type="text"
              id="status-project-id"
              name="projectId"
              required
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Enter a valid project ID"
            />
          </div>

          <!-- Status Code Field -->
          <div>
            <label
              for="status-code"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Status Code *
            </label>
            <select
              id="status-code"
              name="statusCode"
              required
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
            >
              <option value="">Select a status</option>
              <option value="10">10 - Project Created</option>
              <option value="20">20 - Documents Submitted</option>
              <option value="30">30 - Under Review</option>
              <option value="40">40 - Proposal Ready</option>
              <option value="50">50 - Proposal Sent</option>
              <option value="60">60 - Contract Signed</option>
              <option value="70">70 - Work Started</option>
              <option value="80">80 - Work Completed</option>
              <option value="90">90 - Final Inspection</option>
              <option value="100">100 - Project Closed</option>
            </select>
          </div>

          <!-- Test Email Field (Optional) -->
          <div>
            <label
              for="status-test-email"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Test Email (Optional)
            </label>
            <input
              type="email"
              id="status-test-email"
              name="testEmail"
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="test@example.com (optional)"
            />
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              If provided, this email will be added to the notification list for testing.
            </p>
          </div>

          <!-- Action Button -->
          <div class="pt-4">
            <button
              type="submit"
              id="test-status-email-btn"
              class="w-full rounded-md bg-green-600 px-4 py-2 text-sm font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50"
            >
              Test Status Email
            </button>
          </div>
        </form>
      </div>

      <!-- Environment Info -->
      <div class="mt-8 rounded-lg bg-gray-50 p-6 dark:bg-gray-800">
        <h2 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">
          Environment Configuration
        </h2>
        <div class="space-y-2 text-sm text-gray-600 dark:text-gray-400">
          <div class="flex justify-between">
            <span>Email Provider:</span>
            <span class="font-mono">{import.meta.env.EMAIL_PROVIDER || "Not set"}</span>
          </div>
          <div class="flex justify-between">
            <span>From Email:</span>
            <span class="font-mono">{import.meta.env.FROM_EMAIL || "Not set"}</span>
          </div>
          <div class="flex justify-between">
            <span>From Name:</span>
            <span class="font-mono">{import.meta.env.FROM_NAME || "Not set"}</span>
          </div>
          <div class="flex justify-between">
            <span>API Key:</span>
            <span class="font-mono">
              {
                import.meta.env.EMAIL_API_KEY
                  ? `${import.meta.env.EMAIL_API_KEY.substring(0, 8)}...`
                  : "Not set"
              }
            </span>
          </div>
        </div>
      </div>
    </div>
  </SectionContainer>
</App>

<script>
  // TypeScript declarations for window properties
  declare global {
    interface Window {
      showSuccess?: (title: string, message: string, duration?: number) => void;
      showError?: (title: string, message: string, duration?: number) => void;
      showWarning?: (title: string, message: string, duration?: number) => void;
      showInfo?: (title: string, message: string, duration?: number) => void;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    console.log("🔧 [DEBUG] Email test page DOM loaded");
    console.log("🔧 [DEBUG] Window notification functions:", {
      showSuccess: typeof window.showSuccess,
      showError: typeof window.showModal,
      showWarning: typeof window.showWarning,
      showInfo: typeof window.showInfo,
    });

    const emailTestForm = document.getElementById("email-test-form") as HTMLFormElement;
    const sendEmailBtn = document.getElementById("send-email-btn") as HTMLButtonElement;
    const statusEmailTestForm = document.getElementById(
      "status-email-test-form"
    ) as HTMLFormElement;
    const testStatusEmailBtn = document.getElementById(
      "test-status-email-btn"
    ) as HTMLButtonElement;

    // Handle email test form submission
    emailTestForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(emailTestForm);
      const to = formData.get("to") as string;
      const subject = formData.get("subject") as string;
      const body = formData.get("body") as string;
      const buttonText = formData.get("buttonText") as string;
      const statusSelect = formData.get("statusSelect") as string;

      // Disable button and show loading state
      sendEmailBtn.disabled = true;
      sendEmailBtn.textContent = "Sending...";

      try {
        // Call the email-delivery API directly
        const response = await fetch("/api/email-delivery", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include", // Include cookies
          body: JSON.stringify({
            projectId: "303", // Test project ID for webhook tracking
            projectStatus: "20", // Test project status for webhook tracking
            emailType: "test", // Add test email type
            usersToNotify: [to],
            // projectDetails: {
            //   title: "Test Project",
            //   address: "Test Address",
            //   est_time: "2-3 business days",
            //   profiles: [
            //     {
            //       email: to,
            //       first_name: "Test",
            //       last_name: "User",
            //       company_name: "Test Company",
            //     },
            //   ],
            // },
            buttonLink: "/dashboard",
            buttonText: "Access Your Dashboard",
            emailContent: body,
            emailSubject: subject, // Use the subject from the form
          }),
        });

        const result = await response.json();

        if (response.ok) {
          console.log("🔧 [DEBUG] Email test response OK, result:", result);

          // Use notification from API response if available, otherwise fallback
          if (result.notification) {
            console.log("🔧 [DEBUG] Using API notification:", result.notification);
            if (result.notification.type === "success" && window.showSuccess) {
              console.log("🔧 [DEBUG] Calling window.showSuccess");
              window.showSuccess(result.notification.title, result.notification.message, "error");
            } else if (result.notification.type === "error" && window.showModal) {
              console.log("🔧 [DEBUG] Calling window.showModal");
              window.showModal(result.notification.title, result.notification.message, "error");
            } else {
              // Fallback to console logging
              console.log(`🔔 [${result.notification.title}] ${result.notification.message}`);
            }
          } else {
            console.log("🔧 [DEBUG] No API notification, using fallback");
            // Fallback to original notification
            if (window.showSuccess) {
              console.log("🔧 [DEBUG] Calling window.showSuccess (fallback)");
              window.showSuccess(
                "Email Sent Successfully",
                `Test email sent to ${to}. Email Type: test`,
                8000
              );
            } else {
              console.log("🔧 [DEBUG] window.showSuccess not available, using console");
              console.log(
                "🔔 [Email Sent Successfully] Test email sent to ${to}. Email ID: ${result.emailId}"
              );
            }
          }

          // Reset form
          emailTestForm.reset();
        } else {
          // Use notification from API response if available, otherwise fallback
          if (result.notification) {
            if (result.notification.type === "error" && window.showModal) {
              window.showModal(result.notification.title, result.notification.message, "error");
            } else {
              // Fallback to console logging
              console.error(`🔔 [${result.notification.title}] ${result.notification.message}`);
            }
          } else {
            // Fallback to original notification
            if (window.showModal) {
              window.showModal(
                "Email Send Failed",
                result.error || "Failed to send email. Please check your configuration.",
                8000
              );
            } else {
              console.error(
                "🔔 [Email Send Failed]",
                result.error || "Failed to send email. Please check your configuration."
              );
            }
          }
        }
      } catch (error) {
        console.error("Email test error:", error);
        if (window.showModal) {
          window.showModal(
            "Network Error",
            "Failed to send email. Please check your connection and try again.",
            5000
          );
        } else {
          console.error(
            "🔔 [Network Error] Failed to send email. Please check your connection and try again."
          );
        }
      } finally {
        // Re-enable button
        sendEmailBtn.disabled = false;
        sendEmailBtn.textContent = "Send Test Email";
      }
    });

    // Handle status email test form submission
    statusEmailTestForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(statusEmailTestForm);
      const projectId = formData.get("projectId") as string;
      const statusCode = formData.get("statusCode") as string;
      const testEmail = formData.get("testEmail") as string;

      // Disable button and show loading state
      testStatusEmailBtn.disabled = true;
      testStatusEmailBtn.textContent = "Testing...";

      try {
        const response = await fetch("/api/test-status-email", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include", // Include cookies
          body: JSON.stringify({ projectId, statusCode, testEmail }),
        });

        const result = await response.json();

        if (response.ok) {
          // Use notification from API response if available, otherwise fallback
          if (result.notification) {
            if (result.notification.type === "success" && window.showSuccess) {
              window.showSuccess(result.notification.title, result.notification.message, "error");
            } else if (result.notification.type === "error" && window.showModal) {
              window.showModal(result.notification.title, result.notification.message, "error");
            } else {
              // Fallback to console logging
              console.log(`🔔 [${result.notification.title}] ${result.notification.message}`);
            }
          } else {
            // Fallback to original notification
            if (window.showSuccess) {
              window.showSuccess(
                "Status Email Test Successful",
                `Status ${statusCode} email test completed successfully`,
                8000
              );
            } else {
              console.log(
                "🔔 [Status Email Test Successful] Status ${statusCode} email test completed successfully"
              );
            }
          }

          // Log detailed results
          console.log("📧 [STATUS-TEST] Test results:", result);
        } else {
          // Use notification from API response if available, otherwise fallback
          if (result.notification) {
            if (result.notification.type === "error" && window.showModal) {
              window.showModal(result.notification.title, result.notification.message, "error");
            } else {
              // Fallback to console logging
              console.error(`🔔 [${result.notification.title}] ${result.notification.message}`);
            }
          } else {
            // Fallback to original notification
            if (window.showModal) {
              window.showModal(
                "Status Email Test Failed",
                result.error || "Failed to test status email. Please try again.",
                8000
              );
            } else {
              console.error(
                "🔔 [Status Email Test Failed]",
                result.error || "Failed to test status email. Please try again."
              );
            }
          }
        }
      } catch (error) {
        console.error("Status email test error:", error);
        if (window.showModal) {
          window.showModal(
            "Network Error",
            "Failed to test status email. Please check your connection and try again.",
            5000
          );
        } else {
          console.error(
            "🔔 [Network Error] Failed to test status email. Please check your connection and try again."
          );
        }
      } finally {
        // Re-enable button
        testStatusEmailBtn.disabled = false;
        testStatusEmailBtn.textContent = "Test Status Email";
      }
    });
  });
</script>
