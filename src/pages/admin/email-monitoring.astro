---
import Base from "../../layout/Base.astro";
import { defaultEmailConfig } from "../../lib/email-monitoring";

// Check if user is admin (you'll need to implement this based on your auth system)
const session = (Astro.locals as any).session;
const user = session?.user;

// You would check user role here
// const userRole = await getUserRole(user?.id);
// if (userRole !== 'Admin') {
//   return Astro.redirect('/');
// }

const config = defaultEmailConfig;
---

<Base
  title="Email Monitoring Dashboard"
  description="Monitor and configure email-to-project creation"
>
  <div class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Page Header -->
    <div class="bg-gradient-to-r from-green-600 to-blue-600 text-white p-6 rounded-lg mb-8">
      <h1 class="text-3xl font-bold mb-2">üìß Email Monitoring Dashboard</h1>
      <p class="text-green-100">Monitor and configure automatic project creation from emails</p>
    </div>

    <!-- Configuration Status -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border shadow-sm">
        <h3 class="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200">
          üì° Monitoring Status
        </h3>
        <div class="flex items-center">
          <div
            class={`w-3 h-3 rounded-full mr-2 ${config.enabled ? "bg-green-500" : "bg-red-500"}`}
          >
          </div>
          <span class={config.enabled ? "text-green-600" : "text-red-600"}>
            {config.enabled ? "Active" : "Disabled"}
          </span>
        </div>
        <p class="text-sm text-gray-600 dark:text-gray-400 mt-2">
          Monitored Email: {config.monitoredEmail}
        </p>
      </div>

      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border shadow-sm">
        <h3 class="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200">
          ‚öôÔ∏è Configuration
        </h3>
        <div class="space-y-1 text-sm">
          <div>
            Provider: <span class="font-medium">{config.provider}</span>
          </div>
          <div>
            Auto Create: <span
              class={config.autoCreateProjects ? "text-green-600" : "text-red-600"}
            >
              {config.autoCreateProjects ? "Yes" : "No"}
            </span>
          </div>
          <div>
            Require Approval: <span
              class={config.requireApproval ? "text-yellow-600" : "text-green-600"}
            >
              {config.requireApproval ? "Yes" : "No"}
            </span>
          </div>
        </div>
      </div>

      <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border shadow-sm">
        <h3 class="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200">
          üìä Today's Stats
        </h3>
        <div class="space-y-1 text-sm">
          <div>
            Emails Processed: <span id="emails-processed" class="font-medium">Loading...</span>
          </div>
          <div>
            Projects Created: <span id="projects-created" class="font-medium">Loading...</span>
          </div>
          <div>
            Success Rate: <span id="success-rate" class="font-medium">Loading...</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Setup Instructions -->
    <div
      class="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg border border-blue-200 dark:border-blue-700 mb-8"
    >
      <h3 class="text-lg font-semibold mb-4 text-blue-800 dark:text-blue-200">
        üöÄ Setup Instructions
      </h3>

      <div class="space-y-4">
        <div>
          <h4 class="font-semibold text-blue-700 dark:text-blue-300 mb-2">
            1. Environment Variables
          </h4>
          <div class="bg-gray-800 text-gray-200 p-3 rounded text-sm overflow-x-auto">
            <pre><code># Email Monitoring Configuration
EMAIL_MONITORING_ENABLED=true
MONITORED_EMAIL=projects@yourcompany.com
EMAIL_PROVIDER=sendgrid
EMAIL_WEBHOOK_SECRET=your-webhook-secret
AUTO_CREATE_PROJECTS=true
REQUIRE_PROJECT_APPROVAL=false
NOTIFY_ADMINS_ON_EMAIL=true

# SendGrid Configuration
SENDGRID_API_KEY=your-sendgrid-api-key

# Mailgun Configuration (alternative)
MAILGUN_API_KEY=your-mailgun-api-key
MAILGUN_DOMAIN=your-domain.com</code></pre>
          </div>
        </div>

        <div>
          <h4 class="font-semibold text-blue-700 dark:text-blue-300 mb-2">2. Webhook URL</h4>
          <div class="bg-white dark:bg-gray-700 p-3 rounded border">
            <code class="text-sm">https://yourdomain.com/api/email-webhook</code>
            <button
              onclick="copyToClipboard('https://yourdomain.com/api/email-webhook')"
              class="ml-2 px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
            >
              Copy
            </button>
          </div>
        </div>

        <div>
          <h4 class="font-semibold text-blue-700 dark:text-blue-300 mb-2">
            3. Email Provider Setup
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="border rounded p-4">
              <h5 class="font-medium mb-2">SendGrid</h5>
              <ol class="text-sm space-y-1 list-decimal list-inside">
                <li>Create SendGrid account</li>
                <li>Generate API key</li>
                <li>Set up inbound parse webhook</li>
                <li>Configure MX records</li>
              </ol>
            </div>
            <div class="border rounded p-4">
              <h5 class="font-medium mb-2">Mailgun</h5>
              <ol class="text-sm space-y-1 list-decimal list-inside">
                <li>Create Mailgun account</li>
                <li>Add your domain</li>
                <li>Set up webhook endpoints</li>
                <li>Configure DNS settings</li>
              </ol>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Recent Activity -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border shadow-sm mb-8">
      <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
        üìã Recent Email Activity
      </h3>

      <div id="recent-activity" class="space-y-3">
        <div class="text-gray-500 text-center py-8">Loading recent activity...</div>
      </div>
    </div>

    <!-- Test Email Processing -->
    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg border shadow-sm">
      <h3 class="text-lg font-semibold mb-4 text-gray-800 dark:text-gray-200">
        üß™ Test Email Processing
      </h3>

      <form id="test-email-form" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium mb-1">From Email</label>
            <input
              type="email"
              name="from"
              placeholder="client@example.com"
              class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
              required
            />
          </div>
          <div>
            <label class="block text-sm font-medium mb-1">Subject</label>
            <input
              type="text"
              name="subject"
              placeholder="Fire Protection System - 123 Main St"
              class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
              required
            />
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium mb-1">Email Content</label>
          <textarea
            name="content"
            rows="6"
            placeholder="Address: 123 Main St, Springfield
Square Footage: 5,000 sq ft
Building Type: Commercial
Services Needed: Sprinkler, Alarm
New Construction: Yes

Please provide fire protection system design for our new commercial building."
            class="w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600"
            required></textarea>
        </div>

        <button
          type="submit"
          class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
        >
          üß™ Process Test Email
        </button>
      </form>

      <div id="test-results" class="mt-4 hidden">
        <h4 class="font-medium mb-2">Test Results:</h4>
        <div class="bg-gray-100 dark:bg-gray-700 p-3 rounded">
          <pre id="test-output" class="text-sm"></pre>
        </div>
      </div>
    </div>
  </div>
</Base>

<script>
  // Load statistics
  async function loadStats() {
    try {
      const response = await fetch("/api/email-monitoring-stats");
      if (response.ok) {
        const stats = await response.json();
        document.getElementById("emails-processed")!.textContent = stats.emailsProcessed || "0";
        document.getElementById("projects-created")!.textContent = stats.projectsCreated || "0";
        document.getElementById("success-rate")!.textContent = stats.successRate || "0%";
      }
    } catch (error) {
      console.error("Error loading stats:", error);
      document.getElementById("emails-processed")!.textContent = "Error";
      document.getElementById("projects-created")!.textContent = "Error";
      document.getElementById("success-rate")!.textContent = "Error";
    }
  }

  // Load recent activity
  async function loadRecentActivity() {
    try {
      const response = await fetch("/api/email-monitoring-activity");
      if (response.ok) {
        const activity = await response.json();
        const container = document.getElementById("recent-activity")!;

        if (activity.length === 0) {
          container.innerHTML =
            '<div class="text-gray-500 text-center py-8">No recent activity</div>';
          return;
        }

        container.innerHTML = activity
          .map(
            (item: any) => `
          <div class="flex items-center justify-between p-3 border rounded">
            <div>
              <div class="font-medium">${item.from}</div>
              <div class="text-sm text-gray-600">${item.subject}</div>
              <div class="text-xs text-gray-500">${new Date(item.timestamp).toLocaleString()}</div>
            </div>
            <div class="text-right">
              <div class="text-sm ${item.success ? "text-green-600" : "text-red-600"}">
                ${item.success ? "‚úÖ Success" : "‚ùå Failed"}
              </div>
              ${item.confidence ? `<div class="text-xs text-gray-500">${item.confidence}% confidence</div>` : ""}
            </div>
          </div>
        `
          )
          .join("");
      }
    } catch (error) {
      console.error("Error loading recent activity:", error);
    }
  }

  // Test email processing
  document.getElementById("test-email-form")?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(e.target as HTMLFormElement);
    const testData = {
      from: formData.get("from"),
      subject: formData.get("subject"),
      text: formData.get("content"),
      timestamp: new Date().toISOString(),
    };

    try {
      const response = await fetch("/api/email-webhook", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify([testData]), // SendGrid format
      });

      const result = await response.json();

      document.getElementById("test-results")!.classList.remove("hidden");
      document.getElementById("test-output")!.textContent = JSON.stringify(result, null, 2);
    } catch (error) {
      document.getElementById("test-results")!.classList.remove("hidden");
      document.getElementById("test-output")!.textContent = `Error: ${error.message}`;
    }
  });

  // Copy to clipboard function
  function copyToClipboard(text: string) {
    navigator.clipboard.writeText(text).then(() => {
      // Show toast or feedback
      alert("Copied to clipboard!");
    });
  }

  // Load data on page load
  document.addEventListener("DOMContentLoaded", () => {
    loadStats();
    loadRecentActivity();

    // Refresh every 30 seconds
    setInterval(() => {
      loadStats();
      loadRecentActivity();
    }, 30000);
  });
</script>

<style>
  pre {
    white-space: pre-wrap;
    word-wrap: break-word;
  }
</style>
