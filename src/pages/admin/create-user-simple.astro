---
import { checkAuth } from "../../lib/auth";
import { supabaseAdmin } from "../../lib/supabase-admin";
import { getApiBaseUrl } from "../../lib/url-utils";
import App from "../../components/common/App.astro";

const { currentUser } = await checkAuth(Astro.cookies);

if (!currentUser || currentUser.profile?.role !== "Admin") {
  return Astro.redirect("/");
}

const baseUrl = getApiBaseUrl(Astro.request);
---

<App>
  <form id="createUserForm" class="space-y-4">
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
      <div>
        <label for="firstName" class="mb-1 block text-sm font-medium text-gray-700">
          First Name *
        </label>
        <input
          type="text"
          id="firstName"
          name="firstName"
          required
          class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      <div>
        <label for="lastName" class="mb-1 block text-sm font-medium text-gray-700">
          Last Name *
        </label>
        <input
          type="text"
          id="lastName"
          name="lastName"
          required
          class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>

    <div>
      <label for="email" class="mb-1 block text-sm font-medium text-gray-700">
        Email Address *
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>

    <div>
      <label for="companyName" class="mb-1 block text-sm font-medium text-gray-700">
        Company Name
      </label>
      <input
        type="text"
        id="companyName"
        name="companyName"
        class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>

    <div>
      <label for="phone" class="mb-1 block text-sm font-medium text-gray-700"> Phone Number </label>
      <input
        type="tel"
        id="phone"
        name="phone"
        class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>

    <div>
      <label for="role" class="mb-1 block text-sm font-medium text-gray-700"> Role * </label>
      <select
        id="role"
        name="role"
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <option value="">Select a role</option>
        <option value="Admin">Admin</option>
        <option value="Staff">Staff</option>
        <option value="Client">Client</option>
      </select>
    </div>

    <div class="flex items-center space-x-4">
      <label class="flex items-center">
        <input
          type="checkbox"
          id="smsAlerts"
          name="smsAlerts"
          class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <span class="ml-2 text-sm text-gray-700">Enable SMS Alerts</span>
      </label>
    </div>

    <div class="pt-4">
      <button
        type="submit"
        class="w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:cursor-not-allowed disabled:opacity-50"
      >
        Create User
      </button>
    </div>
  </form>

  <div id="result" class="mt-6 hidden">
    <div
      id="successMessage"
      class="hidden rounded border border-green-400 bg-green-100 px-4 py-3 text-green-700"
    >
      <strong>Success!</strong>
      <span id="successText"></span>
    </div>
    <div
      id="errorMessage"
      class="hidden rounded border border-red-400 bg-red-100 px-4 py-3 text-red-700"
    >
      <strong>Error!</strong>
      <span id="errorText"></span>
    </div>
  </div>
</App>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("createUserForm") as HTMLFormElement;
    if (!form) return;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      const resultDiv = document.getElementById("result");
      const successMessage = document.getElementById("successMessage");
      const errorMessage = document.getElementById("errorMessage");
      const successText = document.getElementById("successText");
      const errorText = document.getElementById("errorText");

      if (
        !submitButton ||
        !resultDiv ||
        !successMessage ||
        !errorMessage ||
        !successText ||
        !errorText
      ) {
        console.error("Required elements not found");
        return;
      }

      // Reset UI
      submitButton.disabled = true;
      submitButton.textContent = "Creating User...";
      resultDiv.classList.add("hidden");
      successMessage.classList.add("hidden");
      errorMessage.classList.add("hidden");

      try {
        const formData = new FormData(form);
        const userData = {
          firstName: formData.get("firstName"),
          lastName: formData.get("lastName"),
          email: formData.get("email"),
          companyName: formData.get("companyName"),
          phone: formData.get("phone"),
          role: formData.get("role"),
          smsAlerts: formData.get("smsAlerts") === "on",
        };

        const response = await fetch("/api/create-user-simple", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(userData),
        });

        const result = await response.json();

        if (result.success) {
          successText.textContent = result.message;
          successMessage.classList.remove("hidden");
          resultDiv.classList.remove("hidden");
          form.reset();
        } else {
          errorText.textContent = result.error || "An error occurred";
          errorMessage.classList.remove("hidden");
          resultDiv.classList.remove("hidden");
        }
      } catch (error) {
        const errorMsg = error instanceof Error ? error.message : "Unknown error";
        errorText.textContent = "Network error: " + errorMsg;
        errorMessage.classList.remove("hidden");
        resultDiv.classList.remove("hidden");
      } finally {
        submitButton.disabled = false;
        submitButton.textContent = "Create User";
      }
    });
  });
</script>
