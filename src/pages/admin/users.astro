---
const requireAuthRedirect = "/login";
import { checkAuth } from "../../lib/auth";

const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);

// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser || currentUser.profile.role !== "Admin")) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalCompanyData } from "../../pages/api/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../../pages/api/global-classes";
const { globalInputClasses, globalPrimaryTextClasses, globalSecondaryTextClasses } =
  globalClasses();

import App from "../../components/common/App.astro";
import Alert from "../../components/partials/Alert.astro";
import BoxIcon from "../../components/common/BoxIcon.astro";
import Button from "../../components/common/Button.astro";
import StaffCreationForm from "../../components/form/StaffCreationForm.astro";
import "../../lib/refresh-manager.ts";

// Fetch all users for the admin panel
let users: any[] = [];
let error = null;

try {
  if (supabase) {
    // First get all profiles
    const { data: allProfiles, error: profilesError } = await supabase
      .from("profiles")
      .select("id, first_name, last_name, company_name, phone, role, email, created_at")
      .order("created_at", { ascending: false });

    if (profilesError) {
      console.error("Error fetching profiles:", profilesError);
      error = profilesError.message;
    } else if (allProfiles) {
      // Email and phone are already available in profiles table
      const profilesWithEmails = allProfiles.map((profile: any) => {
        return {
          ...profile,
          email: profile.email || "No email found",
          phone: profile.phone || null,
        };
      });

      users = profilesWithEmails;
      console.log(`Fetched ${users.length} users with emails for admin panel`);
    }
  }
} catch (fetchError) {
  console.error("Error in users fetch:", fetchError);
  error = "Failed to fetch users";
}

// Get user counts by role
const userCounts = {
  Admin: users.filter((u) => u.role === "Admin").length,
  Staff: users.filter((u) => u.role === "Staff").length,
  Client: users.filter((u) => u.role === "Client").length,
  Total: users.length,
};
---

<App
  title={`User Management - ${globalCompanyName}`}
  description={`Manage all system users for ${globalCompanyName}`}
  currentUser={currentUser}
  session={session || undefined}
  supabase={supabase}
  globalPrimaryTextClasses={globalPrimaryTextClasses}
  globalSecondaryTextClasses={globalSecondaryTextClasses}
  globalInputClasses={globalInputClasses}
  globalCompanyName={globalCompanyName}
  globalCompanySlogan={globalCompanySlogan}
  globalCompanyAddress={globalCompanyAddress}
  globalCompanyPhone={globalCompanyPhone}
  globalCompanyEmail={globalCompanyEmail}
  globalCompanyWebsite={globalCompanyWebsite}
  globalCompanyLogo={globalCompanyLogo}
  globalCompanyLogoDark={globalCompanyLogoDark}
  globalCompanyLogoLight={globalCompanyLogoLight}
>
  <div
    id="main-content"
    class="ahOqFrhzLjivRe8a1kX_ uLPch_bqyJDXwe5tynMV t6gkcSf0Bt4MLItXvDJ_ pdl952ted2i71qBLPIcQ jtAJHOc7mn7b4IKRO59D h8KYXnua2NT4kTVzieom 12rem-REMOVED"
  >
    <main>
      <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU">
        <div
          class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi SWeL9OnwkbKp0VeBUJlf LSIxp7RSuOKhsg28v_u3 text-black dark:text-white"
        >
          <!-- Page Header -->
          <div class="mb-8">
            <h1 class="mb-2 text-3xl font-bold">User Management</h1>
            <p class="text-gray-800 dark:text-gray-200">
              Create, view, and manage all system users
            </p>
          </div>

          <!-- User Statistics Cards -->
          <div class="mb-8 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
            <div
              class="rounded-lg bg-white p-6 shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
            >
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <BoxIcon name="group" class="h-8 w-8 text-blue-600" />
                </div>
                <div class="ml-4">
                  <dt class="text-muted dark:text-muted text-sm font-medium">Total Users</dt>
                  <dd class="text-2xl font-semibold text-gray-900 dark:text-white">
                    {userCounts.Total}
                  </dd>
                </div>
              </div>
            </div>

            <div
              class="rounded-lg bg-white p-6 shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
            >
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <BoxIcon name="shield-check" class="h-8 w-8 text-red-600" />
                </div>
                <div class="ml-4">
                  <dt class="text-muted dark:text-muted text-sm font-medium">Admins</dt>
                  <dd class="text-2xl font-semibold text-gray-900 dark:text-white">
                    {userCounts.Admin}
                  </dd>
                </div>
              </div>
            </div>

            <div
              class="rounded-lg bg-white p-6 shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
            >
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <BoxIcon name="user-check" class="h-8 w-8 text-green-600" />
                </div>
                <div class="ml-4">
                  <dt class="text-muted dark:text-muted text-sm font-medium">Staff</dt>
                  <dd class="text-2xl font-semibold text-gray-900 dark:text-white">
                    {userCounts.Staff}
                  </dd>
                </div>
              </div>
            </div>

            <div
              class="rounded-lg bg-white p-6 shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
            >
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <BoxIcon name="user" class="h-8 w-8 text-purple-600" />
                </div>
                <div class="ml-4">
                  <dt class="text-muted dark:text-muted text-sm font-medium">Clients</dt>
                  <dd class="text-2xl font-semibold text-gray-900 dark:text-white">
                    {userCounts.Client}
                  </dd>
                </div>
              </div>
            </div>
          </div>

          <!-- Main Content Grid -->
          <div class="grid grid-cols-1 gap-8 lg:grid-cols-3">
            <!-- User List (Left Side - 2 columns) -->
            <div class="lg:col-span-2">
              <div
                class="rounded-lg bg-white shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
              >
                <!-- Header with Search and Filters -->
                <div class="border-b border-border-light p-6 dark:border-border-dark">
                  <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
                    <div class="flex items-center gap-4">
                      <h2 class="text-lg font-semibold text-gray-900 dark:text-white">All Users</h2>
                    </div>

                    <div class="flex flex-col gap-2 sm:flex-row sm:items-center">
                      <!-- Search -->
                      <div class="relative">
                        <BoxIcon
                          name="search"
                          class="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400"
                        />
                        <input
                          type="text"
                          id="user-search"
                          placeholder="Search by name or email..."
                          class={`${globalInputClasses} pl-10 pr-4`}
                        />
                      </div>

                      <!-- Role Filter -->
                      <select
                        id="role-filter"
                        class="_1jTZ8KXRZul60S6czNi SWeL9OnwkbKp0VeBUJlf rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:text-white dark:focus:border-primary-400"
                      >
                        <option value="">All Roles</option>
                        <option value="Admin">Admin</option>
                        <option value="Staff">Staff</option>
                        <option value="Client">Client</option>
                      </select>
                    </div>
                  </div>
                </div>

                <!-- Users Table -->
                <div class="overflow-hidden">
                  <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                      <thead
                        class="bg-gray-50 text-xs uppercase text-gray-700 dark:bg-gray-700 dark:text-gray-400"
                      >
                        <tr>
                          <th
                            class="text-muted dark:text-muted dark:hover:text-primary-dark cursor-pointer px-6 py-3 text-left text-xs font-medium uppercase tracking-wider hover:text-primary"
                            data-sort="name"
                          >
                            <div class="flex items-center gap-1">
                              Name
                              <BoxIcon name="chevron-up-down" class="h-3 w-3" />
                            </div>
                          </th>
                          <th
                            class="text-muted dark:text-muted dark:hover:text-primary-dark cursor-pointer px-6 py-3 text-left text-xs font-medium uppercase tracking-wider hover:text-primary"
                            data-sort="email"
                          >
                            <div class="flex items-center gap-1">
                              Email
                              <BoxIcon name="chevron-up-down" class="h-3 w-3" />
                            </div>
                          </th>
                          <th
                            class="text-muted dark:text-muted dark:hover:text-primary-dark cursor-pointer px-6 py-3 text-left text-xs font-medium uppercase tracking-wider hover:text-primary"
                            data-sort="role"
                          >
                            <div class="flex items-center gap-1">
                              Role
                              <BoxIcon name="chevron-up-down" class="h-3 w-3" />
                            </div>
                          </th>
                          <th
                            class="text-muted dark:text-muted dark:hover:text-primary-dark cursor-pointer px-6 py-3 text-left text-xs font-medium uppercase tracking-wider hover:text-primary"
                            data-sort="created"
                          >
                            <div class="flex items-center gap-1">
                              Created
                              <BoxIcon name="chevron-up-down" class="h-3 w-3" />
                            </div>
                          </th>
                          <th
                            class="text-muted dark:text-muted px-6 py-3 text-right text-xs font-medium uppercase tracking-wider"
                          >
                            Actions
                          </th>
                        </tr>
                      </thead>
                      <tbody
                        id="users-table-body"
                        class="divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-800"
                      >
                        {
                          users.map((user) => {
                            const fullName =
                              `${user.first_name || ""} ${user.last_name || ""}`.trim();
                            const displayName = fullName || user.company_name || "Unknown User";
                            const createdDate = new Date(user.created_at).toLocaleDateString();

                            return (
                              <tr
                                class="user-row hover:bg-gray-50 dark:hover:bg-gray-700"
                                data-role={user.role}
                                data-name={displayName.toLowerCase()}
                              >
                                <td class="whitespace-nowrap px-6 py-4">
                                  <div class="flex items-center">
                                    <div class="flex-shrink-0">
                                      <div
                                        class={`flex h-10 w-10 items-center justify-center rounded-lg ${
                                          user.role === "Admin"
                                            ? "bg-red-100 dark:bg-red-900/30"
                                            : user.role === "Staff"
                                              ? "bg-green-100 dark:bg-green-900/30"
                                              : "bg-purple-100 dark:bg-purple-900/30"
                                        }`}
                                      >
                                        <BoxIcon
                                          name={
                                            user.role === "Admin"
                                              ? "shield-check"
                                              : user.role === "Staff"
                                                ? "user-check"
                                                : "user"
                                          }
                                          class={`h-5 w-5 ${
                                            user.role === "Admin"
                                              ? "text-red-600 dark:text-red-400"
                                              : user.role === "Staff"
                                                ? "text-green-600 dark:text-green-400"
                                                : "text-purple-600 dark:text-purple-400"
                                          }`}
                                        />
                                      </div>
                                    </div>
                                    <div class="ml-4">
                                      <div class="text-sm font-medium text-gray-900 dark:text-white">
                                        {displayName}
                                      </div>
                                      {user.phone && (
                                        <div class="text-muted dark:text-muted text-sm">
                                          {user.phone}
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </td>
                                <td class="whitespace-nowrap px-6 py-4">
                                  <div class="text-sm text-gray-900 dark:text-white">
                                    {user.email}
                                  </div>
                                </td>
                                <td class="whitespace-nowrap px-6 py-4">
                                  <span
                                    class={`inline-flex rounded-lg px-2 py-1 text-xs font-semibold ${
                                      user.role === "Admin"
                                        ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400"
                                        : user.role === "Staff"
                                          ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400"
                                          : "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400"
                                    }`}
                                  >
                                    {user.role}
                                  </span>
                                </td>
                                <td class="text-muted dark:text-muted whitespace-nowrap px-6 py-4 text-sm">
                                  {createdDate}
                                </td>
                                <td class="whitespace-nowrap px-6 py-4 text-right text-sm font-medium">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                                    onclick={`confirmDeleteUser('${user.id}', '${displayName}')`}
                                    title="Delete user"
                                    icon="trash"
                                  />
                                </td>
                              </tr>
                            );
                          })
                        }
                      </tbody>
                    </table>

                    {
                      users.length === 0 && (
                        <div class="py-12 text-center">
                          <BoxIcon name="users" class="mx-auto h-12 w-12 text-gray-400" />
                          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">
                            No users found
                          </h3>
                          <p class="text-muted dark:text-muted mt-1 text-sm">
                            {error ? `Error: ${error}` : "Get started by creating a new user."}
                          </p>
                        </div>
                      )
                    }
                  </div>
                </div>
              </div>
            </div>

            <!-- Create User Form (Right Side - 1 column) -->
            <div class="lg:col-span-1">
              <div
                class="rounded-lg bg-white p-6 shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
              >
                <!-- Header -->
                <div class="mb-6">
                  <h2 class="mb-2 text-lg font-semibold text-gray-900 dark:text-white">
                    Create New User
                  </h2>
                  <p class="text-sm text-gray-800 dark:text-gray-200">
                    Add a new user to the system
                  </p>
                </div>

                <!-- Create User Form -->
                <form id="create-user-form" class="space-y-4">
                  <StaffCreationForm
                    globalInputClasses={globalInputClasses}
                    globalSecondaryTextClasses={globalSecondaryTextClasses}
                    globalPrimaryTextClasses={globalPrimaryTextClasses}
                  />

                  <!-- Submit Button -->
                  <div class="pt-2">
                    <Button
                      type="submit"
                      id="submit-btn"
                      variant="primary"
                      size="md"
                      fullWidth
                      loading={true}
                    >
                      <span id="submit-text">Create User</span>
                    </Button>
                  </div>

                  <Alert
                    type="info"
                    title="Account Setup"
                    message="<ol class='list-inside list-decimal space-y-1 text-xs'>
                          <li>An invitation email will be sent</li>
                          <li>User can set up authentication</li>
                          <li>User will appear in the list immediately</li>
                        </ol>"
                  />
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</App>

<script>
  // User management functionality

  interface User {
    element: Element;
    name: string;
    email: string;
    role: string;
    created: string;
  }

  // Email validation function (client-side version)
  function validateEmail(email: string): string | null {
    if (!email || !email.trim()) {
      return "Email is required";
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email.trim())) {
      return "Invalid email format. Please use email@example.com";
    }

    return null;
  }

  let currentUsers: User[] = [];

  let currentSort = { field: "created", direction: "desc" };
  let deleteUserId: string | null = null;

  document.addEventListener("DOMContentLoaded", function () {
    // Reset form values on page load to ensure clean state
    const searchInput = document.getElementById("user-search");
    const roleFilter = document.getElementById("role-filter");
    if (searchInput) (searchInput as HTMLInputElement).value = "";
    if (roleFilter) (roleFilter as HTMLSelectElement).value = "";

    initializeUserManagement();
  });

  function initializeUserManagement() {
    // Get initial users data
    currentUsers = Array.from(document.querySelectorAll(".user-row")).map((row) => ({
      element: row,
      name: (row as HTMLElement).dataset.name || "",
      email: (row as HTMLElement).querySelector("td:nth-child(2) div")?.textContent?.trim() || "",
      role: (row as HTMLElement).dataset.role || "",
      created: (row as HTMLElement).querySelector("td:nth-child(4)")?.textContent?.trim() || "",
    }));

    // Initialize event listeners
    setupSearchAndFilter();
    setupSorting();
    setupFormSubmission();

    // Apply initial filters (in case browser retains form values after refresh)
    setTimeout(() => {
      filterUsers();
    }, 100);
  }

  function setupSearchAndFilter() {
    const searchInput = document.getElementById("user-search");
    const roleFilter = document.getElementById("role-filter");

    if (searchInput) {
      searchInput.addEventListener("input", filterUsers as EventListener);
    }

    if (roleFilter) {
      roleFilter.addEventListener("change", filterUsers as EventListener);
    }
  }

  function setupSorting() {
    const sortHeaders = document.querySelectorAll("[data-sort]");
    sortHeaders.forEach((header) => {
      header.addEventListener("click", () => {
        const field = (header as HTMLElement).dataset.sort;
        if (currentSort.field === field) {
          currentSort.direction = currentSort.direction === "asc" ? "desc" : "asc";
        } else {
          currentSort.field = field as keyof typeof currentSort;
          currentSort.direction = "asc";
        }
        sortUsers();
        updateSortIndicators();
      });
    });
  }

  function setupFormSubmission() {
    const form = document.getElementById("create-user-form");
    const submitBtn = document.getElementById("submit-btn");
    const submitText = document.getElementById("submit-text");

    if (!form || !submitBtn) return;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form as HTMLFormElement);
      const userData = {
        email: formData.get("email") as string,
        phone: formData.get("phone") as string,
        role: formData.get("role-select") as string,
        first_name: formData.get("first_name") as string,
        last_name: formData.get("last_name") as string,
        company_name: formData.get("company_name") as string,
      };

      // Validate required fields
      if (
        !userData.first_name?.trim() ||
        !userData.last_name?.trim() ||
        !userData.email?.trim() ||
        !userData.role
      ) {
        if ((window as any).showModal) {
          (window as any).showModal(
            "error",
            "Validation Error",
            "Please fill in all required fields.",
            5000
          );
        } else if (window.showModal) {
          window.showModal("error", "Validation Error", "Please fill in all required fields.");
        }
        return;
      }

      // Validate email format
      const emailError = validateEmail(userData.email);
      if (emailError) {
        if ((window as any).showModal) {
          (window as any).showModal("error", "Validation Error", emailError, 5000);
        } else if (window.showModal) {
          window.showModal("error", "Validation Error", emailError);
        }
        return;
      }

      // Use first + last name if company is empty
      if (!userData.company_name) {
        userData.company_name = userData.first_name + " " + userData.last_name;
      }

      // Show loading state
      setFormLoading(true);

      try {
        const response = await fetch("/api/create-user", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(userData),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Show notification if provided by API
          if (result.notification && (window as any).showModal) {
            (window as any).showModal(
              result.notification.type,
              result.notification.title,
              result.notification.message,
              result.notification.duration || 5000
            );
          }

          // Reset form
          (form as HTMLFormElement).reset();

          // Refresh page after short delay to show new user
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          // Handle different error types from API response
          let errorTitle = "User Creation Failed";
          let errorMessage = "Failed to create user. Please try again.";
          let errorDuration = 5000;

          // Check for specific error types
          if (result.error) {
            errorMessage = result.error;
          }

          if (result.details) {
            // Use the detailed error message for more specific feedback
            errorMessage = result.details;
          }

          // Handle specific error cases
          if (result.error && result.error.includes("email address has already been registered")) {
            errorTitle = "Email Already Exists";
            errorMessage =
              "A user with this email address already exists. Please use a different email.";
            errorDuration = 7000;
          } else if (result.error && result.error.includes("validation")) {
            errorTitle = "Validation Error";
            errorMessage = "Please check your input and try again.";
          } else if (result.error && result.error.includes("authentication")) {
            errorTitle = "Authentication Error";
            errorMessage = "Please log in again and try creating the user.";
          } else if (result.error && result.error.includes("permission")) {
            errorTitle = "Permission Denied";
            errorMessage = "You don't have permission to create users.";
          }

          // Show error notification
          if ((window as any).showModal) {
            (window as any).showModal(errorTitle, errorMessage, "error", errorDuration);
          } else if (window.showModal) {
            // Fallback to modal
            window.showModal("error", errorTitle, errorMessage);
          }
        }
      } catch (error) {
        console.error("Create user error:", error);
        if ((window as any).showModal) {
          (window as any).showModal(
            "Network Error",
            "Network error. Please check your connection and try again.",
            "error",
            5000
          );
        } else if (window.showModal) {
          window.showModal(
            "Network Error",
            "Network error. Please check your connection and try again.",
            "error"
          );
        }
      } finally {
        setFormLoading(false);
      }
    });

    function setFormLoading(loading: boolean) {
      if (loading) {
        (submitBtn as HTMLButtonElement).disabled = true;
        (submitText as HTMLElement).textContent = "Creating...";
      } else {
        (submitBtn as HTMLButtonElement).disabled = false;
        (submitText as HTMLElement).textContent = "Create User";
      }
    }
  }

  function filterUsers() {
    const searchTerm =
      ((
        document.getElementById("user-search") as HTMLInputElement
      )?.value?.toLowerCase() as string) || "";
    const roleFilter =
      ((document.getElementById("role-filter") as HTMLSelectElement)?.value as string) || "";

    currentUsers.forEach((user) => {
      const matchesSearch =
        !searchTerm ||
        user.name.includes(searchTerm) ||
        user.email.toLowerCase().includes(searchTerm);
      const matchesRole = !roleFilter || user.role === roleFilter;
      const shouldShow = matchesSearch && matchesRole;

      if (shouldShow) {
        (user.element as HTMLElement).style.display = "";
      } else {
        (user.element as HTMLElement).style.display = "none";
      }
    });
  }

  function sortUsers() {
    const tbody = document.getElementById("users-table-body") as HTMLTableSectionElement;
    if (!tbody) return;

    const sortedUsers = [...currentUsers].sort((a, b) => {
      let aVal: any, bVal: any;

      switch (currentSort.field) {
        case "name":
          aVal = a.name;
          bVal = b.name;
          break;
        case "email":
          aVal = a.email;
          bVal = b.email;
          break;
        case "role":
          aVal = a.role;
          bVal = b.role;
          break;
        case "created":
          aVal = new Date(a.created);
          bVal = new Date(b.created);
          break;
        default:
          return 0;
      }

      if (aVal < bVal) return currentSort.direction === "asc" ? -1 : 1;
      if (aVal > bVal) return currentSort.direction === "asc" ? 1 : -1;
      return 0;
    });

    // Reorder DOM elements
    sortedUsers.forEach((user) => {
      tbody.appendChild(user.element);
    });
  }

  function updateSortIndicators() {
    const headers = document.querySelectorAll("[data-sort]");
    headers.forEach((header) => {
      const icon = header.querySelector(".bx") as HTMLElement;
      if ((header as HTMLElement).dataset.sort === currentSort.field) {
        icon.className =
          currentSort.direction === "asc"
            ? "bx bx-chevron-up h-3 w-3"
            : "bx bx-chevron-down h-3 w-3";
      } else {
        icon.className = "bx bx-chevron-up-down h-3 w-3";
      }
    });
  }

  // Global functions for delete functionality
  (window as any).confirmDeleteUser = function (userId: string, userName: string) {
    deleteUserId = userId;

    // Use the unified modal system
    if ((window as any).showModal) {
      (window as any).showModal(
        "warning",
        "Delete User",
        `Are you sure you want to delete ${userName}? This action cannot be undone.`,
        6000000, // 6000 seconds timeout
        [
          {
            label: "Cancel",
            variant: "secondary",
            fullWidth: true,
            action: () => {
              deleteUserId = null;
            },
          },
          {
            label: "Delete User",
            variant: "danger",
            fullWidth: true,
            action: () => {
              executeDeleteUser();
            },
          },
        ]
      );
    } else {
      // Fallback to confirm dialog if modal system not available
      if (confirm(`Are you sure you want to delete ${userName}? This action cannot be undone.`)) {
        executeDeleteUser();
      }
    }
  };

  async function executeDeleteUser() {
    if (!deleteUserId) return;

    try {
      const response = await fetch("/api/delete-user", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userId: deleteUserId }),
      });

      if (response.ok) {
        // Show success message
        if (window.showModal) {
          window.showModal("User Deleted", "User has been successfully deleted.", "success", 3000);
        }

        // Remove user from DOM
        const userRow = document
          .querySelector(`[onclick*="${deleteUserId}"]`)
          ?.closest(".user-row");
        if (userRow) {
          userRow.remove();
        }

        // Clear filters before refresh to avoid state issues
        const searchInput = document.getElementById("user-search");
        const roleFilter = document.getElementById("role-filter") as HTMLSelectElement;
        if (searchInput) (searchInput as HTMLSelectElement).value = "";
        if (roleFilter) (roleFilter as HTMLSelectElement).value = "";

        // Update user counts (simple refresh for now)
        setTimeout(() => window.location.reload(), 1500);
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to delete user");
      }
    } catch (error) {
      console.error("Delete user error:", error);
      if (window.showModal) {
        window.showModal(
          "Delete Failed",
          (error as Error).message || "Failed to delete user",
          "error"
        );
      }
    } finally {
      // Reset delete user ID
      deleteUserId = null;
    }
  }
</script>
