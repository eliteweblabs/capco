---
import { checkAuth } from "../../lib/auth";
import { supabaseAdmin } from "../../lib/supabase-admin";
import App from "../../components/common/App.astro";

// Check authentication
const { currentUser, session, supabase } = await checkAuth(Astro.cookies);

if (!currentUser) {
  return Astro.redirect("/auth/login");
}

// Check if user is admin
const { data: profile } = await supabase
  .from("profiles")
  .select("role")
  .eq("id", currentUser.id)
  .single();

if (profile?.role !== "Admin") {
  return Astro.redirect("/dashboard");
}

// Get all users for testing
let allUsers: any[] = [];
if (supabaseAdmin) {
  const { data: users } = await supabaseAdmin
    .from("profiles")
    .select("id, firstName, lastName, email, role, smsAlerts, mobileCarrier, phone")
    .order("firstName");

  if (users) {
    allUsers = users.map((user) => {
      // Check if user has SMS setup (for display only, don't modify data)
      const hasSmsSetup = user.smsAlerts && user.mobileCarrier && user.phone;

      return {
        ...user,
        name: `${user.firstName || ""} ${user.lastName || ""}`.trim() || user.email,
        hasSmsSetup, // Add SMS indicator for display
      };
    });
  }
}
---

<App title="Update Delivery Test" {currentUser} {session}>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="color-background shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Update Delivery Test</h1>
          <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
            Test different update delivery methods and notification types
          </p>
        </div>

        <div class="p-6">
          <!-- Test Form -->
          <form id="email-test-form" class="space-y-6">
            <!-- Method Selection -->
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                Delivery Method
              </label>
              <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                <label class="flex items-center">
                  <input type="radio" name="method" value="email" class="mr-2" checked />
                  <span class="text-sm">Email</span>
                </label>
                <label class="flex items-center">
                  <input type="radio" name="method" value="browser" class="mr-2" />
                  <span class="text-sm">Browser</span>
                </label>
                <label class="flex items-center">
                  <input type="radio" name="method" value="internal" class="mr-2" />
                  <span class="text-sm">Internal</span>
                </label>
                <label class="flex items-center">
                  <input type="radio" name="method" value="magicLink" class="mr-2" />
                  <span class="text-sm">Magic Link</span>
                </label>
                <label class="flex items-center">
                  <input type="radio" name="method" value="all" class="mr-2" />
                  <span class="text-sm">All</span>
                </label>
              </div>
              <p class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                Note: SMS notifications are sent automatically to users with SMS alerts enabled
              </p>
            </div>

            <!-- Recipients -->
            <div>
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Recipients
              </label>
              <select
                id="recipients"
                name="recipients"
                multiple
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                size="5"
              >
                {
                  allUsers.map((user) => (
                    <option value={user.email}>
                      {user.name} ({user.email}) {user.hasSmsSetup ? "📱" : "📧"}
                    </option>
                  ))
                }
              </select>
              <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                Hold Ctrl/Cmd to select multiple recipients
              </p>
            </div>

            <!-- Email Subject -->
            <div>
              <label
                for="subject"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
              >
                Email Subject
              </label>
              <input
                type="text"
                id="subject"
                name="subject"
                value="Test Email - Email Delivery System"
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                required
              />
            </div>

            <!-- Email Content -->
            <div>
              <label
                for="content"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
              >
                Email Content
              </label>
              <textarea
                id="content"
                name="content"
                rows="4"
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                required
                >This is a test email from the Email Delivery Test system. This email is being sent
                to test the different delivery methods and notification types. If you received this
                email, the system is working correctly!</textarea
              >
            </div>

            <!-- Button Link (for magicLink method) -->
            <div id="button-link-section" class="hidden">
              <label
                for="buttonLink"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
              >
                Button Link
              </label>
              <input
                type="url"
                id="buttonLink"
                name="buttonLink"
                value="https://capcofire.com/dashboard"
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                placeholder="https://capcofire.com/dashboard"
              />
            </div>

            <!-- Button Text (for magicLink method) -->
            <div id="button-text-section" class="hidden">
              <label
                for="buttonText"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
              >
                Button Text
              </label>
              <input
                type="text"
                id="buttonText"
                name="buttonText"
                value="Access Dashboard"
                class="w-full border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                placeholder="Access Dashboard"
              />
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end">
              <button
                type="submit"
                id="submit-btn"
                class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
              >
                Send Test Email
              </button>
            </div>
          </form>

          <!-- Results Section -->
          <div id="results" class="mt-8 hidden">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Test Results</h3>
            <div id="results-content" class="bg-gray-50 dark:bg-gray-700 rounded-md p-4">
              <!-- Results will be populated here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</App>

<script define:vars={{ allUsers }}>
  class EmailDeliveryTest {
    constructor() {
      this.init();
    }

    init() {
      this.bindEvents();
      this.setupMethodHandlers();
    }

    bindEvents() {
      const form = document.getElementById("email-test-form");
      if (form) {
        form.addEventListener("submit", (e) => this.handleSubmit(e));
      }

      // Method change handlers
      const methodInputs = document.querySelectorAll('input[name="method"]');
      methodInputs.forEach((input) => {
        input.addEventListener("change", () => this.handleMethodChange());
      });
    }

    setupMethodHandlers() {
      // Show/hide button link fields based on method
      this.handleMethodChange();
    }

    handleMethodChange() {
      const selectedMethod = document.querySelector('input[name="method"]:checked')?.value;
      const buttonLinkSection = document.getElementById("button-link-section");
      const buttonTextSection = document.getElementById("button-text-section");

      if (selectedMethod === "magicLink") {
        buttonLinkSection?.classList.remove("hidden");
        buttonTextSection?.classList.remove("hidden");
      } else {
        buttonLinkSection?.classList.add("hidden");
        buttonTextSection?.classList.add("hidden");
      }
    }

    async handleSubmit(e) {
      e.preventDefault();

      const submitBtn = document.getElementById("submit-btn");
      const resultsDiv = document.getElementById("results");
      const resultsContent = document.getElementById("results-content");

      if (!submitBtn || !resultsDiv || !resultsContent) return;

      try {
        // Disable button and show loading
        submitBtn.disabled = true;
        submitBtn.textContent = "Sending...";

        // Get form data
        const formData = new FormData(e.target);
        const recipients = Array.from(document.getElementById("recipients").selectedOptions);

        if (recipients.length === 0) {
          throw new Error("Please select at least one recipient");
        }

        const selectedMethod = formData.get("method");

        // Get full user objects for selected recipients (needed for SMS logic)
        const selectedUserEmails = recipients.map((option) => option.value);
        const selectedUsers = allUsers.filter((user) => selectedUserEmails.includes(user.email));

        const requestData = {
          method: selectedMethod,
          usersToNotify: recipients.map((option) => option.value), // Keep for backward compatibility
          selectedUsers: selectedUsers, // Send full user objects for SMS logic
          emailSubject: formData.get("subject"),
          emailContent: formData.get("content"),
          buttonLink: formData.get("buttonLink") || "https://capcofire.com/dashboard",
          buttonText: formData.get("buttonText") || "Access Dashboard",
          trackLinks: false, // Disable tracking for test emails
          project: { id: 0, title: "System", address: "Email Delivery Test" }, // System project for logging
        };

        console.log("📧 [EMAIL-TEST] Sending test email:", requestData);
        console.log("📧 [EMAIL-TEST] Project object being sent:", requestData.project);
        console.log("📧 [EMAIL-TEST] Selected users for SMS logic:", selectedUsers);
        console.log(
          "📧 [EMAIL-TEST] SMS setup check:",
          selectedUsers.map((user) => ({
            name: user.name,
            email: user.email,
            smsAlerts: user.smsAlerts,
            mobileCarrier: user.mobileCarrier,
            phone: user.phone,
            hasSmsSetup: user.smsAlerts && user.mobileCarrier && user.phone,
          }))
        );

        // Send test email
        const response = await fetch("/api/delivery/update-delivery", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestData),
        });

        const result = await response.json();

        // Show results
        resultsDiv.classList.remove("hidden");

        if (response.ok) {
          resultsContent.innerHTML = `
            <div class="text-green-600 dark:text-green-400">
              <h4 class="font-medium">✅ Test Email Sent Successfully!</h4>
              <div class="mt-2 text-sm">
                <p><strong>Method:</strong> ${requestData.method}</p>
                <p><strong>Recipients:</strong> ${recipients.length}</p>
                <p><strong>Sent:</strong> ${result.sent || 0}</p>
                <p><strong>Failed:</strong> ${result.failed || 0}</p>
                ${result.sentEmails ? `<p><strong>Sent to:</strong> ${result.sentEmails.join(", ")}</p>` : ""}
                ${result.failedEmails ? `<p><strong>Failed:</strong> ${result.failedEmails.join(", ")}</p>` : ""}
              </div>
            </div>
          `;
        } else {
          resultsContent.innerHTML = `
            <div class="text-red-600 dark:text-red-400">
              <h4 class="font-medium">❌ Test Email Failed</h4>
              <div class="mt-2 text-sm">
                <p><strong>Error:</strong> ${result.error || "Unknown error"}</p>
                <p><strong>Status:</strong> ${response.status}</p>
              </div>
            </div>
          `;
        }
      } catch (error) {
        console.error("📧 [EMAIL-TEST] Error:", error);

        resultsDiv?.classList.remove("hidden");
        resultsContent.innerHTML = `
          <div class="text-red-600 dark:text-red-400">
            <h4 class="font-medium">❌ Test Failed</h4>
            <div class="mt-2 text-sm">
              <p><strong>Error:</strong> ${error instanceof Error ? error.message : "Unknown error"}</p>
            </div>
          </div>
        `;
      } finally {
        // Re-enable button
        submitBtn.disabled = false;
        submitBtn.textContent = "Send Test Email";
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new EmailDeliveryTest();
  });
</script>
