---
// Test page for Google Contacts API
import { checkGoogleAuth } from "../lib/google-auth";

const { isAuthenticated, user } = checkGoogleAuth(Astro.cookies);

// For testing purposes, we'll allow access even without Google auth
// The API will handle the authentication check and provide helpful error messages
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Google Contacts Test</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-100 p-8">
    <div class="max-w-4xl mx-auto">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">Google Contacts API Test</h1>
        <div class="flex items-center space-x-4">
          {
            isAuthenticated ? (
              <>
                <div class="text-sm text-gray-600">
                  Signed in as: <span class="font-medium">{user?.name}</span>
                </div>
                <a href="/api/google/signout" class="text-blue-600 hover:text-blue-800 text-sm">
                  Sign Out
                </a>
              </>
            ) : (
              <>
                <div class="text-sm text-red-600">Not signed in with Google</div>
                <a href="/api/google/signin" class="text-blue-600 hover:text-blue-800 text-sm">
                  Sign In
                </a>
              </>
            )
          }
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Test Google Contacts API</h2>

        {
          !isAuthenticated && (
            <div class="mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
              <div class="text-yellow-800 text-sm">
                <strong>Note:</strong> You need to sign in with Google to access your contacts.
                Click "Sign In" above to authenticate with Google OAuth.
              </div>
              <div class="mt-2">
                <a href="/api/debug-cookies" class="text-blue-600 hover:text-blue-800 text-xs">
                  Debug: Check available cookies
                </a>
              </div>
            </div>
          )
        }

        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Search Query (optional):
          </label>
          <input
            type="text"
            id="search-input"
            placeholder="Search contacts..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <button
          id="fetch-contacts-btn"
          class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium"
        >
          Fetch Contacts
        </button>

        <div id="loading" class="hidden mt-4">
          <div class="text-blue-600">Loading contacts...</div>
        </div>

        <div id="error" class="hidden mt-4">
          <div class="text-red-600 bg-red-100 p-3 rounded-md"></div>
        </div>

        <div id="results" class="hidden mt-6">
          <h3 class="text-lg font-semibold mb-3">Contacts Found:</h3>
          <div id="contacts-list" class="space-y-2"></div>
        </div>
      </div>

      <div class="bg-white rounded-lg shadow p-6">
        <h2 class="text-xl font-semibold mb-4">API Response Debug</h2>
        <pre id="debug-output" class="bg-gray-100 p-4 rounded-md text-sm overflow-auto max-h-96">
        </pre>
      </div>
    </div>

    <script>
      document.getElementById("fetch-contacts-btn")?.addEventListener("click", async () => {
        const searchInput = document.getElementById("search-input") as HTMLInputElement;
        const loading = document.getElementById("loading");
        const error = document.getElementById("error");
        const results = document.getElementById("results");
        const contactsList = document.getElementById("contacts-list");
        const debugOutput = document.getElementById("debug-output");

        if (!searchInput || !loading || !error || !results || !contactsList || !debugOutput) {
          console.error("Required DOM elements not found");
          return;
        }

        // Clear previous results
        error.classList.add("hidden");
        results.classList.add("hidden");
        loading.classList.remove("hidden");

        try {
          const searchQuery = searchInput.value.trim();
          const url = searchQuery
            ? `/api/google/contacts?input=${encodeURIComponent(searchQuery)}`
            : "/api/google/contacts";

          console.log("Fetching contacts from:", url);

          const response = await fetch(url, {
            method: "GET",
            credentials: "include",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const data = await response.json();

          console.log("API Response:", data);
          debugOutput.textContent = JSON.stringify(data, null, 2);

          loading.classList.add("hidden");

          if (!response.ok) {
            throw new Error(data.error || `HTTP ${response.status}: ${response.statusText}`);
          }

          if (data.success && data.contacts) {
            contactsList.innerHTML = "";

            if (data.contacts.length === 0) {
              contactsList.innerHTML = '<div class="text-gray-500">No contacts found</div>';
            } else {
              data.contacts.forEach((contact: any) => {
                const contactDiv = document.createElement("div");
                contactDiv.className = "border border-gray-200 rounded-md p-4 mb-3";

                // Build contact details HTML
                let detailsHtml = `
                   <div class="font-medium text-lg mb-2">${contact.name || "Unknown Name"}</div>
                   <div class="text-sm text-gray-600 space-y-1">
                 `;

                // Basic contact info
                if (contact.email) detailsHtml += `<div>üìß Email: ${contact.email}</div>`;
                if (contact.phone) detailsHtml += `<div>üìû Phone: ${contact.phone}</div>`;
                if (contact.organization)
                  detailsHtml += `<div>üè¢ Company: ${contact.organization}</div>`;
                if (contact.jobTitle) detailsHtml += `<div>üíº Title: ${contact.jobTitle}</div>`;
                if (contact.address) detailsHtml += `<div>üìç Address: ${contact.address}</div>`;

                // Additional fields
                if (contact.biography)
                  detailsHtml += `<div>üìù Bio: ${contact.biography.substring(0, 100)}${contact.biography.length > 100 ? "..." : ""}</div>`;
                if (contact.birthday)
                  detailsHtml += `<div>üéÇ Birthday: ${contact.birthday.year || "N/A"}/${contact.birthday.month || "N/A"}/${contact.birthday.day || "N/A"}</div>`;
                if (contact.websites && contact.websites.length > 0) {
                  detailsHtml += `<div>üåê Websites: ${contact.websites.slice(0, 2).join(", ")}${contact.websites.length > 2 ? "..." : ""}</div>`;
                }

                // Multiple contact methods
                if (contact.allEmails && contact.allEmails.length > 1) {
                  detailsHtml += `<div class="text-xs text-blue-600">+${contact.allEmails.length - 1} more emails</div>`;
                }
                if (contact.allPhones && contact.allPhones.length > 1) {
                  detailsHtml += `<div class="text-xs text-blue-600">+${contact.allPhones.length - 1} more phones</div>`;
                }

                detailsHtml += `
                   </div>
                   <div class="text-xs text-gray-500 mt-2">ID: ${contact.id}</div>
                 `;

                contactDiv.innerHTML = detailsHtml;
                contactsList.appendChild(contactDiv);
              });
            }

            results.classList.remove("hidden");
          } else {
            throw new Error(data.error || "Unknown error occurred");
          }
        } catch (err) {
          console.error("Error fetching contacts:", err);
          loading.classList.add("hidden");
          error.classList.remove("hidden");
          const errorDiv = error.querySelector("div");
          if (errorDiv) {
            errorDiv.textContent = `Error: ${err instanceof Error ? err.message : "Unknown error"}`;
          }
        }
      });

      // Check for success/error messages from OAuth callback
      const urlParams = new URLSearchParams(window.location.search);
      const success = urlParams.get("success");
      const error = urlParams.get("error");
      const details = urlParams.get("details");

      if (success === "google_auth_success") {
        // Show success message
        const successDiv = document.createElement("div");
        successDiv.className =
          "fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50";
        successDiv.textContent =
          "‚úÖ Successfully signed in with Google! You can now test the contacts API.";
        document.body.appendChild(successDiv);

        // Remove success message after 5 seconds
        setTimeout(() => {
          successDiv.remove();
        }, 5000);

        // Reload the page to update the authentication status
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } else if (error) {
        // Show error message
        const errorDiv = document.createElement("div");
        errorDiv.className =
          "fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50 max-w-md";

        let errorMessage = "OAuth error occurred";
        if (error === "token_exchange_failed") {
          errorMessage = "Token exchange failed. Check console for details.";
          if (details) {
            errorMessage += ` Details: ${details}`;
          }
        }

        errorDiv.innerHTML = `
          <div class="font-medium">‚ùå ${errorMessage}</div>
          <div class="text-xs mt-1">Check browser console for more details</div>
        `;
        document.body.appendChild(errorDiv);

        // Remove error message after 10 seconds
        setTimeout(() => {
          errorDiv.remove();
        }, 10000);
      }
    </script>
  </body>
</html>
