---
import App from "../components/common/App.astro";
import BoxIcon from "../components/common/BoxIcon.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import { checkAuth } from "../lib/auth";

try {
  // Check authentication and ensure user is Admin
  const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

  if (!isAuth || role !== "Admin") {
    return Astro.redirect("/login");
  }
} catch (error) {
  console.error("Error in create-staff page:", error);
  return Astro.redirect("/login");
}
---

<App title="Create Staff - CAPCo Fire Protection" description="Create new staff user">
  <SectionContainer class="mx-auto max-w-2xl">
    <div class="rounded-lg bg-white p-6 shadow-lg dark:bg-gray-800">
      <!-- Header -->
      <div class="mb-6">
        <h1 class="mb-2 text-2xl font-bold text-gray-900 dark:text-white">Create New User</h1>
        <p class="text-gray-600 dark:text-gray-400">
          Add a new user to the CAPCo Fire Protection system (Admin, Staff, or Client)
        </p>
      </div>

      <!-- Success/Error Messages -->
      <div id="message-container" class="mb-6 hidden">
        <div
          id="success-message"
          class="hidden rounded-md border border-green-200 bg-green-50 px-4 py-3 text-green-800 dark:border-green-800 dark:bg-green-900/20 dark:text-green-400"
        >
          <div class="flex items-center">
            <BoxIcon name="check-circle" class="mr-2 text-lg" />
            <span id="success-text"></span>
          </div>
        </div>
        <div
          id="error-message"
          class="hidden rounded-md border border-red-200 bg-red-50 px-4 py-3 text-red-800 dark:border-red-800 dark:bg-red-900/20 dark:text-red-400"
        >
          <div class="flex items-center">
            <BoxIcon name="error-circle" class="mr-2 text-lg" />
            <span id="error-text"></span>
          </div>
        </div>
      </div>

      <!-- Create Staff Form -->
      <form id="create-staff-form" class="space-y-6">
        <!-- Full Name -->
        <div>
          <label
            for="staff-name"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Full Name *
          </label>
          <input
            type="text"
            id="staff-name"
            name="name"
            required
            class="w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
            placeholder="Enter full name"
          />
        </div>

        <!-- Email -->
        <div>
          <label
            for="staff-email"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Email Address *
          </label>
          <input
            type="email"
            id="staff-email"
            name="email"
            required
            class="w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
            placeholder="Enter email address"
          />
        </div>

        <!-- Phone (Optional) -->
        <div>
          <label
            for="staff-phone"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Phone Number
          </label>
          <input
            type="tel"
            id="staff-phone"
            name="phone"
            class="w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
            placeholder="Enter phone number (optional)"
          />
        </div>

        <!-- Role Selection -->
        <div>
          <label
            for="staff-role"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            User Role *
          </label>
          <select
            id="staff-role"
            name="role"
            required
            class="w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
          >
            <option value="">Select a role</option>
            <option value="Admin">Admin - Full system access</option>
            <option value="Staff">Staff - Project management access</option>
            <option value="Client">Client - Own projects only</option>
          </select>
        </div>

        <!-- Temporary Password Info -->
        <div
          class="rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20"
        >
          <div class="flex items-start">
            <BoxIcon
              name="info-circle"
              class="mr-2 mt-0.5 text-lg text-blue-600 dark:text-blue-400"
            />
            <div class="text-sm text-blue-800 dark:text-blue-400">
              <p class="mb-1 font-medium">Account Setup Process:</p>
              <ol class="list-inside list-decimal space-y-1 text-xs">
                <li>A temporary password will be generated automatically</li>
                <li>An invitation email will be sent to the new user</li>
                <li>They must sign in and change their password on first login</li>
                <li>They can then set up Google OAuth if desired</li>
              </ol>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex gap-4 pt-4">
          <button
            type="submit"
            id="submit-btn"
            class="flex-1 rounded-lg bg-blue-600 px-6 py-2 text-white transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
          >
            <span id="submit-text">Create User</span>
            <BoxIcon name="loader-alt" id="submit-spinner" class="ml-2 hidden animate-spin" />
          </button>

          <a
            href="/"
            class="rounded-lg border border-gray-300 px-6 py-2 text-gray-700 transition-colors hover:bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
          >
            Cancel
          </a>
        </div>
      </form>
    </div>
  </SectionContainer>
</App>

<script>
  class StaffCreator {
    private form!: HTMLFormElement;
    private submitBtn!: HTMLButtonElement;
    private submitText!: HTMLElement;
    private submitSpinner!: HTMLElement;
    private messageContainer!: HTMLElement;
    private successMessage!: HTMLElement;
    private errorMessage!: HTMLElement;
    private successText!: HTMLElement;
    private errorText!: HTMLElement;

    constructor() {
      try {
        this.form = document.getElementById("create-staff-form") as HTMLFormElement;
        this.submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
        this.submitText = document.getElementById("submit-text") as HTMLElement;
        this.submitSpinner = document.getElementById("submit-spinner") as HTMLElement;
        this.messageContainer = document.getElementById("message-container") as HTMLElement;
        this.successMessage = document.getElementById("success-message") as HTMLElement;
        this.errorMessage = document.getElementById("error-message") as HTMLElement;
        this.successText = document.getElementById("success-text") as HTMLElement;
        this.errorText = document.getElementById("error-text") as HTMLElement;

        // Validate all elements exist
        if (!this.form || !this.submitBtn || !this.submitText || !this.submitSpinner) {
          console.error("Required form elements not found");
          return;
        }

        // Ensure button is in correct initial state
        this.setLoading(false);

        this.init();
      } catch (error) {
        console.error("Error initializing StaffCreator:", error);
      }
    }

    init() {
      if (this.form) {
        this.form.addEventListener("submit", this.handleSubmit.bind(this));
      }
    }

    async handleSubmit(e: Event) {
      e.preventDefault();

      const formData = new FormData(this.form);
      const staffData = {
        name: formData.get("name") as string,
        email: formData.get("email") as string,
        phone: formData.get("phone") as string,
        role: formData.get("role") as string,
      };

      // Validate required fields
      if (!staffData.name.trim() || !staffData.email.trim() || !staffData.role) {
        this.showError("Please fill in all required fields.");
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(staffData.email)) {
        this.showError("Please enter a valid email address.");
        return;
      }

      this.setLoading(true);
      this.hideMessages();

      try {
        const response = await fetch("/api/create-staff", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(staffData),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          this.showSuccess(
            `User "${staffData.name}" created successfully! Invitation email sent to ${staffData.email}.`
          );
          this.form.reset();

          // Redirect after 3 seconds
          setTimeout(() => {
            window.location.href = "/";
          }, 3000);
        } else {
          this.showError(result.error || "Failed to create user. Please try again.");
        }
      } catch (error) {
        console.error("Error creating staff:", error);
        this.showError("Network error. Please check your connection and try again.");
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(loading: boolean) {
      if (!this.submitBtn || !this.submitText || !this.submitSpinner) {
        console.error("Button elements not found for setLoading");
        return;
      }

      this.submitBtn.disabled = loading;
      if (loading) {
        this.submitText.textContent = "Creating...";
        this.submitSpinner.classList.remove("hidden");
      } else {
        this.submitText.textContent = "Create User";
        this.submitSpinner.classList.add("hidden");
      }
    }

    showSuccess(message: string) {
      if (
        !this.successText ||
        !this.messageContainer ||
        !this.successMessage ||
        !this.errorMessage
      ) {
        console.error("Message elements not found for showSuccess");
        return;
      }
      this.successText.textContent = message;
      this.messageContainer.classList.remove("hidden");
      this.successMessage.classList.remove("hidden");
      this.errorMessage.classList.add("hidden");
    }

    showError(message: string) {
      if (!this.errorText || !this.messageContainer || !this.errorMessage || !this.successMessage) {
        console.error("Message elements not found for showError");
        return;
      }
      this.errorText.textContent = message;
      this.messageContainer.classList.remove("hidden");
      this.errorMessage.classList.remove("hidden");
      this.successMessage.classList.add("hidden");
    }

    hideMessages() {
      if (!this.messageContainer || !this.successMessage || !this.errorMessage) {
        console.error("Message elements not found for hideMessages");
        return;
      }
      this.messageContainer.classList.add("hidden");
      this.successMessage.classList.add("hidden");
      this.errorMessage.classList.add("hidden");
    }
  }

  // Initialize when DOM is ready
  function initializeStaffCreator() {
    try {
      console.log("Initializing StaffCreator...");
      console.log("Document ready state:", document.readyState);
      console.log("Form element exists:", !!document.getElementById("create-staff-form"));
      console.log("Submit button exists:", !!document.getElementById("submit-btn"));

      new StaffCreator();
      console.log("StaffCreator initialized successfully");
    } catch (error) {
      console.error("Failed to initialize StaffCreator:", error);
    }
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeStaffCreator);
  } else {
    initializeStaffCreator();
  }
</script>
