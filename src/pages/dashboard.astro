---
const requireAuthRedirect = "/auth/login";
import { checkAuth } from "../lib/auth";
const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);
const currentRole = currentUser?.profile?.role;

// Handle auth redirect first

//// && (!session || !currentUser || currentRole !== "Admin")
if (requireAuthRedirect) {
  return Astro.redirect(requireAuthRedirect);
}

import App from "../components/common/App.astro";
import DemoCharts from "../components/common/DemoCharts.astro";
import "../lib/refresh-manager.ts";
// Get auth data directly since App component handles auth requirements

// console.log("üöÄ [DASHBOARD] Current user:", currentUser);
// Initialize projects with lazy loading
let projects: any[] = [];
let projectsLoading = false;
let projectsHasMore = true;
let projectsOffset = 0;
const PROJECTS_LIMIT = 20;

// Fetch initial projects using the new standardized API
if (currentUser?.id) {
  try {
    const baseUrl = Astro.url.origin;
    let apiUrl = `${baseUrl}/api/projects/get?limit=${PROJECTS_LIMIT}&offset=0`;

    // Add role-based filtering
    if (currentUser?.profile?.role === "Client") {
      apiUrl += `&authorId=${currentUser.id}`;
    } else if (currentUser?.profile?.role === "Staff") {
      apiUrl += `&assignedToId=${currentUser.id}`;
    }

    console.log("üèóÔ∏è [DASHBOARD] Fetching initial projects from API:", apiUrl);
    const response = await fetch(apiUrl, {
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    if (response.ok) {
      const data = await response.json();
      projects = data.projects || [];
      projectsHasMore = data.pagination?.hasMore || false;
      projectsOffset = PROJECTS_LIMIT;
      console.log(
        "üèóÔ∏è [DASHBOARD] Initial projects loaded:",
        projects.length,
        "Has more:",
        projectsHasMore
      );
    } else {
      console.error(
        "üèóÔ∏è [DASHBOARD] Error fetching projects:",
        response.status,
        response.statusText
      );
    }
  } catch (error) {
    console.error("üèóÔ∏è [DASHBOARD] Error fetching projects:", error);
  }
}

// Fetch project statuses using the unified API
const statusApiUrl = new URL("/api/status/get", Astro.url.origin);
const statusResponse = await fetch(statusApiUrl.toString(), {
  method: "GET",
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});
---

<App title={`Global Dashboard`} description="View all projects.">
  <!-- </SectionContainer> -->

  <DemoCharts />
</App>

<style>
  @import "aos/dist/aos.css";

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>

<script>
  // Request push notification permission
  (window as any).requestPushNotificationPermission = function () {
    // Check if we're on mobile Safari
    const isMobileSafari =
      /iPad|iPhone|iPod/.test(navigator.userAgent) && /Safari/.test(navigator.userAgent);
    console.log("üîî [APP] Mobile Safari detected:", isMobileSafari);

    if (isMobileSafari) {
      console.log(
        "üîî [APP] Mobile Safari detected - push notifications work when installed as PWA"
      );
      console.log("üîî [APP] Install as PWA (Add to Home Screen) for full notification support");

      // Check if running as PWA
      const isStandalone =
        (window as any).matchMedia("(display-mode: standalone)").matches ||
        (window.navigator as any).standalone === true;
      console.log("üîî [APP] Running as PWA:", isStandalone);

      if (!isStandalone) {
        console.log("üí° [APP] Install as PWA for better notification support");
        return;
      }
    }

    // Only request if user hasn't been prompted yet
    if ("Notification" in window && Notification.permission === "default") {
      console.log("üîî [APP] Requesting notification permission...");
      // Request permission immediately in user interaction context
      Notification.requestPermission().then((permission) => {
        console.log("üîî [APP] Permission result:", permission);
        if (permission === "granted") {
          console.log("üîî Push notifications enabled for authenticated user!");
          // Show a subtle notification
          if ((window as any).showModal) {
            (window as any).showModal(
              "info",
              "Notifications Enabled",
              "You'll receive push notifications for project updates!",
              3000
            );
          }
        } else {
          console.log("üîî Push notifications declined by user");
        }
      });
    } else {
      console.log("üîî [APP] Not requesting permission - already handled or not available");
    }
  };

  // Reset notification permissions for debugging
  (window as any).resetNotifications = function () {
    console.log("üîÑ [APP] Resetting notification permissions...");

    // Check if we're on mobile Safari
    const isMobileSafari =
      /iPad|iPhone|iPod/.test(navigator.userAgent) && /Safari/.test(navigator.userAgent);

    if (isMobileSafari) {
      console.log(
        "üì± [APP] Mobile Safari detected - push notifications work when installed as PWA"
      );
      console.log("üí° [APP] Install as PWA (Add to Home Screen) for full notification support");

      // Check if running as PWA
      const isStandalone =
        window.matchMedia("(display-mode: standalone)").matches ||
        (window.navigator as any).standalone === true;
      console.log("üîî [APP] Running as PWA:", isStandalone);

      if (!isStandalone) {
        console.log("üí° [APP] Install as PWA for better notification support");
        return;
      }
    }

    console.log(
      "üîÑ [APP] Current permission:",
      "Notification" in window ? Notification.permission : "Not available"
    );

    // Clear any stored permission state
    localStorage.removeItem("notification-permission-requested");
    sessionStorage.removeItem("notification-permission-requested");

    // Force a new permission request
    if ("Notification" in window) {
      Notification.requestPermission().then((permission) => {
        console.log("üîÑ [APP] Reset permission result:", permission);
        if (permission === "granted") {
          console.log("‚úÖ Notifications re-enabled!");
        } else {
          console.log("‚ùå Notifications still denied");
        }
      });
    }
  };

  // Request notification permission on first user interaction
  let permissionRequested = false;
  const requestPermissionOnInteraction = () => {
    if (!permissionRequested) {
      permissionRequested = true;
      (window as any).requestPushNotificationPermission();
      // Remove listeners after first interaction
      document.removeEventListener("click", requestPermissionOnInteraction);
      document.removeEventListener("touchstart", requestPermissionOnInteraction);
    }
  };

  // Listen for first user interaction
  document.addEventListener("click", requestPermissionOnInteraction);
  document.addEventListener("touchstart", requestPermissionOnInteraction);

  // Lazy loading for projects
  class ProjectLazyLoader {
    private projects: any[] = [];
    private loading = false;
    private hasMore = true;
    private offset = 0;
    private readonly limit = 20;

    constructor() {
      this.projects = (window as any).initialProjects || [];
      this.offset = this.projects.length;
      this.hasMore = (window as any).initialProjectsHasMore || false;
      this.setupScrollListener();
    }

    private setupScrollListener() {
      const loadMoreTrigger = document.getElementById("load-more-projects");
      if (!loadMoreTrigger) return;

      const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && !this.loading && this.hasMore) {
          this.loadMore();
        }
      });

      observer.observe(loadMoreTrigger);
    }

    private async loadMore() {
      if (this.loading || !this.hasMore) return;

      this.loading = true;
      const loadMoreBtn = document.getElementById("load-more-projects") as HTMLButtonElement;
      if (loadMoreBtn) {
        loadMoreBtn.textContent = "Loading more projects...";
        loadMoreBtn.disabled = true;
      }

      try {
        const baseUrl = window.location.origin;
        let apiUrl = `${baseUrl}/api/projects/get?limit=${this.limit}&offset=${this.offset}`;

        // Add role-based filtering
        const userRole = (window as any).currentUser?.profile?.role;
        const userId = (window as any).currentUser?.id;

        if (userRole === "Client") {
          apiUrl += `&authorId=${userId}`;
        } else if (userRole === "Staff") {
          apiUrl += `&assignedToId=${userId}`;
        }

        const response = await fetch(apiUrl);
        if (response.ok) {
          const data = await response.json();
          const newProjects = data.projects || [];

          this.projects.push(...newProjects);
          this.offset += newProjects.length;
          this.hasMore = data.pagination?.hasMore || false;

          // Update the projects display
          this.updateProjectsDisplay();

          console.log(
            `üèóÔ∏è [DASHBOARD] Loaded ${newProjects.length} more projects. Total: ${this.projects.length}, Has more: ${this.hasMore}`
          );
        } else {
          console.error("Failed to load more projects:", response.status);
        }
      } catch (error) {
        console.error("Error loading more projects:", error);
      } finally {
        this.loading = false;
        if (loadMoreBtn) {
          loadMoreBtn.textContent = this.hasMore ? "Load More Projects" : "All Projects Loaded";
          loadMoreBtn.disabled = !this.hasMore;
        }
      }
    }

    private updateProjectsDisplay() {
      // This would update the projects display in the UI
      // For now, we'll just log the update
      console.log(`üèóÔ∏è [DASHBOARD] Projects updated. Total: ${this.projects.length}`);
    }
  }

  // Initialize lazy loader when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new ProjectLazyLoader();
  });
</script>
