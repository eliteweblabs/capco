---
console.log("üìä [DASHBOARD] Page loading started...");

import App from "../components/common/App.astro";
import DashboardComponent from "../components/common/Dashboard.astro";
import Hero from "../components/common/Hero.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import ToastAlerts from "../components/common/ToastAlerts.astro";
import ProjectNav from "../components/project/ProjectNav.astro";
import { supabase } from "../lib/supabase";
// Check authentication
import { checkAuth } from "../lib/auth";
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Redirect if not authenticated
if (!isAuth) {
  return Astro.redirect("/login");
}

// Debug information
console.log("üîç [DASHBOARD] Auth check results:", {
  isAuth,
  hasUser: !!user,
  userId: user?.id,
  userEmail: user?.email,
  role,
  hasSession: !!session,
});

// Test database access if authenticated
let projectCount = 0;
let profileData = null;
let dbError = null;

if (isAuth && user && supabase) {
  try {
    // Test profile access
    const { data: profile, error: profileError } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    profileData = profile;

    if (profileError) {
      console.error("üö® [DASHBOARD] Profile query error:", profileError);
      dbError = profileError.message;
    }

    // Test project access
    const { data: projects, error: projectError } = await supabase
      .from("projects")
      .select("id, title, author_id")
      .limit(5);

    projectCount = projects?.length || 0;

    if (projectError) {
      console.error("üö® [DASHBOARD] Project query error:", projectError);
      dbError = projectError.message;
    }

    console.log("üìä [DASHBOARD] Database test results:", {
      profileFound: !!profile,
      profileRole: profile?.role,
      projectsFound: projectCount,
      dbError,
    });
  } catch (error) {
    console.error("üö® [DASHBOARD] Database test exception:", error);
    dbError = error instanceof Error ? error.message : "Unknown error";
  }
}

// Environment check for debugging
const envStatus = {
  hasSupabaseUrl: !!import.meta.env.PUBLIC_SUPABASE_URL,
  hasSupabaseAnonKey: !!import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  hasSupabaseServiceKey: !!import.meta.env.SUPABASE_SERVICE_ROLE_KEY,
  supabaseClientCreated: !!supabase,
};

console.log("üîß [DASHBOARD] Environment status:", envStatus);

// Additional debugging - check cookies directly
const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

console.log("üç™ [DASHBOARD] Cookie status:", {
  hasAccessToken: !!accessToken,
  hasRefreshToken: !!refreshToken,
  accessTokenLength: accessToken?.value?.length || 0,
  refreshTokenLength: refreshToken?.value?.length || 0,
});

// Fetch project_statuses from API
let projects: any[] = [];
try {
  const response = await (fetch as any)(`${Astro.url.origin}/api/get-project`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      user_id: user.id,
      role: role,
    },
  });

  if (response.ok) {
    const result = await response.json();
    if (result.success) {
      console.log("üèóÔ∏è [PROJECT NAV] Projects:", result.projects);
      projects = Object.values(result.projects || {});
    } else {
      console.error("API returned error:", result.error);
    }
  } else {
    console.error("Failed to fetch projects:", response.status);
  }
} catch (error) {
  console.error("Error fetching projects:", error);
}
---

<App>
  <SectionContainer id="hero" class="mx-6 my-6">
    <Hero title={profileData?.company_name || "Dashboard"} description={role || "User"} />
  </SectionContainer>
  <!-- Debug Panel (can be hidden in production) -->
  <SectionContainer class="mx-6 mb-6">
    <details
      class="rounded-lg border border-gray-300 bg-gray-100 dark:border-gray-600 dark:bg-gray-800"
    >
      <summary
        class="cursor-pointer rounded-lg p-4 font-medium text-gray-700 hover:bg-gray-50 dark:text-gray-300 dark:hover:bg-gray-700"
      >
        üîç Debug Information (Click to expand)
      </summary>

      <div class="p-4 pt-0">
        <!-- Authentication Status -->
        <div class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
          <div class="rounded bg-white p-3 dark:bg-gray-700">
            <h3 class="mb-2 text-sm font-semibold">üîê Authentication</h3>
            <div class="space-y-1 text-xs">
              <div>
                Authenticated: <span class={isAuth ? "text-green-600" : "text-red-600"}
                  >{isAuth ? "‚úÖ Yes" : "‚ùå No"}</span
                >
              </div>
              <div>
                User ID: <span class="font-mono">{user?.id || "None"}</span>
              </div>
              <div>
                Email: <span class="font-mono">{user?.email || "None"}</span>
              </div>
              <div>
                Role: <span class={role ? "text-blue-600" : "text-gray-500"}>{role || "None"}</span>
              </div>
            </div>
          </div>

          <div class="rounded bg-white p-3 dark:bg-gray-700">
            <h3 class="mb-2 text-sm font-semibold">üç™ Cookies</h3>
            <div class="space-y-1 text-xs">
              <div>
                Access Token: <span class={accessToken ? "text-green-600" : "text-red-600"}
                  >{
                    accessToken ? `‚úÖ ${accessToken.value.substring(0, 20)}...` : "‚ùå Missing"
                  }</span
                >
              </div>
              <div>
                Refresh Token: <span class={refreshToken ? "text-green-600" : "text-red-600"}
                  >{
                    refreshToken ? `‚úÖ ${refreshToken.value.substring(0, 20)}...` : "‚ùå Missing"
                  }</span
                >
              </div>
            </div>
          </div>

          <div class="rounded bg-white p-3 dark:bg-gray-700">
            <h3 class="mb-2 text-sm font-semibold">üîß Environment</h3>
            <div class="space-y-1 text-xs">
              <div>
                Supabase URL: <span
                  class={envStatus.hasSupabaseUrl ? "text-green-600" : "text-red-600"}
                  >{envStatus.hasSupabaseUrl ? "‚úÖ Set" : "‚ùå Missing"}</span
                >
              </div>
              <div>
                Anon Key: <span
                  class={envStatus.hasSupabaseAnonKey ? "text-green-600" : "text-red-600"}
                  >{envStatus.hasSupabaseAnonKey ? "‚úÖ Set" : "‚ùå Missing"}</span
                >
              </div>
              <div>
                Client: <span
                  class={envStatus.supabaseClientCreated ? "text-green-600" : "text-red-600"}
                  >{envStatus.supabaseClientCreated ? "‚úÖ Created" : "‚ùå Failed"}</span
                >
              </div>
            </div>
          </div>
        </div>

        <!-- Database Status -->
        <div class="mb-4 rounded bg-white p-3 dark:bg-gray-700">
          <h3 class="mb-2 text-sm font-semibold">üìä Database Access</h3>
          <div class="space-y-1 text-xs">
            <div>
              Profile Data:{" "}
              <span class={profileData ? "text-green-600" : "text-red-600"}>
                {profileData ? `‚úÖ Found (Role: ${profileData.role})` : "‚ùå Not Found"}
              </span>
            </div>
            <div>
              Projects Found:{" "}
              <span class={projectCount > 0 ? "text-green-600" : "text-yellow-600"}>
                {projectCount} projects
              </span>
            </div>
            {dbError && <div class="text-red-600">‚ùå DB Error: {dbError}</div>}
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="flex gap-2 text-xs">
          <a href="/api/reset-auth" class="rounded bg-red-500 px-2 py-1 text-white hover:bg-red-600"
            >üîÑ Reset Auth</a
          >
          <a
            href="/api/check-env"
            class="rounded bg-blue-500 px-2 py-1 text-white hover:bg-blue-600"
            target="_blank">üîß Check Env</a
          >

        </div>
      </div>
    </details>
  </SectionContainer>

  <!-- Navigation -->
  <SectionContainer class="mx-6 flex flex-col gap-y-6">
    <ProjectNav role={role} projects={projects} />
  </SectionContainer>

  <!-- Main Dashboard -->
  <SectionContainer id="dashboard" class="mx-6 mb-0 mt-0 flex">
    <DashboardComponent role={role} projects={projects} />
  </SectionContainer>

  <!-- Toast Alerts -->
  <ToastAlerts />
</App>
