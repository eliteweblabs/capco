---
const requireAuthRedirect = "/login";
import { checkAuth } from "../lib/auth";
const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);
const currentRole = currentUser?.profile?.role;

// Handle auth redirect first

//// && (!session || !currentUser || currentRole !== "Admin")
if (requireAuthRedirect) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalCompanyData } from "../pages/api/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../pages/api/global-classes";
const { globalInputClasses, globalPrimaryTextClasses, globalSecondaryTextClasses } =
  globalClasses();

import App from "../components/common/App.astro";
import "../lib/refresh-manager.ts";
// Get auth data directly since App component handles auth requirements

// console.log("üöÄ [DASHBOARD] Current user:", currentUser);
// Initialize data arrays
let projects: any[] = [];

// Fetch projects using the API endpoint that includes discussion counts
if (currentUser?.id) {
  try {
    const baseUrl = Astro.url.origin;
    let apiUrl = `${baseUrl}/api/get-project`;

    // Add assignedToId parameter for Staff role
    // if (currentUser?.profile?.role === "Staff") {
    //   apiUrl += `?assignedToId=${currentUser.id}`;
    // }

    // Add assignedToId parameter for Staff role
    if (currentUser?.profile?.role === "Client") {
      apiUrl += `?authorId=${currentUser.id}`;
    }
    // For Admin and Client, no additional parameters needed (API handles role-based filtering)

    // console.log("üèóÔ∏è [DASHBOARD] Fetching projects from API:", apiUrl);
    const response = await fetch(apiUrl);

    if (response.ok) {
      const data = await response.json();
      projects = data.projects || [];
      // console.log("üèóÔ∏è [DASHBOARD] Projects fetched with discussion counts:", projects.length);
      // console.log("üèóÔ∏è [DASHBOARD] Sample project data:", {
      //   id: projects[0]?.id,
      //   title: projects[0]?.title,
      //   comment_count: projects[0]?.comment_count,
      //   incompleteDiscussions: projects[0]?.i,
      // });
    } else {
      console.error(
        "üèóÔ∏è [DASHBOARD] Error fetching projects:",
        response.status,
        response.statusText
      );
    }
  } catch (error) {
    console.error("üèóÔ∏è [DASHBOARD] Error fetching projects:", error);
  }
}

// Fetch project statuses using the unified API
const statusApiUrl = new URL("/api/project-statuses", Astro.url.origin);
const statusResponse = await fetch(statusApiUrl.toString(), {
  method: "GET",
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});

const statusData = await statusResponse.json();
---

<App
  title="Global Dashboard - CAPCo Fire Protection"
  description="View all projects."
  {currentUser}
  {session}
  {supabase}
  {projects}
  {globalCompanyName}
  {globalCompanySlogan}
  {globalPrimaryTextClasses}
  {globalSecondaryTextClasses}
  {globalInputClasses}
  {globalCompanyAddress}
  {globalCompanyPhone}
  {globalCompanyEmail}
  {globalCompanyWebsite}
  {globalCompanyLogo}
  {globalCompanyLogoDark}
  {globalCompanyLogoLight}
>
  <!-- </SectionContainer> -->

  <!-- Charts Grid -->
  <div class="mx-auto max-w-7xl px-4 pb-20">
    <div class="grid grid-cols-1 gap-8 lg:grid-cols-2">
      <!-- Client Growth Chart -->
      <div class="rounded-xl bg-gray-100 p-6 shadow-lg dark:bg-gray-800" data-aos="fade-right">
        <div class="mb-6 flex items-center justify-between">
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Client Growth</h3>
          <div class="flex items-center space-x-2">
            <div class="h-3 w-3 animate-pulse rounded-full bg-green-500"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">Live Data</span>
          </div>
        </div>
        <div class="relative h-80">
          <canvas id="clientGrowthChart"></canvas>
        </div>
        <div class="mt-4 grid grid-cols-3 gap-4">
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">400+</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Total Clients</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600">33%</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Growth Rate</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-purple-600">3</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Years Tracked</div>
          </div>
        </div>
      </div>

      <!-- Plans Processed Chart -->
      <div class="rounded-xl bg-gray-100 p-6 shadow-lg dark:bg-gray-800" data-aos="fade-left">
        <div class="mb-6 flex items-center justify-between">
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Plans Processed</h3>
          <div class="flex items-center space-x-2">
            <div class="h-3 w-3 animate-pulse rounded-full bg-blue-500"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">Real-time</span>
          </div>
        </div>
        <div class="relative h-80">
          <canvas id="plansProcessedChart"></canvas>
        </div>
        <div class="mt-4 grid grid-cols-3 gap-4">
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600">1,300+</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Total Plans</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600">260</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Avg/Year</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-orange-600">5</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Years Tracked</div>
          </div>
        </div>
      </div>

      <!-- System Performance Chart -->
      <div
        class="rounded-xl bg-gray-100 p-6 shadow-lg dark:bg-gray-800 lg:col-span-2"
        data-aos="fade-up"
      >
        <div class="mb-6 flex items-center justify-between">
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white">
            System Performance Metrics
          </h3>
          <div class="flex items-center space-x-2">
            <div class="h-3 w-3 animate-pulse rounded-full bg-purple-500"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">Advanced Analytics</span>
          </div>
        </div>
        <div class="relative h-96">
          <canvas id="systemPerformanceChart"></canvas>
        </div>
        <div class="mt-6 grid grid-cols-4 gap-4">
          <div class="rounded-lg bg-green-50 p-4 text-center dark:bg-green-900/20">
            <div class="text-2xl font-bold text-green-600">98.5%</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Uptime</div>
          </div>
          <div class="rounded-lg bg-blue-50 p-4 text-center dark:bg-blue-900/20">
            <div class="text-2xl font-bold text-blue-600">2.3s</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Response Time</div>
          </div>
          <div class="rounded-lg bg-purple-50 p-4 text-center dark:bg-purple-900/20">
            <div class="text-2xl font-bold text-purple-600">99.9%</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Accuracy</div>
          </div>
          <div class="rounded-lg bg-orange-50 p-4 text-center dark:bg-orange-900/20">
            <div class="text-2xl font-bold text-orange-600">24/7</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Monitoring</div>
          </div>
        </div>
      </div>

      <!-- Interactive Stats -->
      <div
        class="rounded-xl bg-gradient-to-r from-primary-600 to-primary-700 p-6 text-white shadow-lg dark:from-primary-700 dark:to-primary-800"
        data-aos="zoom-in"
      >
        <h3 class="mb-4 text-2xl font-bold">Real-time Dashboard</h3>
        <div class="grid grid-cols-2 gap-4">
          <div class="rounded-lg bg-gray-100/10 p-4 backdrop-blur-sm">
            <div class="mb-2 text-3xl font-bold" id="liveClients">0</div>
            <div class="text-sm opacity-90">Active Clients</div>
          </div>
          <div class="rounded-lg bg-gray-100/10 p-4 backdrop-blur-sm">
            <div class="mb-2 text-3xl font-bold" id="livePlans">0</div>
            <div class="text-sm opacity-90">Plans Today</div>
          </div>
        </div>
        <div class="mt-4 text-sm opacity-90">
          Last updated: <span id="lastUpdated">Just now</span>
        </div>
      </div>

      <!-- Wildcard: Fire Safety Score -->
      <div class="rounded-xl bg-gray-100 p-6 shadow-lg dark:bg-gray-800" data-aos="fade-up">
        <div class="mb-6 flex items-center justify-between">
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Fire Safety Score</h3>
          <div class="flex items-center space-x-2">
            <div class="h-3 w-3 animate-pulse rounded-full bg-red-500"></div>
            <span class="text-sm text-gray-600 dark:text-gray-400">Critical Metric</span>
          </div>
        </div>
        <div class="relative h-80">
          <canvas id="fireSafetyChart"></canvas>
        </div>
        <div class="mt-4 text-center">
          <div class="mb-2 text-4xl font-bold text-green-600">A+</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Overall Safety Rating</div>
        </div>
      </div>
    </div>
  </div>
</App>

<script>
  import AOS from "aos";
  import "aos/dist/aos.css";
  import Chart from "chart.js/auto";

  // Chart initialization functions
  function initClientGrowthChart() {
    const clientGrowthCtx = document.getElementById("clientGrowthChart") as HTMLCanvasElement;
    if (!clientGrowthCtx) {
      console.error("Client growth chart canvas not found");
      return null;
    }
    const chart = new Chart(clientGrowthCtx, {
      type: "line",
      data: {
        labels: ["2021", "2022", "2023", "2024"],
        datasets: [
          {
            label: "Total Clients",
            data: [120, 200, 320, 400],
            borderColor: "rgb(34, 197, 94)",
            backgroundColor: "rgba(34, 197, 94, 0.1)",
            borderWidth: 3,
            fill: true,
            tension: 0.4,
            pointBackgroundColor: "rgb(34, 197, 94)",
            pointBorderColor: "#fff",
            pointBorderWidth: 2,
            pointRadius: 6,
            pointHoverRadius: 8,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: "rgba(0, 0, 0, 0.1)",
            },
          },
          x: {
            grid: {
              display: false,
            },
          },
        },
        interaction: {
          intersect: false,
          mode: "index",
        },
      },
    });
    return chart;
  }

  function initPlansProcessedChart() {
    const plansProcessedCtx = document.getElementById("plansProcessedChart") as HTMLCanvasElement;
    if (!plansProcessedCtx) {
      console.error("Plans processed chart canvas not found");
      return null;
    }
    const chart = new Chart(plansProcessedCtx, {
      type: "bar",
      data: {
        labels: ["2019", "2020", "2021", "2022", "2023"],
        datasets: [
          {
            label: "Plans Processed",
            data: [180, 220, 280, 350, 400],
            backgroundColor: [
              "rgba(59, 130, 246, 0.8)",
              "rgba(59, 130, 246, 0.8)",
              "rgba(59, 130, 246, 0.8)",
              "rgba(59, 130, 246, 0.8)",
              "rgba(59, 130, 246, 0.8)",
            ],
            borderColor: "rgb(59, 130, 246)",
            borderWidth: 2,
            borderRadius: 8,
            borderSkipped: false,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: "rgba(0, 0, 0, 0.1)",
            },
          },
          x: {
            grid: {
              display: false,
            },
          },
        },
      },
    });
    return chart;
  }

  function initSystemPerformanceChart() {
    const systemPerformanceCtx = document.getElementById(
      "systemPerformanceChart"
    ) as HTMLCanvasElement;
    if (!systemPerformanceCtx) {
      console.error("System performance chart canvas not found");
      return null;
    }
    const chart = new Chart(systemPerformanceCtx, {
      type: "doughnut",
      data: {
        labels: [
          "Sprinkler Systems",
          "Fire Alarms",
          "Emergency Lighting",
          "Fire Extinguishers",
          "Other",
        ],
        datasets: [
          {
            data: [35, 25, 20, 15, 5],
            backgroundColor: [
              "rgba(239, 68, 68, 0.8)",
              "rgba(245, 158, 11, 0.8)",
              "rgba(34, 197, 94, 0.8)",
              "rgba(59, 130, 246, 0.8)",
              "rgba(147, 51, 234, 0.8)",
            ],
            borderColor: [
              "rgb(239, 68, 68)",
              "rgb(245, 158, 11)",
              "rgb(34, 197, 94)",
              "rgb(59, 130, 246)",
              "rgb(147, 51, 234)",
            ],
            borderWidth: 2,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: "bottom",
            labels: {
              padding: 20,
              usePointStyle: true,
            },
          },
        },
      },
    });
    return chart;
  }

  function initFireSafetyChart() {
    const fireSafetyCtx = document.getElementById("fireSafetyChart") as HTMLCanvasElement;
    if (!fireSafetyCtx) {
      console.error("Fire safety chart canvas not found");
      return null;
    }
    const chart = new Chart(fireSafetyCtx, {
      type: "radar",
      data: {
        labels: [
          "Detection",
          "Suppression",
          "Evacuation",
          "Communication",
          "Maintenance",
          "Compliance",
        ],
        datasets: [
          {
            label: "Safety Score",
            data: [95, 98, 92, 96, 94, 97],
            backgroundColor: "rgba(239, 68, 68, 0.2)",
            borderColor: "rgb(239, 68, 68)",
            borderWidth: 3,
            pointBackgroundColor: "rgb(239, 68, 68)",
            pointBorderColor: "#fff",
            pointBorderWidth: 2,
            pointRadius: 6,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          r: {
            beginAtZero: true,
            max: 100,
            grid: {
              color: "rgba(0, 0, 0, 0.1)",
            },
            pointLabels: {
              font: {
                size: 12,
              },
            },
          },
        },
      },
    });
    return chart;
  }

  // Initialize AOS
  AOS.init({
    duration: 1000,
    once: true,
    offset: 100,
  });

  // Initialize all charts
  const clientGrowthChart = initClientGrowthChart();
  const plansProcessedChart = initPlansProcessedChart();
  const systemPerformanceChart = initSystemPerformanceChart();
  const fireSafetyChart = initFireSafetyChart();

  // Live data simulation
  function updateLiveData() {
    const liveClients = document.getElementById("liveClients");
    const livePlans = document.getElementById("livePlans");
    const lastUpdated = document.getElementById("lastUpdated");

    if (liveClients && livePlans && lastUpdated) {
      liveClients.textContent = (Math.floor(Math.random() * 50) + 350).toString();
      livePlans.textContent = (Math.floor(Math.random() * 20) + 15).toString();
      lastUpdated.textContent = new Date().toLocaleTimeString();
    }
  }

  // Update live data every 5 seconds
  setInterval(updateLiveData, 5000);
  updateLiveData(); // Initial call

  // Add hover effects to charts
  document.querySelectorAll("canvas").forEach((canvas) => {
    canvas.addEventListener("mouseenter", () => {
      (canvas as HTMLElement).style.transform = "scale(1.02)";
      (canvas as HTMLElement).style.transition = "transform 0.3s ease";
    });

    canvas.addEventListener("mouseleave", () => {
      (canvas as HTMLElement).style.transform = "scale(1)";
    });
  });
</script>

<style>
  @import "aos/dist/aos.css";

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>
