---
console.log("📊 [DASHBOARD] Page loading started...");

import App from "../components/common/App.astro";
import DashboardComponent from "../components/common/Dashboard.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import ProjectNav from "../components/project/ProjectNav.astro";
import Hero from "../components/common/Hero.astro";

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../lib/auth";
const { isAuth, currentUser, currentRole } = await checkAuth(Astro.cookies);

// Debug information
// console.log("🔍 [DASHBOARD] Auth check results:", {
//   isAuth,
//   hasUser: !!user,
//   userId: user?.id,
//   userEmail: user?.email,
//   currentRole,
//   hasSession: !!session,
// });

// Test database access if authenticated

// // Additional debugging - check cookies directly
// const accessToken = Astro.cookies.get("sb-access-token");
// const refreshToken = Astro.cookies.get("sb-refresh-token");

// console.log("🍪 [DASHBOARD] Cookie status:", {
//   hasAccessToken: !!accessToken,
//   hasRefreshToken: !!refreshToken,
//   accessTokenLength: accessToken?.value?.length || 0,
//   refreshTokenLength: refreshToken?.value?.length || 0,
// });

// Fetch projects and statuses from API
let projects: any[] = [];
let project_statuses: any[] = [];
let project_statuses_object: any = {};

try {
  // Fetch projects
  const projectsResponse = await (fetch as any)(`${Astro.url.origin}/api/get-project`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (projectsResponse.ok) {
    const projectsResult = await projectsResponse.json();
    if (projectsResult.success) {
      const allProjects = projectsResult.projects || [];
      console.log("🏗️ [DASHBOARD] Projects fetched:", allProjects.length);

      // Filter projects based on user currentRole
      if (currentRole === "Admin") {
        // Admin sees all projects
        projects = allProjects;
        // console.log("🏗️ [DASHBOARD] Admin - showing all projects:", projects.length);
      } else if (currentRole === "Staff") {
        // Staff only sees projects where they are assigned
        projects = allProjects.filter((project: any) => project.assigned_to_id === currentUser?.id);
        // console.log("🏗️ [DASHBOARD] Staff - showing assigned projects:", projects.length);
      } else {
        // Clients only see projects they authored
        projects = allProjects.filter((project: any) => project.author_id === currentUser?.id);
        // console.log("🏗️ [DASHBOARD] Client - showing authored projects:", projects.length);
      }
    } else {
      console.error("Projects API returned error:", projectsResult.error);
    }
  } else {
    console.error("Failed to fetch projects:", projectsResponse.status);
  }

  // Fetch statuses
  const statusesResponse = await (fetch as any)(`${Astro.url.origin}/api/get-project-statuses`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      currentRole: currentRole || "Client",
    },
  });

  if (statusesResponse.ok) {
    const statusesResult = await statusesResponse.json();
    if (statusesResult.success) {
      // console.log(
      //   "🏗️ [DASHBOARD] Statuses fetched:",
      //   Object.keys(statusesResult.statuses || {}).length
      // );
      // Convert to array format for existing components
      project_statuses = Object.values(statusesResult.statuses || {});
      // Keep object format for project actions (make it global for script)
      project_statuses_object = statusesResult.statuses || {};

      // console.log("🏗️ [DASHBOARD] project_statuses array length:", project_statuses.length);
      // console.log(
      //   "🏗️ [DASHBOARD] project_statuses_object keys:",
      //   Object.keys(project_statuses_object)
      // );
      // console.log("🏗️ [DASHBOARD] Status 10 config:", project_statuses_object[10]);
    } else {
      console.error("Statuses API returned error:", statusesResult.error);
    }
  } else {
    console.error("Failed to fetch statuses:", statusesResponse.status);
  }
} catch (error) {
  console.error("Error fetching data:", error);
}
---

<App requireAuth={true}>
  <Hero
    title={currentUser?.company_name || "Dashboard"}
    authorProfile={currentUser}
    description={""}
  />

  <!-- <DebugComponent/> -->

  <!-- Navigation -->
  <SectionContainer class="mx-6 flex flex-col gap-y-6">
    <ProjectNav
      currentRole={currentRole || "Client"}
      projects={projects}
      statuses={project_statuses}
      stat
    />
  </SectionContainer>

  <!-- Main Dashboard -->
  <SectionContainer id="dashboard" class="mx-6 mb-0 mt-0 flex">
    <DashboardComponent
      currentRole={currentRole || "Client"}
      currentUser={currentUser}
      projects={projects}
      statuses={project_statuses}
    />
  </SectionContainer>
</App>

<script
  define:vars={{ projects, project_statuses, project_statuses_object, currentRole, currentUser }}
>
  // Project Action Notification System - Only for Clients
  document.addEventListener("DOMContentLoaded", function () {
    console.log("🔔 [PROJECT-ACTIONS] Initializing project action notifications...");
    console.log("🔔 [PROJECT-ACTIONS] Current user currentRole:", currentRole);
    console.log("🔔 [PROJECT-ACTIONS] Projects data:", projects);
    console.log("🔔 [PROJECT-ACTIONS] Project statuses data:", project_statuses_object);

    // Only run for clients
    if (currentRole !== "Client") {
      console.log("🔔 [PROJECT-ACTIONS] Skipping - user is not a client");
      return;
    }

    if (!projects || !Array.isArray(projects) || projects.length === 0) {
      console.log("🔔 [PROJECT-ACTIONS] No projects found for client");
      return;
    }

    if (!project_statuses_object || typeof project_statuses_object !== "object") {
      console.log("🔔 [PROJECT-ACTIONS] No project statuses found");
      return;
    }

    console.log("🔔 [PROJECT-ACTIONS] Processing projects:", projects.length);
    console.log("🔔 [PROJECT-ACTIONS] Available statuses:", Object.keys(project_statuses_object));

    // Check each project for action notifications
    projects.forEach((project, index) => {
      const projectStatus = project.status;
      const statusConfig = project_statuses_object[projectStatus];

      console.log(`🔔 [PROJECT-ACTIONS] Checking project ${index + 1}:`, {
        id: project.id,
        title: project.title,
        status: projectStatus,
        hasStatusConfig: !!statusConfig,
      });

      if (statusConfig && statusConfig.project_action) {
        console.log(
          `🔔 [PROJECT-ACTIONS] Found project action for project "${project.title}":`,
          statusConfig.project_action
        );

        // Replace placeholders in the project action message
        const actionMessage = replacePlaceholders(
          statusConfig.project_action,
          project,
          statusConfig
        );

        console.log(
          `🔔 [PROJECT-ACTIONS] Showing toast for project "${project.title}":`,
          actionMessage
        );

        // Show dismissible toast notification
        if (window.showInfo) {
          console.log("🔔 [PROJECT-ACTIONS] Toast system available, showing notification...");
          window.showInfo("Project Action Required", actionMessage, -1); // -1 = persistent, no auto-dismiss
        } else {
          console.error("🔔 [PROJECT-ACTIONS] Toast system not available");
          console.error(
            "🔔 [PROJECT-ACTIONS] Available window methods:",
            Object.keys(window).filter((key) => key.includes("show"))
          );
        }
      } else {
        console.log(`🔔 [PROJECT-ACTIONS] No project action for project "${project.title}"`);
      }
    });
  });

  // Function to replace placeholders in project action messages
  function replacePlaceholders(message, project, statusConfig) {
    if (!message) return "";

    console.log("🔄 [PLACEHOLDER] Original message:", message);

    // Get client name from currentUser data
    const clientName =
      currentUser && currentUser.user_metadata
        ? currentUser.user_metadata.display_name ||
          `${currentUser.user_metadata.first_name || ""} ${currentUser.user_metadata.last_name || ""}`.trim() ||
          currentUser.user_metadata.company_name ||
          "Client"
        : "Client";

    // Handle PROJECT_LINK with optional query parameters
    const baseProjectLink = `${window.location.origin}/project/${project.id}`;

    // Replace PROJECT_LINK placeholders with query parameters and user-friendly text
    let processedMessage = message.replace(/{{PROJECT_LINK(\?[^}]*)?}}/g, (match, queryParams) => {
      const fullUrl = baseProjectLink + (queryParams || "");

      // Extract tab parameter for display text
      let displayText = "View Project";
      if (queryParams) {
        const tabMatch = queryParams.match(/[?&]tab=([^&]*)/);
        if (tabMatch && tabMatch[1]) {
          // Capitalize and format tab name
          const tabName = tabMatch[1]
            .replace(/([a-z])([A-Z])/g, "$1 $2") // camelCase to spaces
            .replace(/[-_]/g, " ") // replace dashes/underscores with spaces
            .split(" ")
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(" ");
          displayText = `Go to ${tabName}`;
        }
      }

      const linkHtml = `<a href="${fullUrl}" style="color: #3b82f6; text-decoration: underline; font-weight: 500;">${displayText}</a>`;
      console.log("🔗 [PROJECT-LINK] Generated link:", {
        match,
        queryParams,
        fullUrl,
        displayText,
        linkHtml,
      });
      return linkHtml;
    });

    const finalMessage = processedMessage
      .replace(/{{PROJECT_TITLE}}/g, project.title || "Project")
      .replace(/{{PROJECT_ADDRESS}}/g, project.address || "N/A")
      .replace(/{{ADDRESS}}/g, project.address || "N/A")
      .replace(/{{CLIENT_NAME}}/g, clientName)
      .replace(/{{CLIENT_EMAIL}}/g, currentUser?.email || "")
      .replace(/{{EST_TIME}}/g, statusConfig?.est_time || "2-3 business days")
      .replace(/{{STATUS_NAME}}/g, statusConfig?.status_name || "Status Update")
      // Replace any remaining {{PLACEHOLDER}} with empty string
      .replace(/\{\{[^}]+\}\}/g, "");

    console.log("🔄 [PLACEHOLDER] Final processed message:", finalMessage);
    return finalMessage;
  }
</script>
