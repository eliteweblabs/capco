---
// import { isBackendPage } from "../../pages/api/backend-page-check";
// import { navigation } from "@/pages/api/navigation";

// interface Props {
//   requireAuthRedirect?: string;
//   title?: string;
//   description?: string;
//   currentUser?: any;
//   session?: any;
//   project?: any;
//   supabase?: any;
//   supabaseAdmin?: any;
// }

// const {
//   requireAuthRedirect = "",
//   currentUser = undefined,
//   title = undefined,
//   description = undefined,
//   session = undefined,
//   project = undefined,
//   supabase = undefined,
//   supabaseAdmin = undefined,
// } = Astro.props;

const requireAuthRedirect = "/login";
import { checkAuth } from "../lib/auth";
const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);

// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}
const currentRole = currentUser?.role;
const currentUserId = currentUser?.id;

import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import HeroDashboard from "../components/common/HeroDashboard.astro";
import ProjectList from "../components/project/ProjectList.astro";
import ProjectForm from "../components/project/ProjectForm.astro";

import ProjectNav from "../components/project/ProjectNav.astro";
import "../lib/refresh-manager.ts";
// Get auth data directly since App component handles auth requirements

// console.log("🚀 [DASHBOARD] Current user:", currentUser);
// Initialize data arrays
let projects: any[] = [];
let project_statuses: any[] = [];
let project_statuses_object: any = {};

// Fetch projects using the API endpoint that includes discussion counts
if (currentUser?.id) {
  try {
    const baseUrl = Astro.url.origin || "http://localhost:4321";
    let apiUrl = `${baseUrl}/api/get-project`;

    // Add assigned_to_id parameter for Staff role
    if (currentRole === "Staff") {
      apiUrl += `?assigned_to_id=${currentUser.id}`;
    }

    // Add assigned_to_id parameter for Staff role
    if (currentRole === "Client") {
      apiUrl += `?author_id=${currentUser.id}`;
    }
    // For Admin and Client, no additional parameters needed (API handles role-based filtering)

    // console.log("🏗️ [DASHBOARD] Fetching projects from API:", apiUrl);
    const response = await fetch(apiUrl);

    if (response.ok) {
      const data = await response.json();
      projects = data.projects || [];
      // console.log("🏗️ [DASHBOARD] Projects fetched with discussion counts:", projects.length);
      // console.log("🏗️ [DASHBOARD] Sample project data:", {
      //   id: projects[0]?.id,
      //   title: projects[0]?.title,
      //   comment_count: projects[0]?.comment_count,
      //   incomplete_discussions: projects[0]?.i,
      // });
    } else {
      console.error(
        "🏗️ [DASHBOARD] Error fetching projects:",
        response.status,
        response.statusText
      );
    }
  } catch (error) {
    console.error("🏗️ [DASHBOARD] Error fetching projects:", error);
  }
}

// Fetch project statuses using the unified API
const statusApiUrl = new URL("/api/project-statuses", Astro.url.origin);
const statusResponse = await fetch(statusApiUrl.toString(), {
  method: "GET",
  headers: {
    Cookie: Astro.request.headers.get("Cookie") || "",
  },
});

let statusData: any = { success: false, roleBasedStatuses: {}, statusesMap: {} };
if (statusResponse.ok) {
  statusData = await statusResponse.json();
  project_statuses = statusData.statuses || [];
  project_statuses_object = statusData.roleBasedStatuses || {};
} else {
  console.error(
    "🏗️ [DASHBOARD] Error fetching project statuses:",
    statusResponse.status,
    statusResponse.statusText
  );
}
---

<App
  title="Global Dashboard - CAPCo Fire Protection"
  description="View all projects."
  currentUser={currentUser}
  project={undefined}
  session={session}
  supabase={supabase}
>
  <HeroDashboard
    title="Project Dashboard"
    description={currentRole === "Client"
      ? "Manage and track your fire protection projects"
      : "Manage and track all fire protection projects"}
  />

  <ProjectNav projects={projects} statuses={project_statuses} currentUser={currentUser} />

  <!-- Dashboard Container -->
  <SectionContainer class="lg:pt-1" fullWidth={true}>
    <div class="flex w-full flex-col gap-6 lg:flex-row">
      {
        projects && projects.length > 0 ? (
          <>
            {/* <!-- Projects List - 2/3 width on lg+ screens --> */}
            <div class="w-full lg:w-2/3">
              <ProjectList
                projects={projects}
                statusesObject={project_statuses_object}
                currentUser={currentUser}
              />
            </div>
            {/* <!-- Project Form - 1/3 width on lg+ screens --> */}
            <div id="new-project" class="no-scrollbar w-full overflow-y-scroll lg:top-20 lg:w-1/3">
              <div class="pb-6">
                {/* <h2 class="text-2xl font-bold text-center uppercase text-gray-900 dark:text-white mb-8">Create a new project</h2> */}

                <ProjectForm
                  isNewProject={true}
                  projectId=""
                  projectStatus={0}
                  currentUser={currentUser}
                />
              </div>
            </div>
          </>
        ) : (
          // <!-- No projects - show only form -->
          <div id="new-project" class="w-full">
            <div class="mx-auto max-w-2xl pb-6">
              <ProjectForm
                currentRole={currentRole}
                isNewProject={true}
                projectId=""
                projectStatus={0}
              />
            </div>
          </div>
        )
      }
    </div>
  </SectionContainer>

  <!-- Push Notification Permission Request for OAuth Users -->
  <script>
    // Request push notification permission for users who authenticated via OAuth
    // (Registration form already handles this for new users)
    document.addEventListener("DOMContentLoaded", () => {
      console.log("🔔 [DASHBOARD] Checking notification permission...");
      console.log("🔔 [DASHBOARD] Notification in window:", "Notification" in window);
      console.log(
        "🔔 [DASHBOARD] Current permission:",
        "Notification" in window ? Notification.permission : "Not available"
      );

      // Check if we're on mobile Safari
      const isMobileSafari =
        /iPad|iPhone|iPod/.test(navigator.userAgent) && /Safari/.test(navigator.userAgent);
      console.log("🔔 [DASHBOARD] Mobile Safari detected:", isMobileSafari);

      if (isMobileSafari) {
        console.log(
          "🔔 [DASHBOARD] Mobile Safari detected - push notifications work when installed as PWA"
        );
        console.log(
          "🔔 [DASHBOARD] Install as PWA (Add to Home Screen) for full notification support"
        );

        // Check if running as PWA
        const isStandalone =
          window.matchMedia("(display-mode: standalone)").matches ||
          (window.navigator as any).standalone === true;
        console.log("🔔 [DASHBOARD] Running as PWA:", isStandalone);

        if (!isStandalone) {
          console.log("💡 [DASHBOARD] Install as PWA for better notification support");
          return;
        }
      }

      // Only request if user hasn't been prompted yet
      if ("Notification" in window && Notification.permission === "default") {
        console.log("🔔 [DASHBOARD] Requesting notification permission...");
        // Wait a bit for the page to load, then request permission
        setTimeout(() => {
          Notification.requestPermission().then((permission) => {
            console.log("🔔 [DASHBOARD] Permission result:", permission);
            if (permission === "granted") {
              console.log("🔔 Push notifications enabled for authenticated user!");
              // Show a subtle notification
              if (window.showModal) {
                window.showModal(
                  "info",
                  "Notifications Enabled",
                  "You'll receive push notifications for project updates!",
                  3000
                );
              }
            } else {
              console.log("🔔 Push notifications declined by user");
            }
          });
        }, 3000); // Wait 3 seconds after page load
      } else {
        console.log("🔔 [DASHBOARD] Not requesting permission - already handled or not available");
      }
    });

    // Add notification reset function for debugging
    (window as any).resetNotifications = function () {
      console.log("🔄 [DASHBOARD] Resetting notification permissions...");

      // Check if we're on mobile Safari
      const isMobileSafari =
        /iPad|iPhone|iPod/.test(navigator.userAgent) && /Safari/.test(navigator.userAgent);

      if (isMobileSafari) {
        console.log(
          "📱 [DASHBOARD] Mobile Safari detected - push notifications work when installed as PWA"
        );
        console.log(
          "💡 [DASHBOARD] Install as PWA (Add to Home Screen) for full notification support"
        );

        // Check if running as PWA
        const isStandalone =
          window.matchMedia("(display-mode: standalone)").matches ||
          (window.navigator as any).standalone === true;
        console.log("🔔 [DASHBOARD] Running as PWA:", isStandalone);

        if (!isStandalone) {
          console.log("💡 [DASHBOARD] Install as PWA for better notification support");
          return;
        }
      }

      console.log(
        "🔄 [DASHBOARD] Current permission:",
        "Notification" in window ? Notification.permission : "Not available"
      );

      // Clear any stored permission state
      localStorage.removeItem("notification-permission-requested");
      sessionStorage.removeItem("notification-permission-requested");

      // Force a new permission request
      if ("Notification" in window) {
        Notification.requestPermission().then((permission) => {
          console.log("🔄 [DASHBOARD] Reset permission result:", permission);
          if (permission === "granted") {
            console.log("✅ Notifications re-enabled!");
          } else {
            console.log("❌ Notifications still denied");
          }
        });
      }
    };

    // Log current state for debugging
    console.log("🔔 [DASHBOARD] Current notification state:", {
      permission: "Notification" in window ? Notification.permission : "Not available",
      available: "Notification" in window,
      resetFunction: "Call window.resetNotifications() to reset",
    });
  </script>
</App>
