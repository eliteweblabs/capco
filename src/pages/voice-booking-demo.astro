---
// Voice Booking Demo Page
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Voice Booking Demo</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold text-gray-900 mb-8">ðŸŽ¤ Voice Booking System Demo</h1>

        <!-- Vapi.ai Integration Info -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">ðŸ¤– Vapi.ai Assistant Features</h2>
          <div class="grid md:grid-cols-2 gap-6">
            <div>
              <h3 class="font-semibold text-gray-700 mb-2">Conversational Responses</h3>
              <div class="space-y-2 text-sm text-gray-600">
                <div class="bg-blue-50 p-3 rounded">
                  "How's Tuesday the 14th? We have 2pm and 4pm available"
                </div>
                <div class="bg-blue-50 p-3 rounded">
                  "I have Wednesday at 10am or Thursday at 2pm - which works better?"
                </div>
                <div class="bg-blue-50 p-3 rounded">
                  "We're pretty booked this week, but I can do Monday at 3pm or Friday at 11am"
                </div>
              </div>
            </div>
            <div>
              <h3 class="font-semibold text-gray-700 mb-2">Available Functions</h3>
              <div class="space-y-1 text-sm text-gray-600">
                <div>â€¢ appointment_read - Read existing appointments</div>
                <div>â€¢ appointment_create - Create new appointments</div>
                <div>â€¢ appointment_update - Update appointments</div>
                <div>â€¢ appointment_cancel - Cancel appointments</div>
                <div>â€¢ appointment_availability - Check availability</div>
                <div>â€¢ user_create - Create new users</div>
              </div>
            </div>
          </div>
        </div>

        <!-- API Endpoints -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">ðŸ”— API Endpoints</h2>
          <div class="space-y-4">
            <div class="border-l-4 border-blue-500 pl-4">
              <h3 class="font-semibold text-gray-700">Vapi.ai Webhook</h3>
              <code class="text-sm text-gray-600">POST /api/vapi/webhook</code>
              <p class="text-sm text-gray-500 mt-1">Handles incoming calls from Vapi.ai</p>
            </div>
            <div class="border-l-4 border-green-500 pl-4">
              <h3 class="font-semibold text-gray-700">Cal.com Integration</h3>
              <code class="text-sm text-gray-600">POST /api/vapi/cal-integration</code>
              <p class="text-sm text-gray-500 mt-1">
                Routes function calls to appointment operations
              </p>
            </div>
            <div class="border-l-4 border-purple-500 pl-4">
              <h3 class="font-semibold text-gray-700">Appointment Management</h3>
              <code class="text-sm text-gray-600">GET/POST /api/appointments/*</code>
              <p class="text-sm text-gray-500 mt-1">Full CRUD operations for appointments</p>
            </div>
          </div>
        </div>

        <!-- Test Interface -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-semibold text-gray-800 mb-4">ðŸ§ª Test the Voice Integration</h2>

          <div class="space-y-4">
            <div>
              <h3 class="font-semibold text-gray-700 mb-2">Test Availability Check</h3>
              <p class="text-sm text-gray-600 mb-3">
                This simulates what the voice assistant would say:
              </p>
              <div class="flex space-x-2">
                <input
                  type="date"
                  id="testDate"
                  class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button
                  onclick="testVoiceBookingAvailability()"
                  class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Get Conversational Response
                </button>
              </div>
            </div>

            <div>
              <h3 class="font-semibold text-gray-700 mb-2">Test Appointment Creation</h3>
              <div class="grid grid-cols-2 gap-4">
                <input
                  type="text"
                  id="testName"
                  placeholder="Attendee Name"
                  class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <input
                  type="email"
                  id="testEmail"
                  placeholder="Email"
                  class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <button
                onclick="testAppointmentCreation()"
                class="mt-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
              >
                Test Appointment Creation
              </button>
            </div>
          </div>
        </div>

        <!-- Results -->
        <div id="results" class="mt-6 bg-white rounded-lg shadow-md p-6 hidden">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Results</h3>
          <pre id="resultContent" class="bg-gray-100 p-4 rounded-md text-sm overflow-x-auto"></pre>
        </div>
      </div>
    </div>

    <script>
      (window as any).testVoiceBookingAvailability = async function () {
        const date = (document.getElementById("testDate") as HTMLInputElement).value;
        if (!date) {
          alert("Please select a date");
          return;
        }

        try {
          const response = await fetch(`/api/appointments/availability-test?date=${date}`);
          const data = await response.json();

          // Simulate conversational response
          const conversationalResponse = generateConversationalResponse(data, date);
          (window as any).showResults("Voice Assistant Response", {
            original: data,
            conversational: conversationalResponse,
          });
        } catch (error) {
          (window as any).showResults("Error", { error: (error as Error).message });
        }
      };

      (window as any).testAppointmentCreation = async function () {
        const name = (document.getElementById("testName") as HTMLInputElement).value;
        const email = (document.getElementById("testEmail") as HTMLInputElement).value;

        if (!name || !email) {
          alert("Please fill in name and email");
          return;
        }

        try {
          const response = await fetch("/api/appointments/upsert-test", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              title: "Voice Booking Test",
              description: "Created via voice booking demo",
              start: new Date().toISOString(),
              end: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
              attendeeName: name,
              attendeeEmail: email,
            }),
          });
          const data = await response.json();
          (window as any).showResults("Appointment Created", data);
        } catch (error) {
          (window as any).showResults("Error", { error: (error as Error).message });
        }
      };

      function generateConversationalResponse(data: any, date: any) {
        const dateObj = new Date(date);
        const dayName = dateObj.toLocaleDateString("en-US", { weekday: "long" });
        const monthDay = dateObj.toLocaleDateString("en-US", { month: "long", day: "numeric" });

        if (data.availableSlots && data.availableSlots.length > 0) {
          const times = data.availableSlots.map((slot: any) => slot.time).join(", ");
          return `How's ${dayName} the ${monthDay}? We have ${times} available.`;
        } else {
          return `I'm sorry, but ${dayName} the ${monthDay} is completely booked. How about trying a different day?`;
        }
      }

      (window as any).showResults = function (title: string, data: any) {
        (document.getElementById("results") as HTMLElement).classList.remove("hidden");
        (document.getElementById("resultContent") as HTMLElement).textContent =
          `${title}:\n\n${JSON.stringify(data, null, 2)}`;
      };

      // Set default date to tomorrow
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      (document.getElementById("testDate") as HTMLInputElement).value = tomorrow
        .toISOString()
        .split("T")[0];
    </script>
  </body>
</html>
