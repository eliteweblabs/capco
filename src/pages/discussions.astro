---
import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import BoxIcon from "../components/common/BoxIcon.astro";
import Button from "../components/common/Button.astro";

// Para cambiar idioma de textos
import { getI18N } from "../i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

import { supabase } from "../lib/supabase";

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../lib/auth";
const { isAuth, currentUser, currentRole, session } = await checkAuth(Astro.cookies);

// Auth data comes from props (already set up above)

// Redirect if not authenticated
if (!isAuth) {
  console.log("üåê [DISCUSSIONS] Not authenticated, redirecting to login");
  return Astro.redirect("/login");
}

// Fetch all discussions with project and author information
let discussions: any[] = [];
let error: string | null = null;

if (supabase) {
  try {
    // Get discussions with company_name included
    const { data: discussionsData, error: discussionsError } = await supabase
      .from("discussion")
      .select(`
        id,
        created_at,
        message,
        author_id,
        project_id,
        mark_completed,
        internal,
        company_name
      `)
      .order("created_at", { ascending: false })
      .limit(50); // Limit to most recent 50 discussions

    if (discussionsError) {
      console.error("Error fetching discussions:", discussionsError);
      error = "Failed to load discussions";
    } else {
      // Get project details separately
      const projectIds = [...new Set(discussionsData?.map(d => d.project_id) || [])];
      let projectDetails: any = {};
      
      if (projectIds.length > 0) {
        const { data: projects, error: projectsError } = await supabase
          .from("projects")
          .select("id, title, address")
          .in("id", projectIds);
        
        if (!projectsError && projects) {
          projectDetails = projects.reduce((acc: any, project: any) => {
            acc[project.id] = project;
            return acc;
          }, {});
        }
      }

      // Combine discussions with project details and use company_name directly
      discussions = (discussionsData || []).map(discussion => ({
        ...discussion,
        company_name: discussion.company_name || "Unknown User",
        projects: projectDetails[discussion.project_id] || null
      }));
    }
  } catch (fetchError) {
    console.error("üåê [DISCUSSIONS] Fetch error:", fetchError);
    error = "Failed to connect to database";
  }
}

// Helper function to format date
function formatDate(dateString: string): string {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Helper function to get author display name
function getAuthorName(discussion: any): string {
  return discussion.company_name || "Unknown User";
}
---

<App 
  title="Global Discussions - CAPCo Fire Protection" 
  description="View all project discussions and comments across all projects." 
  isAuth={isAuth || false}
  currentUser={currentUser || null}
  currentRole={currentRole || ""}
  session={session || null}
>
  <!-- Header Section -->
  <div class="bg-gradient-to-r from-red-50 to-orange-50 px-6 py-16 dark:from-red-900/20 dark:to-orange-900/20">
    <div class="mx-auto max-w-6xl text-center">
      <h1 class="mb-6 text-4xl font-bold text-gray-900 dark:text-white md:text-5xl">
        Global <span class="text-red-600 dark:text-red-400">Discussions</span>
      </h1>
      <p class="mx-auto mb-8 max-w-3xl text-xl text-gray-600 dark:text-gray-300">
        View all project discussions and comments across all projects. Stay updated with the latest conversations.
      </p>

      <!-- Navigation -->
      <div class="flex justify-center gap-4">
        <Button
          href="/dashboard"
          variant="outline"
          icon="dashboard"
          iconPosition="left"
        >
          Dashboard
        </Button>
        <Button
          href="/"
          variant="primary"
          icon="home"
          iconPosition="left"
        >
          Home
        </Button>
      </div>
    </div>
  </div>

  <!-- Discussions Section -->
  <SectionContainer class="px-6 py-16">
    <div class="mx-auto max-w-4xl">
      {error ? (
        <!-- Error State -->
        <div class="py-16 text-center">
          <div class="mx-auto mb-6 flex h-16 w-16 items-center justify-center rounded-lg bg-red-100 dark:bg-red-900/30">
            <BoxIcon name="error-circle" class="h-8 w-8 text-red-600 dark:text-red-400" />
          </div>
          <h2 class="mb-4 text-2xl font-bold text-gray-900 dark:text-white">
            Unable to Load Discussions
          </h2>
          <p class="mb-6 text-gray-600 dark:text-gray-300">
            {error}
          </p>
          <Button
            onclick="window.location.reload()"
            variant="primary"
            icon="refresh"
            iconPosition="left"
          >
            Try Again
          </Button>
        </div>
      ) : discussions.length === 0 ? (
        <div class="py-16 text-center">
          <div class="mx-auto mb-6 flex h-16 w-16 items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800">
            <BoxIcon name="message-rounded-dots" class="h-8 w-8 text-gray-400" />
          </div>
          <h2 class="mb-4 text-2xl font-bold text-gray-900 dark:text-white">
            No Discussions Yet
          </h2>
          <p class="mb-6 text-gray-600 dark:text-gray-300">
            Start the conversation by adding comments to your projects.
          </p>
          <Button
            href="/dashboard"
            variant="primary"
            icon="folder"
            iconPosition="left"
          >
            Go to Dashboard
          </Button>
        </div>
      ) : (
        <!-- Discussions List -->
        <div class="space-y-6">
          {discussions.map((discussion) => (
            <div class="discussion-item rounded-lg border border-border-light bg-background-card p-6 shadow-sm dark:border-border-dark _1jTZ8KXRZul60S6czNi" data-project-id={discussion.project_id}>
              <div class="mb-4 flex items-start justify-between">
                <div class="flex items-center space-x-3">
                  <div class="flex h-10 w-10 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/30">
                    <BoxIcon name="user" class="h-5 w-5 text-red-600 dark:text-red-400" />
                  </div>
                  <div>
                    <h3 class="font-medium text-gray-900 dark:text-white">
                      {getAuthorName(discussion)}
                    </h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                      {formatDate(discussion.created_at)}
                    </p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  {(currentRole === "Admin" || currentRole === "Staff") && discussion.internal && (
                    <div
                      class="inline-flex items-center rounded-full bg-orange-100 px-2 py-1 text-xs font-medium text-orange-800 dark:bg-orange-900/30 dark:text-orange-300"
                      title="Internal Comment - Only visible to Admin and Staff"
                    >
                      <BoxIcon name="lock-alt" class="mr-1 h-3 w-3" />
                      Internal
                    </div>
                  )}
                  {discussion.projects && (
                    <Button
                      href={`/project/${discussion.project_id}`}
                      variant="ghost"
                      size="sm"
                      icon="folder"
                      iconPosition="left"
                    >
                      {discussion.projects.title || discussion.projects.address || "Project"}
                    </Button>
                  )}
                </div>
              </div>

              <div class="prose max-w-none dark:prose-invert">
                <p class="discussion-message whitespace-pre-wrap text-gray-700 dark:text-gray-300">
                  {discussion.message}
                </p>
              </div>

              {/* <!-- Admin/Staff Only: Mark Completed Toggle --> */}
              {(currentRole === "Admin" || currentRole === "Staff") && (
                <div class="mt-4 border-t border-gray-200 pt-4 dark:border-gray-700">
                  <div class="flex items-center justify-between">
                    <label class="flex cursor-pointer items-center gap-3">
                      <div class="relative">
                        <input
                          type="checkbox"
                          class="peer sr-only completed-toggle"
                          data-discussion-id={discussion.id}
                          checked={discussion.mark_completed || false}
                        />
                        <div class="h-6 w-11 rounded-full bg-gray-200 after:absolute after:left-[2px] after:top-[2px] after:h-5 after:w-5 after:rounded-full after:border after:border-gray-300 after:bg-white after:transition-all after:content-[''] peer-checked:bg-green-600 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 dark:border-gray-600 dark:bg-gray-700 dark:peer-focus:ring-green-800"></div>
                      </div>
                      <span class="text-sm text-gray-700 dark:text-gray-300">
                        <BoxIcon name="check-circle" class="mr-1 inline-block" />
                        Mark completed
                      </span>
                    </label>

                    <Button
                      href={`/project/${discussion.project_id}?tab=discussion`}
                      variant="ghost"
                      size="sm"
                      icon="message-rounded-dots"
                      iconPosition="left"
                      class="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                    >
                      View in Project
                    </Button>
                  </div>
                </div>
              )}

              {/* <!-- For non-Admin/Staff users, show just the link --> */}
              {!(currentRole === "Admin" || currentRole === "Staff") && (
                <div class="mt-4 border-t border-gray-200 pt-4 dark:border-gray-700">
                  <Button
                    href={`/project/${discussion.project_id}?tab=discussion`}
                    variant="ghost"
                    size="sm"
                    icon="message-rounded-dots"
                    iconPosition="left"
                    class="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                  >
                    View in Project
                  </Button>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>

  </SectionContainer>

  <!-- Toggle functionality script -->
  <script>
    // Toggle functionality for completed status
    console.log("üîî [DISCUSSIONS] Script loaded, setting up event listener");
    document.addEventListener("DOMContentLoaded", () => {
      console.log("üîî [DISCUSSIONS] DOM loaded, checking for toggles:", document.querySelectorAll(".completed-toggle").length);
    });
    
    document.addEventListener("change", (e) => {
      console.log("üîî [DISCUSSIONS] Change event fired on:", e.target);
      // Only handle toggles on the global discussions page (not in project tabs)
      if ((e.target as HTMLInputElement).classList.contains("completed-toggle") && 
          !document.getElementById("discussion-container")) {
        const discussionId = (e.target as HTMLInputElement).getAttribute("data-discussion-id");
        const isCompleted = (e.target as HTMLInputElement).checked;
        
        console.log("üîî [DISCUSSIONS] Toggle clicked:", {
          discussionId,
          isCompleted,
          target: e.target
        });
        
        if (discussionId) {
          fetch("/api/update-discussion-completed", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              discussionId: parseInt(discussionId),
              mark_completed: isCompleted,
            }),
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              console.log("‚úÖ [DISCUSSIONS] Discussion status updated successfully");
              // Note: Project logging happens on individual project pages, not global discussions
            } else {
              // Revert toggle on error
              (e.target as HTMLInputElement).checked = !isCompleted;
              console.error("Failed to update discussion status:", data.error);
            }
          })
          .catch(error => {
            // Revert toggle on error
            (e.target as HTMLInputElement).checked = !isCompleted;
            console.error("Error updating discussion status:", error);
          });
        }
      }
    });
  </script>
</App>