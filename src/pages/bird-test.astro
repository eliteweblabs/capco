---
// Bird.com SMS Test Page
import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import { checkAuth } from "../lib/auth";

// Get auth data for conditional rendering
const { isAuth, currentUser, currentRole } = await checkAuth(Astro.cookies);
---

<App title="Bird.com SMS Test" description="Test page for Bird.com SMS integration">
  <SectionContainer id="bird-test" class="px-6 py-16">
    <div class="mx-auto max-w-4xl">
      <div class="space-y-8">
        <div class="text-center">
          <h1 class="mb-4 text-4xl font-bold text-gray-900 dark:text-white">
            üê¶ Bird.com SMS Test
          </h1>
          <p class="text-lg text-gray-600 dark:text-gray-300">
            Test phone authentication and SMS delivery functionality
          </p>
        </div>

        <style>
          .test-section {
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
            margin-bottom: 24px;
          }
          .dark .test-section {
            background: #1f2937;
            border-color: #374151;
          }
          .test-section h2 {
            margin-top: 0;
            margin-bottom: 20px;
            color: #111827;
            font-size: 1.5rem;
            font-weight: 600;
          }
          .dark .test-section h2 {
            color: #f9fafb;
          }
          .form-group {
            margin-bottom: 16px;
          }
          .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: #374151;
          }
          .dark .form-group label {
            color: #d1d5db;
          }
          .form-group input,
          .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 16px;
            background: white;
            color: #111827;
          }
          .dark .form-group input,
          .dark .form-group textarea {
            background: #374151;
            border-color: #4b5563;
            color: #f9fafb;
          }
          .form-group input:focus,
          .form-group textarea:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
          }
          .btn {
            width: 100%;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            margin-top: 12px;
          }
          .btn-primary {
            background-color: #3b82f6;
            color: white;
          }
          .btn-primary:hover:not(:disabled) {
            background-color: #2563eb;
          }
          .btn-secondary {
            background-color: #6b7280;
            color: white;
          }
          .btn-secondary:hover:not(:disabled) {
            background-color: #4b5563;
          }
          .btn:disabled {
            background-color: #9ca3af;
            cursor: not-allowed;
          }
          .status {
            padding: 12px;
            border-radius: 8px;
            margin-top: 12px;
            font-weight: 500;
          }
          .status.success {
            background-color: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
          }
          .dark .status.success {
            background-color: #14532d;
            color: #bbf7d0;
            border-color: #166534;
          }
          .status.error {
            background-color: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
          }
          .dark .status.error {
            background-color: #7f1d1d;
            color: #fecaca;
            border-color: #dc2626;
          }
          .status.info {
            background-color: #eff6ff;
            color: #1d4ed8;
            border: 1px solid #bfdbfe;
          }
          .dark .status.info {
            background-color: #1e3a8a;
            color: #bfdbfe;
            border-color: #1d4ed8;
          }
          .hidden {
            display: none;
          }
        </style>

        <!-- Phone Authentication Section -->
        <div class="test-section" id="auth-section">
          <h2>Phone Authentication</h2>
          <div id="login-form">
            <div class="form-group">
              <label for="phone">Phone Number:</label>
              <input type="tel" id="phone" placeholder="+1234567890" required />
              <small class="text-sm text-gray-500"
                >Enter your phone number in international format (e.g., +1234567890)</small
              >
            </div>
            <button id="send-otp-btn" class="btn btn-primary">Send OTP</button>
          </div>

          <div id="verify-form" class="hidden">
            <div class="form-group">
              <label for="otp">Enter OTP:</label>
              <input type="text" id="otp" placeholder="123456" required />
            </div>
            <button id="verify-otp-btn" class="btn btn-primary">Verify OTP</button>
            <button id="back-to-phone-btn" class="btn btn-secondary">Back to Phone</button>
          </div>

          <div id="auth-status"></div>
        </div>

        <!-- SMS Test Section -->
        <div class="test-section hidden" id="sms-section">
          <h2>SMS Test</h2>
          <div class="form-group">
            <label for="sms-message">Message:</label>
            <textarea id="sms-message" rows="4" placeholder="Enter your test message here..."
            ></textarea>
          </div>
          <button id="send-sms-btn" class="btn btn-primary">Send SMS</button>
          <div id="sms-status"></div>
        </div>

        <!-- User Info Section -->
        <div class="test-section hidden" id="user-info-section">
          <h2>Logged In User</h2>
          <div id="user-info"></div>
          <button id="logout-btn" class="btn btn-secondary">Logout</button>
        </div>
      </div>
    </div>
  </SectionContainer>
</App>

<script>
  // Initialize Supabase client using direct API calls (no CDN dependency)
  let supabase: any = null;

  // Simple Supabase client implementation using direct API calls
  function createSupabaseClient(url: string, key: string) {
    return {
      auth: {
        getUser: async () => {
          try {
            // Get session from localStorage first
            const session = JSON.parse(localStorage.getItem("sb-access-token") || "null");
            if (!session) {
              return { data: { user: null } };
            }

            const response = await fetch(`${url}/auth/v1/user`, {
              headers: {
                Authorization: `Bearer ${session}`,
                apikey: key,
              },
            });

            if (!response.ok) {
              return { data: { user: null } };
            }

            const data = await response.json();
            return { data: { user: data.user || null } };
          } catch (error) {
            console.error("Error getting user:", error);
            return { data: { user: null } };
          }
        },
        signInWithOtp: async ({ phone }: { phone: string }) => {
          try {
            const response = await fetch(`${url}/auth/v1/otp`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                apikey: key,
              },
              body: JSON.stringify({
                phone,
                options: {
                  channel: "sms",
                },
              }),
            });

            const data = await response.json();
            if (data.error) {
              return { error: data.error };
            }
            return { data, error: null };
          } catch (error) {
            return { error: { message: "Network error" } };
          }
        },
        verifyOtp: async ({
          phone,
          token,
          type,
        }: {
          phone: string;
          token: string;
          type: string;
        }) => {
          try {
            const response = await fetch(`${url}/auth/v1/verify`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                apikey: key,
              },
              body: JSON.stringify({
                phone,
                token,
                type,
              }),
            });

            const data = await response.json();
            if (data.error) {
              return { error: data.error };
            }

            // Store session in localStorage
            if (data.access_token) {
              localStorage.setItem("sb-access-token", data.access_token);
            }
            if (data.refresh_token) {
              localStorage.setItem("sb-refresh-token", data.refresh_token);
            }

            return { data, error: null };
          } catch (error) {
            return { error: { message: "Network error" } };
          }
        },
        signOut: async () => {
          try {
            localStorage.removeItem("sb-access-token");
            localStorage.removeItem("sb-refresh-token");
            return { error: null };
          } catch (error) {
            return { error: { message: "Sign out error" } };
          }
        },
      },
    };
  }

  // Initialize Supabase client
  if ((window as any).SUPABASE_URL && (window as any).SUPABASE_ANON_KEY) {
    supabase = createSupabaseClient(
      (window as any).SUPABASE_URL,
      (window as any).SUPABASE_ANON_KEY
    );
    console.log("‚úÖ [BIRD-TEST] Supabase client initialized with direct API implementation");
  } else {
    console.error("‚ùå [BIRD-TEST] Supabase environment variables not found");
  }

  // DOM elements with proper typing
  const phoneInput = document.getElementById("phone") as HTMLInputElement | null;
  const otpInput = document.getElementById("otp") as HTMLInputElement | null;
  const sendOtpBtn = document.getElementById("send-otp-btn") as HTMLButtonElement | null;
  const verifyOtpBtn = document.getElementById("verify-otp-btn") as HTMLButtonElement | null;
  const backToPhoneBtn = document.getElementById("back-to-phone-btn") as HTMLButtonElement | null;
  const authStatus = document.getElementById("auth-status") as HTMLElement | null;
  const loginForm = document.getElementById("login-form") as HTMLElement | null;
  const verifyForm = document.getElementById("verify-form") as HTMLElement | null;
  const smsSection = document.getElementById("sms-section") as HTMLElement | null;
  const userInfoSection = document.getElementById("user-info-section") as HTMLElement | null;
  const smsMessage = document.getElementById("sms-message") as HTMLTextAreaElement | null;
  const sendSmsBtn = document.getElementById("send-sms-btn") as HTMLButtonElement | null;
  const smsStatus = document.getElementById("sms-status") as HTMLElement | null;
  const userInfo = document.getElementById("user-info") as HTMLElement | null;
  const logoutBtn = document.getElementById("logout-btn") as HTMLButtonElement | null;

  let currentUser: any = null;
  let lastFormattedPhone: string | null = null;

  // Helper function to format phone number to E.164 format
  function formatPhoneNumber(phone: string): string {
    // Remove all non-digit characters
    const digits = phone.replace(/\D/g, "");

    // If it starts with 1 and has 11 digits, it's a US number
    if (digits.length === 11 && digits.startsWith("1")) {
      return `+${digits}`;
    }

    // If it has 10 digits, assume it's a US number and add +1
    if (digits.length === 10) {
      return `+1${digits}`;
    }

    // If it already starts with +, return as is
    if (phone.startsWith("+")) {
      return phone;
    }

    // Otherwise, add + prefix
    return `+${digits}`;
  }

  // Helper function to ensure supabase is initialized
  function ensureSupabase() {
    if (!supabase) {
      throw new Error("Supabase client not initialized. Check environment variables.");
    }
    return supabase;
  }

  // Check if user is already logged in
  async function checkAuth() {
    const supabaseClient = ensureSupabase();
    const {
      data: { user },
    } = await supabaseClient.auth.getUser();

    console.log("üì± [BIRD-TEST] Auth check result:", {
      hasUser: !!user,
      userId: user?.id,
      userPhone: user?.phone,
      userEmail: user?.email,
    });

    if (user) {
      currentUser = user;
      showLoggedInState();
    }
  }

  // Show logged in state
  function showLoggedInState() {
    if (loginForm) loginForm.classList.add("hidden");
    if (verifyForm) verifyForm.classList.add("hidden");
    if (smsSection) smsSection.classList.remove("hidden");
    if (userInfoSection) userInfoSection.classList.remove("hidden");

    if (userInfo && currentUser) {
      userInfo.innerHTML = `
         <p><strong>Phone:</strong> ${currentUser.phone}</p>
         <p><strong>User ID:</strong> ${currentUser.id}</p>
         <p><strong>Created:</strong> ${new Date(currentUser.created_at).toLocaleString()}</p>
       `;
    }
  }

  // Send OTP
  async function sendOTP() {
    if (!phoneInput || !authStatus || !sendOtpBtn || !loginForm || !verifyForm) return;

    const phone = phoneInput.value.trim();
    if (!phone) {
      showStatus(authStatus, "Please enter a phone number", "error");
      return;
    }

    // Format phone number to E.164 format
    const formattedPhone = formatPhoneNumber(phone);
    lastFormattedPhone = formattedPhone; // Store for verification
    console.log("üì± [BIRD-TEST] Original phone:", phone, "Formatted phone:", formattedPhone);

    sendOtpBtn.disabled = true;
    sendOtpBtn.textContent = "Sending...";

    try {
      const supabaseClient = ensureSupabase();
      console.log("üì± [BIRD-TEST] Sending OTP to:", formattedPhone);
      const { error } = await supabaseClient.auth.signInWithOtp({
        phone: formattedPhone,
      });

      if (error) {
        showStatus(authStatus, `Error: ${error.message}`, "error");
        console.error("üì± [BIRD-TEST] OTP sending error:", error);
      } else {
        console.log("üì± [BIRD-TEST] OTP sent successfully to:", formattedPhone);
        showStatus(authStatus, "OTP sent successfully! Check your phone.", "success");
        loginForm.classList.add("hidden");
        verifyForm.classList.remove("hidden");
      }
    } catch (error: any) {
      showStatus(authStatus, `Error: ${error.message}`, "error");
    } finally {
      sendOtpBtn.disabled = false;
      sendOtpBtn.textContent = "Send OTP";
    }
  }

  // Verify OTP
  async function verifyOTP() {
    if (!phoneInput || !otpInput || !authStatus || !verifyOtpBtn) return;

    const phone = phoneInput.value.trim();
    const otp = otpInput.value.trim();

    if (!otp) {
      showStatus(authStatus, "Please enter the OTP", "error");
      return;
    }

    // Use the stored formatted phone number from sendOTP
    const formattedPhone = lastFormattedPhone || formatPhoneNumber(phone);
    console.log("üì± [BIRD-TEST] Verifying OTP for formatted phone:", formattedPhone);
    console.log(
      "üì± [BIRD-TEST] Using stored phone:",
      lastFormattedPhone,
      "vs current input:",
      phone
    );

    verifyOtpBtn.disabled = true;
    verifyOtpBtn.textContent = "Verifying...";

    try {
      const supabaseClient = ensureSupabase();
      console.log("üì± [BIRD-TEST] Verifying OTP with phone:", formattedPhone, "and token:", otp);
      const { data, error } = await supabaseClient.auth.verifyOtp({
        phone: formattedPhone,
        token: otp,
        type: "sms",
      });

      if (error) {
        showStatus(authStatus, `Error: ${error.message}`, "error");
        console.error("üì± [BIRD-TEST] OTP verification error:", error);
      } else {
        currentUser = data.user;
        console.log("üì± [BIRD-TEST] OTP verification successful! User data:", {
          id: data.user?.id,
          phone: data.user?.phone,
          email: data.user?.email,
          created_at: data.user?.created_at,
          user_metadata: data.user?.user_metadata,
          app_metadata: data.user?.app_metadata,
        });
        showStatus(authStatus, "Login successful!", "success");
        showLoggedInState();
      }
    } catch (error: any) {
      showStatus(authStatus, `Error: ${error.message}`, "error");
    } finally {
      verifyOtpBtn.disabled = false;
      verifyOtpBtn.textContent = "Verify OTP";
    }
  }

  // Send SMS
  async function sendSMS() {
    if (!smsMessage || !smsStatus || !sendSmsBtn || !currentUser) return;

    const message = smsMessage.value.trim();
    if (!message) {
      showStatus(smsStatus, "Please enter a message", "error");
      return;
    }

    // Format phone number to E.164 format
    const formattedPhone = formatPhoneNumber(currentUser.phone);
    console.log("üì± [BIRD-TEST] Sending SMS to formatted phone:", formattedPhone);

    sendSmsBtn.disabled = true;
    sendSmsBtn.textContent = "Sending...";

    try {
      const response = await fetch("/api/send-sms", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          phone: formattedPhone,
          message: message,
        }),
      });

      const result = await response.json();

      if (response.ok) {
        showStatus(smsStatus, `SMS sent successfully! Message ID: ${result.messageId}`, "success");
      } else {
        showStatus(smsStatus, `Error: ${result.error}`, "error");
      }
    } catch (error: any) {
      showStatus(smsStatus, `Error: ${error.message}`, "error");
    } finally {
      sendSmsBtn.disabled = false;
      sendSmsBtn.textContent = "Send SMS";
    }
  }

  // Logout
  async function logout() {
    const supabaseClient = ensureSupabase();
    await supabaseClient.auth.signOut();
    currentUser = null;

    // Reset UI
    if (loginForm) loginForm.classList.remove("hidden");
    if (verifyForm) verifyForm.classList.add("hidden");
    if (smsSection) smsSection.classList.add("hidden");
    if (userInfoSection) userInfoSection.classList.add("hidden");

    // Clear inputs
    if (phoneInput) phoneInput.value = "";
    if (otpInput) otpInput.value = "";
    if (smsMessage) smsMessage.value = "";

    if (authStatus) showStatus(authStatus, "Logged out successfully", "info");
  }

  // Back to phone input
  function backToPhone() {
    if (!verifyForm || !loginForm || !otpInput || !authStatus) return;

    verifyForm.classList.add("hidden");
    loginForm.classList.remove("hidden");
    otpInput.value = "";
    authStatus.innerHTML = "";
    lastFormattedPhone = null; // Clear stored phone number
    console.log("üì± [BIRD-TEST] Cleared stored phone number");
  }

  // Show status message using global toast functions
  function showStatus(element: HTMLElement | null, message: string, type: string) {
    if (!element) return;

    element.innerHTML = `<div class="status ${type}">${message}</div>`;

    // Also show global toast notification
    if ((window as any).showSuccess && type === "success") {
      (window as any).showSuccess("Success", message, 5000);
    } else if ((window as any).showError && type === "error") {
      (window as any).showError("Error", message, 0);
    } else if ((window as any).showInfo && type === "info") {
      (window as any).showInfo("Info", message, 5000);
    }
  }

  // Event listeners with null checks
  if (sendOtpBtn) sendOtpBtn.addEventListener("click", sendOTP);
  if (verifyOtpBtn) verifyOtpBtn.addEventListener("click", verifyOTP);
  if (backToPhoneBtn) backToPhoneBtn.addEventListener("click", backToPhone);
  if (sendSmsBtn) sendSmsBtn.addEventListener("click", sendSMS);
  if (logoutBtn) logoutBtn.addEventListener("click", logout);

  // Check auth on page load
  checkAuth();
</script>
