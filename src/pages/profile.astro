---
import App from "../components/common/App.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import BoxIcon from "../components/common/BoxIcon.astro";
import PhoneAndSMS from "../components/form/PhoneAndSMS.astro";
import { getCarrierKeyFromGateway } from "../lib/sms-carriers";

// Get auth data directly since App component handles auth requirements
import { checkAuth } from "../lib/auth";
const { isAuth, currentUser, currentRole } = await checkAuth(Astro.cookies);
const userProfile = currentUser?.profile || null;

// Get the carrier key from the stored gateway domain
const storedCarrierKey = currentUser?.user_metadata?.mobile_carrier
  ? getCarrierKeyFromGateway(currentUser.user_metadata.mobile_carrier)
  : null;
---

<App
  title="My Profile - CAPCo Fire Protection"
  description="Manage your profile and account settings."
  requireAuth={true}
>
  <SectionContainer class="px-6 py-16">
    <div class="mx-auto max-w-2xl">
      <!-- Header -->
      <div class="mb-8 text-center">
        <!-- <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900/30"
        >
          <BoxIcon name="user" class="h-8 w-8 text-blue-600 dark:text-blue-400" />
        </div> -->
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">My Profile</h1>
        <p class="mt-2 text-gray-600 dark:text-gray-300">
          Manage your account information and preferences
        </p>
      </div>

      <!-- Profile Form -->
      <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
        <form id="profile-form" class="space-y-6">
          <!-- Profile Picture Section -->
          <!-- <div class="text-center">
            <div
              class="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700"
            >
              <img
                id="profile-avatar"
                src=""
                alt="Profile picture"
                class="h-20 w-20 rounded-full object-cover"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              />
              <BoxIcon name="user" style="display:none;" class="h-10 w-10 text-gray-400" />
            </div>
            <button
              type="button"
              id="upload-avatar-btn"
              class="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
            >
              Upload Photo
            </button>
            <input type="file" id="avatar-input" accept="image/*" class="hidden" />
          </div> -->

          <!-- Company Name Field -->
          <div>
            <label
              for="companyName"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Company Name
            </label>
            <input
              type="text"
              id="companyName"
              name="company_name"
              value={userProfile?.company_name || ""}
              class="w-full rounded-full border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Enter your company name"
            />
          </div>

          <!-- First Name and Last Name Fields -->
          <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
              <label
                for="firstName"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                First Name
              </label>
              <input
                type="text"
                id="firstName"
                name="first_name"
                value={userProfile?.first_name || ""}
                class="w-full rounded-full border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                placeholder="Enter your first name"
              />
            </div>
            <div>
              <label
                for="lastName"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Last Name
              </label>
              <input
                type="text"
                id="lastName"
                name="last_name"
                value={userProfile?.last_name || ""}
                class="w-full rounded-full border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                placeholder="Enter your last name"
              />
            </div>
          </div>

          <!-- Email Field (Read-only) -->
          <div>
            <label
              for="email"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email Address
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={currentUser?.email || ""}
              readonly
              class="w-full rounded-full border border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400"
            />
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Email cannot be changed. Contact support if needed.
            </p>
          </div>

          <!-- Phone and SMS -->
          <PhoneAndSMS
            id="phone"
            name="phone"
            value={currentUser?.user_metadata?.phone || ""}
            placeholder="Enter your phone number"
            showSMS={true}
            smsChecked={currentUser?.user_metadata?.sms_alerts || false}
            selectedCarrier={storedCarrierKey || ""}
          />

          <!-- Role Field (Read-only) -->
          <!-- <div>
            <label for="role" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Role
            </label>
            <input
              type="text"
              id="role"
              name="role"
              value={role || "User"}
              readonly
              class="w-full rounded-full border border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400"
            />
          </div> -->

          <!-- Action Buttons -->
          <div class="flex gap-3 pt-4">
            <button
              type="submit"
              id="save-profile-btn"
              class="flex-1 rounded-full bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none disabled:opacity-50"
            >
              Save Changes
            </button>
            <a
              href="/dashboard"
              class="flex-1 rounded-full border border-gray-300 bg-white px-4 py-2 text-center text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
            >
              Cancel / Dashboard
            </a>
          </div>
        </form>
      </div>

      <!-- Account Actions Section -->
      <div class="mt-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
        <h2 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Account Actions</h2>

        <div class="space-y-3">
          <button
            type="button"
            id="change-password-btn"
            class="flex w-full items-center justify-between rounded-full border border-gray-200 p-3 text-left hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700"
          >
            <div class="flex items-center">
              <BoxIcon name="lock" class="mr-3 h-5 w-5 text-gray-400" />
              <div>
                <p class="text-sm font-medium text-gray-900 dark:text-white">Change Password</p>
                <p class="text-xs text-gray-500 dark:text-gray-400">Update your account password</p>
              </div>
            </div>
            <BoxIcon name="chevron-right" class="h-4 w-4 text-gray-400" />
          </button>

          <!-- <button
            id="delete-account-btn"
            class="flex w-full items-center justify-between rounded-full border border-red-200 p-3 text-left hover:bg-red-50 dark:border-red-800 dark:hover:bg-red-900/20"
          >
            <div class="flex items-center">
              <BoxIcon name="trash" class="mr-3 h-5 w-5 text-red-400" />
              <div>
                <p class="text-sm font-medium text-red-600 dark:text-red-400">Delete Account</p>
                <p class="text-xs text-red-500 dark:text-red-400">
                  Permanently delete your account
                </p>
              </div>
            </div>
            <BoxIcon name="chevron-right" class="h-4 w-4 text-red-400" />
          </button> -->
        </div>
      </div>

      <!-- Forgot Password Modal -->
      <div
        id="forgot-password-modal"
        class="fixed inset-0 z-50 items-center justify-center bg-black bg-opacity-50 hidden"
      >
        <div class="mx-4 w-full max-w-md rounded-full bg-white p-6 shadow-xl dark:bg-gray-800">
          <div class="mb-4 flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Reset Password</h3>
            <button
              type="button"
              id="close-forgot-modal"
              class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            >
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <form id="forgot-password-form" class="space-y-4">
            <div>
              <label
                for="reset-email"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email Address
              </label>
              <input
                type="email"
                id="reset-email"
                name="email"
                required
                class="w-full rounded-full border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                placeholder="Enter your email address"
              />
            </div>

            <div class="flex gap-3">
              <button
                type="button"
                id="cancel-forgot"
                class="flex-1 rounded-full border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              >
                Cancel
              </button>
              <button
                type="submit"
                id="send-reset-link"
                class="flex-1 rounded-full bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none disabled:opacity-50"
              >
                Send Reset Link
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </SectionContainer>
</App>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const profileForm = document.getElementById("profile-form");
    const saveProfileBtn = document.getElementById("save-profile-btn");
    const uploadAvatarBtn = document.getElementById("upload-avatar-btn");
    const avatarInput = document.getElementById("avatar-input");
    const deleteAccountBtn = document.getElementById("delete-account-btn");

    // Forgot Password Modal Elements
    const changePasswordBtn = document.getElementById("change-password-btn");
    const forgotPasswordModal = document.getElementById("forgot-password-modal");
    const closeForgotModal = document.getElementById("close-forgot-modal");
    const cancelForgot = document.getElementById("cancel-forgot");
    const forgotPasswordForm = document.getElementById("forgot-password-form");
    const resetEmailInput = document.getElementById("reset-email");
    const sendResetLinkBtn = document.getElementById("send-reset-link");

    // Get form elements

    // Handle profile form submission
    profileForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(profileForm as HTMLFormElement);
      const companyName = formData.get("company_name") as string;
      const firstName = formData.get("first_name") as string;
      const lastName = formData.get("last_name") as string;
      const phone = formData.get("phone") as string;
      const smsAlertsCheckbox = document.getElementById("sms-alerts-phone");
      const smsAlerts = (smsAlertsCheckbox as HTMLInputElement)?.checked || false;
      const mobileCarrier = formData.get("mobile_carrier") as string;

      // Disable button and show loading state
      if (saveProfileBtn) {
        (saveProfileBtn as HTMLButtonElement).disabled = true;
        (saveProfileBtn as HTMLButtonElement).textContent = "Saving...";
      }

      try {
        const response = await fetch("/api/profile/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            companyName,
            firstName,
            lastName,
            phone,
            smsAlerts,
            mobileCarrier: smsAlerts ? mobileCarrier : null,
          }),
        });

        const result = await response.json();

        if (response.ok) {
          if (window.showModal) {
            window.showModal(
              "success",
              "Profile Updated",
              "Your profile has been updated successfully.",
              5000
            );
          } else {
            console.log("🔔 [Profile Updated] Your profile has been updated successfully.");
          }
        } else {
          if (window.showModal) {
            window.showModal(
              "error",
              "Update Failed",
              result.error || "Failed to update profile. Please try again.",
              5000
            );
          } else {
            console.error(
              "🔔 [Update Failed]",
              result.error || "Failed to update profile. Please try again."
            );
          }
        }
      } catch (error) {
        console.error("Profile update error:", error);
        if (window.showModal) {
          window.showModal(
            "error",
            "Network Error",
            "Failed to update profile. Please check your connection and try again.",
            5000
          );
        } else {
          console.error(
            "🔔 [Network Error] Failed to update profile. Please check your connection and try again."
          );
        }
      } finally {
        // Re-enable button
        if (saveProfileBtn) {
          (saveProfileBtn as HTMLButtonElement).disabled = false;
          (saveProfileBtn as HTMLButtonElement).textContent = "Save Changes";
        }
      }
    });

    // Handle avatar upload
    uploadAvatarBtn?.addEventListener("click", () => {
      avatarInput?.click();
    });

    avatarInput?.addEventListener("change", async (e) => {
      const file = (e.target as HTMLInputElement)?.files?.[0];
      if (!file) return;

      // TODO: Implement avatar upload functionality
      if (window.showModal) {
        window.showModal("info", "Avatar Upload", "Avatar upload functionality coming soon!", 3000);
      } else {
        console.log("🔔 [Avatar Upload] Avatar upload functionality coming soon!");
      }
    });

    // Handle account deletion
    deleteAccountBtn?.addEventListener("click", () => {
      if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
        // TODO: Implement account deletion
        if (window.showModal) {
          window.showModal(
            "warning",
            "Account Deletion",
            "Account deletion functionality coming soon!",
            3000
          );
        } else {
          console.warn("🔔 [Account Deletion] Account deletion functionality coming soon!");
        }
      }
    });

    // Forgot Password Modal Functionality
    // Open modal
    changePasswordBtn?.addEventListener("click", () => {
      forgotPasswordModal?.classList.remove("hidden");
      forgotPasswordModal?.classList.add("flex");
      resetEmailInput?.focus();
    });

    // Close modal functions
    const closeModal = () => {
      forgotPasswordModal?.classList.add("hidden");
      forgotPasswordModal?.classList.remove("flex");
      (forgotPasswordForm as HTMLFormElement)?.reset();
    };

    closeForgotModal?.addEventListener("click", closeModal);
    cancelForgot?.addEventListener("click", closeModal);

    // Close modal when clicking outside
    forgotPasswordModal?.addEventListener("click", (e) => {
      if (e.target === forgotPasswordModal) {
        closeModal();
      }
    });

    // Handle forgot password form submission
    forgotPasswordForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const email = (resetEmailInput as HTMLInputElement)?.value.trim();

      if (!email) {
        if (window.showModal) {
          window.showModal("error", "Validation Error", "Please enter your email address.");
        } else {
          console.error("🔔 [Validation Error] Please enter your email address.");
        }
        return;
      }

      // Disable button and show loading state
      if (sendResetLinkBtn) {
        (sendResetLinkBtn as HTMLButtonElement).disabled = true;
        (sendResetLinkBtn as HTMLButtonElement).textContent = "Sending...";
      }

      try {
        const response = await fetch("/api/auth/forgot-password", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email }),
        });

        const result = await response.json();

        if (response.ok) {
          if (window.showModal) {
            window.showModal(
              "success",
              "Reset Link Sent",
              "If an account with that email exists, you will receive a password reset link shortly.",
              8000
            );
          } else {
            console.log(
              "🔔 [Reset Link Sent] If an account with that email exists, you will receive a password reset link shortly."
            );
          }
          closeModal();
        } else {
          if (window.showModal) {
            window.showModal(
              "Error",
              result.error || "Failed to send reset link. Please try again.",
              "error"
            );
          } else {
            console.error(
              "🔔 [Error]",
              result.error || "Failed to send reset link. Please try again."
            );
          }
        }
      } catch (error) {
        console.error("Forgot password error:", error);
        if (window.showModal) {
          window.showModal(
            "Network Error",
            "Failed to send reset link. Please check your connection and try again.",
            "error"
          );
        } else {
          console.error(
            "🔔 [Network Error] Failed to send reset link. Please check your connection and try again."
          );
        }
      } finally {
        // Re-enable button
        if (sendResetLinkBtn) {
          (sendResetLinkBtn as HTMLButtonElement).disabled = false;
          (sendResetLinkBtn as HTMLButtonElement).textContent = "Send Reset Link";
        }
      }
    });
  });
</script>
