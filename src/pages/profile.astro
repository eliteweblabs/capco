---
const requireAuthRedirect = "/login";
import { checkAuth } from "../lib/auth";
const { currentUser, session, supabase, refreshToken, accessToken } = await checkAuth(
  Astro.cookies
);

// Handle auth redirect first
if (requireAuthRedirect && (!session || !currentUser)) {
  return Astro.redirect(requireAuthRedirect);
}

import { globalCompanyData } from "../pages/api/global-company-data";
const {
  globalCompanyName,
  globalCompanySlogan,
  globalCompanyAddress,
  globalCompanyPhone,
  globalCompanyEmail,
  globalCompanyWebsite,
  globalCompanyLogo,
  globalCompanyLogoDark,
  globalCompanyLogoLight,
} = globalCompanyData();

import { globalClasses } from "../pages/api/global-classes";
const { globalInputClasses, globalPrimaryTextClasses, globalSecondaryTextClasses } =
  globalClasses();

import App from "../components/common/App.astro";
import { getCarrierKeyFromGateway } from "../lib/sms-carriers";
import BoxIcon from "../components/common/BoxIcon.astro";
import Footer from "../components/common/Footer.astro";
import PhoneAndSMS from "../components/form/PhoneAndSMS.astro";
import Button from "../components/common/Button.astro";
import ForgotPasswordModal from "../components/form/ForgetPasswordModal.astro";
const userProfile = currentUser?.profile || null;

// Get the carrier key from the stored gateway domain
const storedCarrierKey = currentUser?.user_metadata?.mobile_carrier
  ? getCarrierKeyFromGateway(currentUser.user_metadata.mobile_carrier)
  : null;
---

<App
  title=""
  description=""
  currentUser={currentUser}
  session={session || undefined}
  project={undefined}
  supabase={supabase}
  globalCompanyName={globalCompanyName}
  globalCompanySlogan={globalCompanySlogan}
  globalPrimaryTextClasses={globalPrimaryTextClasses}
  globalSecondaryTextClasses={globalSecondaryTextClasses}
  globalInputClasses={globalInputClasses}
  globalCompanyAddress={globalCompanyAddress}
  globalCompanyPhone={globalCompanyPhone}
  globalCompanyEmail={globalCompanyEmail}
  globalCompanyWebsite={globalCompanyWebsite}
  globalCompanyLogo={globalCompanyLogo}
  globalCompanyLogoDark={globalCompanyLogoDark}
  globalCompanyLogoLight={globalCompanyLogoLight}
>
  <div class="RZmKBZs1E1eXw8vkE6jY p_2EXc_a2sDA_h41l8QU">
    <div
      class="mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 _wYiJGbRZyFZeCc8y7Sf mngKhi_Rv06PF57lblDI _1jTZ8KXRZul60S6czNi LSIxp7RSuOKhsg28v_u3"
    >
      <div class="mx-auto max-w-2xl">
        <!-- Header -->
        <div class="mb-8 text-center">
          <!-- <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-lg bg-blue-100 dark:bg-blue-900/30"
        >
          <BoxIcon name="user" class="h-8 w-8 text-blue-600 dark:text-blue-400" />
        </div> -->
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">My Profile</h1>
          <p class="mt-2 text-gray-600 dark:text-gray-300">
            Manage your account information and preferences
          </p>
        </div>

        <!-- Profile Form -->
        <form id="profile-form" class="space-y-6">
          <!-- Profile Picture Section -->
          <!-- <div class="text-center">
            <div
              class="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-lg bg-gray-100 dark:bg-gray-700"
            >
              <img
                id="profile-avatar"
                src=""
                alt="Profile picture"
                class="h-20 w-20 rounded-lg object-cover"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              />
              <BoxIcon name="user" style="display:none;" class="h-10 w-10 text-gray-400" />
            </div>
            <Button
              type="button"
              id="upload-avatar-btn"
              variant="link"
              size="sm"
              class="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
            >
              Upload Photo
            </Button>
            <input type="file" id="avatar-input" accept="image/*" class="hidden" />
          </div> -->

          <!-- Company Name Field -->
          <div class="grid grid-cols-1 gap-4 lg:grid-cols-1">
            <div class="relative">
              <label
                for="companyName"
                class="block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Company Name
              </label>
              <input
                type="text"
                id="company-name"
                name="company_name"
                value={userProfile?.company_name || ""}
                class=`${globalInputClasses}`
                placeholder="Enter your company name"
              />
            </div>
          </div>

          <!-- First Name and Last Name Fields -->
          <div class="grid grid-cols-1 gap-4 lg:grid-cols-2">
            <div class="relative">
              <label
                for="first-name"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                First Name
              </label>
              <input
                type="text"
                id="first-name"
                name="first_name"
                value={userProfile?.first_name || ""}
                class=`${globalInputClasses}`
                placeholder="Enter your first name"
              />
            </div>
            <div class="relative">
              <label
                for="last-name"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Last Name
              </label>
              <input
                type="text"
                id="last-name"
                name="last_name"
                value={userProfile?.last_name || ""}
                class=`${globalInputClasses}`
                placeholder="Enter your last name"
              />
            </div>
          </div>

          <!-- Email Field (Read-only) -->
          <div class="grid grid-cols-1 gap-4 lg:grid-cols-1">
            <div class="relative">
              <label
                for="email"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email Address
              </label>
              <div class="relative">
                <input
                  type="email"
                  id="email"
                  name="email"
                  required
                  value={currentUser?.email || ""}
                  readonly
                  class=`${globalInputClasses}`
                  placeholder="Enter email address"
                />
                <BoxIcon
                  id="email-lock-icon"
                  name="lock"
                  class="absolute right-3 top-1/2 -translate-y-1/2"
                />
              </div>
            </div>
          </div>

          <!-- Phone and SMS -->
          <PhoneAndSMS
            id="phone"
            name="phone"
            value={currentUser?.user_metadata?.phone || ""}
            placeholder="Enter your phone number"
            showSMS={true}
            smsChecked={currentUser?.user_metadata?.sms_alerts || false}
            selectedCarrier={storedCarrierKey || ""}
          />

          <!-- Action Buttons -->
          <div class="flex gap-3 pt-4">
            <Button
              type="button"
              variant="ghost"
              size="sm"
              class="flex-1"
              href="/dashboard"
              icon="chevron-left"
              iconPosition="left"
            >
              Cancel / Dashboard
            </Button>
            <Button
              type="submit"
              id="save-profile-btn"
              variant="primary"
              size="sm"
              class="flex-1"
              icon="save"
              iconPosition="left"
            >
              Save Changes
            </Button>
          </div>
        </form>

        <!-- Account Actions Section -->
        <div class="mt-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
          <h2 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Account Actions</h2>

          <div class="space-y-3">
            <ForgotPasswordModal title="Change Password" message="Change your password" />
          </div>
        </div>
      </div>
    </div>
  </div>
</App>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const profileForm = document.getElementById("profile-form");
    const saveProfileBtn = document.getElementById("save-profile-btn");
    const uploadAvatarBtn = document.getElementById("upload-avatar-btn");
    const avatarInput = document.getElementById("avatar-input");
    const deleteAccountBtn = document.getElementById("delete-account-btn");

    const resetEmailInput = document.getElementById("reset-email");
    const sendResetLinkBtn = document.getElementById("send-reset-link");

    // Get form elements

    // Handle profile form submission
    profileForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(profileForm as HTMLFormElement);
      const companyName = formData.get("company_name") as string;
      const firstName = formData.get("first_name") as string;
      const lastName = formData.get("last_name") as string;
      const phone = formData.get("phone") as string;
      const smsAlertsCheckbox = document.getElementById("sms-alerts-phone");
      const smsAlerts = (smsAlertsCheckbox as HTMLInputElement)?.checked || false;
      const mobileCarrier = formData.get("mobile_carrier") as string;

      // Disable button and show loading state
      if (saveProfileBtn) {
        (saveProfileBtn as HTMLButtonElement).disabled = true;
        (saveProfileBtn as HTMLButtonElement).textContent = "Saving...";
      }

      try {
        const response = await fetch("/api/profile/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            companyName,
            firstName,
            lastName,
            phone,
            smsAlerts,
            mobileCarrier: smsAlerts ? mobileCarrier : null,
          }),
        });

        const result = await response.json();

        if (response.ok) {
          if (window.showModal) {
            window.showModal(
              "success",
              "Profile Updated",
              "Your profile has been updated successfully.",
              2500
            );
          } else {
            console.log("🔔 [Profile Updated] Your profile has been updated successfully.");
          }
        } else {
          if (window.showModal) {
            window.showModal(
              "error",
              "Update Failed",
              result.error || "Failed to update profile. Please try again.",
              5000
            );
          } else {
            console.error(
              "🔔 [Update Failed]",
              result.error || "Failed to update profile. Please try again."
            );
          }
        }
      } catch (error) {
        console.error("Profile update error:", error);
        if (window.showModal) {
          window.showModal(
            "error",
            "Network Error",
            "Failed to update profile. Please check your connection and try again.",
            5000
          );
        } else {
          console.error(
            "🔔 [Network Error] Failed to update profile. Please check your connection and try again."
          );
        }
      } finally {
        // Re-enable button
        if (saveProfileBtn) {
          (saveProfileBtn as HTMLButtonElement).disabled = false;
          (saveProfileBtn as HTMLButtonElement).textContent = "Save Changes";
        }
      }
    });

    // Handle avatar upload
    uploadAvatarBtn?.addEventListener("click", () => {
      avatarInput?.click();
    });

    avatarInput?.addEventListener("change", async (e) => {
      const file = (e.target as HTMLInputElement)?.files?.[0];
      if (!file) return;

      // TODO: Implement avatar upload functionality
      if (window.showModal) {
        window.showModal("info", "Avatar Upload", "Avatar upload functionality coming soon!", 3000);
      } else {
        console.log("🔔 [Avatar Upload] Avatar upload functionality coming soon!");
      }
    });
  });
</script>
