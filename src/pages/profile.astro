---
import Base from "../layout/Base.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import BoxIcon from "../components/common/BoxIcon.astro";

// Check authentication
import { checkAuth } from "../lib/auth";
const { isAuth, user, role } = await checkAuth(Astro.cookies);

if (!isAuth) {
  return Astro.redirect("/login");
}

// Get user profile data
let userProfile = null;
if (user) {
  const { supabase } = await import("../lib/supabase");
  if (supabase) {
    const { data: profile, error } = await supabase
      .from("profiles")
      .select("company_name, first_name, last_name, role, phone")
      .eq("id", user.id)
      .single();

    if (!error && profile) {
      userProfile = profile;
    }
  }
}
---

<Base
  title="My Profile - CAPCo Fire Protection"
  description="Manage your profile and account settings."
>
  <SectionContainer class="px-6 py-16">
    <div class="mx-auto max-w-2xl">
      <!-- Header -->
      <div class="mb-8 text-center">
        <div
          class="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900/30"
        >
          <BoxIcon name="user" class="h-8 w-8 text-blue-600 dark:text-blue-400" />
        </div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">My Profile</h1>
        <p class="mt-2 text-gray-600 dark:text-gray-300">
          Manage your account information and preferences
        </p>
      </div>

      <!-- Profile Form -->
      <div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
        <form id="profile-form" class="space-y-6">
          <!-- Profile Picture Section -->
          <!-- <div class="text-center">
            <div
              class="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700"
            >
              <img
                id="profile-avatar"
                src=""
                alt="Profile picture"
                class="h-20 w-20 rounded-full object-cover"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              />
              <BoxIcon name="user" style="display:none;" class="h-10 w-10 text-gray-400" />
            </div>
            <button
              type="button"
              id="upload-avatar-btn"
              class="text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
            >
              Upload Photo
            </button>
            <input type="file" id="avatar-input" accept="image/*" class="hidden" />
          </div> -->

          <!-- Company Name Field -->
          <div>
            <label
              for="companyName"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Company Name
            </label>
            <input
              type="text"
              id="companyName"
              name="companyName"
              value={userProfile?.company_name || ""}
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Enter your company name"
            />
          </div>

          <!-- First Name and Last Name Fields -->
          <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
            <div>
              <label
                for="firstName"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                First Name
              </label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                value={userProfile?.first_name || ""}
                class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                placeholder="Enter your first name"
              />
            </div>
            <div>
              <label
                for="lastName"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Last Name
              </label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                value={userProfile?.last_name || ""}
                class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                placeholder="Enter your last name"
              />
            </div>
          </div>

          <!-- Email Field (Read-only) -->
          <div>
            <label
              for="email"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email Address
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={user?.email || ""}
              readonly
              class="w-full rounded-md border border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400"
            />
            <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Email cannot be changed. Contact support if needed.
            </p>
          </div>

          <!-- Phone Field -->
          <div>
            <label
              for="phone"
              class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Phone Number
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={userProfile?.phone || ""}
              class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
              placeholder="Enter your phone number"
            />
          </div>

          <!-- Role Field (Read-only) -->
          <!-- <div>
            <label for="role" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Role
            </label>
            <input
              type="text"
              id="role"
              name="role"
              value={role || "User"}
              readonly
              class="w-full rounded-md border border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400"
            />
          </div> -->

          <!-- Action Buttons -->
          <div class="flex gap-3 pt-4">
            <button
              type="submit"
              id="save-profile-btn"
              class="flex-1 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
            >
              Save Changes
            </button>
            <a
              href="/dashboard"
              class="flex-1 rounded-md border border-gray-300 bg-white px-4 py-2 text-center text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
            >
              Cancel
            </a>
          </div>
        </form>
      </div>

      <!-- Account Actions Section -->
      <div class="mt-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
        <h2 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Account Actions</h2>

        <div class="space-y-3">
          <button
            type="button"
            id="change-password-btn"
            class="flex w-full items-center justify-between rounded-md border border-gray-200 p-3 text-left hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-700"
          >
            <div class="flex items-center">
              <BoxIcon name="lock" class="mr-3 h-5 w-5 text-gray-400" />
              <div>
                <p class="text-sm font-medium text-gray-900 dark:text-white">Change Password</p>
                <p class="text-xs text-gray-500 dark:text-gray-400">Update your account password</p>
              </div>
            </div>
            <BoxIcon name="chevron-right" class="h-4 w-4 text-gray-400" />
          </button>

          <!-- <button
            id="delete-account-btn"
            class="flex w-full items-center justify-between rounded-md border border-red-200 p-3 text-left hover:bg-red-50 dark:border-red-800 dark:hover:bg-red-900/20"
          >
            <div class="flex items-center">
              <BoxIcon name="trash" class="mr-3 h-5 w-5 text-red-400" />
              <div>
                <p class="text-sm font-medium text-red-600 dark:text-red-400">Delete Account</p>
                <p class="text-xs text-red-500 dark:text-red-400">
                  Permanently delete your account
                </p>
              </div>
            </div>
            <BoxIcon name="chevron-right" class="h-4 w-4 text-red-400" />
          </button> -->
        </div>
      </div>

      <!-- Forgot Password Modal -->
      <div
        id="forgot-password-modal"
        class="fixed inset-0 z-50 flex hidden items-center justify-center bg-black bg-opacity-50"
      >
        <div class="mx-4 w-full max-w-md rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
          <div class="mb-4 flex items-center justify-between">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Reset Password</h3>
            <button
              type="button"
              id="close-forgot-modal"
              class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            >
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <form id="forgot-password-form" class="space-y-4">
            <div>
              <label
                for="reset-email"
                class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
              >
                Email Address
              </label>
              <input
                type="email"
                id="reset-email"
                name="email"
                required
                class="w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-60 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                placeholder="Enter your email address"
              />
            </div>

            <div class="flex gap-3">
              <button
                type="button"
                id="cancel-forgot"
                class="flex-1 rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              >
                Cancel
              </button>
              <button
                type="submit"
                id="send-reset-link"
                class="flex-1 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
              >
                Send Reset Link
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </SectionContainer>
</Base>

<script>
  import { globalServices } from "../lib/global-services";

  document.addEventListener("DOMContentLoaded", () => {
    const profileForm = document.getElementById("profile-form") as HTMLFormElement;
    const saveProfileBtn = document.getElementById("save-profile-btn") as HTMLButtonElement;
    const uploadAvatarBtn = document.getElementById("upload-avatar-btn") as HTMLButtonElement;
    const avatarInput = document.getElementById("avatar-input") as HTMLInputElement;
    const deleteAccountBtn = document.getElementById("delete-account-btn") as HTMLButtonElement;
    
    // Forgot Password Modal Elements
    const changePasswordBtn = document.getElementById("change-password-btn");
    const forgotPasswordModal = document.getElementById("forgot-password-modal");
    const closeForgotModal = document.getElementById("close-forgot-modal");
    const cancelForgot = document.getElementById("cancel-forgot");
    const forgotPasswordForm = document.getElementById("forgot-password-form") as HTMLFormElement;
    const resetEmailInput = document.getElementById("reset-email") as HTMLInputElement;
    const sendResetLinkBtn = document.getElementById("send-reset-link") as HTMLButtonElement;

    // Handle profile form submission
    profileForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(profileForm);
      const companyName = formData.get("companyName") as string;
      const firstName = formData.get("firstName") as string;
      const lastName = formData.get("lastName") as string;
      const phone = formData.get("phone") as string;

      // Disable button and show loading state
      saveProfileBtn.disabled = true;
      saveProfileBtn.textContent = "Saving...";

      try {
        const response = await fetch("/api/profile/update", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ companyName, firstName, lastName, phone }),
        });

        const result = await response.json();

        if (response.ok) {
          globalServices.showNotification({
            type: "success",
            title: "Profile Updated",
            message: "Your profile has been updated successfully.",
            duration: 5000,
          });
        } else {
          globalServices.showNotification({
            type: "error",
            title: "Update Failed",
            message: result.error || "Failed to update profile. Please try again.",
            duration: 5000,
          });
        }
      } catch (error) {
        console.error("Profile update error:", error);
        globalServices.showNotification({
          type: "error",
          title: "Network Error",
          message: "Failed to update profile. Please check your connection and try again.",
          duration: 5000,
        });
      } finally {
        // Re-enable button
        saveProfileBtn.disabled = false;
        saveProfileBtn.textContent = "Save Changes";
      }
    });

    // Handle avatar upload
    uploadAvatarBtn?.addEventListener("click", () => {
      avatarInput?.click();
    });

    avatarInput?.addEventListener("change", async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (!file) return;

      // TODO: Implement avatar upload functionality
      globalServices.showNotification({
        type: "info",
        title: "Avatar Upload",
        message: "Avatar upload functionality coming soon!",
        duration: 3000,
      });
    });

    // Handle account deletion
    deleteAccountBtn?.addEventListener("click", () => {
      if (confirm("Are you sure you want to delete your account? This action cannot be undone.")) {
        // TODO: Implement account deletion
        globalServices.showNotification({
          type: "warning",
          title: "Account Deletion",
          message: "Account deletion functionality coming soon!",
          duration: 3000,
        });
      }
    });

    // Forgot Password Modal Functionality
    // Open modal
    changePasswordBtn?.addEventListener("click", () => {
      forgotPasswordModal?.classList.remove("hidden");
      resetEmailInput?.focus();
    });

    // Close modal functions
    const closeModal = () => {
      forgotPasswordModal?.classList.add("hidden");
      forgotPasswordForm?.reset();
    };

    closeForgotModal?.addEventListener("click", closeModal);
    cancelForgot?.addEventListener("click", closeModal);

    // Close modal when clicking outside
    forgotPasswordModal?.addEventListener("click", (e) => {
      if (e.target === forgotPasswordModal) {
        closeModal();
      }
    });

    // Handle forgot password form submission
    forgotPasswordForm?.addEventListener("submit", async (e) => {
      e.preventDefault();
      
      const email = resetEmailInput?.value.trim();
      
      if (!email) {
        globalServices.showNotification({
          type: "error",
          title: "Validation Error",
          message: "Please enter your email address.",
          duration: 5000,
        });
        return;
      }

      // Disable button and show loading state
      sendResetLinkBtn.disabled = true;
      sendResetLinkBtn.textContent = "Sending...";

      try {
        const response = await fetch("/api/auth/forgot-password", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email }),
        });

        const result = await response.json();

        if (response.ok) {
          globalServices.showNotification({
            type: "success",
            title: "Reset Link Sent",
            message: "If an account with that email exists, you will receive a password reset link shortly.",
            duration: 8000,
          });
          closeModal();
        } else {
          globalServices.showNotification({
            type: "error",
            title: "Error",
            message: result.error || "Failed to send reset link. Please try again.",
            duration: 5000,
          });
        }
      } catch (error) {
        console.error("Forgot password error:", error);
        globalServices.showNotification({
          type: "error",
          title: "Network Error",
          message: "Failed to send reset link. Please check your connection and try again.",
          duration: 5000,
        });
      } finally {
        // Re-enable button
        sendResetLinkBtn.disabled = false;
        sendResetLinkBtn.textContent = "Send Reset Link";
      }
    });
  });
</script>
