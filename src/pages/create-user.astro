---
import App from "../components/common/App.astro";
import BoxIcon from "../components/common/BoxIcon.astro";
import SectionContainer from "../components/common/SectionContainer.astro";
import StaffCreationForm from "../components/form/StaffCreationForm.astro";

interface Props {
  isAuth: boolean;
  currentUser: any;
  currentRole: string | null;
}

// Auth props will be passed from App component
const { isAuth, currentUser, currentRole } = Astro.props;

// Redirect to login if not authenticated
if (!isAuth || !currentUser) {
  return Astro.redirect("/login");
}

// Only allow admins to access this page
if (currentRole !== "Admin") {
  return Astro.redirect("/dashboard");
}
---

<App title="Create Staff - CAPCo Fire Protection" description="Create new staff user">
  <SectionContainer class="mx-auto max-w-2xl">
    <div class="rounded-lg bg-white p-6 shadow-lg dark:bg-gray-800">
      <!-- Header -->
      <div class="mb-6">
        <h1 class="mb-2 text-2xl font-bold text-gray-900 dark:text-white">Create New User</h1>
        <p class="text-gray-600 dark:text-gray-400">
          Add a new user to the CAPCo Fire Protection system (Admin, Staff, or Client)
        </p>
      </div>

      <!-- Create Staff Form -->
      <form id="create-staff-form" class="space-y-6">
        <!-- Use the new StaffCreationForm component -->
        <StaffCreationForm />
        <!-- Temporary Password Info -->
        <div
          class="rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20"
        >
          <div class="flex items-start">
            <BoxIcon
              name="info-circle"
              class="mr-2 mt-0.5 text-lg text-blue-600 dark:text-blue-400"
            />
            <div class="text-sm text-blue-800 dark:text-blue-400">
              <p class="mb-1 font-medium">Account Setup Process:</p>
              <ol class="list-inside list-decimal space-y-1 text-xs">
                <li>An invitation email will be sent to the new user</li>
                <li>They can then set up Google OAuth if desired</li>
              </ol>
            </div>
          </div>
        </div>
        <!-- Action Buttons -->
        <div class="flex gap-4 pt-4">
          <button
            type="submit"
            id="submit-btn"
            class="flex-1 rounded-lg bg-blue-600 px-6 py-2 text-white transition-colors hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
          >
            <span id="submit-text">Create User</span>
            <BoxIcon name="loader-alt" id="submit-spinner" class="ml-2 hidden animate-spin" />
          </button>

          <a
            href="/"
            class="rounded-lg border border-gray-300 px-6 py-2 text-gray-700 transition-colors hover:bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
          >
            Cancel
          </a>
        </div>
      </form>
    </div>
  </SectionContainer>
</App>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("create-staff-form") as HTMLFormElement;
    const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
    const submitText = document.getElementById("submit-text") as HTMLElement;
    const submitSpinner = document.getElementById("submit-spinner") as HTMLElement;

    if (!form || !submitBtn) return;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const staffData = {
        email: formData.get("email") as string,
        phone: formData.get("phone") as string,
        role: formData.get("role") as string,
        first_name: formData.get("first_name") as string,
        last_name: formData.get("last_name") as string,
        company_name: formData.get("company_name") as string,
      };

      // Validate required fields
      if (
        !staffData.first_name.trim() ||
        !staffData.last_name.trim() ||
        !staffData.email.trim() ||
        !staffData.role
      ) {
        if ((window as any).toastAlertManager) {
          (window as any).toastAlertManager.show({
            type: "error",
            title: "Validation Error",
            message: "Please fill in all required fields.",
            duration: 5000,
          });
        }
        return;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(staffData.email)) {
        if ((window as any).toastAlertManager) {
          (window as any).toastAlertManager.show({
            type: "error",
            title: "Validation Error",
            message: "Please enter a valid email address.",
            duration: 5000,
          });
        }
        return;
      }

      // Use first + last name if company is empty
      if (!staffData.company_name) {
        staffData.company_name = staffData.first_name + " " + staffData.last_name;
      }

      // Show loading state
      setLoading(true);

      try {
        const response = await fetch("/api/create-user", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(staffData),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Show toast notification if provided by API
          if (result.notification && (window as any).toastAlertManager) {
            (window as any).toastAlertManager.show(result.notification);
          }

          form.reset();
        } else {
          // Handle different error types from API response
          let errorTitle = "User Creation Failed";
          let errorMessage = "Failed to create user. Please try again.";
          let errorDuration = 5000;

          // Check for specific error types
          if (result.error) {
            errorMessage = result.error;
          }

          if (result.details) {
            // Use the detailed error message for more specific feedback
            errorMessage = result.details;
          }

          // Handle specific error cases
          if (result.error && result.error.includes("email address has already been registered")) {
            errorTitle = "Email Already Exists";
            errorMessage =
              "A user with this email address already exists. Please use a different email.";
            errorDuration = 7000;
          } else if (result.error && result.error.includes("validation")) {
            errorTitle = "Validation Error";
            errorMessage = "Please check your input and try again.";
          } else if (result.error && result.error.includes("authentication")) {
            errorTitle = "Authentication Error";
            errorMessage = "Please log in again and try creating the user.";
          } else if (result.error && result.error.includes("permission")) {
            errorTitle = "Permission Denied";
            errorMessage = "You don't have permission to create users.";
          }

          // Show error toast notification
          if ((window as any).toastAlertManager) {
            (window as any).toastAlertManager.show({
              type: "error",
              title: errorTitle,
              message: errorMessage,
              duration: errorDuration,
            });
          }
        }
      } catch (error) {
        console.error("Error creating staff:", error);
        if ((window as any).toastAlertManager) {
          (window as any).toastAlertManager.show({
            type: "error",
            title: "Network Error",
            message: "Network error. Please check your connection and try again.",
            duration: 5000,
          });
        }
      } finally {
        setLoading(false);
      }
    });

    function setLoading(loading: boolean) {
      submitBtn.disabled = loading;
      if (loading) {
        submitText.textContent = "Creating...";
        submitSpinner.classList.remove("hidden");
      } else {
        submitText.textContent = "Create User";
        submitSpinner.classList.add("hidden");
      }
    }
  });
</script>
