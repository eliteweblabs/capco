---
import App from "../components/App.astro";
import SectionContainer from "../components/SectionContainer.astro";
import Hero from "../components/index/Hero.astro";
import ProjectsNav from "../components/ProjectsNav.astro"; 
import AuthForm from "../components/AuthForm.astro";
import { supabase } from "../lib/supabase";
import { checkAuth } from "../lib/auth";
import { PROJECT_STATUS_LABELS, loadProjectStatuses } from "../lib/global-services";

// Check authentication
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Check for auth success message
const { searchParams } = Astro.url;
const authSuccess = searchParams.get("auth") === "success";
const needsRefresh = searchParams.get("refresh") === "true";

// Load project status labels
console.log("Loading project statuses...");
await loadProjectStatuses();
console.log("Project status labels loaded:", PROJECT_STATUS_LABELS);

const description = role === 'Client' && user?.user_metadata?.email
  ? `${user.user_metadata.email} - ${role}`
  : (role || '');

// Load projects if authenticated
let projects: any[] = [];
let error: string | null = null;

if (isAuth && supabase) {
  try {
    console.log("Loading projects for user:", { userId: user?.id, role, email: user?.email });
    console.log("Supabase client:", !!supabase);
    
    // Set the session on the Supabase client to ensure it's authenticated
    if (session?.data?.session) {
      console.log("Setting session on Supabase client...");
      const { error: sessionError } = await supabase.auth.setSession(session.data.session);
      if (sessionError) {
        console.error("Session set error:", sessionError);
        throw sessionError;
      }
    }
    
    let query = supabase.from("projects").select("*");
    
    // Apply role-based filtering
    if (role === "Admin") {
      // Admins can see all projects
      console.log("Admin user - loading all projects");
      query = query.order("created", { ascending: false });
    } else {
      // Clients can only see their own projects
      console.log("Client user - loading projects for author_id:", user?.id);
      query = query.eq("author_id", user?.id).order("created", { ascending: false });
    }
    
    console.log("Executing query...");
    const { data, error: projectError } = await query;
    
    if (projectError) {
      console.error("Project query error:", projectError);
      console.error("Error details:", {
        message: projectError.message,
        details: projectError.details,
        hint: projectError.hint,
        code: projectError.code
      });
      throw projectError;
    }
    
    console.log("Projects loaded successfully:", { count: data?.length, projects: data });
    console.log("Available status labels:", PROJECT_STATUS_LABELS);
    console.log("Project statuses:", data?.map(p => ({ id: p.id, status: p.status, label: PROJECT_STATUS_LABELS[p.status] || "Unknown" })));
    projects = data || [];
  } catch (err) {
    console.error("Failed to load projects:", err);
    console.error("Error type:", typeof err);
    console.error("Error message:", err instanceof Error ? err.message : String(err));
    error = `Failed to load projects: ${err instanceof Error ? err.message : String(err)}`;
  }
} else {
  console.log("Not authenticated or Supabase not configured:", { 
    isAuth, 
    supabaseConfigured: !!supabase,
    user: user ? { id: user.id, email: user.email, role } : null,
    session: session ? "exists" : "null"
  });
}
---

<App>
  {authSuccess && needsRefresh && (
    <div class="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold">Authentication Successful!</strong>
      <span class="block sm:inline"> You have been logged in successfully. If you don't see your projects, please refresh the page.</span>
    </div>
  )}
  
  {isAuth ? (
    <>
      <Hero title={'' + user.user_metadata.name} description={description}/>

      <SectionContainer id="sub-nav" class="flex flex-col gap-y-6">
        <ProjectsNav role={role}/>
      </SectionContainer>

      <SectionContainer id="dashboard" class="mb-0 mt-0 mx-6">
        <div class="space-y-6">
          <div class="flex items-center justify-between">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Your Projects</h2>
            <button 
              type="button"
              class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
              onclick="window.location.href='/project/new'"
            >
              <i class="bx bx-plus mr-1"></i>
              New Project
            </button>
          </div>
          
          {error ? (
            <div class="text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
              <p class="text-red-600 dark:text-red-400">{error}</p>
              <p class="text-xs text-red-500 dark:text-red-400 mt-2">
                User: {user?.email} | Role: {role} | Auth: {isAuth ? 'Yes' : 'No'}
              </p>
            </div>
          ) : projects.length === 0 ? (
            <div class="text-center p-8 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <i class="bx bx-folder-open text-4xl text-gray-400 mb-4"></i>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No Projects Found</h3>
              <p class="text-gray-600 dark:text-gray-400">Get started by creating your first project.</p>
            </div>
          ) : (
            <div class="grid gap-4">
              {projects.map((project) => (
                <div 
                  class="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-md transition-shadow"
                  data-project-id={project.id}
                  data-project-status={project.status || 10}
                >
                  <div class="flex items-start justify-between">
                    <div class="flex-1 min-w-0">
                      <div class="flex items-center gap-3 mb-2">
                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white truncate">
                          {project.address || project.title || `Project ${project.id}`}
                        </h3>
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                          {PROJECT_STATUS_LABELS[project.status] || "Unknown"}
                        </span>
                      </div>
                      
                      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600 dark:text-gray-400">
                        <div>
                          <span class="font-medium">ID:</span> {project.id}
                        </div>
                        <div>
                          <span class="font-medium">Sq Ft:</span> {project.sq_ft || "N/A"}
                        </div>
                        <div>
                          <span class="font-medium">Created:</span> {new Date(project.created).toLocaleDateString()}
                        </div>
                        <div>
                          <span class="font-medium">Updated:</span> {new Date(project.updated_at || project.created).toLocaleDateString()}
                        </div>
                      </div>
                    </div>
                    
                    <div class="flex items-center gap-2 ml-4">
                      <a 
                        href={`/project/${project.id}`}
                        class="px-3 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        <i class="bx bx-edit mr-1"></i>
                        Edit
                      </a>
                      {role === "Admin" && (
                        <button 
                          type="button"
                          class="px-3 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors delete-project-btn"
                          data-project-id={project.id}
                        >
                          <i class="bx bx-trash mr-1"></i>
                          Delete
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </SectionContainer>
    </>
  ) : (
    <!-- Non-authenticated content -->
    <SectionContainer id="auth" class="flex flex-col gap-y-6 mx-6">
      <AuthForm />
    </SectionContainer>
  )}
</App>

<script define:vars={{ role, isAuth }}>
  // Pass auth state to global scope for use in components
  window.IS_AUTH = !!isAuth;
  window.USER_ROLE = role || "Client";

  // Delete project functionality
  document.addEventListener('DOMContentLoaded', function() {
    console.log("üóëÔ∏è Delete project functionality initialized");
    const deleteButtons = document.querySelectorAll('.delete-project-btn');
    console.log("üóëÔ∏è Found delete buttons:", deleteButtons.length);
    
    deleteButtons.forEach((button) => {
      button.addEventListener('click', async function() {
        console.log("üóëÔ∏è Delete button clicked");
        const projectId = this.getAttribute('data-project-id');
        console.log("üóëÔ∏è Project ID to delete:", projectId);
        
        if (!projectId) {
          console.error("‚ùå No project ID found");
          return;
        }
        
        if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
          console.log("üóëÔ∏è User confirmed deletion, sending request...");
          try {
            console.log("üì§ Sending DELETE request to /api/delete-project");
            const response = await fetch(`/api/delete-project`, {
              method: 'DELETE', // Changed from POST to DELETE
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ projectId }),
            });
            
            console.log("üì• Delete response status:", response.status);
            console.log("üì• Delete response status text:", response.statusText);
            
            const result = await response.json();
            console.log("üì• Delete response result:", result);
            
            if (result.success) {
              console.log("‚úÖ Project deleted successfully");
              // Remove the project card from the DOM
              const projectCard = document.querySelector(`[data-project-id="${projectId}"]`);
              console.log("üóëÔ∏è Project card element found:", !!projectCard);
              if (projectCard) {
                projectCard.remove();
                console.log("‚úÖ Project card removed from DOM");
              }
              
              // Show success message
              alert('Project deleted successfully');
            } else {
              console.error("‚ùå Delete failed:", result.error);
              throw new Error(result.error || 'Failed to delete project');
            }
          } catch (error) {
            console.error('‚ùå Delete project error:', error);
            console.error('‚ùå Error message:', error.message);
            console.error('‚ùå Error stack:', error.stack);
            alert('Failed to delete project: ' + (error instanceof Error ? error.message : 'Unknown error'));
          }
        } else {
          console.log("üóëÔ∏è User cancelled deletion");
        }
      });
    });
  });
</script>

