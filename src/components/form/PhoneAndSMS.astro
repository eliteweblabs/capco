---
interface Props {
  id?: string;
  name?: string;
  value?: string;
  placeholder?: string;
  required?: boolean;
  showSMS?: boolean;
  smsChecked?: boolean;
  selectedCarrier?: string;
  class?: string;
}

const {
  id = "phone",
  name = "phone",
  value = "",
  placeholder = "(555) 123-4567",
  required = false,
  showSMS = true,
  smsChecked = false,
  selectedCarrier = "",
  class: className = "",
} = Astro.props;

import SlotMachineModal from "../../components/form/SlotMachineModal.astro";
import SlideToggle from "../common/SlideToggle.astro";

// Generate unique IDs for SMS components
const smsSectionId = `sms-section-${id}`;
const smsAlertsId = `sms-alerts-${id}`;
const carrierSelectionId = `carrier-selection-${id}`;
const mobileCarrierId = `mobile-carrier-${id}`;

const mobileCarrierOptions = [
  { value: "att", label: "AT&T" },
  { value: "verizon", label: "Verizon" },
  { value: "spectrum", label: "Spectrum" },
  { value: "tmobile", label: "T-Mobile" },
  { value: "sprint", label: "Sprint" },
];
---

<div class="space-y-4">
  <!-- Phone Number Input -->
  <div>
    <label for={id} class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300">
      Phone Number {required && <span class="text-red-500">*</span>}
    </label>
    <div class="relative">
      <input
        type="tel"
        id={id}
        name={name}
        value={value}
        placeholder={placeholder}
        required={required}
        class={`w-full rounded-lg border border-gray-300 px-3 py-2.5 pr-10 text-sm text-gray-900 focus:border-primary-500 focus:ring-2 focus:ring-primary-500 dark:border-gray-600 dark:text-white dark:focus:border-primary-400 dark:focus:ring-primary-400 bg-background-card _1jTZ8KXRZul60S6czNi ${className}`}
      />

      <!-- Phone validation indicator -->
      <div id={`phone-indicator-${id}`} class="absolute inset-y-0 right-0 hidden items-center pr-3">
        <svg class="h-4 w-4 text-green-500" fill="currentColor" viewBox="0 0 20 20">
          <path
            fill-rule="evenodd"
            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            clip-rule="evenodd"></path>
        </svg>
      </div>
    </div>
  </div>

  <!-- SMS Alerts Section (only show if showSMS is true) -->
  {
    showSMS && (
      <div id={smsSectionId} style="display: none;">
        {/* <!-- SMS Alerts Toggle --> */}
        <div class="flex items-center gap-3 pt-4">
          <div class="flex-1">
            <SlideToggle
              id={smsAlertsId}
              name="sms_alerts"
              checked={smsChecked}
              label="Get SMS Project Updates?"
            />
          </div>
          {/* <!-- Carrier Selection (shown when SMS alerts is enabled) --> */}
          <div id={carrierSelectionId} class="flex-1">
            <SlotMachineModal
              title="Select your carrier"
              id={mobileCarrierId}
              name="mobile_carrier"
              options={mobileCarrierOptions}
              selectedValue={selectedCarrier}
              skipSaveToAPI={true}
              buttonClass="w-full"
              icon="wifi"
              buttonVariant="outline"
            />
          </div>
        </div>
      </div>
    )
  }
</div>

<script
  define:vars={{
    phoneId: id,
    smsSectionId,
    smsAlertsId,
    carrierSelectionId,
    showSMS,
  }}
>
  document.addEventListener("DOMContentLoaded", function () {
    if (!showSMS) return;

    const phoneInput = document.getElementById(phoneId);
    const smsAlertsCheckbox = document.getElementById(smsAlertsId);
    const carrierSelection = document.getElementById(carrierSelectionId);
    const smsSection = document.getElementById(smsSectionId);
    const phoneIndicator = document.getElementById(`phone-indicator-${phoneId}`);

    if (!phoneInput || !smsAlertsCheckbox || !carrierSelection || !smsSection) return;

    let isUserInteraction = false;

    // Show/hide carrier selection based on SMS alerts toggle
    function toggleCarrierSelection() {
      if (smsAlertsCheckbox.checked) {
        carrierSelection.classList.remove("hidden");
        // Only auto-click if this is user interaction, not page load
        if (isUserInteraction) {
          document.getElementById("mobile-carrier-phone").click();
        }
      } else {
        carrierSelection.classList.add("hidden");
      }
    }

    // Validate phone number format
    function isValidPhoneNumber(phone) {
      // Remove all non-digit characters
      const digits = phone.replace(/\D/g, "");
      // Check if it's a valid US phone number (10 digits)
      return digits.length === 10;
    }

    // Show/hide SMS section based on valid phone number
    function toggleSmsSection() {
      const phoneValue = phoneInput.value.trim();
      const isValid = isValidPhoneNumber(phoneValue);

      if (isValid) {
        smsSection.style.display = "block";
        // Show validation indicator
        if (phoneIndicator) {
          phoneIndicator.classList.remove("hidden");
          phoneIndicator.classList.add("flex");
        }
      } else {
        smsSection.style.display = "none";
        // Hide validation indicator
        if (phoneIndicator) {
          phoneIndicator.classList.add("hidden");
          phoneIndicator.classList.remove("flex");
        }
        // Also uncheck SMS alerts if phone is invalid
        smsAlertsCheckbox.checked = false;
        toggleCarrierSelection();
      }
    }

    // Initial state
    toggleSmsSection();
    toggleCarrierSelection();

    // Set flag to true after initial setup
    isUserInteraction = true;

    // Event listeners
    smsAlertsCheckbox.addEventListener("change", toggleCarrierSelection);
    phoneInput.addEventListener("input", toggleSmsSection);
  });
</script>
