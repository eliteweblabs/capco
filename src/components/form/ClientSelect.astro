---
import { supabase } from "../../lib/supabase";

interface Props {
  selectedUserId?: string;
  name?: string;
  required?: boolean;
  class?: string;
  label?: string;
  id?: string;
  role?: string; // Filter users by role (e.g., 'Client', 'Admin', 'Staff')
}

const {
  selectedUserId = "",
  name = "client_id",
  required = false,
  class: className = "",
  label = "Select Client",
  id = "client-select",
  role = undefined, // No role filter by default
} = Astro.props;

// Fetch all users from profiles table + emails from auth.users table
let users: any[] = [];
let error = null;

if (supabase) {
  try {
    // First, get profiles (name, role, id) with optional role filtering
    let profilesQuery = supabase.from("profiles").select("id, company_name, role");

    // Apply role filter if specified
    if (role) {
      profilesQuery = profilesQuery.eq("role", role);
      console.log(`üìã [ClientSelect] Filtering by role: ${role}`);
    }

    const { data: profiles, error: profilesError } = await profilesQuery.order("name");

    if (profilesError) {
      console.error("Error fetching profiles:", profilesError);
      error = profilesError.message;
    } else if (profiles) {
      console.log(
        `üìã [ClientSelect] Loaded ${profiles.length} profiles${role ? ` (filtered by role: ${role})` : ""}`
      );

      // Then get emails from auth.users using admin API
      const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();

      if (authError) {
        console.error("Error fetching auth users:", authError);
        // Still use profiles but without emails
        users = profiles.map((profile) => ({
          ...profile,
          email: null,
        }));
      } else if (authUsers?.users) {
        console.log(`üìã [ClientSelect] Loaded ${authUsers.users.length} auth users`);

        // Create email map from auth users
        const emailMap = new Map();
        authUsers.users.forEach((authUser) => {
          emailMap.set(authUser.id, authUser.email);
        });

        // Combine profiles with emails
        users = profiles.map((profile) => ({
          ...profile,
          email: emailMap.get(profile.id) || null,
        }));

        console.log(`üìã [ClientSelect] Combined ${users.length} users with emails`);
      } else {
        // Use profiles without emails
        users = profiles.map((profile) => ({
          ...profile,
          email: null,
        }));
      }
    } else {
      users = [];
    }
  } catch (err) {
    console.error("Exception fetching users:", err);
    error = err instanceof Error ? err.message : "Unknown error";
  }
} else {
  error = "Supabase not configured";
}
---

<div class="grid grid-cols-1 gap-2">
  {
    label && (
      <label for={id} class="text-sm font-medium text-zinc-900 dark:text-zinc-300">
        {label}
        {required && <span class="ml-1 text-red-500">*</span>}
      </label>
    )
  }

  {
    error ? (
      <div class="rounded border border-red-200 bg-red-50 p-2 text-sm text-red-600">
        ‚ùå Error loading users: {error}
      </div>
    ) : (
      <select
        id={id}
        name={name}
        required={required}
        class={`rounded-md border border-zinc-300 bg-zinc-50 px-3 py-2 focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-60 dark:border-zinc-700 dark:bg-zinc-800 dark:text-zinc-300 dark:focus:bg-zinc-900 ${className}`}
      >
        <option value="">-- Choose a client --</option>
        {users.map((user) => (
          <option value={user.id} selected={user.id === selectedUserId}>
            {user.company_name || user.email}
            {user.role && user.role !== "Client" && ` (${user.role})`}
          </option>
        ))}
      </select>
    )
  }

  {
    users.length === 0 && !error && (
      <div class="rounded border border-yellow-200 bg-yellow-50 p-2 text-sm text-yellow-600">
        ‚ö†Ô∏è {role ? `No users found with role: ${role}` : "No users found in the system"}
      </div>
    )
  }
</div>

<!-- Debug information (remove in production) -->
{
  import.meta.env.DEV && (
    <details class="mt-2 text-xs text-gray-500">
      <summary class="cursor-pointer">üîç Debug Info</summary>
      <div class="mt-1 rounded bg-gray-100 p-2 text-xs">
        <div>Users loaded: {users.length}</div>
        <div>Role filter: {role || "None (all roles)"}</div>
        <div>Selected: {selectedUserId || "None"}</div>
        <div>Error: {error || "None"}</div>
        {users.length > 0 && (
          <div class="mt-1">
            <strong>Available users:</strong>
            <ul class="ml-2">
              {users.slice(0, 3).map((user) => (
                <li>
                  ‚Ä¢ {user.company_name || user.email} ({user.role})
                </li>
              ))}
              {users.length > 3 && <li>‚Ä¢ ... and {users.length - 3} more</li>}
            </ul>
          </div>
        )}
      </div>
    </details>
  )
}

<script define:vars={{ id }}>
  // Add client-side functionality for dynamic updates
  document.addEventListener("DOMContentLoaded", function () {
    const clientSelect = document.getElementById(id);

    if (clientSelect) {
      clientSelect.addEventListener("change", function (e) {
        const target = e.target;
        if (!target) return;

        const selectedOption = target.options[target.selectedIndex];
        console.log("üîî Client selected:", {
          id: target.value,
          name: selectedOption.text,
          element: target,
        });

        // Trigger a custom event for other components to listen to
        const event = new CustomEvent("clientSelected", {
          detail: {
            userId: target.value,
            userName: selectedOption.text.split(" (")[0], // Remove role suffix
            fullText: selectedOption.text,
          },
        });
        document.dispatchEvent(event);
      });
    }
  });
</script>

<style>
  /* Custom styling for the select dropdown */
  select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Dark mode arrow */
  .dark select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%239ca3af' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  }
</style>
