---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  id: string;
  name: string;
  title: string;
  label: string;
  value?: string;
  placeholder?: string;
  required?: boolean;
  class?: string;
  projectStatus?: number;
}

const {
  title = "google-places-slotmachine",
  name,
  label,
  value = "",
  placeholder = "Start typing an address...",
  required = false,
  class: className = "",
  projectStatus = 0,
  id,
} = Astro.props;

// Always render the address input (removed projectStatus restriction)
// if (projectStatus !== 0) {
//   return;
// }
---

<div class="relative" data-component-id={id}>
  <!-- Add Address Button -->
  <button
    type="button"
    id={`${id}-open-btn`}
    class={`rounded-full border border-gray-300 bg-white px-3 py-2.5 text-left text-sm text-gray-500 transition-colors hover:border-gray-400 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400 dark:hover:border-gray-500 dark:hover:bg-gray-600 ${className}`}
  >
    <div class="flex items-center justify-between">
      <span id={`${id}-button-text`}>Add Address</span>

      <BoxIcon name="plus" size="sm" />
    </div>
  </button>

  <!-- Hidden input for form submission -->
  <input
    type="text"
    id={`${id}-hidden-input`}
    name={name}
    value={value}
    required={required}
    class="sr-only"
    tabindex="-1"
    aria-hidden="true"
    autocomplete="off"
  />
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Simple approach: find the container and initialize
    const container = document.querySelector("[data-component-id]") as HTMLElement;
    if (!container) return;

    // Generate a unique ID for this component instance
    const componentId = container.getAttribute("data-component-id") || "google-places-slotmachine";

    const addBtn = container.querySelector(`#${componentId}-open-btn`) as HTMLButtonElement;
    const buttonText = container.querySelector(`#${componentId}-button-text`) as HTMLSpanElement;
    const hiddenInput = container.querySelector(`#${componentId}-hidden-input`) as HTMLInputElement;

    if (!addBtn || !hiddenInput) {
      console.error("üö® [CUSTOM-PLACES] Required elements not found");
      return;
    }

    // Update button text with selected

    function updateButtonText(address: string) {
      if (buttonText) {
        buttonText.textContent = address;
      }
    }

    // Clear selection
    function clearSelection() {
      hiddenInput.value = "";
      if (buttonText) {
        buttonText.textContent = "Add Address";
      }
    }

    // Helper functions to manage body scroll lock
    function lockBodyScroll() {
      const body = document.body;
      const scrollY = window.scrollY;

      // Store current scroll position
      body.style.top = `-${scrollY}px`;
      body.classList.add("modal-open");

      console.log("üîí [CUSTOM-PLACES] Body scroll locked at position:", scrollY);
    }

    function unlockBodyScroll() {
      const body = document.body;
      const scrollY = body.style.top;

      // Remove the lock class
      body.classList.remove("modal-open");

      // Restore scroll position
      if (scrollY) {
        const scrollPosition = parseInt(scrollY || "0") * -1;
        body.style.top = "";
        window.scrollTo(0, scrollPosition);
      }

      console.log("üîì [CUSTOM-PLACES] Body scroll unlocked, restored to position:", scrollY);
    }

    // Show slot machine modal directly
    let selectedIndex = -1; // Track selected item index

    async function showSlotMachineModal() {
      const response = await fetch("/partials/slot-machine-modal", {
        headers: {
          "x-component-id": componentId,
          "x-modal-title": "Select Address",
          "x-show-search": "true",
          "x-cancel-button": "Cancel",
          "x-select-button": "Select",
        },
      });
      const modalHTML = await response.text();

      // Insert the modal into the DOM
      document.body.insertAdjacentHTML("beforeend", modalHTML);

      // Lock body scroll
      lockBodyScroll();

      // Get modal elements for the new slot machine modal
      const modal = document.getElementById(`${componentId}-slot-machine-modal`);
      const modalSearchInput = document.getElementById(
        `${componentId}-slot-search-input`
      ) as HTMLInputElement;
      const modalSearchBtn = document.getElementById(
        `${componentId}-slot-search-btn`
      ) as HTMLButtonElement;
      const modalLoading = document.getElementById(`${componentId}-slot-loading`);
      const modalError = document.getElementById(`${componentId}-slot-error`);
      const modalCancel = document.getElementById(`${componentId}-slot-cancel-btn`);
      const modalSelect = document.getElementById(`${componentId}-slot-select-btn`);
      const modalPlacesLoading = document.getElementById(
        `${componentId}-slot-loading`
      ) as HTMLDivElement;
      const modalPlacesError = document.getElementById(
        `${componentId}-slot-error`
      ) as HTMLDivElement;

      // Debug: Check if all elements were found
      console.log("üîç [CUSTOM-PLACES] Modal elements found:", {
        modal: !!modal,
        modalSearchInput: !!modalSearchInput,
        modalSearchBtn: !!modalSearchBtn,
        modalLoading: !!modalLoading,
        modalError: !!modalError,
        modalCancel: !!modalCancel,
        modalSelect: !!modalSelect,
        modalPlacesLoading: !!modalPlacesLoading,
        modalPlacesError: !!modalPlacesError,
        componentId: componentId,
      });

      // Focus on search input
      modalSearchInput?.focus();

      // Event listeners - add a small delay to ensure elements are fully rendered
      setTimeout(() => {
        console.log("üîç [CUSTOM-PLACES] Setting up event listeners...");
        console.log("üîç [CUSTOM-PLACES] modalSearchBtn:", !!modalSearchBtn);
        console.log("üîç [CUSTOM-PLACES] modalSearchInput:", !!modalSearchInput);

        if (modalSearchBtn) {
          modalSearchBtn.addEventListener("click", () => {
            console.log(
              "üîç [CUSTOM-PLACES] Search button clicked, query:",
              modalSearchInput?.value
            );
            if (modalSearchInput) {
              searchAddresses(modalSearchInput.value);
            }
          });
          console.log("üîç [CUSTOM-PLACES] Search button event listener added");
        } else {
          console.error("üö® [CUSTOM-PLACES] modalSearchBtn not found for event listener");
        }

        if (modalSearchInput) {
          // Add input event listener with debouncing and 2-character minimum
          let searchTimeout: NodeJS.Timeout;
          modalSearchInput.addEventListener("input", (e) => {
            const query = (e.target as HTMLInputElement).value.trim();
            console.log("üîç [CUSTOM-PLACES] Input changed, query:", query);

            // Clear previous timeout
            if (searchTimeout) {
              clearTimeout(searchTimeout);
            }

            // Only search if query is at least 2 characters
            if (query.length >= 2) {
              console.log("üîç [CUSTOM-PLACES] Query is 2+ characters, scheduling search...");
              searchTimeout = setTimeout(() => {
                console.log("üîç [CUSTOM-PLACES] Executing delayed search for:", query);
                searchAddresses(query);
              }, 300); // 300ms debounce
            } else if (query.length === 0) {
              // Clear results if input is empty
              hideModalError();
            }
          });

          // Keep Enter key functionality
          modalSearchInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
              e.preventDefault();
              const query = modalSearchInput.value.trim();
              if (query.length >= 2) {
                console.log("üîç [CUSTOM-PLACES] Enter key pressed, query:", query);
                if (searchTimeout) {
                  clearTimeout(searchTimeout);
                }
                searchAddresses(query);
              }
            }
          });
          console.log("üîç [CUSTOM-PLACES] Search input event listeners added");
        } else {
          console.error("üö® [CUSTOM-PLACES] modalSearchInput not found for event listener");
        }
      }, 100);

      modalCancel?.addEventListener("click", () => {
        modal?.remove();
        unlockBodyScroll();
      });

      modalSelect?.addEventListener("click", () => {
        // Get the selected option from the slot machine using the selectedIndex
        const addressList = document.getElementById(
          `${componentId}-slot-address-list`
        ) as HTMLUListElement;
        if (addressList) {
          const selectedItem = addressList.querySelector(`li[data-index="${selectedIndex}"]`);
          if (selectedItem && selectedIndex >= 0) {
            const value = selectedItem.getAttribute("data-value");
            const label = selectedItem.querySelector("span")?.textContent;
            if (value && label) {
              console.log("üé∞ [SLOT-MACHINE] Selected option:", { value, label, selectedIndex });

              // Update the hidden input with the selected address
              console.log("üîç [DEBUG] Before setting - hiddenInput:", hiddenInput);
              console.log("üîç [DEBUG] Before setting - hiddenInput.value:", hiddenInput.value);
              console.log("üîç [DEBUG] Setting value to:", label);

              hiddenInput.value = label;
              hiddenInput.setAttribute("value", label);

              console.log("üîç [DEBUG] After setting - hiddenInput.value:", hiddenInput.value);
              console.log(
                "üîç [DEBUG] After setting - hiddenInput.getAttribute('value'):",
                hiddenInput.getAttribute("value")
              );

              // Update the button text to show the selected address
              updateButtonText(label);

              // Close the modal
              modal?.remove();
              unlockBodyScroll();

              // Trigger change event for form validation
              hiddenInput.dispatchEvent(new Event("change", { bubbles: true }));

              // Test form submission - log the hidden input value
              console.log("‚úÖ [FORM-TEST] Hidden input ready for submission:", {
                name: hiddenInput.name,
                value: hiddenInput.value,
                id: hiddenInput.id,
              });
            }
          } else {
            console.log(
              "üé∞ [SLOT-MACHINE] No item selected or invalid selectedIndex:",
              selectedIndex
            );
          }
        }
      });

      modal?.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.remove();
          unlockBodyScroll();
        }
      });

      // Search function for modal
      async function searchAddresses(query: string) {
        console.log("üîç [CUSTOM-PLACES] searchAddresses function called with query:", query);

        if (!query.trim()) {
          console.log("üîç [CUSTOM-PLACES] Empty query, showing error");
          showModalError("Please enter an address to search");
          return;
        }

        console.log("üîç [CUSTOM-PLACES] Starting address search...");
        showModalLoading();
        hideModalError();

        try {
          // Use our server-side proxy endpoint to avoid CORS issues
          const requestUrl = `/api/places-autocomplete?input=${encodeURIComponent(query)}&types=address&components=country:us&locationBias=circle:100@42.3601,-71.0589`;

          console.log("üîç [CUSTOM-PLACES] Making HTTP request to proxy endpoint:", requestUrl);

          const response = await fetch(requestUrl);
          const data = await response.json();

          console.log("üîç [CUSTOM-PLACES] API response received:", {
            status: data.status,
            predictions: data.predictions?.length,
          });

          if (data.status === "OK" && data.predictions && data.predictions.length > 0) {
            console.log(
              "üîç [CUSTOM-PLACES] Showing results:",
              data.predictions.length,
              "predictions"
            );
            // Show results in modal
            showModalResults(data.predictions, query);
          } else {
            console.log("üîç [CUSTOM-PLACES] No results or error status:", data.status);
            showModalError("No addresses found. Please try a different search term.");
          }
        } catch (error) {
          console.error("üö® [CUSTOM-PLACES] Search error:", error);
          showModalError("Failed to search for addresses. Please try again.");
        } finally {
          hideModalLoading();
        }
      }

      function showModalResults(predictions: any[], query: string) {
        console.log(
          "üîç [CUSTOM-PLACES] showModalResults called with:",
          predictions.length,
          "predictions"
        );

        // Convert predictions to slot machine options format
        const options = predictions.map((prediction) => ({
          value: prediction.place_id,
          label: prediction.description,
          disabled: false,
        }));

        console.log(
          "üîç [CUSTOM-PLACES] Converting to slot machine format:",
          options.length,
          "options"
        );

        // Update the slot machine with the new options
        console.log("üîç [CUSTOM-PLACES] Updating slot machine with", options.length, "options");
        updateSlotMachineOptions(options);
      }

      // Helper functions for modal states
      function showModalLoading() {
        modalPlacesLoading?.classList.remove("hidden");
        modalPlacesError?.classList.add("hidden");
      }

      function hideModalLoading() {
        modalPlacesLoading?.classList.add("hidden");
      }

      function showModalError(message: string) {
        if (modalPlacesError) {
          modalPlacesError.textContent = message;
          modalPlacesError.classList.remove("hidden");
        }
      }

      function hideModalError() {
        modalPlacesError?.classList.add("hidden");
      }

      // Update slot machine with new options
      function updateSlotMachineOptions(
        options: Array<{ value: string; label: string; disabled: boolean }>
      ) {
        const addressList = document.getElementById(
          `${componentId}-slot-address-list`
        ) as HTMLUListElement;
        const selectBtn = document.getElementById(
          `${componentId}-slot-select-btn`
        ) as HTMLButtonElement;
        const emptyState = document.getElementById(
          `${componentId}-slot-empty-state`
        ) as HTMLDivElement;

        if (!addressList) return;

        if (options.length === 0) {
          emptyState?.classList.remove("hidden");
          return;
        }

        emptyState?.classList.add("hidden");
        selectBtn.disabled = true;

        addressList.innerHTML = options
          .map(
            (option, index) => `
            <li class="slot-machine-item flex items-center justify-center h-12 text-center cursor-pointer transition-all duration-200 hover:bg-blue-50 dark:hover:bg-blue-900/20" data-index="${index}" data-value="${option.value}">
              <span class="text-sm font-medium text-gray-900 dark:text-white px-4">${option.label}</span>
            </li>
          `
          )
          .join("");

        setupSlotMachineInteractions();
      }

      // Setup slot machine interactions
      function setupSlotMachineInteractions() {
        const addressList = document.getElementById(
          `${componentId}-slot-address-list`
        ) as HTMLUListElement;
        const selectBtn = document.getElementById(
          `${componentId}-slot-select-btn`
        ) as HTMLButtonElement;

        if (!addressList) return;

        let currentOptions: Array<{ value: string; label: string; disabled: boolean }> = [];

        // Handle wheel events and touch events on the entire slot machine container
        const slotContainer = document.querySelector(
          `#${componentId}-slot-machine-modal .slot-machine-container`
        ) as HTMLDivElement;
        if (slotContainer) {
          // Wheel events for desktop
          slotContainer.addEventListener("wheel", (e) => {
            e.preventDefault();
            if (currentOptions.length === 0) return;

            const deltaY = e.deltaY;
            if (selectedIndex === -1) {
              selectedIndex = 0;
            } else {
              if (deltaY > 0) {
                selectedIndex = Math.min(selectedIndex + 1, currentOptions.length - 1);
              } else {
                selectedIndex = Math.max(selectedIndex - 1, 0);
              }
            }
            centerSelectedItem();
            updateSelection();
          });

          // Touch events for mobile
          let touchStartY = 0;
          let touchStartTime = 0;

          slotContainer.addEventListener("touchstart", (e) => {
            e.preventDefault();
            if (currentOptions.length === 0) return;

            touchStartY = e.touches[0].clientY;
            touchStartTime = Date.now();
          });

          slotContainer.addEventListener("touchmove", (e) => {
            e.preventDefault();
          });

          slotContainer.addEventListener("touchend", (e) => {
            e.preventDefault();
            if (currentOptions.length === 0) return;

            const touchEndY = e.changedTouches[0].clientY;
            const touchEndTime = Date.now();
            const deltaY = touchStartY - touchEndY;
            const deltaTime = touchEndTime - touchStartTime;

            // Only process if it's a quick swipe (less than 300ms) with enough movement (more than 20px)
            if (deltaTime < 300 && Math.abs(deltaY) > 20) {
              if (selectedIndex === -1) {
                selectedIndex = 0;
              } else {
                if (deltaY > 0) {
                  // Swipe up - move to next item
                  selectedIndex = Math.min(selectedIndex + 1, currentOptions.length - 1);
                } else {
                  // Swipe down - move to previous item
                  selectedIndex = Math.max(selectedIndex - 1, 0);
                }
              }
              centerSelectedItem();
              updateSelection();
            }
          });
        }

        // Handle click and touch on items
        addressList.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          const li = target.closest("li[data-index]");
          if (li) {
            selectedIndex = parseInt(li.getAttribute("data-index") || "0");
            centerSelectedItem();
            updateSelection();
          }
        });

        // Add touch support for list items
        addressList.addEventListener("touchend", (e) => {
          e.preventDefault();
          const target = e.target as HTMLElement;
          const li = target.closest("li[data-index]");
          if (li) {
            selectedIndex = parseInt(li.getAttribute("data-index") || "0");
            centerSelectedItem();
            updateSelection();
          }
        });

        // Handle select button - this will be handled by the modal setup

        // Center selected item
        function centerSelectedItem() {
          if (selectedIndex >= 0) {
            const itemHeight = 48;
            const containerHeight = 192;
            const centerOffset = (containerHeight - itemHeight) / 2;
            const targetY = -(selectedIndex * itemHeight) + centerOffset;
            addressList.style.transform = `translateY(${targetY}px)`;
          }
        }

        // Update selection styling
        function updateSelection() {
          const items = addressList.querySelectorAll("li");
          items.forEach((item, index) => {
            if (index === selectedIndex && selectedIndex >= 0) {
              item.classList.add("selected");
              item.style.cssText = `
                display: flex;
                align-items: center;
                justify-content: center;
                height: 3rem;
                text-align: center;
                color: white !important;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s;
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                border-radius: 8px;
                margin: 0 8px;
                box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
                position: relative;
              `;
              const span = item.querySelector("span");
              if (span) {
                span.style.color = "white !important";
              }
              selectBtn.disabled = false;
            } else {
              item.classList.remove("selected");
              item.style.cssText = `
                display: flex;
                align-items: center;
                justify-content: center;
                height: 3rem;
                text-align: center;
                color: #111827;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s;
                position: relative;
              `;
              const span = item.querySelector("span");
              if (span) {
                span.style.color = "";
              }
            }
          });
        }
      }
    }

    // Get detailed place information using our server-side proxy endpoint
    async function getPlaceDetails(placeId: string, description: string) {
      console.log("üîç [CUSTOM-PLACES] getPlaceDetails called with:", { placeId, description });

      try {
        // Use our server-side proxy endpoint to avoid CORS issues
        const requestUrl = `/api/places-details?place_id=${placeId}&fields=formatted_address,name,address_components`;

        console.log("üîç [CUSTOM-PLACES] Getting place details for:", placeId);
        console.log("üîç [CUSTOM-PLACES] Request URL:", requestUrl);

        const response = await fetch(requestUrl);
        const data = await response.json();

        console.log("üîç [CUSTOM-PLACES] Place details response:", {
          status: data.status,
          result: !!data.result,
          formattedAddress: data.result?.formatted_address,
          fullResponse: data,
        });

        if (data.status === "OK" && data.result) {
          // Update the hidden input with the selected address
          const formattedAddress = data.result.formatted_address || description;
          console.log("üîç [CUSTOM-PLACES] Setting hidden input value:", formattedAddress);
          console.log("üîç [CUSTOM-PLACES] Hidden input element:", hiddenInput);

          hiddenInput.value = formattedAddress;
          console.log("üîç [CUSTOM-PLACES] Hidden input value after setting:", hiddenInput.value);

          // Update button text to show selected address
          updateButtonText(formattedAddress);

          // Close the slot machine modal
          const slotModal = document.getElementById(`${componentId}-slot-machine-modal`);
          slotModal?.remove();
          unlockBodyScroll();

          // Trigger change event
          hiddenInput.dispatchEvent(new Event("change", { bubbles: true }));

          console.log(
            "üó∫Ô∏è [CUSTOM-PLACES] Address selected and hidden input updated:",
            formattedAddress
          );
        } else {
          console.error("üîç [CUSTOM-PLACES] Failed to get place details:", data);
        }
      } catch (error) {
        console.error("üö® [CUSTOM-PLACES] Get place details error:", error);
      }
    }

    // Event listeners
    addBtn.addEventListener("click", () => {
      console.log("üîç [CUSTOM-PLACES] Add Address button clicked");
      showSlotMachineModal();
    });

    // Initialize component
    function initializeComponent() {
      console.log("üó∫Ô∏è [CUSTOM-PLACES] Component initialized successfully");
    }

    // Start initialization
    initializeComponent();

    // Cleanup function to unlock scroll if component is destroyed
    const cleanup = () => {
      unlockBodyScroll();
    };

    // Add cleanup on page unload
    window.addEventListener("beforeunload", cleanup);

    // Also cleanup if the component container is removed
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.removedNodes.forEach((node) => {
          if (node === container) {
            cleanup();
            observer.disconnect();
          }
        });
      });
    });

    if (container.parentNode) {
      observer.observe(container.parentNode, { childList: true });
    }
  });
</script>

<style>
  .slot-machine-item {
    user-select: none !important;
    -webkit-user-select: none !important;
    -moz-user-select: none !important;
    -ms-user-select: none !important;
  }

  /* Smooth transitions */
  .transition-transform {
    transition-property: transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  /* Prevent body scrolling when modal is open */
  body.modal-open {
    overflow: hidden !important;
    position: fixed !important;
    width: 100% !important;
    height: 100% !important;
  }

  /* Alternative approach for better browser compatibility */
  body.modal-open-alt {
    overflow: hidden !important;
    height: 100vh !important;
  }

  /* Slot machine container styling */
  .slot-machine-container {
    min-height: 12rem !important;
    max-height: 12rem !important;
    height: 12rem !important;
    display: block !important;
  }

  /* Ensure the slot machine list takes full height */
  .slot-machine-container ul {
    height: 100% !important;
    min-height: 12rem !important;
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
  }

  /* Ensure slot machine items are visible */
  .slot-machine-item {
    min-height: 3rem !important;
    height: 3rem !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    transition: all 0.2s ease-in-out;
  }

  /* Ensure selected items have white text */
  .slot-machine-item.selected {
    color: white !important;
  }

  .slot-machine-item.selected span {
    color: white !important;
  }

  /* Checkmark pulse animation */
  @keyframes checkmarkPulse {
    0%,
    100% {
      opacity: 1;
      transform: translateY(-50%) scale(1);
      text-shadow: 0 0 8px rgba(16, 185, 129, 0.6);
    }
    50% {
      opacity: 0.8;
      transform: translateY(-50%) scale(1.1);
      text-shadow: 0 0 12px rgba(16, 185, 129, 0.8);
    }
  }

  @keyframes checkmarkPulseDark {
    0%,
    100% {
      opacity: 1;
      transform: translateY(-50%) scale(1);
      text-shadow: 0 0 8px rgba(16, 185, 129, 0.8);
    }
    50% {
      opacity: 0.9;
      transform: translateY(-50%) scale(1.1);
      text-shadow: 0 0 16px rgba(16, 185, 129, 1);
    }
  }

  /* Empty state styling */
  .slot-empty-state {
    transition: opacity 0.3s ease-in-out;
  }
</style>
