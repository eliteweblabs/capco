---
// Multi-step registration form component with AOS animations
import Button from "../common/Button.astro";
import PhoneAndSMS from "./PhoneAndSMS.astro";
import SimpleIcon from "../common/SimpleIcon.astro";

const { globalInputClasses } = Astro.props;
---

<div class="mx-auto my-4 w-full max-w-3xl">
  <!-- Progress Bar -->
  <div class="mb-12" data-aos="fade-down" data-aos-duration="600">
    <div class="relative">
      <div class="h-2 w-full overflow-hidden rounded-full bg-gray-200 dark:bg-gray-700">
        <div
          id="progress-bar"
          class="h-full rounded-full bg-primary-500 transition-all duration-500 ease-out"
          style="width: 0%"
        >
        </div>
      </div>
      <div class="mt-3 text-center">
        <span id="progress-text" class="text-sm font-medium text-gray-600 dark:text-gray-400">
          Step 1 of 6
        </span>
      </div>
    </div>
  </div>

  <!-- Multi-step Form -->
  <form id="multi-step-form" action="/api/auth/register" method="post" class="relative">
    <!-- Step 1: Email -->
    <div class="step-content active" data-step="1">
      <div class="space-y-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div
            class="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-primary-100 dark:bg-primary-900/30 hidden"
          >
            <SimpleIcon name="mail" size="xl" class="text-primary-600 dark:text-primary-400" />
          </div>
          <h2 class="mb-3 text-5xl font-bold text-gray-900 dark:text-white">What's your email?</h2>
        </div>

        <div class="input-wrapper" data-aos="fade-up" data-aos-delay="400">
          <input
            type="email"
            name="email"
            id="step-email"
            placeholder="your.email@example.com"
            required
            autocomplete="email"
            class={`${globalInputClasses} text-xl py-5 text-center`}
            data-error="Please enter a valid email address"
          />
        </div>

        <div class="flex justify-center mb-4" data-aos="fade-up" data-aos-delay="600">
          <Button
            type="button"
            variant="primary"
            size="lg"
            class="next-step px-12 text-lg w-full"
            dataAttributes={{ "data-next": "2" }}
          >
            Continue
            <SimpleIcon name="arrow-right" size="lg" class="ml-2 inline-flex" />
          </Button>
        </div>
        <div class="mb-4 flex justify-center">
          <Button
            type="button"
            variant="ghost"
            fullWidth
            size="md"
            class="google-signup-btn"
            onclick="handleGoogleSignup()"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              preserveAspectRatio="xMidYMid"
              viewBox="0 0 256 262"
              class="mr-2 inline-flex h-5 w-auto"
            >
              <path
                fill="#4285F4"
                d="M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027"
              ></path>
              <path
                fill="#34A853"
                d="M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1"
              ></path>
              <path
                fill="#FBBC05"
                d="M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782"
              ></path>
              <path
                fill="#EB4335"
                d="M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251"
              ></path>
            </svg><span class=""> Sign Up with Google </span>
          </Button>
        </div>
      </div>
    </div>

    <!-- Step 2: Name -->
    <div class="step-content" data-step="2">
      <div class="space-y-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div
            class="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-primary-100 dark:bg-primary-900/30 hidden"
          >
            <SimpleIcon name="user" size="xl" class="text-primary-600 dark:text-primary-400" />
          </div>
          <h2 class="mb-3 text-5xl font-bold text-gray-900 dark:text-white">What's your name?</h2>
          <p class="text-lg text-gray-600 dark:text-gray-400">Help us get to know you better</p>
        </div>

        <div class="grid grid-cols-1 gap-6 md:grid-cols-2" data-aos="fade-up" data-aos-delay="400">
          <div class="input-wrapper">
            <label
              for="step-first-name"
              class="mb-2 block text-center text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              First Name <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              name="firstName"
              id="step-first-name"
              placeholder="John"
              required
              autocomplete="given-name"
              class={`${globalInputClasses} text-xl py-5 text-center`}
              data-error="Please enter your first name"
            />
          </div>

          <div class="input-wrapper">
            <label
              for="step-last-name"
              class="mb-2 block text-center text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Last Name <span class="text-red-500">*</span>
            </label>
            <input
              type="text"
              name="lastName"
              id="step-last-name"
              placeholder="Doe"
              required
              autocomplete="family-name"
              class={`${globalInputClasses} text-xl py-5 text-center`}
              data-error="Please enter your last name"
            />
          </div>
        </div>

        <div class="flex justify-between gap-3" data-aos="fade-up" data-aos-delay="600">
          <Button
            type="button"
            variant="outline"
            size="lg"
            class="prev-step px-12 text-lg"
            dataAttributes={{ "data-prev": "1" }}
          >
            <SimpleIcon name="arrow-left" size="lg" />
          </Button>
          <Button
            type="button"
            variant="primary"
            size="lg"
            class="next-step px-12 text-lg"
            dataAttributes={{ "data-next": "3" }}
          >
            <SimpleIcon name="arrow-right" size="lg" />
          </Button>
        </div>
      </div>
    </div>

    <!-- Step 3: Company -->
    <div class="step-content" data-step="3">
      <div class="space-y-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div
            class="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-primary-100 dark:bg-primary-900/30 hidden"
          >
            <SimpleIcon
              name="building-2"
              size="xl"
              class="text-primary-600 dark:text-primary-400"
            />
          </div>
          <h2 class="mb-3 text-5xl font-bold text-gray-900 dark:text-white">
            What's your company?
          </h2>
          <p class="text-lg text-gray-600 dark:text-gray-400">
            Tell us where you work or the company you represent
          </p>
        </div>

        <div class="input-wrapper" data-aos="fade-up" data-aos-delay="400">
          <input
            type="text"
            name="companyName"
            id="step-company-name"
            placeholder="Acme Corporation"
            required
            autocomplete="organization"
            class={`${globalInputClasses} text-xl py-5 text-center`}
            data-error="Please enter your company name"
          />
        </div>

        <div class="flex justify-between gap-3" data-aos="fade-up" data-aos-delay="600">
          <Button
            type="button"
            variant="outline"
            size="lg"
            class="prev-step px-12 text-lg"
            dataAttributes={{ "data-prev": "2" }}
          >
            <SimpleIcon name="arrow-left" size="lg" />
          </Button>
          <Button
            type="button"
            variant="primary"
            size="lg"
            class="next-step px-12 text-lg"
            dataAttributes={{ "data-next": "4" }}
          >
            <SimpleIcon name="arrow-right" size="lg" />
          </Button>
        </div>
      </div>
    </div>

    <!-- Step 4: Password -->
    <div class="step-content" data-step="4">
      <div class="space-y-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div
            class="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-primary-100 dark:bg-primary-900/30 hidden"
          >
            <SimpleIcon name="lock" size="xl" class="text-primary-600 dark:text-primary-400" />
          </div>
          <h2 class="mb-3 text-5xl font-bold text-gray-900 dark:text-white">Create a password</h2>
          <p class="text-lg text-gray-600 dark:text-gray-400">
            Choose a secure password to protect your account
          </p>
        </div>

        <div class="input-wrapper" data-aos="fade-up" data-aos-delay="400">
          <input
            type="password"
            name="password"
            id="step-password"
            placeholder="Enter your password"
            required
            minlength="6"
            autocomplete="new-password"
            class={`${globalInputClasses} text-xl py-5 text-center`}
            data-error="Password must be at least 6 characters"
          />
          <p class="mt-2 text-center text-sm text-gray-500 dark:text-gray-400">
            6 characters minimum
          </p>
        </div>

        <div class="flex justify-between gap-3" data-aos="fade-up" data-aos-delay="600">
          <Button
            type="button"
            variant="outline"
            size="lg"
            class="prev-step px-12 text-lg"
            dataAttributes={{ "data-prev": "3" }}
          >
            <SimpleIcon name="arrow-left" size="lg" />
          </Button>
          <Button
            type="button"
            variant="primary"
            size="lg"
            class="next-step px-12 text-lg"
            dataAttributes={{ "data-next": "5" }}
          >
            <SimpleIcon name="arrow-right" size="lg" />
          </Button>
        </div>
      </div>
    </div>

    <!-- Step 5: Phone -->
    <div class="step-content" data-step="5">
      <div class="space-y-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div
            class="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-primary-100 dark:bg-primary-900/30 hidden"
          >
            <SimpleIcon name="phone" size="xl" class="text-primary-600 dark:text-primary-400" />
          </div>
          <h2 class="mb-3 text-5xl font-bold text-gray-900 dark:text-white">
            How can we reach you?
          </h2>
          <p class="text-lg text-gray-600 dark:text-gray-400">
            Optional: Add your phone number for updates and alerts
          </p>
        </div>

        <div data-aos="fade-up" data-aos-delay="400">
          <PhoneAndSMS
            id="step-phone"
            name="phone"
            placeholder="(555) 123-4567"
            showSMS={true}
            class="text-xl py-5 text-center"
            {globalInputClasses}
          />
        </div>

        <div class="flex justify-between gap-3" data-aos="fade-up" data-aos-delay="600">
          <Button
            type="button"
            variant="outline"
            size="lg"
            class="prev-step px-12 text-lg"
            dataAttributes={{ "data-prev": "4" }}
          >
            <SimpleIcon name="arrow-left" size="lg" />
          </Button>
          <Button
            type="button"
            variant="primary"
            size="lg"
            class="next-step px-12 text-lg"
            dataAttributes={{ "data-next": "6" }}
          >
            <SimpleIcon name="arrow-right" size="lg" />
          </Button>
        </div>
      </div>
    </div>

    <!-- Step 6: Review & Submit -->
    <div class="step-content" data-step="6">
      <div class="space-y-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div
            class="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-green-100 dark:bg-green-900/30"
          >
            <SimpleIcon name="check-circle" size="xl" class="text-green-600 dark:text-green-400" />
          </div>
          <h2 class="mb-3 text-5xl font-bold text-gray-900 dark:text-white">Almost there!</h2>
          <p class="text-lg text-gray-600 dark:text-gray-400">
            Review your information and create your account
          </p>
        </div>

        <!-- Review Summary -->
        <div
          class="space-y-4 rounded-lg border border-gray-200 bg-gray-50 p-8 dark:border-gray-700 color-background/50"
          data-aos="fade-up"
          data-aos-delay="400"
        >
          <div
            class="flex items-start justify-between border-b border-gray-200 pb-4 dark:border-gray-700"
          >
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">Email</p>
              <p id="review-email" class="text-lg font-medium text-gray-900 dark:text-white">-</p>
            </div>
            <button
              type="button"
              class="edit-step text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400"
              data-edit="1"
            >
              Edit
            </button>
          </div>

          <div
            class="flex items-start justify-between border-b border-gray-200 pb-4 dark:border-gray-700"
          >
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">Name</p>
              <p id="review-name" class="text-lg font-medium text-gray-900 dark:text-white">-</p>
            </div>
            <button
              type="button"
              class="edit-step text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400"
              data-edit="2"
            >
              Edit
            </button>
          </div>

          <div
            class="flex items-start justify-between border-b border-gray-200 pb-4 dark:border-gray-700"
          >
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">Company</p>
              <p id="review-company" class="text-lg font-medium text-gray-900 dark:text-white">-</p>
            </div>
            <button
              type="button"
              class="edit-step text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400"
              data-edit="3"
            >
              Edit
            </button>
          </div>

          <div
            class="flex items-start justify-between border-b border-gray-200 pb-4 dark:border-gray-700"
          >
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">Password</p>
              <p id="review-password" class="text-lg font-medium text-gray-900 dark:text-white">
                ••••••
              </p>
            </div>
            <button
              type="button"
              class="edit-step text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400"
              data-edit="4"
            >
              Edit
            </button>
          </div>

          <div class="flex items-start justify-between">
            <div>
              <p class="text-sm text-gray-600 dark:text-gray-400">Phone</p>
              <p id="review-phone" class="text-lg font-medium text-gray-900 dark:text-white">-</p>
            </div>
            <button
              type="button"
              class="edit-step text-sm font-medium text-primary-600 hover:text-primary-700 dark:text-primary-400"
              data-edit="5"
            >
              Edit
            </button>
          </div>
        </div>

        <input type="hidden" name="role" value="Client" />

        <div class="flex justify-between gap-3" data-aos="fade-up" data-aos-delay="600">
          <Button
            type="button"
            variant="outline"
            size="lg"
            class="prev-step px-12 text-lg"
            dataAttributes={{ "data-prev": "5" }}
          >
            <SimpleIcon name="arrow-left" size="lg" class="mr-2" />
            Back
          </Button>
          <Button type="submit" variant="primary" size="lg" class="px-12 text-lg">
            Create Account
            <SimpleIcon name="check" size="lg" class="ml-2" />
          </Button>
        </div>
      </div>
    </div>
  </form>
</div>

<style>
  .step-content {
    display: none;
  }

  .step-content.active {
    display: block;
  }
</style>

<script>
  import AOS from "aos";

  // Handle Google Signup with proper POST form submission
  function handleGoogleSignup() {
    console.log("[GOOGLE-SIGNUP] Initiating Google OAuth...");

    // Create a proper POST form for OAuth
    const form = document.createElement("form");
    form.method = "POST";
    form.action = "/api/auth/signin";
    form.style.display = "none";

    const providerInput = document.createElement("input");
    providerInput.type = "hidden";
    providerInput.name = "provider";
    providerInput.value = "google";

    form.appendChild(providerInput);
    document.body.appendChild(form);
    form.submit();
  }

  // Make function globally available
  (window as any).handleGoogleSignup = handleGoogleSignup;

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("multi-step-form") as HTMLFormElement;
    if (!form) return;

    const progressBar = document.getElementById("progress-bar") as HTMLElement;
    const progressText = document.getElementById("progress-text") as HTMLElement;
    let currentStep = 1;
    const totalSteps = 6;

    // Update progress bar
    function updateProgress() {
      const progress = (currentStep / totalSteps) * 100;
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (progressText) progressText.textContent = `Step ${currentStep} of ${totalSteps}`;
    }

    // Show specific step with AOS refresh
    function showStep(stepNumber: number) {
      const steps = document.querySelectorAll(".step-content");

      steps.forEach((step) => {
        step.classList.remove("active");
      });

      const targetStep = document.querySelector(`.step-content[data-step="${stepNumber}"]`);
      if (targetStep) {
        targetStep.classList.add("active");
        currentStep = stepNumber;
        updateProgress();

        // Update review section if on final step
        if (currentStep === 6) {
          updateReviewSection();
        }

        // Refresh AOS animations for the new step
        setTimeout(() => {
          AOS.refresh();

          // Focus first input in the new step
          const firstInput = targetStep.querySelector("input:not([type=hidden])") as HTMLElement;
          if (firstInput) firstInput.focus();
        }, 100);
      }
    }

    // Validate current step
    async function validateStep(stepNumber: number): Promise<boolean> {
      const stepEl = document.querySelector(`.step-content[data-step="${stepNumber}"]`);
      if (!stepEl) return false;

      const inputs = stepEl.querySelectorAll("input[required]");
      let isValid = true;

      // Basic validation first
      for (const input of inputs) {
        const inputEl = input as HTMLInputElement;
        if (!inputEl.checkValidity()) {
          isValid = false;
          inputEl.classList.add("touched");

          // Show error using modal if available
          if (window.showModal) {
            const errorMsg =
              inputEl.getAttribute("data-error") || "Please fill in this field correctly";
            window.showModal("error", "Validation Error", errorMsg, 3000);
          }
          return false;
        }
      }

      // Additional server-side validation for specific fields
      if (stepNumber === 1) {
        // Validate email uniqueness
        const emailInput = stepEl.querySelector('input[name="email"]') as HTMLInputElement;
        if (emailInput && emailInput.value) {
          const emailValid = await validateEmailUniqueness(emailInput.value);
          if (!emailValid) {
            isValid = false;
            emailInput.classList.add("touched");
            if (window.showModal) {
              window.showModal(
                "warning",
                "Email Already Registered",
                "This email is already registered. <br><br><a href='/auth/login' class='text-primary-600 hover:text-primary-500 underline'>Click here to log in instead</a>",
                8000
              );
            }
            return false;
          }
        }
      }

      if (stepNumber === 3) {
        // Validate company name (optional - could add business logic here)
        const companyInput = stepEl.querySelector('input[name="companyName"]') as HTMLInputElement;
        if (companyInput && companyInput.value) {
          // Add any company-specific validation here if needed
          // For now, just ensure it's not empty (already handled by required)
        }
      }

      return isValid;
    }

    // Validate email uniqueness
    async function validateEmailUniqueness(email: string): Promise<boolean> {
      try {
        const response = await fetch("/api/auth/check-email", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email }),
        });

        if (!response.ok) {
          console.error("Email validation request failed");
          return true; // Allow progression if validation fails
        }

        const result = await response.json();
        return result.available !== false; // true if available, false if taken
      } catch (error) {
        console.error("Email validation error:", error);
        return true; // Allow progression if validation fails
      }
    }

    // Update review section
    function updateReviewSection() {
      const email =
        (document.getElementById("step-email") as HTMLInputElement)?.value || "Not provided";
      const firstName =
        (document.getElementById("step-first-name") as HTMLInputElement)?.value || "";
      const lastName = (document.getElementById("step-last-name") as HTMLInputElement)?.value || "";
      const company =
        (document.getElementById("step-company-name") as HTMLInputElement)?.value || "Not provided";
      const password =
        (document.getElementById("step-password") as HTMLInputElement)?.value || "Not provided";
      const phone =
        (document.getElementById("step-phone") as HTMLInputElement)?.value || "Not provided";

      const reviewEmail = document.getElementById("review-email");
      const reviewName = document.getElementById("review-name");
      const reviewCompany = document.getElementById("review-company");
      const reviewPassword = document.getElementById("review-password");
      const reviewPhone = document.getElementById("review-phone");

      if (reviewEmail) reviewEmail.textContent = email;
      if (reviewName) reviewName.textContent = `${firstName} ${lastName}`.trim() || "Not provided";
      if (reviewCompany) reviewCompany.textContent = company;
      if (reviewPassword) reviewPassword.textContent = password ? "••••••" : "Not provided";
      if (reviewPhone) reviewPhone.textContent = phone;
    }

    // Handle next step buttons
    form.addEventListener("click", async (e) => {
      const target = e.target as HTMLElement;
      const nextBtn = target.closest(".next-step");
      const prevBtn = target.closest(".prev-step");
      const editBtn = target.closest(".edit-step");

      if (nextBtn) {
        e.preventDefault();
        const nextStep = parseInt(nextBtn.getAttribute("data-next") || "1");

        // Show loading state
        const originalText = nextBtn.textContent;
        nextBtn.textContent = "Validating...";
        (nextBtn as HTMLButtonElement).disabled = true;

        // Validate current step before moving forward
        try {
          const isValid = await validateStep(currentStep);
          if (isValid) {
            showStep(nextStep);
          }
        } catch (error) {
          console.error("Validation error:", error);
          if (window.showModal) {
            window.showModal(
              "error",
              "Validation Error",
              "An error occurred during validation. Please try again.",
              3000
            );
          }
        } finally {
          // Restore button state
          nextBtn.textContent = originalText;
          (nextBtn as HTMLButtonElement).disabled = false;
        }
      }

      if (prevBtn) {
        e.preventDefault();
        const prevStep = parseInt(prevBtn.getAttribute("data-prev") || "1");
        showStep(prevStep);
      }

      if (editBtn) {
        e.preventDefault();
        const editStep = parseInt(editBtn.getAttribute("data-edit") || "1");
        showStep(editStep);
      }
    });

    // Add touched class to inputs after user interaction
    const inputs = form.querySelectorAll("input[required]");
    inputs.forEach((input) => {
      input.addEventListener("blur", async () => {
        input.classList.add("touched");
        document.getElementById("skip-to-login")?.classList.add("hidden");
        // Real-time validation for email field
        const inputEl = input as HTMLInputElement;
        if (inputEl.name === "email" && inputEl.value) {
          const emailValid = await validateEmailUniqueness(inputEl.value);
          if (!emailValid) {
            inputEl.classList.add("border-red-500");
            if (window.showModal) {
              window.showModal(
                "warning",
                "Email Already Registered",
                "This email is already registered. <br><br><a href='/auth/login' class='text-primary-600 hover:text-primary-500 underline'>Click here to log in instead</a>",
                8000
              );
            }
          } else {
            inputEl.classList.remove("border-red-500");
          }
        }
      });
      input.addEventListener("input", () => {
        input.classList.add("touched");
        // Remove error styling when user starts typing
        const inputEl = input as HTMLInputElement;
        if (inputEl.name === "email") {
          inputEl.classList.remove("border-red-500");
        }
      });
    });

    // Handle form submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(form);

      // Show loading notification
      if (window.showModal) {
        window.showModal(
          "info",
          "Creating Account...",
          "Please wait while we set up your account.",
          5000
        );
      }

      try {
        const response = await fetch("/api/auth/register", {
          method: "POST",
          body: formData,
        });

        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Server returned non-JSON response. Please try again.");
        }

        const result = await response.json();

        if (result.success === false) {
          if (result.errorType === "duplicate_email") {
            if (window.showModal) {
              window.showModal(
                "warning",
                "Email Already Registered",
                `${result.error}<br><br><a href="/auth/login" class="text-primary-600 hover:text-primary-500 underline">Click here to log in instead</a>`,
                8000
              );
            }
          } else {
            if (window.showModal) {
              window.showModal(
                "error",
                "Registration Failed",
                result.error || "Failed to create account. Please try again.",
                5000
              );
            }
          }
        } else {
          if (result.session) {
            if (window.showModal) {
              window.showModal(
                "success",
                "Account Created!",
                "Welcome! You're now signed in and ready to create projects.",
                3000
              );
            }
          } else {
            if (window.showModal) {
              window.showModal(
                "success",
                "Account Created!",
                "Your account has been created. Please sign in to continue.",
                3000
              );
            }
          }

          // Redirect to appropriate page
          setTimeout(() => {
            if (result.redirect) {
              window.location.href = result.redirect;
            } else {
              window.location.href = result.session ? "/project/new" : "/auth/login";
            }
          }, 2000);
        }
      } catch (error) {
        console.error("Registration error:", error);

        let errorMessage = "An unexpected error occurred. Please try again.";

        if (error instanceof Error) {
          if (error.message.includes("non-JSON response")) {
            errorMessage = "Server error occurred. Please try again in a moment.";
          } else if (error.message.includes("Failed to fetch")) {
            errorMessage = "Network error. Please check your connection and try again.";
          }
        }

        if (window.showModal) {
          window.showModal("error", "Registration Failed", errorMessage, 5000);
        }
      }
    });

    // Handle Enter key to move to next step
    form.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();

        // Find next button in current step
        const currentStepEl = document.querySelector(`.step-content[data-step="${currentStep}"]`);
        const nextBtn = currentStepEl?.querySelector(".next-step") as HTMLElement;

        if (nextBtn && currentStep < totalSteps) {
          nextBtn.click();
        } else if (currentStep === totalSteps) {
          // Submit form on last step
          form.requestSubmit();
        }
      }
    });

    // Initialize
    updateProgress();

    // Initial AOS refresh
    setTimeout(() => {
      AOS.refresh();
    }, 100);
  });
</script>
