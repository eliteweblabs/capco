---
// Shared discussion partial that works for both global and project discussions
export const partial = true;

interface Props {
  project?: any; // Optional project object - if null, it's a global discussion
  currentUser?: any;
  authorProfile?: any;
  globalInputClasses?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  placeholder?: string;
}

const {
  project = null,
  currentUser,
  authorProfile,
  globalInputClasses,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  placeholder = "Write a comment...",
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const projectId = project?.id || null;
const isGlobalDiscussion = !project;
---

<section class="bg-white py-8 antialiased dark:bg-gray-900 lg:py-16">
  <div class="mx-auto max-w-2xl px-4">
    <div class="mb-6 flex items-center justify-between">
      <h2 class="text-lg font-bold text-gray-900 dark:text-white lg:text-2xl">
        Discussion <span id="discussion-count" class="text-sm font-normal text-gray-500">(0)</span>
      </h2>
      <button
        id="new-comment-btn"
        class="inline-flex items-center gap-2 rounded-lg bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50"
      >
        <i class="bx bx-plus text-lg"></i>
        New Comment
      </button>
    </div>

    <!-- Discussion Form (Hidden by default) -->
    <div id="discussion-form" class="mb-6 hidden">
      <div
        class="mb-4 rounded-lg rounded-t-lg border border-gray-200 bg-white px-4 py-2 dark:border-gray-700 dark:bg-gray-800"
      >
        <label for="discussion-message" class="sr-only">Your comment</label>
        <textarea
          id="discussion-message"
          rows="6"
          class="w-full border-0 px-0 text-sm text-gray-900 focus:outline-none focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400"
          placeholder={placeholder}
          required></textarea>
      </div>

      <!-- Internal/Public Toggle (Admin/Staff only) -->
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <div class="mb-4 flex items-center gap-4">
            <label class="flex items-center gap-2">
              <input
                type="checkbox"
                id="internal-discussion"
                class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
              />
              <span class="text-sm text-gray-700 dark:text-gray-300">Internal Discussion</span>
            </label>
            <label class="flex items-center gap-2">
              <input
                type="checkbox"
                id="sms-alert"
                class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
              />
              <span class="text-sm text-gray-700 dark:text-gray-300">SMS Alert</span>
            </label>
          </div>
        ) : null
      }

      <div class="flex gap-3">
        <button
          id="submit-discussion"
          class="inline-flex items-center rounded-lg bg-primary-500 px-4 py-2.5 text-center text-xs font-medium text-white hover:bg-primary-600 focus:ring-4 focus:ring-primary-200 disabled:opacity-50 dark:focus:ring-primary-900"
        >
          <i class="bx bx-send mr-2 text-lg"></i>
          Post Comment
        </button>
        <button
          id="cancel-discussion"
          class="inline-flex items-center rounded-lg border border-gray-300 bg-gray-100 px-4 py-2.5 text-center text-xs font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
        >
          <i class="bx bx-x mr-2 text-lg"></i>
          Cancel
        </button>
      </div>
    </div>

    <!-- Discussion List -->
    <div id="discussions-list" class="space-y-4">
      <!-- Discussions will be loaded here -->
    </div>

    <!-- Loading Spinner -->
    <div id="discussions-loading" class="hidden py-8 text-center">
      <div class="inline-flex items-center gap-2 text-gray-500">
        <div
          class="h-4 w-4 animate-spin rounded-full border-2 border-gray-300 border-t-primary-500"
        >
        </div>
        Loading discussions...
      </div>
    </div>

    <!-- Empty State -->
    <div id="discussions-empty" class="hidden py-8 text-center">
      <div class="text-gray-500">
        <i class="bx bx-message-square-dots mb-2 text-4xl"></i>
        <p>No discussions yet.</p>
        <p class="text-sm">Be the first to start a conversation!</p>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ projectId, currentUser, isGlobalDiscussion }}>
  // Shared discussion functionality
  let discussions = [];
  let currentProjectId = projectId;
  let currentUserId = currentUser?.id;
  let isGlobal = isGlobalDiscussion;
  let currentRole = currentUser?.profile?.role;
  let mentionableUsers = [];

  // Initialize discussion system
  document.addEventListener("DOMContentLoaded", function () {
    initializeDiscussionSystem();
  });

  function initializeDiscussionSystem() {
    console.log(
      `💬 [DISCUSSIONS] Initializing ${isGlobal ? "global" : "project"} discussion system`
    );

    // Load mentionable users
    loadMentionableUsers();

    // Load discussions
    loadDiscussions();

    // Setup form handlers
    setupDiscussionForm();

    // Setup event listeners
    setupEventListeners();
  }

  async function loadMentionableUsers() {
    try {
      const params = new URLSearchParams();
      if (currentProjectId) {
        params.append("projectId", currentProjectId);
      }
      if (isGlobal) {
        params.append("global", "true");
      }

      const response = await fetch(`/api/get-mentionable-users?${params}`, {
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        mentionableUsers = data.users || [];
        console.log("📝 [DISCUSSIONS] Loaded mentionable users:", mentionableUsers.length);
      } else {
        console.error("Failed to load mentionable users:", data.error);
      }
    } catch (error) {
      console.error("Error loading mentionable users:", error);
    }
  }

  async function loadDiscussions() {
    try {
      showLoading(true);

      const params = new URLSearchParams();
      if (currentProjectId) {
        params.append("projectId", currentProjectId);
      }
      params.append("limit", "50");
      params.append("offset", "0");

      const response = await fetch(`/api/discussions?${params}`, {
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        discussions = data.discussions || [];
        renderDiscussions();
      } else {
        console.error("Failed to load discussions:", data.error);
        showError("Failed to load discussions");
      }
    } catch (error) {
      console.error("Error loading discussions:", error);
      showError("Failed to load discussions");
    } finally {
      showLoading(false);
    }
  }

  function renderDiscussions() {
    const container = document.getElementById("discussions-list");
    const emptyState = document.getElementById("discussions-empty");
    const countElement = document.getElementById("discussion-count");

    if (!container) return;

    // Update discussion count
    if (countElement) {
      countElement.textContent = `(${discussions.length})`;
    }

    // Update global bubble count system
    updateDiscussionCount();

    if (discussions.length === 0) {
      container.innerHTML = "";
      if (emptyState) emptyState.classList.remove("hidden");
      return;
    }

    if (emptyState) emptyState.classList.add("hidden");

    // Group discussions by parentId
    const topLevelDiscussions = discussions.filter((d) => !d.parentId);
    const replies = discussions.filter((d) => d.parentId);

    container.innerHTML = topLevelDiscussions
      .map((discussion) => {
        const discussionReplies = replies.filter((r) => r.parentId === discussion.id);
        return renderDiscussionItem(discussion, discussionReplies);
      })
      .join("");

    // Initialize Flowbite dropdowns for new content
    if (typeof window.initFlowbite === "function") {
      window.initFlowbite();
    }
  }

  // Update discussion count in the global bubble count system
  function updateDiscussionCount() {
    const totalDiscussions = discussions.length;
    const incompleteDiscussions = discussions.filter((d) => !d.markCompleted).length;

    // Update count directly in the discussion count element
    const countElement = document.querySelector(".discussion-count");
    const tabButton = document.querySelector('[data-dropdown-toggle="discussions-dropdown"]');

    if (tabButton) {
      // Update count bubble on tab button
      if (incompleteDiscussions > 0) {
        tabButton.setAttribute("data-count", incompleteDiscussions.toString());
        tabButton.classList.add("has-count");
      } else {
        tabButton.removeAttribute("data-count");
        tabButton.classList.remove("has-count");
      }
    }

    // Also update the old count element if it exists
    if (countElement) {
      countElement.textContent = totalDiscussions.toString();
    }

    // Update the main discussion count display
    const mainCountElement = document.getElementById("discussion-count");
    if (mainCountElement) {
      mainCountElement.textContent = `(${totalDiscussions})`;
    }
  }

  function renderDiscussionItem(discussion, replies = []) {
    const isInternal = discussion.internal;
    const isCompleted = discussion.markCompleted;
    const isReply = discussion.parentId;
    const canEdit = currentUserId === discussion.authorId || currentRole === "Admin";
    const canMarkCompleted = currentRole === "Admin" || currentRole === "Staff";

    return `
      <article class="rounded-lg bg-white p-6 text-base dark:bg-gray-900 ${isInternal ? "border-l-4 border-orange-500 bg-orange-50 dark:bg-orange-900/10" : ""} ${isCompleted ? "opacity-75" : ""}" data-discussion-id="${discussion.id}">
        <footer class="mb-2 flex items-center justify-between">
          <div class="flex items-center">
            <p class="mr-3 inline-flex items-center text-sm font-semibold text-gray-900 dark:text-white">
              <img
                class="mr-2 h-6 w-6 rounded-full"
                src="https://flowbite.com/docs/images/people/profile-picture-2.jpg"
                alt="${discussion.author_name}"
              />
              ${discussion.author_name}
              ${isInternal ? '<span class="ml-2 rounded-full bg-orange-100 px-2 py-1 text-xs text-orange-800 dark:bg-orange-900 dark:text-orange-200">Internal</span>' : ""}
              ${isCompleted ? '<span class="ml-2 rounded-full bg-green-100 px-2 py-1 text-xs text-green-800 dark:bg-green-900 dark:text-green-200">Completed</span>' : ""}
            </p>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              <time pubdate datetime="${discussion.createdAt}" title="${new Date(discussion.createdAt).toLocaleString()}">
                ${new Date(discussion.createdAt).toLocaleDateString()}
              </time>
              ${discussion.project_address ? ` • ${discussion.project_address}` : ""}
            </p>
          </div>
          <button
            id="dropdownComment${discussion.id}Button"
            data-dropdown-toggle="dropdownComment${discussion.id}"
            class="inline-flex items-center rounded-lg bg-white p-2 text-center text-sm font-medium text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-50 dark:bg-gray-900 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
            type="button"
          >
            <svg class="h-4 w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 3">
              <path d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"></path>
            </svg>
            <span class="sr-only">Comment settings</span>
          </button>
          <!-- Dropdown menu -->
          <div
            id="dropdownComment${discussion.id}"
            class="z-10 hidden w-36 divide-y divide-gray-100 rounded bg-white shadow dark:divide-gray-600 dark:bg-gray-700"
          >
            <ul class="py-1 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownMenuIconHorizontalButton">
              ${
                canEdit
                  ? `
              <li>
                <a href="#" onclick="editDiscussion(${discussion.id})" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Edit</a>
              </li>
              `
                  : ""
              }
              ${
                canMarkCompleted && !isCompleted
                  ? `
              <li>
                <a href="#" onclick="markDiscussionCompleted(${discussion.id})" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Mark Complete</a>
              </li>
              `
                  : ""
              }
              <li>
                <a href="#" onclick="replyToDiscussion(${discussion.id})" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">Reply</a>
              </li>
            </ul>
          </div>
        </footer>
        <p class="text-gray-500 dark:text-gray-400">
          ${discussion.message}
        </p>
        <div class="mt-4 flex items-center space-x-4">
          <button
            type="button"
            onclick="replyToDiscussion(${discussion.id})"
            class="flex items-center text-sm font-medium text-gray-500 hover:underline dark:text-gray-400"
          >
            <svg class="mr-1.5 h-3.5 w-3.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 18">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z"></path>
            </svg>
            Reply
          </button>
        </div>
        ${
          replies.length > 0
            ? `
        <div class="mt-4 ml-6 border-l-2 border-gray-200 pl-4 dark:border-gray-700">
          ${replies.map((reply) => renderDiscussionItem(reply)).join("")}
        </div>
        `
            : ""
        }
      </article>
    `;
  }

  function setupDiscussionForm() {
    const newCommentBtn = document.getElementById("new-comment-btn");
    const form = document.getElementById("discussion-form");
    const submitBtn = document.getElementById("submit-discussion");
    const cancelBtn = document.getElementById("cancel-discussion");
    const messageInput = document.getElementById("discussion-message");

    if (newCommentBtn && form) {
      newCommentBtn.addEventListener("click", () => {
        form.classList.remove("hidden");
        messageInput?.focus();
        // Add mention functionality to the main message input
        if (messageInput) {
          setupMentionFunctionality(messageInput);
        }
      });
    }

    if (cancelBtn && form) {
      cancelBtn.addEventListener("click", () => {
        form.classList.add("hidden");
        messageInput.value = "";
      });
    }

    if (submitBtn) {
      submitBtn.addEventListener("click", submitDiscussion);
    }
  }

  async function submitDiscussion() {
    const messageInput = document.getElementById("discussion-message");
    const internalCheckbox = document.getElementById("internal-discussion");
    const smsCheckbox = document.getElementById("sms-alert");

    if (!messageInput || !messageInput.value.trim()) {
      alert("Please enter a message");
      return;
    }

    try {
      const submitBtn = document.getElementById("submit-discussion");
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="bx bx-loader-alt bx-spin text-lg"></i> Posting...';
      }

      const response = await fetch("/api/discussions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          projectId: currentProjectId,
          message: messageInput.value.trim(),
          internal: internalCheckbox ? internalCheckbox.checked : false,
          sms_alert: smsCheckbox ? smsCheckbox.checked : false,
        }),
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        // Reset form
        messageInput.value = "";
        if (internalCheckbox) internalCheckbox.checked = false;
        if (smsCheckbox) smsCheckbox.checked = false;

        // Hide form
        const form = document.getElementById("discussion-form");
        if (form) form.classList.add("hidden");

        // Reload discussions and update counts
        await loadDiscussions();

        // Show success message
        if (window.showModal) {
          window.showModal(
            "success",
            "Comment Posted",
            "Your comment has been posted successfully.",
            3000
          );
        }
      } else {
        alert("Failed to post comment: " + data.error);
      }
    } catch (error) {
      console.error("Error submitting discussion:", error);
      alert("Failed to post comment");
    } finally {
      const submitBtn = document.getElementById("submit-discussion");
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="bx bx-send text-lg"></i> Post Comment';
      }
    }
  }

  function setupEventListeners() {
    // Add any additional event listeners here
  }

  function setupMentionFunctionality(textarea) {
    let mentionDropdown = null;
    let currentMentionStart = -1;
    let filteredUsers = [];

    // Create mention dropdown
    function createMentionDropdown() {
      if (mentionDropdown) return mentionDropdown;

      mentionDropdown = document.createElement("div");
      mentionDropdown.className =
        "mention-dropdown absolute z-50 max-h-48 w-64 overflow-y-auto rounded-lg border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800";
      mentionDropdown.style.display = "none";
      document.body.appendChild(mentionDropdown);
      return mentionDropdown;
    }

    // Show mention dropdown
    function showMentionDropdown(x, y) {
      const dropdown = createMentionDropdown();
      dropdown.style.display = "block";
      dropdown.style.left = x + "px";
      dropdown.style.top = y + "px";

      // Populate dropdown with filtered users
      dropdown.innerHTML = filteredUsers
        .map(
          (user) => `
        <div class="mention-item cursor-pointer px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700" data-user-id="${user.id}" data-user-name="${user.name}">
          <div class="font-medium text-gray-900 dark:text-white">${user.name}</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">${user.role}</div>
        </div>
      `
        )
        .join("");

      // Add click handlers
      dropdown.querySelectorAll(".mention-item").forEach((item) => {
        item.addEventListener("click", () => {
          const userName = item.dataset.userName;
          insertMention(userName);
          hideMentionDropdown();
        });
      });
    }

    // Hide mention dropdown
    function hideMentionDropdown() {
      if (mentionDropdown) {
        mentionDropdown.style.display = "none";
      }
    }

    // Insert mention into textarea
    function insertMention(userName) {
      const beforeMention = textarea.value.substring(0, currentMentionStart);
      const afterMention = textarea.value.substring(textarea.selectionStart);
      const newValue = beforeMention + "@" + userName + " " + afterMention;

      textarea.value = newValue;

      // Set cursor position after the mention
      const newCursorPos = beforeMention.length + userName.length + 2;
      textarea.setSelectionRange(newCursorPos, newCursorPos);

      // Trigger input event to update any listeners
      textarea.dispatchEvent(new Event("input", { bubbles: true }));
    }

    // Handle keydown events
    textarea.addEventListener("keydown", (e) => {
      if (mentionDropdown && mentionDropdown.style.display !== "none") {
        const items = mentionDropdown.querySelectorAll(".mention-item");
        const activeItem = mentionDropdown.querySelector(".mention-item.active");

        if (e.key === "ArrowDown") {
          e.preventDefault();
          if (activeItem) {
            activeItem.classList.remove("active");
            const nextItem = activeItem.nextElementSibling;
            if (nextItem) {
              nextItem.classList.add("active");
            } else {
              items[0]?.classList.add("active");
            }
          } else {
            items[0]?.classList.add("active");
          }
        } else if (e.key === "ArrowUp") {
          e.preventDefault();
          if (activeItem) {
            activeItem.classList.remove("active");
            const prevItem = activeItem.previousElementSibling;
            if (prevItem) {
              prevItem.classList.add("active");
            } else {
              items[items.length - 1]?.classList.add("active");
            }
          } else {
            items[items.length - 1]?.classList.add("active");
          }
        } else if (e.key === "Enter") {
          e.preventDefault();
          if (activeItem) {
            const userName = activeItem.dataset.userName;
            insertMention(userName);
            hideMentionDropdown();
          }
        } else if (e.key === "Escape") {
          hideMentionDropdown();
        }
      }
    });

    // Handle input events for @ detection
    textarea.addEventListener("input", (e) => {
      const cursorPos = textarea.selectionStart;
      const text = textarea.value;

      // Find the last @ symbol before cursor
      const lastAtIndex = text.lastIndexOf("@", cursorPos - 1);

      if (lastAtIndex !== -1) {
        // Check if there's a space between @ and cursor (not a mention)
        const textAfterAt = text.substring(lastAtIndex + 1, cursorPos);
        if (!textAfterAt.includes(" ")) {
          currentMentionStart = lastAtIndex;
          const query = textAfterAt.toLowerCase();

          // Filter users based on query
          filteredUsers = mentionableUsers.filter((user) =>
            user.name.toLowerCase().includes(query)
          );

          if (filteredUsers.length > 0) {
            // Get textarea position for dropdown
            const rect = textarea.getBoundingClientRect();
            showMentionDropdown(rect.left, rect.bottom + 5);
          } else {
            hideMentionDropdown();
          }
        } else {
          hideMentionDropdown();
        }
      } else {
        hideMentionDropdown();
      }
    });

    // Hide dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (!textarea.contains(e.target) && !mentionDropdown?.contains(e.target)) {
        hideMentionDropdown();
      }
    });
  }

  function showLoading(show) {
    const loading = document.getElementById("discussions-loading");
    if (loading) {
      loading.classList.toggle("hidden", !show);
    }
  }

  function showError(message) {
    const container = document.getElementById("discussions-list");
    if (container) {
      container.innerHTML = `
        <div class="text-center py-8 text-red-500">
          <i class="bx bx-error-circle mx-auto mb-4 text-4xl"></i>
          <p>${message}</p>
        </div>
      `;
    }
  }

  // Global functions for discussion actions
  window.markDiscussionCompleted = async function (discussionId) {
    try {
      const response = await fetch("/api/update-discussion-completed", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ discussionId, markCompleted: true }),
        credentials: "include",
      });

      if (response.ok) {
        // Update the discussion in the local array
        const discussion = discussions.find((d) => d.id === discussionId);
        if (discussion) {
          discussion.markCompleted = true;
        }

        // Refresh the display and update counts
        renderDiscussions();

        if (window.showModal) {
          window.showModal(
            "success",
            "Discussion Updated",
            "Discussion marked as completed.",
            3000
          );
        }
      }
    } catch (error) {
      console.error("Error marking discussion as completed:", error);
    }
  };

  window.editDiscussion = function (discussionId) {
    // TODO: Implement edit functionality
    console.log("Edit discussion:", discussionId);
  };

  window.replyToDiscussion = function (parentId) {
    console.log("Reply to discussion:", parentId);

    // Find the discussion item to add reply form to
    const discussionItem = document.querySelector(`[data-discussion-id="${parentId}"]`);
    if (!discussionItem) {
      console.error("Discussion item not found for parentId:", parentId);
      return;
    }

    // Check if reply form already exists
    const existingReplyForm = discussionItem.querySelector(".reply-form");
    if (existingReplyForm) {
      existingReplyForm.remove();
      return;
    }

    // Create reply form
    const replyForm = document.createElement("div");
    replyForm.className =
      "reply-form mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700";
    replyForm.innerHTML = `
      <div class="mb-4">
        <label for="reply-message-${parentId}" class="sr-only">Your reply</label>
        <textarea
          id="reply-message-${parentId}"
          rows="3"
          class="w-full border-0 px-0 text-sm text-gray-900 focus:outline-none focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400"
          placeholder="Write a reply..."
          required></textarea>
      </div>
      
        <!-- Internal status will inherit from parent discussion -->
      
      <div class="flex gap-3">
        <button
          onclick="submitReply(${parentId})"
          class="inline-flex items-center rounded-lg bg-primary-500 px-4 py-2.5 text-center text-xs font-medium text-white hover:bg-primary-600 focus:ring-4 focus:ring-primary-200 dark:focus:ring-primary-900 disabled:opacity-50"
        >
          <i class="bx bx-send mr-2 text-lg"></i>
          Post Reply
        </button>
        <button
          onclick="cancelReply(${parentId})"
          class="inline-flex items-center rounded-lg border border-gray-300 bg-gray-100 px-4 py-2.5 text-center text-xs font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
        >
          <i class="bx bx-x mr-2 text-lg"></i>
          Cancel
        </button>
      </div>
    `;

    // Add reply form to the discussion item
    discussionItem.appendChild(replyForm);

    // Focus on the textarea
    const textarea = replyForm.querySelector("textarea");
    if (textarea) {
      textarea.focus();
      // Add mention functionality to the textarea
      setupMentionFunctionality(textarea);
    }
  };

  window.cancelReply = function (parentId) {
    const discussionItem = document.querySelector(`[data-discussion-id="${parentId}"]`);
    if (discussionItem) {
      const replyForm = discussionItem.querySelector(".reply-form");
      if (replyForm) {
        replyForm.remove();
      }
    }
  };

  window.submitReply = async function (parentId) {
    const textarea = document.getElementById(`reply-message-${parentId}`);

    if (!textarea || !textarea.value.trim()) {
      alert("Please enter a reply message");
      return;
    }

    // Find the parent discussion to inherit its internal status
    const parentDiscussion = discussions.find((d) => d.id === parentId);
    const inheritInternal = parentDiscussion ? parentDiscussion.internal : false;

    try {
      const response = await fetch("/api/discussions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          projectId: currentProjectId,
          message: textarea.value.trim(),
          parentId: parentId,
          internal: inheritInternal,
          sms_alert: false,
        }),
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        // Remove the reply form
        const discussionItem = document.querySelector(`[data-discussion-id="${parentId}"]`);
        if (discussionItem) {
          const replyForm = discussionItem.querySelector(".reply-form");
          if (replyForm) {
            replyForm.remove();
          }
        }

        // Reload discussions to show the new reply
        await loadDiscussions();

        // Show success message
        if (window.showModal) {
          window.showModal(
            "success",
            "Reply Posted",
            "Your reply has been posted successfully.",
            3000
          );
        }
      } else {
        alert("Failed to post reply: " + data.error);
      }
    } catch (error) {
      console.error("Error submitting reply:", error);
      alert("Failed to post reply");
    }
  };
</script>
