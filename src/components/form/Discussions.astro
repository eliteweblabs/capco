---
// Shared discussion partial that works for both global and project discussions
export const partial = true;

interface Props {
  project?: any; // Optional project object - if null, it's a global discussion
  currentUser?: any;
  authorProfile?: any;
  globalInputClasses?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  placeholder?: string;
}

const {
  project = null,
  currentUser,
  authorProfile,
  globalInputClasses,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  placeholder,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const projectId = project?.id || null;
const isGlobalDiscussion = !project;
---

<div class="mb-6 flex items-center justify-between">
  <button
    id="new-comment-btn"
    class="inline-flex items-center gap-2 rounded-lg bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50"
  >
    <i class="bx bx-plus text-lg"></i>
    New Comment
  </button>
</div>

<!-- Discussion Form -->

<section class="bg-white py-8 antialiased dark:bg-gray-900 lg:py-16">
  <div class="mx-auto max-w-2xl px-4">
    <div class="mb-6 flex items-center justify-between">
      <h2 class="text-lg font-bold text-gray-900 dark:text-white lg:text-2xl">Discussion (20)</h2>
    </div>
    <form class="mb-6">
      <div
        class="mb-4 rounded-lg rounded-t-lg border border-gray-200 bg-white px-4 py-2 dark:border-gray-700 dark:bg-gray-800"
      >
        <label for="comment" class="sr-only">Your comment</label>
        <textarea
          id="comment"
          rows="6"
          class="w-full border-0 px-0 text-sm text-gray-900 focus:outline-none focus:ring-0 dark:bg-gray-800 dark:text-white dark:placeholder-gray-400"
          placeholder="Write a comment..."
          required></textarea>
      </div>
      <button
        type="submit"
        class="inline-flex items-center rounded-lg bg-primary-700 px-4 py-2.5 text-center text-xs font-medium text-white hover:bg-primary-800 focus:ring-4 focus:ring-primary-200 dark:focus:ring-primary-900"
      >
        Post comment
      </button>
    </form>
    <article class="rounded-lg bg-white p-6 text-base dark:bg-gray-900">
      <footer class="mb-2 flex items-center justify-between">
        <div class="flex items-center">
          <p
            class="mr-3 inline-flex items-center text-sm font-semibold text-gray-900 dark:text-white"
          >
            <img
              class="mr-2 h-6 w-6 rounded-full"
              src="https://flowbite.com/docs/images/people/profile-picture-2.jpg"
              alt="Michael Gough"
            />Michael Gough
          </p>
          <p class="text-sm text-gray-600 dark:text-gray-400">
            <time pubdate datetime="2022-02-08" title="February 8th, 2022">Feb. 8, 2022</time>
          </p>
        </div>
        <button
          id="dropdownComment1Button"
          data-dropdown-toggle="dropdownComment1"
          class="inline-flex items-center rounded-lg bg-white p-2 text-center text-sm font-medium text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-50 dark:bg-gray-900 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
          type="button"
        >
          <svg
            class="h-4 w-4"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 3"
          >
            <path
              d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
            ></path>
          </svg>
          <span class="sr-only">Comment settings</span>
        </button>
        <!-- Dropdown menu -->
        <div
          id="dropdownComment1"
          class="z-10 hidden w-36 divide-y divide-gray-100 rounded bg-white shadow dark:divide-gray-600 dark:bg-gray-700"
        >
          <ul
            class="py-1 text-sm text-gray-700 dark:text-gray-200"
            aria-labelledby="dropdownMenuIconHorizontalButton"
          >
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Edit</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Remove</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Report</a
              >
            </li>
          </ul>
        </div>
      </footer>
      <p class="text-gray-500 dark:text-gray-400">
        Very straight-to-point article. Really worth time reading. Thank you! But tools are just the
        instruments for the UX designers. The knowledge of the design tools are as important as the
        creation of the design strategy.
      </p>
      <div class="mt-4 flex items-center space-x-4">
        <button
          type="button"
          class="flex items-center text-sm font-medium text-gray-500 hover:underline dark:text-gray-400"
        >
          <svg
            class="mr-1.5 h-3.5 w-3.5"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 18"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z"
            ></path>
          </svg>
          Reply
        </button>
      </div>
    </article>
    <article class="mb-3 ml-6 rounded-lg bg-white p-6 text-base dark:bg-gray-900 lg:ml-12">
      <footer class="mb-2 flex items-center justify-between">
        <div class="flex items-center">
          <p
            class="mr-3 inline-flex items-center text-sm font-semibold text-gray-900 dark:text-white"
          >
            <img
              class="mr-2 h-6 w-6 rounded-full"
              src="https://flowbite.com/docs/images/people/profile-picture-5.jpg"
              alt="Jese Leos"
            />Jese Leos
          </p>
          <p class="text-sm text-gray-600 dark:text-gray-400">
            <time pubdate datetime="2022-02-12" title="February 12th, 2022">Feb. 12, 2022</time>
          </p>
        </div>
        <button
          id="dropdownComment2Button"
          data-dropdown-toggle="dropdownComment2"
          class="dark:text-gray-40 inline-flex items-center rounded-lg bg-white p-2 text-center text-sm font-medium text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-50 dark:bg-gray-900 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
          type="button"
        >
          <svg
            class="h-4 w-4"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 3"
          >
            <path
              d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
            ></path>
          </svg>
          <span class="sr-only">Comment settings</span>
        </button>
        <!-- Dropdown menu -->
        <div
          id="dropdownComment2"
          class="z-10 hidden w-36 divide-y divide-gray-100 rounded bg-white shadow dark:divide-gray-600 dark:bg-gray-700"
        >
          <ul
            class="py-1 text-sm text-gray-700 dark:text-gray-200"
            aria-labelledby="dropdownMenuIconHorizontalButton"
          >
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Edit</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Remove</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Report</a
              >
            </li>
          </ul>
        </div>
      </footer>
      <p class="text-gray-500 dark:text-gray-400">Much appreciated! Glad you liked it ☺️</p>
      <div class="mt-4 flex items-center space-x-4">
        <button
          type="button"
          class="flex items-center text-sm font-medium text-gray-500 hover:underline dark:text-gray-400"
        >
          <svg
            class="mr-1.5 h-3.5 w-3.5"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 18"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z"
            ></path>
          </svg>
          Reply
        </button>
      </div>
    </article>
    <article
      class="mb-3 border-t border-gray-200 bg-white p-6 text-base dark:border-gray-700 dark:bg-gray-900"
    >
      <footer class="mb-2 flex items-center justify-between">
        <div class="flex items-center">
          <p
            class="mr-3 inline-flex items-center text-sm font-semibold text-gray-900 dark:text-white"
          >
            <img
              class="mr-2 h-6 w-6 rounded-full"
              src="https://flowbite.com/docs/images/people/profile-picture-3.jpg"
              alt="Bonnie Green"
            />Bonnie Green
          </p>
          <p class="text-sm text-gray-600 dark:text-gray-400">
            <time pubdate datetime="2022-03-12" title="March 12th, 2022">Mar. 12, 2022</time>
          </p>
        </div>
        <button
          id="dropdownComment3Button"
          data-dropdown-toggle="dropdownComment3"
          class="dark:text-gray-40 inline-flex items-center rounded-lg bg-white p-2 text-center text-sm font-medium text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-50 dark:bg-gray-900 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
          type="button"
        >
          <svg
            class="h-4 w-4"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 3"
          >
            <path
              d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
            ></path>
          </svg>
          <span class="sr-only">Comment settings</span>
        </button>
        <!-- Dropdown menu -->
        <div
          id="dropdownComment3"
          class="z-10 hidden w-36 divide-y divide-gray-100 rounded bg-white shadow dark:divide-gray-600 dark:bg-gray-700"
        >
          <ul
            class="py-1 text-sm text-gray-700 dark:text-gray-200"
            aria-labelledby="dropdownMenuIconHorizontalButton"
          >
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Edit</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Remove</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Report</a
              >
            </li>
          </ul>
        </div>
      </footer>
      <p class="text-gray-500 dark:text-gray-400">
        The article covers the essentials, challenges, myths and stages the UX designer should
        consider while creating the design strategy.
      </p>
      <div class="mt-4 flex items-center space-x-4">
        <button
          type="button"
          class="flex items-center text-sm font-medium text-gray-500 hover:underline dark:text-gray-400"
        >
          <svg
            class="mr-1.5 h-3.5 w-3.5"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 18"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z"
            ></path>
          </svg>
          Reply
        </button>
      </div>
    </article>
    <article
      class="border-t border-gray-200 bg-white p-6 text-base dark:border-gray-700 dark:bg-gray-900"
    >
      <footer class="mb-2 flex items-center justify-between">
        <div class="flex items-center">
          <p
            class="mr-3 inline-flex items-center text-sm font-semibold text-gray-900 dark:text-white"
          >
            <img
              class="mr-2 h-6 w-6 rounded-full"
              src="https://flowbite.com/docs/images/people/profile-picture-4.jpg"
              alt="Helene Engels"
            />Helene Engels
          </p>
          <p class="text-sm text-gray-600 dark:text-gray-400">
            <time pubdate datetime="2022-06-23" title="June 23rd, 2022">Jun. 23, 2022</time>
          </p>
        </div>
        <button
          id="dropdownComment4Button"
          data-dropdown-toggle="dropdownComment4"
          class="dark:text-gray-40 inline-flex items-center rounded-lg bg-white p-2 text-center text-sm font-medium text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-50 dark:bg-gray-900 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
          type="button"
        >
          <svg
            class="h-4 w-4"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="currentColor"
            viewBox="0 0 16 3"
          >
            <path
              d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z"
            ></path>
          </svg>
        </button>
        <!-- Dropdown menu -->
        <div
          id="dropdownComment4"
          class="z-10 hidden w-36 divide-y divide-gray-100 rounded bg-white shadow dark:divide-gray-600 dark:bg-gray-700"
        >
          <ul
            class="py-1 text-sm text-gray-700 dark:text-gray-200"
            aria-labelledby="dropdownMenuIconHorizontalButton"
          >
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Edit</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Remove</a
              >
            </li>
            <li>
              <a
                href="#"
                class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >Report</a
              >
            </li>
          </ul>
        </div>
      </footer>
      <p class="text-gray-500 dark:text-gray-400">
        Thanks for sharing this. I do came from the Backend development and explored some of the
        tools to design my Side Projects.
      </p>
      <div class="mt-4 flex items-center space-x-4">
        <button
          type="button"
          class="flex items-center text-sm font-medium text-gray-500 hover:underline dark:text-gray-400"
        >
          <svg
            class="mr-1.5 h-3.5 w-3.5"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 20 18"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5 5h5M5 8h2m6-3h2m-5 3h6m2-7H2a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h3v5l5-5h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1Z"
            ></path>
          </svg>
          Reply
        </button>
      </div>
    </article>
  </div>
</section>

<div
  id="discussion-form"
  class="mb-6 rounded-lg border border-gray-200 bg-gray-100 p-6 dark:border-gray-700 dark:bg-gray-800"
>
  <div class="mb-4">
    <label
      for="discussion-message"
      class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
    >
      Your Comment
    </label>
    <textarea
      id="discussion-message"
      rows="4"
      class={`w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white ${globalInputClasses || ""}`}
      placeholder={placeholder}></textarea>
  </div>

  <!-- Internal/Public Toggle (Admin/Staff only) -->
  {
    currentRole === "Admin" || currentRole === "Staff" ? (
      <div class="mb-4 flex items-center gap-4">
        <label class="flex items-center gap-2">
          <input
            type="checkbox"
            id="internal-discussion"
            class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
          />
          <span class="text-sm text-gray-700 dark:text-gray-300">Internal Discussion</span>
        </label>
        <label class="flex items-center gap-2">
          <input
            type="checkbox"
            id="sms-alert"
            class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
          />
          <span class="text-sm text-gray-700 dark:text-gray-300">SMS Alert</span>
        </label>
      </div>
    ) : null
  }

  <!-- Action Buttons -->
  <div class="flex gap-3">
    <button
      id="submit-discussion"
      class="inline-flex items-center gap-2 rounded-lg bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50"
    >
      <i class="bx bx-send text-lg"></i>
      Post Comment
    </button>
    <button
      id="cancel-discussion"
      class="inline-flex items-center gap-2 rounded-lg border border-gray-300 bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
    >
      <i class="bx bx-x text-lg"></i>
      Cancel
    </button>
  </div>
</div>

<!-- Discussion List -->
<div id="discussions-list" class="space-y-4">
  <!-- Discussions will be loaded here -->
</div>

<!-- Loading Spinner -->
<div id="discussions-loading" class="hidden py-8 text-center">
  <div class="inline-flex items-center gap-2 text-gray-500">
    <div class="h-4 w-4 animate-spin rounded-full border-2 border-gray-300 border-t-primary-500">
    </div>
    Loading discussions...
  </div>
</div>

<!-- Empty State -->
<div id="discussions-empty" class="hidden py-8 text-center">
  <div class="text-gray-500">
    <i class="bx bx-message-square-dots mb-2 text-4xl"></i>
    <p>No discussions yet.</p>
    <p class="text-sm">Be the first to start a conversation!</p>
  </div>
</div>

<script define:vars={{ projectId, currentUser, isGlobalDiscussion }}>
  // Shared discussion functionality
  let discussions = [];
  let currentProjectId = projectId;
  let currentUserId = currentUser?.id;
  let isGlobal = isGlobalDiscussion;

  // Initialize discussion system
  document.addEventListener("DOMContentLoaded", function () {
    initializeDiscussionSystem();
  });

  function initializeDiscussionSystem() {
    console.log(
      `💬 [DISCUSSIONS] Initializing ${isGlobal ? "global" : "project"} discussion system`
    );

    // Load discussions
    loadDiscussions();

    // Setup form handlers
    setupDiscussionForm();

    // Setup event listeners
    setupEventListeners();
  }

  async function loadDiscussions() {
    try {
      showLoading(true);

      const params = new URLSearchParams();
      if (currentProjectId) {
        params.append("projectId", currentProjectId);
      }
      params.append("limit", "50");
      params.append("offset", "0");

      const response = await fetch(`/api/discussions?${params}`, {
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        discussions = data.discussions || [];
        renderDiscussions();
      } else {
        console.error("Failed to load discussions:", data.error);
        showError("Failed to load discussions");
      }
    } catch (error) {
      console.error("Error loading discussions:", error);
      showError("Failed to load discussions");
    } finally {
      showLoading(false);
    }
  }

  function renderDiscussions() {
    const container = document.getElementById("discussions-list");
    const emptyState = document.getElementById("discussions-empty");

    if (!container) return;

    if (discussions.length === 0) {
      container.innerHTML = "";
      if (emptyState) emptyState.classList.remove("hidden");
      return;
    }

    if (emptyState) emptyState.classList.add("hidden");

    // Group discussions by parent_id
    const topLevelDiscussions = discussions.filter((d) => !d.parent_id);
    const replies = discussions.filter((d) => d.parent_id);

    container.innerHTML = topLevelDiscussions
      .map((discussion) => {
        const discussionReplies = replies.filter((r) => r.parent_id === discussion.id);
        return renderDiscussionItem(discussion, discussionReplies);
      })
      .join("");
  }

  function renderDiscussionItem(discussion, replies = []) {
    const isInternal = discussion.internal;
    const isCompleted = discussion.mark_completed;
    const isReply = discussion.parent_id;
    const canEdit = currentUserId === discussion.author_id || currentRole === "Admin";
    const canMarkCompleted = currentRole === "Admin" || currentRole === "Staff";

    return `
      <div class="rounded-lg border border-gray-200 bg-gray-100 p-4 dark:border-gray-700 dark:bg-gray-800 ${isInternal ? "border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-900/20" : ""} ${isCompleted ? "opacity-75" : ""}">
        <!-- Discussion Header -->
        <div class="mb-3 flex items-start justify-between">
          <div class="flex items-start gap-3">
            <div class="flex h-8 w-8 items-center justify-center rounded-full bg-primary-100 text-primary-600 dark:bg-primary-900 dark:text-primary-400">
              <i class="bx bx-user text-sm"></i>
            </div>
            <div>
              <div class="flex items-center gap-2">
                <span class="font-medium text-gray-900 dark:text-white">${discussion.author_name}</span>
                ${isInternal ? '<span class="rounded-full bg-orange-100 px-2 py-1 text-xs text-orange-800 dark:bg-orange-900 dark:text-orange-200">Internal</span>' : ""}
                ${isCompleted ? '<span class="rounded-full bg-green-100 px-2 py-1 text-xs text-green-800 dark:bg-green-900 dark:text-green-200">Completed</span>' : ""}
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">
                ${new Date(discussion.created_at).toLocaleString()}
                ${!isGlobal ? ` • ${discussion.project_address}` : ""}
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex items-center gap-2">
            ${
              canMarkCompleted && !isCompleted
                ? `
              <button onclick="markDiscussionCompleted(${discussion.id})" class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-200" title="Mark as completed">
                <i class="bx bx-check text-lg"></i>
              </button>
            `
                : ""
            }
            ${
              canEdit
                ? `
              <button onclick="editDiscussion(${discussion.id})" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200" title="Edit">
                <i class="bx bx-edit text-lg"></i>
              </button>
            `
                : ""
            }
            <button onclick="replyToDiscussion(${discussion.id})" class="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200" title="Reply">
              <i class="bx bx-reply text-lg"></i>
            </button>
          </div>
        </div>

        <!-- Discussion Content -->
        <div class="mb-3 text-gray-700 dark:text-gray-300">
          ${discussion.message}
        </div>

        <!-- Replies -->
        ${
          replies.length > 0
            ? `
          <div class="ml-4 border-l-2 border-gray-200 pl-4 dark:border-gray-700">
            ${replies.map((reply) => renderDiscussionItem(reply)).join("")}
          </div>
        `
            : ""
        }
      </div>
    `;
  }

  function setupDiscussionForm() {
    const newCommentBtn = document.getElementById("new-comment-btn");
    const form = document.getElementById("discussion-form");
    const submitBtn = document.getElementById("submit-discussion");
    const cancelBtn = document.getElementById("cancel-discussion");
    const messageInput = document.getElementById("discussion-message");

    if (newCommentBtn && form) {
      newCommentBtn.addEventListener("click", () => {
        form.classList.remove("hidden");
        messageInput?.focus();
      });
    }

    if (cancelBtn && form) {
      cancelBtn.addEventListener("click", () => {
        form.classList.add("hidden");
        messageInput.value = "";
      });
    }

    if (submitBtn) {
      submitBtn.addEventListener("click", submitDiscussion);
    }
  }

  async function submitDiscussion() {
    const messageInput = document.getElementById("discussion-message") as HTMLTextAreaElement;
    const internalCheckbox = document.getElementById("internal-discussion") as HTMLInputElement;
    const smsCheckbox = document.getElementById("sms-alert") as HTMLInputElement;

    if (!messageInput || !messageInput.value.trim()) {
      alert("Please enter a message");
      return;
    }

    try {
      const submitBtn = document.getElementById("submit-discussion") as HTMLButtonElement;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="bx bx-loader-alt bx-spin text-lg"></i> Posting...';

      const response = await fetch("/api/discussions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          projectId: currentProjectId,
          message: messageInput.value.trim(),
          internal: internalCheckbox?.checked || false,
          sms_alert: smsCheckbox?.checked || false,
        }),
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        // Reset form
        messageInput.value = "";
        if (internalCheckbox) internalCheckbox.checked = false;
        if (smsCheckbox) smsCheckbox.checked = false;

        // Hide form
        const form = document.getElementById("discussion-form");
        if (form) form.classList.add("hidden");

        // Reload discussions
        await loadDiscussions();

        // Show success message
        if (window.showModal) {
          window.showModal(
            "success",
            "Comment Posted",
            "Your comment has been posted successfully.",
            3000
          );
        }
      } else {
        alert("Failed to post comment: " + data.error);
      }
    } catch (error) {
      console.error("Error submitting discussion:", error);
      alert("Failed to post comment");
    } finally {
      const submitBtn = document.getElementById("submit-discussion") as HTMLButtonElement;
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="bx bx-send text-lg"></i> Post Comment';
      }
    }
  }

  function setupEventListeners() {
    // Add any additional event listeners here
  }

  function showLoading(show) {
    const loading = document.getElementById("discussions-loading");
    if (loading) {
      loading.classList.toggle("hidden", !show);
    }
  }

  function showError(message) {
    const container = document.getElementById("discussions-list");
    if (container) {
      container.innerHTML = `
        <div class="text-center py-8 text-red-500">
          <i class="bx bx-error-circle mx-auto mb-4 text-4xl"></i>
          <p>${message}</p>
        </div>
      `;
    }
  }

  // Global functions for discussion actions
  (window as any).markDiscussionCompleted = async function (discussionId) {
    try {
      const response = await fetch("/api/update-discussion-completed", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ discussionId, completed: true }),
        credentials: "include",
      });

      if (response.ok) {
        await loadDiscussions();
        if (window.showModal) {
          window.showModal(
            "success",
            "Discussion Updated",
            "Discussion marked as completed.",
            3000
          );
        }
      }
    } catch (error) {
      console.error("Error marking discussion as completed:", error);
    }
  };

  (window as any).editDiscussion = function (discussionId) {
    // TODO: Implement edit functionality
    console.log("Edit discussion:", discussionId);
  };

  (window as any).replyToDiscussion = function (parentId) {
    // TODO: Implement reply functionality
    console.log("Reply to discussion:", parentId);
  };
</script>
