---
// Staff Select Component - for assigning projects to staff members
// Only visible to admin users
import { checkAuth } from "../../lib/auth";

// Get current user for authentication and role
const { isAuth, user, role } = await checkAuth(Astro.cookies);

// Only show select for admin and staff users
const canAssignStaff = role === "Admin" || role === "Staff";


interface Props {
  id?: string;
  company_name?: string;
  label?: string;
  value?: string;
  required?: boolean;
  placeholder?: string;
  projectId?: string;
  autoSave?: boolean;
  variant?: "default" | "hero";
}

const {
  id = "staff-select",
  company_name = "assigned_to_id",
  label = "Assign To",
  value = "",
  required = false,
  placeholder = "Select staff member...",
  projectId = "",
  autoSave = false,
  variant = "default",
} = Astro.props;
---

{canAssignStaff ? (
  <div class="relative">
    <select
      id={id}
      name={company_name}
      value={value}
      required={required}
      class="appearance-none inline-flex items-center rounded-full px-3 py-1 pr-8 text-sm font-medium cursor-pointer transition-colors bg-gray-100 text-gray-800 hover:bg-gray-200 dark:bg-gray-900/30 dark:text-gray-400 dark:hover:bg-gray-900/50 border-0 focus:outline-none focus:ring-2 focus:ring-blue-500"
    >
      <option value="">{placeholder}</option>
      <!-- Options will be populated by JavaScript -->
    </select>
    <svg class="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-600 dark:text-gray-400 pointer-events-none" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
    
    <div id={`${id}-loading`} class="hidden absolute top-full left-0 mt-1 text-xs text-gray-500 dark:text-gray-400">
      Loading...
    </div>

    <div id={`${id}-error`} class="hidden absolute top-full left-0 mt-1 text-xs text-red-600 dark:text-red-400">
      Error loading staff
    </div>
  </div>
) : (
  <div class="space-y-2">
    <label for={id} class="block text-sm font-medium text-gray-700 dark:text-gray-300">
      {label}
      {required && <span class="ml-1 text-red-500">*</span>}
    </label>

    <select
      id={id}
      name={company_name}
      value={value}
      required={required}
      class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 dark:focus:border-blue-400"
    >
      <option value="">{placeholder}</option>
      <!-- Options will be populated by JavaScript -->
    </select>

    <div id={`${id}-loading`} class="hidden">
      <p class="text-sm text-gray-500 dark:text-gray-400">Loading staff members...</p>
    </div>

    <div id={`${id}-error`} class="hidden">
      <p class="text-sm text-red-600 dark:text-red-400">Failed to load staff members</p>
    </div>
  </div>
)}

<script define:vars={{ id, projectId, autoSave, value }}>
  document.addEventListener("DOMContentLoaded", async () => {
    const selectElement = document.getElementById(id);
    const loadingElement = document.getElementById(`${id}-loading`);
    const errorElement = document.getElementById(`${id}-error`);

    if (!selectElement) return;

    // Show loading state
    if (loadingElement) loadingElement.classList.remove("hidden");
    if (errorElement) errorElement.classList.add("hidden");

    try {
      console.log("üßë‚Äçüíº [STAFF-SELECT] Fetching staff members...");

      // Fetch staff members from API
      const response = await fetch("/api/get-staff-users");
      const result = await response.json();

      if (result.success && result.staffUsers) {
        console.log(`üßë‚Äçüíº [STAFF-SELECT] Loaded ${result.staffUsers.length} staff members`);

        // Store current value to preserve it
        const currentValue = value; // Use the Astro prop value instead of DOM value
        console.log("üßë‚Äçüíº [STAFF-SELECT] Initial value:", currentValue);
        console.log("üßë‚Äçüíº [STAFF-SELECT] Props value:", value);
        console.log("üßë‚Äçüíº [STAFF-SELECT] Project ID:", projectId);

        // Clear existing options except the first placeholder
        selectElement.innerHTML = `<option value="">${selectElement.options[0].text}</option>`;

        // Add staff options
        result.staffUsers.forEach((staff) => {
          const option = document.createElement("option");
          option.value = staff.id;
          option.textContent = staff.company_name;
          option.selected = staff.id === currentValue;
          selectElement.appendChild(option);
        });

        // Restore the selected value if it was set
        if (currentValue) {
          selectElement.value = currentValue;
          console.log("üßë‚Äçüíº [STAFF-SELECT] Restored value:", currentValue);
        } else {
          console.log("üßë‚Äçüíº [STAFF-SELECT] No value to restore");
        }

        console.log("üßë‚Äçüíº [STAFF-SELECT] Staff options populated successfully");
      } else {
        console.error("üßë‚Äçüíº [STAFF-SELECT] Failed to load staff:", result.error);
        if (errorElement) {
          errorElement.classList.remove("hidden");
          const errorText = errorElement.querySelector("p");
          if (errorText) errorText.textContent = result.error || "Failed to load staff members";
        }
      }
    } catch (error) {
      console.error("üßë‚Äçüíº [STAFF-SELECT] Error fetching staff:", error);
      if (errorElement) {
        errorElement.classList.remove("hidden");
      }
    } finally {
      // Hide loading state
      if (loadingElement) loadingElement.classList.add("hidden");
    }

    // Handle selection changes
    selectElement.addEventListener("change", async (e) => {
      const target = e.target;
      const selectedValue = target.value;
      const selectedText = target.options[target.selectedIndex]?.text || "Unassigned";

      console.log("üßë‚Äçüíº [STAFF-SELECT] Assignment changed:", {
        value: selectedValue,
        name: selectedText,
        projectId,
        autoSave,
      });

      // Auto-save if enabled and projectId is provided
      if (autoSave && projectId) {
        try {
          // Show saving state
          const originalText = target.options[target.selectedIndex]?.text || "Saving...";
          target.disabled = true;

          console.log("üßë‚Äçüíº [STAFF-SELECT] Auto-saving assignment...");

          // Make API call to update assignment
          const response = await fetch(`/api/update-project/${projectId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              assigned_to_id: selectedValue || null,
            }),
          });

          if (response.ok) {
            const result = await response.json();
            console.log("üßë‚Äçüíº [STAFF-SELECT] Assignment saved successfully:", result);

            // Show success feedback
            if (window.toastAlertManager) {
              window.toastAlertManager.show({
                type: "success",
                title: "Assignment Updated",
                message: selectedValue
                  ? `Project assigned to ${selectedText}`
                  : "Project unassigned",
                duration: 3000,
              });
            }
          } else {
            const errorData = await response.json();
            console.error("üßë‚Äçüíº [STAFF-SELECT] Failed to save assignment:", errorData);

            // Revert the selection on error
            target.value = target.getAttribute("data-previous-value") || "";

            // Show error feedback
            if (window.toastAlertManager) {
              window.toastAlertManager.show({
                type: "error",
                title: "Assignment Failed",
                message: "Failed to update assignment. Please try again.",
                duration: 5000,
              });
            }
          }
        } catch (error) {
          console.error("üßë‚Äçüíº [STAFF-SELECT] Error saving assignment:", error);

          // Revert the selection on error
          target.value = target.getAttribute("data-previous-value") || "";

          // Show error feedback
          if (window.toastAlertManager) {
            window.toastAlertManager.show({
              type: "error",
              title: "Assignment Failed",
              message: "Failed to update assignment. Please try again.",
              duration: 5000,
            });
          }
        } finally {
          // Re-enable the select
          target.disabled = false;
        }
      }

      // Store current value for potential revert
      target.setAttribute("data-previous-value", selectedValue);

      // Emit assignment change event
      if (window.globalServices) {
        window.globalServices.emit("project:assignment-changed", {
          assignedToId: selectedValue || null,
          assignedToName: selectedText === "Select staff member..." ? "Unassigned" : selectedText,
        });
      } else {
        // Fallback: dispatch custom event
        document.dispatchEvent(
          new CustomEvent("project:assignment-changed", {
            detail: {
              assignedToId: selectedValue || null,
              assignedToName:
                selectedText === "Select staff member..." ? "Unassigned" : selectedText,
            },
          })
        );
      }
    });
  });
</script>
