---
import {
  BUTTON_GROUPS,
  PROJECT_FORM_FIELDS,
} from "../../lib/project-form-config";
import ToggleButton from "./ToggleButton.astro";
import UnitSlider from "../UnitSlider.astro";

interface Props {
  project?: any;
  projectId?: string;
  isEdit?: boolean;
}

const { project = {}, projectId = "", isEdit = false } = Astro.props;

// Filter fields based on whether this is an edit form
const formFields = isEdit
  ? PROJECT_FORM_FIELDS.filter((field) => field.name !== "owner")
  : PROJECT_FORM_FIELDS;
---

<form class="space-y-4" data-project-id={projectId}>
  <!-- Address Field (Full Width) -->
  {
    formFields
      .filter((field) => field.name === "address")
      .map((field) => (
        <div class="relative">
          <label
            for={`${field.id}-${projectId}`}
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            {field.label}
            {field.required ? " *" : ""}
          </label>
          <input
            type={field.type === "number" ? "number" : "text"}
            id={`${field.id}-${projectId}`}
            name={field.name}
            value={project[field.name] || ""}
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
            placeholder={field.placeholder || ""}
            required={field.required}
            min={field.min}
            max={field.max}
            step={field.step}
            data-field={field.dataField}
          />
        </div>
      ))
  }

  <!-- Other Core Fields Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    {
      formFields
        .filter(
          (field) =>
            field.name !== "address" &&
            (field.type === "text" || field.type === "number")
        )
        .map((field) => (
          <div class="relative">
            <label
              for={`${field.id}-${projectId}`}
              class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
            >
              {field.label}
              {field.required ? " *" : ""}
            </label>
            <input
              type={field.type === "number" ? "number" : "text"}
              id={`${field.id}-${projectId}`}
              name={field.name}
              value={project[field.name] || ""}
              class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
              placeholder={field.placeholder || ""}
              required={field.required}
              min={field.min}
              max={field.max}
              step={field.step}
              data-field={field.dataField}
            />
          </div>
        ))
    }
  </div>

  <!-- Description Field -->
  {
    formFields
      .filter((field) => field.type === "textarea")
      .map((field) => (
        <div class="relative">
          <label
            for={`${field.id}-${projectId}`}
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
          >
            {field.label}
          </label>
          <textarea
            id={`${field.id}-${projectId}`}
            name={field.name}
            rows="3"
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
            placeholder={field.placeholder || ""}
          >
            {project[field.name] || ""}
          </textarea>
        </div>
      ))
  }

  <!-- Construction Type & Units Row -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <!-- Construction Type -->
    <div>
      <label
        class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
        >Construction Type</label
      >
      <div class="flex gap-4">
        {
          formFields
            .filter((field) => field.type === "checkbox")
            .map((field) => {
              const isChecked =
                project[field.name] === true ||
                project[field.name] === "true" ||
                project[field.name] === 1 ||
                project[field.name] === "1";
              return (
                <label class="inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    id={`${field.id}-${projectId}`}
                    name={field.name}
                    checked={isChecked}
                    class="sr-only peer"
                  />
                  <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 dark:peer-checked:bg-blue-600" />
                  <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">
                    {field.label}
                  </span>
                </label>
              );
            })
        }
      </div>
    </div>

    <!-- Units Slider -->
    <div id={`units-slider-container-${projectId}`}>
      <UnitSlider projectId={projectId} value={project.units || 1} />
    </div>
  </div>

  <!-- Button Groups -->
  {
    BUTTON_GROUPS.map((group) => {
      // Parse selected values from project data
      let selectedValues: string[] = [];
      if (project[group.name]) {
        if (Array.isArray(project[group.name])) {
          selectedValues = project[group.name];
        } else if (typeof project[group.name] === "string") {
          try {
            const parsed = JSON.parse(project[group.name]);
            selectedValues = Array.isArray(parsed)
              ? parsed
              : [project[group.name]];
          } catch {
            selectedValues = project[group.name]
              .split(",")
              .map((s: string) => s.trim())
              .filter((s: string) => s);
          }
        } else {
          selectedValues = [project[group.name]];
        }
      }

      return (
        <div class="space-y-3">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
            {group.label}
          </label>
          <div class="flex flex-wrap gap-2">
            {group.options.map((option) => {
              const isSelected = selectedValues.includes(option.value);
              return (
                <ToggleButton
                  value={option.value}
                  group={group.name}
                  type={group.type}
                  class={`${group.cssClass} ${isSelected ? "bg-blue-500 text-white border-blue-500" : ""}`}
                >
                  {option.label}
                </ToggleButton>
              );
            })}
          </div>
        </div>
      );
    })
  }

  <!-- Form Actions -->
  <div class="flex gap-2 pt-4 border-t border-gray-200 dark:border-gray-600">
    <button
      type="submit"
      class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
    >
      Save Project
    </button>

    <button
      type="button"
      class="px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors"
      id="delete-project-btn"
      data-project-id={projectId}
    >
      <i class="bx bx-trash mr-1"></i>
      Delete Project
    </button>
  </div>
</form>

<script>
  // Add event listener for delete button
  document.addEventListener("DOMContentLoaded", function () {
    const deleteBtn = document.getElementById("delete-project-btn");
    if (deleteBtn) {
      deleteBtn.addEventListener("click", function () {
        const projectId = this.getAttribute("data-project-id");
        if (projectId) {
          deleteProject(projectId);
        }
      });
    }
  });

  // Delete project function
  function deleteProject(projectId: string) {
    debugger;
    if (
      confirm(
        "Are you sure you want to delete this project? This action cannot be undone."
      )
    ) {
      // Show loading state
      const deleteBtn = document.getElementById(
        "delete-project-btn"
      ) as HTMLButtonElement;
      if (deleteBtn) {
        deleteBtn.disabled = true;
        deleteBtn.innerHTML =
          '<i class="bx bx-loader-alt bx-spin mr-1"></i>Deleting...';
      }

      // Make API call to delete project
      fetch(`/api/delete-project`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ projectId }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to delete project");
          }
          return response.json();
        })
        .then((data) => {
          // Show success message
          alert("Project deleted successfully!");
          // Redirect to projects list
          window.location.href = "/";
        })
        .catch((error) => {
          console.error("Error deleting project:", error);
          alert("Failed to delete project. Please try again.");

          // Reset button state
          if (deleteBtn) {
            deleteBtn.disabled = false;
            deleteBtn.innerHTML =
              '<i class="bx bx-trash mr-1"></i>Delete Project';
          }
        });
    }
  }
</script>
