---
// RegisterForm component for registration
import PhoneAndSMS from "./PhoneAndSMS.astro";
import Button from "../common/Button.astro";
---

<div class="mx-auto my-12 w-full max-w-lg">
  <form action="/api/auth/signin" method="post" class="mt-6 flex w-full flex-col gap-2">
    <Button
      type="submit"
      variant="secondary"
      fullWidth
      name="provider"
      value="google"
      class="flex items-center justify-center gap-2"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-auto"
        preserveAspectRatio="xMidYMid"
        viewBox="0 0 256 262"
      >
        <path
          fill="#4285F4"
          d="M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027"
        ></path>
        <path
          fill="#34A853"
          d="M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1"
        ></path>
        <path
          fill="#FBBC05"
          d="M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782"
        ></path>
        <path
          fill="#EB4335"
          d="M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251"
        ></path>
      </svg>
      Sign up with Google
    </Button>
  </form>
</div>
<hr class="mt-14 h-0 border-t border-zinc-300 dark:border-zinc-600" />
<p class="-mt-2.5 text-center text-xs text-zinc-500 dark:text-zinc-400">
  <span class="bg-background-light px-4 dark:bg-background-dark">Or</span>
</p>
<div class="mx-auto my-12 w-full max-w-lg">
  <form action="/api/auth/register" method="post" class="grid w-full grid-cols-1 gap-3">
    <!-- Name Fields -->
    <div class="grid grid-cols-2 gap-3">
      <div>
        <label
          for="first_name"
          class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
        >
          First Name <span class="text-red-500">*</span>
        </label>
        <input
          type="text"
          name="first_name"
          id="first-name"
          placeholder="Enter your first name"
          required
          class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
        />
      </div>

      <div>
        <label
          for="last_name"
          class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
        >
          Last Name <span class="text-red-500">*</span>
        </label>
        <input
          type="text"
          name="last_name"
          id="last-name"
          placeholder="Enter your last name"
          required
          class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
        />
      </div>
    </div>

    <!-- Company Name -->
    <div>
      <label
        for="company_name"
        class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        Company Name <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        name="company_name"
        id="company-name"
        placeholder="Enter your company name"
        required
        class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
      />
    </div>

    <!-- Email -->
    <div>
      <label
        for="register_email"
        class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        Email <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        name="email"
        id="register_email"
        placeholder="Enter your email address"
        required
        class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
      />
    </div>

    <!-- Phone and SMS -->
    <PhoneAndSMS id="phone" name="phone" placeholder="(555) 123-4567" showSMS={true} />

    <!-- Password -->
    <div>
      <label
        for="register_password"
        class="mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        Password <span class="text-red-500">*</span>
      </label>
      <input
        id="register_password"
        type="password"
        name="password"
        placeholder="Enter your password"
        required
        minlength="6"
        class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
      />
      <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">6 characters minimum</p>
    </div>

    <Button type="submit" variant="primary" size="lg" fullWidth class="mt-6">
      Create Account
    </Button>
  </form>
</div>

<script>
  // Handle form submission with client-side validation feedback
  document.addEventListener("DOMContentLoaded", () => {
    // Get form elements

    const registerForm = document.querySelector('form[action="/api/auth/register"]');
    if (registerForm) {
      registerForm.addEventListener("submit", async (e) => {
        // Only prevent default for the registration form, not Google sign-in
        e.preventDefault(); // Prevent default form submission
        const firstName = (
          registerForm.querySelector("#first-name") as HTMLInputElement
        )?.value?.trim();
        const lastName = (
          registerForm.querySelector("#last-name") as HTMLInputElement
        )?.value?.trim();
        const companyName = (
          registerForm.querySelector("#company-name") as HTMLInputElement
        )?.value?.trim();
        const email = (
          registerForm.querySelector("#register_email") as HTMLInputElement
        )?.value?.trim();
        const password = (registerForm.querySelector("#register_password") as HTMLInputElement)
          ?.value;
        const phone = (registerForm.querySelector("#phone") as HTMLInputElement)?.value?.trim();
        const smsAlertsCheckbox = document.getElementById("sms-alerts-phone") as HTMLInputElement;
        const smsAlerts = smsAlertsCheckbox?.checked || false;
        const mobileCarrier = (
          registerForm.querySelector("#mobile-carrier-phone") as HTMLSelectElement
        )?.value?.trim();

        // Check required fields
        if (!firstName || !lastName || !companyName || !email || !password) {
          if (window.showModal) {
            window.showModal(
              "error",
              "Validation Error",
              "Please fill in all required fields (marked with *).",
              5000
            );
          } else {
            console.error(
              "🔔 [Validation Error] Please fill in all required fields (marked with *)."
            );
          }
          return;
        }

        // Validate name fields
        if (firstName.length < 2 || lastName.length < 2) {
          if (window.showModal) {
            window.showModal(
              "error",
              "Validation Error",
              "First and last names must be at least 2 characters long.",
              5000
            );
          } else {
            console.error(
              "🔔 [Validation Error] First and last names must be at least 2 characters long."
            );
          }
          return;
        }

        // Validate company name
        if (companyName.length < 2) {
          if (window.showModal) {
            window.showModal(
              "error",
              "Validation Error",
              "Company name must be at least 2 characters long.",
              5000
            );
          } else {
            console.error("🔔 [Validation Error] Company name must be at least 2 characters long.");
          }
          return;
        }

        // Validate password
        if (password.length < 6) {
          if (window.showModal) {
            window.showModal(
              "error",
              "Validation Error",
              "Password must be at least 6 characters long.",
              5000
            );
          } else {
            console.error("🔔 [Validation Error] Password must be at least 6 characters long.");
          }
          return;
        }

        // Show loading notification
        if (window.showModal) {
          window.showModal(
            "info",
            "Creating Account...",
            "Please wait while we set up your account.",
            0
          );
        } else {
          console.log("🔔 [Creating Account...] Please wait while we set up your account.");
        }

        // Submit form data via fetch
        try {
          const formData = new FormData(registerForm as HTMLFormElement);

          // Ensure SMS fields are included in FormData
          if (smsAlerts) {
            formData.set("sms_alerts", "on");
          } else {
            formData.delete("sms_alerts"); // Remove if unchecked
          }

          if (mobileCarrier) {
            formData.set("mobile_carrier", mobileCarrier);
          }

          console.log("🔐 [REGISTER-FORM] FormData contents:", {
            smsAlerts,
            mobileCarrier,
            hasSmsAlerts: formData.has("sms_alerts"),
            smsAlertsValue: formData.get("sms_alerts"),
            mobileCarrierValue: formData.get("mobile_carrier"),
          });

          const response = await fetch("/api/auth/register", {
            method: "POST",
            body: formData,
          });

          const result = await response.json();

          if (result.success === false) {
            // Show error notification
            if (window.showModal) {
              window.showModal(
                "Registration Failed",
                result.error || "Failed to create account. Please try again.",
                "error",
                5000
              );
            } else {
              console.error(
                "🔔 [Registration Failed]",
                result.error || "Failed to create account. Please try again."
              );
            }
          } else {
            // Show success notification based on email status
            const emailStatus = result.emailStatus || {};
            const notification = result.notification || {};

            if (window.showModal) {
              window.showModal(
                notification.type || "success",
                notification.title || "Account Created!",
                notification.message ||
                  "Welcome! You're now signed in and ready to create projects.",
                notification.duration || 5000
              );
            } else {
              console.log("🔔 [Account Created!]", notification.message);
            }

            // Show additional email status notifications
            if (emailStatus.welcomeEmailSent && window.showModal) {
              setTimeout(() => {
                window.showModal(
                  "info",
                  "Email Sent",
                  "Welcome email delivered successfully! Check your inbox. Now redirecting you to the dashboard",
                  3000
                );
              }, 1000);
            }

            // Show email errors if any
            if (emailStatus.emailErrors && emailStatus.emailErrors.length > 0 && window.showModal) {
              setTimeout(() => {
                window.showModal(
                  "warning",
                  "Email Issues",
                  "Some notification emails may not have been delivered. Your account was created successfully.",
                  5000
                );
              }, 3000);
            }

            // Redirect to dashboard
            setTimeout(() => {
              window.location.href = "/dashboard";
            }, 1500);
          }
        } catch (error) {
          console.error("Registration error:", error);
          if (window.showModal) {
            window.showModal(
              "Registration Failed",
              "An unexpected error occurred. Please try again.",
              "error",
              5000
            );
          } else {
            console.error(
              "🔔 [Registration Failed] An unexpected error occurred. Please try again."
            );
          }
        }
      });
    }
  });
</script>
