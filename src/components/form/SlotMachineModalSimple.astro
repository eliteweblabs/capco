---
import Button from "../common/Button.astro";
import BoxIcon from "../common/BoxIcon.astro";

// Simplified Slot Machine Modal Component

interface Props {
  id: string;
  title: string;
  options: Array<{ value: string; label: string; disabled?: boolean }>;
  selectedValue?: string;
  placeholder?: string;
  buttonText?: string;
  showCloseButton?: boolean;
  showCancelButton?: boolean;
  addNewOption?: boolean;
  skipSaveToAPI?: boolean;
  name?: string;
  buttonClass?: string;
  noResultsText?: string;
  buttonVariant?:
    | "primary"
    | "secondary"
    | "outline"
    | "ghost"
    | "link"
    | "success"
    | "warning"
    | "danger"
    | "loading"
    | "disabled"
    | "selected"
    | "anchor";
}

const {
  id,
  title,
  options = [],
  selectedValue = "",
  placeholder = "Select an option",
  buttonText,
  showCloseButton = true,
  showCancelButton = true,
  addNewOption = false,
  skipSaveToAPI = false,
  name = id,
  buttonClass = "",
  noResultsText = "No results found",
  buttonVariant = "primary",
} = Astro.props;

// Convert options to array if needed
const optionsArray = Array.isArray(options) ? options : [];

// Get selected option
const selectedOption = optionsArray.find((option) => option.value === selectedValue);
const displayText = buttonText || selectedOption?.label || placeholder;
---

<div class="slot-machine-container">
  <!-- Trigger Button -->
  <Button
    id={id}
    variant={buttonVariant}
    class={`slot-machine-trigger ${buttonClass}`}
    icon="chevron-down"
    iconPosition="right"
  >
    {displayText}
  </Button>

  <!-- Hidden Input for Form Integration -->
  <input type="hidden" id={`${id}-value`} name={name} value={selectedValue} />

  <!-- Modal -->
  <div id={`${id}-modal`} class="slot-machine-modal hidden" data-modal-backdrop={`${id}-modal`}>
    <div class="slot-machine-modal-content">
      <!-- Modal Header -->
      <div class="slot-machine-modal-header">
        <h3 class="slot-machine-modal-project-title">{title}</h3>
        {
          showCloseButton && (
            <button type="button" class="slot-machine-close-btn" data-modal-hide={`${id}-modal`}>
              <BoxIcon name="x" />
            </button>
          )
        }
      </div>

      <!-- Modal Body -->
      <div class="slot-machine-modal-body">
        <ul class="slot-machine-options" id={`${id}-options`}>
          {
            optionsArray.map((option, index) => (
              <li
                class={`slot-machine-item ${option.disabled ? "disabled" : ""} ${selectedValue === option.value ? "selected" : ""}`}
                data-value={option.value}
                data-label={option.label}
                data-index={index}
              >
                {option.label}
              </li>
            ))
          }
        </ul>
      </div>

      <!-- Modal Footer -->
      <div class="slot-machine-modal-footer">
        {
          showCancelButton && (
            <Button variant="secondary" data-modal-hide={`${id}-modal`}>
              Cancel
            </Button>
          )
        }
        {
          addNewOption && (
            <Button variant="outline" class="add-new-option-btn">
              Add New Option
            </Button>
          )
        }
      </div>
    </div>
  </div>
</div>

<script
  define:vars={{
    id,
    title,
    options: optionsArray,
    selectedValue,
    showCloseButton,
    showCancelButton,
    skipSaveToAPI,
  }}
>
  // Simplified SlotMachine Class
  class SlotMachine {
    constructor(config) {
      this.id = config.id;
      this.title = config.title;
      this.options = config.options || [];
      this.selectedValue = config.selectedValue || "";
      this.skipSaveToAPI = config.skipSaveToAPI || false;

      this.trigger = null;
      this.modal = null;
      this.optionsList = null;
      this.hiddenInput = null;

      this.init();
    }

    init() {
      this.trigger = document.getElementById(this.id);
      this.modal = document.getElementById(`${this.id}-modal`);
      this.optionsList = document.getElementById(`${this.id}-options`);
      this.hiddenInput = document.getElementById(`${this.id}-value`);

      if (!this.trigger || !this.modal) {
        console.error(`[SLOT-MACHINE] Required elements not found for ${this.id}`);
        return;
      }

      this.setupEventListeners();
      this.renderOptions();
    }

    setupEventListeners() {
      // Trigger button click
      this.trigger.addEventListener("click", () => {
        this.openModal();
      });

      // Modal backdrop click
      this.modal.addEventListener("click", (e) => {
        if (e.target === this.modal) {
          this.closeModal();
        }
      });

      // Close button
      const closeBtn = this.modal.querySelector(".slot-machine-close-btn");
      if (closeBtn) {
        closeBtn.addEventListener("click", () => {
          this.closeModal();
        });
      }

      // Cancel button
      const cancelBtn = this.modal.querySelector("[data-modal-hide]");
      if (cancelBtn) {
        cancelBtn.addEventListener("click", () => {
          this.closeModal();
        });
      }
    }

    renderOptions() {
      if (!this.optionsList) return;

      this.optionsList.innerHTML = "";

      this.options.forEach((option, index) => {
        const li = document.createElement("li");
        li.className = `slot-machine-item ${option.disabled ? "disabled" : ""} ${this.selectedValue === option.value ? "selected" : ""}`;
        li.dataset.value = option.value;
        li.dataset.label = option.label;
        li.dataset.index = index;
        li.textContent = option.label;

        if (!option.disabled) {
          li.addEventListener("click", () => {
            this.selectOption(option);
          });
        }

        this.optionsList.appendChild(li);
      });
    }

    openModal() {
      this.modal.classList.remove("hidden");
      document.body.style.overflow = "hidden";
    }

    closeModal() {
      this.modal.classList.add("hidden");
      document.body.style.overflow = "";
    }

    selectOption(option) {
      this.selectedValue = option.value;
      this.updateUI(option);
      this.closeModal();

      // Trigger change event
      this.triggerChangeEvent(option);
    }

    updateUI(option) {
      // Update trigger button text
      this.trigger.textContent = option.label;

      // Update hidden input
      if (this.hiddenInput) {
        this.hiddenInput.value = option.value;
      }

      // Update selected state in options
      this.optionsList.querySelectorAll(".slot-machine-item").forEach((item) => {
        item.classList.remove("selected");
        if (item.dataset.value === option.value) {
          item.classList.add("selected");
        }
      });
    }

    triggerChangeEvent(option) {
      const event = new CustomEvent("slotMachineChange", {
        detail: {
          id: this.id,
          value: option.value,
          label: option.label,
          option: option,
        },
        bubbles: true,
      });

      this.trigger.dispatchEvent(event);
    }

    // Public methods
    getSelectedValue() {
      return this.selectedValue;
    }

    setSelectedValue(value) {
      const option = this.options.find((opt) => opt.value === value);
      if (option) {
        this.selectOption(option);
      }
    }

    updateOptions(newOptions) {
      this.options = newOptions;
      this.renderOptions();
    }
  }

  // Initialize the slot machine
  document.addEventListener("DOMContentLoaded", function () {
    const slotMachine = new SlotMachine({
      id,
      title,
      options: optionsArray,
      selectedValue,
      skipSaveToAPI,
    });

    // Store reference globally for external access
    window[`slotMachine_${id}`] = slotMachine;
  });
</script>

<style>
  .slot-machine-container {
    position: relative;
  }

  .slot-machine-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .slot-machine-modal.hidden {
    display: none;
  }

  .slot-machine-modal-content {
    background: white;
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow: hidden;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }

  .slot-machine-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .slot-machine-modal-project-title {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .slot-machine-close-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
  }

  .slot-machine-close-btn:hover {
    background: #f3f4f6;
  }

  .slot-machine-modal-body {
    padding: 1rem;
    max-height: 400px;
    overflow-y: auto;
  }

  .slot-machine-options {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .slot-machine-item {
    padding: 0.75rem 1rem;
    cursor: pointer;
    border-radius: 4px;
    margin-bottom: 0.25rem;
    transition: background-color 0.2s;
  }

  .slot-machine-item:hover {
    background: #f3f4f6;
  }

  .slot-machine-item.selected {
    background: #3b82f6;
    color: white;
  }

  .slot-machine-item.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .slot-machine-modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    padding: 1rem;
    border-top: 1px solid #e5e7eb;
  }

  /* Dark mode support */
  .dark .slot-machine-modal-content {
    background: #1f2937;
    color: white;
  }

  .dark .slot-machine-modal-header {
    border-bottom-color: #374151;
  }

  .dark .slot-machine-modal-footer {
    border-top-color: #374151;
  }

  .dark .slot-machine-item:hover {
    background: #374151;
  }

  .dark .slot-machine-close-btn:hover {
    background: #374151;
  }
</style>
