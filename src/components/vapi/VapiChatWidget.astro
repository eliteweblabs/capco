---
/**
 * VAPI Chat Widget with Interactive Time Slot Buttons
 * Displays clickable appointment times when assistant returns availability
 */

interface Props {
  assistantId?: string;
  publicKey?: string;
}

const {
  assistantId = "3ae002d5-fe9c-4870-8034-4c66a9b43b51",
  publicKey = import.meta.env.PUBLIC_VAPI_PUBLIC_KEY || "",
} = Astro.props;
---

<!-- VAPI Chat Interface -->
<div id="vapi-chat-widget" class="fixed bottom-6 right-6 z-50 flex flex-col items-end gap-4">
  <!-- Call Button -->
  <button
    id="vapi-call-btn"
    class="flex items-center gap-3 rounded-full bg-blue-600 px-6 py-4 text-white shadow-lg transition-all hover:bg-blue-700 hover:shadow-xl active:scale-95"
  >
    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
      ></path>
    </svg>
    <span id="vapi-call-btn-text">Schedule Appointment</span>
  </button>

  <!-- Response Buttons Container (hidden by default) -->
  <div
    id="vapi-response-buttons-container"
    class="hidden w-96 max-w-[90vw] rounded-lg bg-white p-6 shadow-2xl color-background"
  >
    <div class="mb-4 flex items-center justify-between">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">How can I help you?</h3>
      <button
        id="vapi-close-response-buttons"
        class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
      >
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <div id="vapi-response-buttons-grid" class="grid grid-cols-1 gap-3">
      <!-- Response buttons will be injected here -->
    </div>
  </div>

  <!-- Time Slots Container (hidden by default) -->
  <div
    id="vapi-time-slots-container"
    class="hidden w-96 max-w-[90vw] rounded-lg bg-white p-6 shadow-2xl color-background"
  >
    <div class="mb-4 flex items-center justify-between">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Select Appointment Time</h3>
      <button
        id="vapi-close-slots"
        class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
      >
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <div id="vapi-time-slots-grid" class="grid grid-cols-2 gap-2 max-h-96 overflow-y-auto">
      <!-- Time slot buttons will be injected here -->
    </div>
  </div>

  <!-- Call Status Indicator -->
  <div
    id="vapi-status-indicator"
    class="hidden rounded-full bg-gray-900 px-4 py-2 text-sm text-white dark:bg-gray-700"
  >
    <span id="vapi-status-text">Connecting...</span>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/@vapi-ai/web@latest/dist/vapi.js" is:inline></script>

<script
  define:vars={{ assistantId, publicKey }}
  data-vapi-assistant-id={assistantId}
  data-vapi-public-key={publicKey}
>
  // Initialize VAPI
  let vapi = null;
  let isCallActive = false;

  // Get DOM elements
  const callBtn = document.getElementById("vapi-call-btn");
  const callBtnText = document.getElementById("vapi-call-btn-text");
  const responseButtonsContainer = document.getElementById("vapi-response-buttons-container");
  const responseButtonsGrid = document.getElementById("vapi-response-buttons-grid");
  const closeResponseButtons = document.getElementById("vapi-close-response-buttons");
  const timeSlotsContainer = document.getElementById("vapi-time-slots-container");
  const timeSlotsGrid = document.getElementById("vapi-time-slots-grid");
  const closeSlots = document.getElementById("vapi-close-slots");
  const statusIndicator = document.getElementById("vapi-status-indicator");
  const statusText = document.getElementById("vapi-status-text");

  // Initialize VAPI on page load
  document.addEventListener("DOMContentLoaded", async () => {
    console.log("[VAPI-WIDGET] Initializing...");

    if (!publicKey) {
      console.error("[VAPI-WIDGET] Missing PUBLIC_VAPI_PUBLIC_KEY");
      callBtn.disabled = true;
      callBtnText.textContent = "VAPI Key Missing";
      return;
    }

    try {
      vapi = new window.Vapi(publicKey);
      console.log("[VAPI-WIDGET] VAPI initialized");

      // Set up event listeners
      setupVapiListeners();
      setupUIListeners();
    } catch (error) {
      console.error("[VAPI-WIDGET] Failed to initialize:", error);
      callBtn.disabled = true;
      callBtnText.textContent = "Initialization Error";
    }
  });

  // Set up VAPI event listeners
  function setupVapiListeners() {
    vapi.on("call-start", () => {
      console.log("[VAPI-WIDGET] Call started");
      isCallActive = true;
      callBtnText.textContent = "End Call";
      callBtn.classList.remove("bg-blue-600", "hover:bg-blue-700");
      callBtn.classList.add("bg-red-600", "hover:bg-red-700");
      showStatus("Connected");
      showResponseButtons();
    });

    vapi.on("call-end", () => {
      console.log("[VAPI-WIDGET] Call ended");
      isCallActive = false;
      callBtnText.textContent = "Schedule Appointment";
      callBtn.classList.remove("bg-red-600", "hover:bg-red-700");
      callBtn.classList.add("bg-blue-600", "hover:bg-blue-700");
      hideStatus();
      hideTimeSlots();
      hideResponseButtons();
    });

    vapi.on("speech-start", () => {
      console.log("[VAPI-WIDGET] Assistant speaking");
      showStatus("Assistant speaking...");
    });

    vapi.on("speech-end", () => {
      console.log("[VAPI-WIDGET] Assistant stopped speaking");
      showStatus("Listening...");
    });

    vapi.on("error", (error) => {
      console.error("[VAPI-WIDGET] Error:", error);
      showStatus("Error occurred", true);
      setTimeout(() => hideStatus(), 3000);
    });

    // Listen for tool call results (availability data)
    vapi.on("message", (message) => {
      console.log("[VAPI-WIDGET] Message:", message.type);

      if (message.type === "tool-calls-result") {
        console.log("[VAPI-WIDGET] Tool result:", message);
        handleToolResult(message);
      }
    });
  }

  // Set up UI event listeners
  function setupUIListeners() {
    callBtn.addEventListener("click", toggleCall);
    closeSlots.addEventListener("click", hideTimeSlots);
    closeResponseButtons.addEventListener("click", hideResponseButtons);
  }

  // Toggle call on/off
  async function toggleCall() {
    if (!vapi) {
      console.error("[VAPI-WIDGET] VAPI not initialized");
      return;
    }

    try {
      if (isCallActive) {
        console.log("[VAPI-WIDGET] Stopping call");
        vapi.stop();
      } else {
        console.log("[VAPI-WIDGET] Starting call with assistant:", assistantId);
        showStatus("Connecting...");
        await vapi.start(assistantId);
      }
    } catch (error) {
      console.error("[VAPI-WIDGET] Call error:", error);
      showStatus("Failed to connect", true);
      setTimeout(() => hideStatus(), 3000);
    }
  }

  // Handle tool call results (check for availability data)
  function handleToolResult(message) {
    // Check if this contains availability data
    const result = message.toolCallResult?.result || message.result;

    console.log("[VAPI-WIDGET] Tool result data:", result);

    if (result?.data?.slots && Array.isArray(result.data.slots)) {
      console.log("[VAPI-WIDGET] Found time slots:", result.data.slots.length);
      displayTimeSlots(result.data.slots);
    }
  }

  // Display time slot buttons
  function displayTimeSlots(slots) {
    console.log("[VAPI-WIDGET] Displaying", slots.length, "time slots");

    // Clear previous slots
    timeSlotsGrid.innerHTML = "";

    // Group slots by day for better UX
    const slotsByDay = {};
    slots.forEach((slot) => {
      const date = new Date(slot);
      const dayKey = date.toLocaleDateString("en-US", {
        weekday: "long",
        month: "long",
        day: "numeric",
        timeZone: "UTC",
      });

      if (!slotsByDay[dayKey]) {
        slotsByDay[dayKey] = [];
      }
      slotsByDay[dayKey].push(slot);
    });

    // Render slots grouped by day
    Object.entries(slotsByDay).forEach(([day, daySlots]) => {
      // Day header
      const dayHeader = document.createElement("div");
      dayHeader.className =
        "col-span-2 mt-4 first:mt-0 mb-2 text-sm font-semibold text-gray-700 dark:text-gray-300";
      dayHeader.textContent = day;
      timeSlotsGrid.appendChild(dayHeader);

      // Time buttons for this day
      daySlots.forEach((slot) => {
        const date = new Date(slot);
        const timeOnly = date.toLocaleTimeString("en-US", {
          hour: "numeric",
          minute: "2-digit",
          timeZone: "UTC",
        });

        const button = document.createElement("button");
        button.className =
          "rounded-lg border-2 border-blue-600 bg-blue-50 px-4 py-2 text-sm font-medium text-blue-600 transition-all hover:bg-blue-600 hover:text-white dark:bg-blue-900/20 dark:text-blue-400 dark:hover:bg-blue-600 dark:hover:text-white";
        button.textContent = timeOnly;
        button.onclick = () => selectTimeSlot(slot);

        timeSlotsGrid.appendChild(button);
      });
    });

    // Show the container
    timeSlotsContainer.classList.remove("hidden");
    showStatus("Select a time");
  }

  // Handle time slot selection
  function selectTimeSlot(slot) {
    const date = new Date(slot);
    const readableTime = date.toLocaleString("en-US", {
      weekday: "long",
      month: "long",
      day: "numeric",
      hour: "numeric",
      minute: "2-digit",
      timeZone: "UTC",
    });

    console.log("[VAPI-WIDGET] Selected time:", readableTime);

    // Send selection to assistant
    if (vapi) {
      vapi.send({
        type: "add-message",
        message: {
          role: "user",
          content: `I'd like to book the appointment for ${readableTime}`,
        },
      });
    }

    // Hide time slots
    hideTimeSlots();
    showStatus("Booking appointment...");
  }

  // Show status indicator
  function showStatus(text, isError = false) {
    statusText.textContent = text;
    statusIndicator.classList.remove("hidden");

    if (isError) {
      statusIndicator.classList.add("bg-red-600");
      statusIndicator.classList.remove("bg-gray-900", "dark:bg-gray-700");
    } else {
      statusIndicator.classList.remove("bg-red-600");
      statusIndicator.classList.add("bg-gray-900", "dark:bg-gray-700");
    }
  }

  // Hide status indicator
  function hideStatus() {
    statusIndicator.classList.add("hidden");
  }

  // Hide time slots
  function hideTimeSlots() {
    timeSlotsContainer.classList.add("hidden");
    timeSlotsGrid.innerHTML = "";
  }

  // Show response buttons
  function showResponseButtons() {
    console.log("[VAPI-WIDGET] Showing response buttons");

    // Clear previous buttons
    responseButtonsGrid.innerHTML = "";

    // Define common response options
    const responseOptions = [
      {
        text: "Schedule a Meeting",
        message: "I'd like to schedule a meeting or appointment",
        icon: "📅",
      },
      {
        text: "Check Available Times",
        message: "What times are available for appointments?",
        icon: "⏰",
      },
      {
        text: "Website Information",
        message: "Can you tell me about your website and services?",
        icon: "🌐",
      },
      {
        text: "General Help",
        message: "I need help with something else",
        icon: "❓",
      },
      {
        text: "Contact Information",
        message: "What's your contact information?",
        icon: "📞",
      },
    ];

    // Create buttons for each option
    responseOptions.forEach((option) => {
      const button = document.createElement("button");
      button.className =
        "flex items-center gap-3 rounded-lg border-2 border-blue-600 bg-blue-50 px-4 py-3 text-left text-sm font-medium text-blue-600 transition-all hover:bg-blue-600 hover:text-white dark:bg-blue-900/20 dark:text-blue-400 dark:hover:bg-blue-600 dark:hover:text-white";
      button.innerHTML = `
        <span class="text-lg">${option.icon}</span>
        <span>${option.text}</span>
      `;
      button.onclick = () => selectResponseOption(option.message);

      responseButtonsGrid.appendChild(button);
    });

    // Show the container
    responseButtonsContainer.classList.remove("hidden");
  }

  // Hide response buttons
  function hideResponseButtons() {
    responseButtonsContainer.classList.add("hidden");
    responseButtonsGrid.innerHTML = "";
  }

  // Handle response option selection
  function selectResponseOption(message) {
    console.log("[VAPI-WIDGET] Selected response:", message);

    // Send message to assistant
    if (vapi) {
      vapi.send({
        type: "add-message",
        message: {
          role: "user",
          content: message,
        },
      });
    }

    // Hide response buttons
    hideResponseButtons();
    showStatus("Processing your request...");
  }

  // Make functions available globally for inline onclick handlers
  window.selectTimeSlot = selectTimeSlot;
  window.selectResponseOption = selectResponseOption;
</script>

<style>
  /* Smooth animations */
  #vapi-response-buttons-container,
  #vapi-time-slots-container {
    animation: slideUp 0.3s ease-out;
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Scrollbar styling */
  #vapi-time-slots-grid::-webkit-scrollbar {
    width: 8px;
  }

  #vapi-time-slots-grid::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }

  #vapi-time-slots-grid::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
  }

  #vapi-time-slots-grid::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
</style>
