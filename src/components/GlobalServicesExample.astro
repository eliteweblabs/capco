---
// Example component showing how to use global services
import { formatTimeSinceUpdate } from "../lib/global-services";
// import ProjectFilter from "./ProjectFilter.astro";
import PushNotificationDemo from "./PushNotificationDemo.astro";
import PDFGenerator from "./PDFGenerator.astro";
import {
  generateCompleteFormHTML,
  BUTTON_GROUPS,
} from "../lib/project-form-config";
---

<div class="p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
  <h3 class="text-lg font-semibold mb-4">Global Services Demo</h3>

  <div class="space-y-4">
    <!-- Configuration Status -->
    <div
      id="config-status"
      class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-4"
    >
      <h4 class="font-medium text-yellow-800 dark:text-yellow-200 mb-2">
        üîç Checking Email Configuration...
      </h4>
      <p class="text-sm text-yellow-700 dark:text-yellow-300 mb-2">
        Verifying email service setup...
      </p>
    </div>

    <!-- Email Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Email Functions</h4>
      <div class="flex gap-2 flex-wrap">
        <button
          id="send-welcome-email"
          class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Send Welcome Email
        </button>
        <button
          id="send-notification-email"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Send Notification
        </button>
        <button
          id="send-custom-email"
          class="px-3 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
        >
          Send Custom Email
        </button>
      </div>
    </div>

    <!-- Project Management -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Project Management</h4>
      <div class="flex gap-2 flex-wrap mb-2">
        <button
          id="get-user-projects-btn"
          class="px-3 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600"
        >
          Get My Projects
        </button>
      </div>
    </div>

    <!-- Project Status Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Project Status Functions</h4>
      <div class="mb-3 p-3 bg-gray-50 dark:bg-gray-900 rounded">
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
          <span class="font-medium">Current Project ID:</span>
          <span
            id="current-project-id"
            class="font-mono text-blue-600 dark:text-blue-400">None</span
          >
        </p>
        <button
          id="create-test-project"
          class="px-3 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Create Test Project
        </button>
      </div>
      <div class="flex gap-2 flex-wrap">
        <button
          class="status-btn px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="20"
          data-label="Generate Proposal"
          data-action="proposal_generation"
          disabled
        >
          Generate Proposal
        </button>
        <button
          class="status-btn px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="30"
          data-label="Ship Proposal"
          data-action="proposal_shipped"
          disabled
        >
          Ship Proposal
        </button>
        <button
          class="status-btn px-3 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="50"
          data-label="Proposal Approved"
          data-action="proposal_approved"
          disabled
        >
          Proposal Approved
        </button>
        <button
          class="status-btn px-3 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="60"
          data-label="Generate Deposit Invoice"
          data-action="deposit_invoice_generation"
          disabled
        >
          Generate Deposit Invoice
        </button>
        <button
          class="status-btn px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="220"
          data-label="Mark Complete"
          data-action="project_complete"
          disabled
        >
          Mark Complete
        </button>
      </div>
    </div>

    <!-- Notification Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Notification Functions</h4>
      <div class="flex gap-2 flex-wrap">
        <button
          id="show-success"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Success Notification
        </button>
        <button
          id="show-error"
          class="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Error Notification
        </button>
        <button
          id="show-warning"
          class="px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600"
        >
          Warning Notification
        </button>
        <button
          id="show-info"
          class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Info Notification
        </button>
      </div>
    </div>

    <!-- File Upload -->
    <div>
      <h4 class="font-medium mb-2">File Upload Functions</h4>
      <input
        type="file"
        id="file-upload"
        multiple
        accept=".pdf"
        class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
      />
      <button
        id="upload-files"
        class="mt-2 px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Upload Files
      </button>
    </div>

    <!-- Event Log -->
    <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-900 rounded">
      <h4 class="font-medium mb-2">Event Log</h4>
      <div
        id="event-log"
        class="text-sm text-gray-600 dark:text-gray-400 max-h-40 overflow-y-auto"
      >
        <p>Events will appear here...</p>
      </div>
      <button
        id="clear-log"
        class="mt-2 px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
      >
        Clear Log
      </button>
    </div>
  </div>
</div>

<!-- Projects Display Section -->
<div class="mt-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
  <h3 class="text-lg font-semibold mb-4">My Projects</h3>

  <!-- Text Filter Input -->
  <div class="mb-4">
    <input
      type="text"
      id="project-search-input"
      placeholder="Filter projects... (type at least 2 characters)"
      class="w-full px-4 py-2 text-sm border border-gray-300 rounded-lg bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
    />
  </div>

  <!-- Projects List Container -->
  <div id="projects-list" class="mt-4">
    <!-- Projects will be populated here dynamically -->
  </div>
</div>

<!-- PDF Generator Container -->
<div class="mt-6">
  <!-- PDF generation will be handled by buttons in project cards -->
</div>

<!-- Push Notification Demo -->
<PushNotificationDemo />

<script>
  import {
    globalServices,
    PROJECT_STATUS,
    PROJECT_STATUS_LABELS,
    sendEmail,
    updateProjectStatus,
    showNotification,
    uploadFiles,
    createTestProject,
    useGlobalEvents,
    formatTimeSinceUpdate,
    type ProjectStatusCode,
  } from "../lib/global-services";

  // Current project ID and status - will be set when creating or selecting a project
  let currentProjectId: string | null = null;
  let currentProjectStatus: number | null = null;

  // Set up event logging
  const eventLog = document.getElementById("event-log")!;
  const { on } = useGlobalEvents();

  function logEvent(type: string, data: any) {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement("div");
    logEntry.className = "mb-1 p-2 bg-white dark:bg-gray-800 rounded text-xs";
    logEntry.innerHTML = `
      <span class="font-mono text-blue-600 dark:text-blue-400">[${timestamp}]</span>
      <span class="font-medium">${type}</span>
      <span class="text-gray-500">:</span>
      <span>${JSON.stringify(data, null, 2).substring(0, 100)}...</span>
    `;
    eventLog.appendChild(logEntry);
    eventLog.scrollTop = eventLog.scrollHeight;
  }

  // Listen to all global events
  const eventTypes = [
    "email:sending",
    "email:sent",
    "email:error",
    "project:status-updating",
    "project:status-updated",
    "project:status-error",
    "files:uploading",
    "files:uploaded",
    "files:error",
    "notification:show",
    "notification:hide",
  ];

  eventTypes.forEach((eventType) => {
    on(eventType, (data) => logEvent(eventType, data));
  });

  // Email functions
  document
    .getElementById("send-welcome-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "user@example.com",
          type: "welcome",
          variables: { name: "John Doe" },
        });
      } catch (error) {
        console.error("Failed to send welcome email:", error);

        // Show helpful error message
        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure EMAIL_PROVIDER and EMAIL_API_KEY environment variables. Check the console for details.",
          duration: 10000,
        });
      }
    });

  document
    .getElementById("send-notification-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "user@example.com",
          type: "notification",
          variables: {
            title: "Project Update",
            message: "Your project status has been updated successfully.",
          },
        });
      } catch (error) {
        console.error("Failed to send notification email:", error);

        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message: "Please set up Resend or SendGrid API credentials.",
          duration: 8000,
        });
      }
    });

  document
    .getElementById("send-custom-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "user@example.com",
          type: "custom",
          subject: "Custom Email Subject",
          html: "<h1>Hello!</h1><p>This is a custom email with <strong>HTML content</strong>.</p>",
          text: "Hello! This is a custom email with plain text content.",
        });
      } catch (error) {
        console.error("Failed to send custom email:", error);

        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure your email provider in environment variables.",
          duration: 8000,
        });
      }
    });

  // Helper function to enable/disable project buttons
  function updateProjectButtons(projectId: string | null = currentProjectId) {
    const projectIdSpan = document.getElementById("current-project-id");
    const statusButtons = document.querySelectorAll(
      ".status-btn"
    ) as NodeListOf<HTMLButtonElement>;

    if (projectId && projectIdSpan) {
      projectIdSpan.textContent = projectId;
      statusButtons.forEach((btn) => (btn.disabled = false));
    } else if (projectIdSpan) {
      projectIdSpan.textContent = "None";
      statusButtons.forEach((btn) => (btn.disabled = true));
    }

    // Update current status display
    const statusSpan = document.getElementById("current-project-status");
    if (statusSpan && currentProjectStatus !== null) {
      statusSpan.textContent = globalServices.getStatusLabel(
        currentProjectStatus as any
      );
    } else if (statusSpan) {
      statusSpan.textContent = "-";
    }
  }

  // Create test project function
  document
    .getElementById("create-test-project")
    ?.addEventListener("click", async () => {
      try {
        const project = await createTestProject();
        currentProjectId = project.id.toString();
        currentProjectStatus = project.status || PROJECT_STATUS.SPECS_RECEIVED;
        updateProjectButtons();
        logEvent("project:created", { projectId: project.id });
      } catch (error) {
        console.error("Failed to create test project:", error);
      }
    });

  // Project status functions
  // Unified status change handler
  async function handleStatusChange(
    newStatus: number,
    action: string,
    label: string
  ) {
    if (!currentProjectId) {
      showNotification({
        type: "warning",
        title: "No Project Selected",
        message: "Please create a test project first.",
        duration: 3000,
      });
      return;
    }

    try {
      // Base update data
      const updateData: any = {
        projectId: currentProjectId,
        status: newStatus,
        project: {
          updatedAt: new Date().toISOString(),
          action: action,
          previousStatus: currentProjectStatus,
        },
      };

      // Add action-specific data and trigger related processes
      switch (action) {
        case "proposal_generation":
          updateData.project = {
            ...updateData.project,
            startedAt: new Date().toISOString(),
          };
          // Trigger proposal generation process
          logEvent(
            `Starting proposal generation for project ${currentProjectId}`,
            { action, newStatus }
          );
          break;

        case "proposal_shipped":
          updateData.project = {
            ...updateData.project,
            shippedAt: new Date().toISOString(),
            shippedBy: "admin@example.com",
          };
          // Send email to client about proposal
          await sendClientNotificationEmail(
            currentProjectId,
            "proposal_shipped"
          );
          logEvent(`Proposal shipped for project ${currentProjectId}`, {
            action,
            newStatus,
          });
          break;

        case "proposal_approved":
          updateData.project = {
            ...updateData.project,
            approvedAt: new Date().toISOString(),
          };
          // Send confirmation email
          await sendClientNotificationEmail(
            currentProjectId,
            "proposal_approved"
          );
          logEvent(`Proposal approved for project ${currentProjectId}`, {
            action,
            newStatus,
          });
          break;

        case "deposit_invoice_generation":
          updateData.project = {
            ...updateData.project,
            invoiceGenerationStarted: new Date().toISOString(),
          };
          // Generate deposit invoice
          await generateInvoice(currentProjectId, "deposit");
          logEvent(
            `Generating deposit invoice for project ${currentProjectId}`,
            { action, newStatus }
          );
          break;

        case "project_complete":
          updateData.project = {
            ...updateData.project,
            completedAt: new Date().toISOString(),
            finalNotes: "Project completed successfully",
          };
          // Send completion emails to both client and admin
          await sendClientNotificationEmail(
            currentProjectId,
            "project_complete"
          );
          await sendAdminNotificationEmail(
            currentProjectId,
            "project_complete"
          );
          logEvent(`Project ${currentProjectId} marked as complete`, {
            action,
            newStatus,
          });
          break;

        default:
          logEvent(`Status updated for project ${currentProjectId}`, {
            action,
            newStatus,
          });
      }

      // Update the project status
      await updateProjectStatus(updateData);

      // Update current status for UI
      currentProjectStatus = newStatus;
      updateProjectButtons();

      showNotification({
        type: "success",
        title: "Status Updated",
        message: `${label} completed successfully`,
        duration: 3000,
      });
    } catch (error: unknown) {
      console.error(`Failed to ${action}:`, error);
      showNotification({
        type: "error",
        title: "Status Update Failed",
        message:
          (error as Error)?.message || `Failed to ${label.toLowerCase()}`,
        duration: 5000,
      });
    }
  }

  // Helper functions for different actions
  async function sendClientNotificationEmail(
    projectId: string,
    eventType: string
  ) {
    try {
      const emailTypes: Record<string, string> = {
        proposal_shipped: "notification",
        proposal_approved: "notification",
        project_complete: "notification",
      };

      if (emailTypes[eventType]) {
        await sendEmail({
          type: emailTypes[eventType] as any,
          to: "client@example.com", // Replace with actual client email
          subject: `Project ${projectId} Update: ${eventType.replace("_", " ")}`,
          variables: { projectId, eventType },
        });
        logEvent(`Client notification email sent`, { projectId, eventType });
      }
    } catch (error: unknown) {
      console.error("Failed to send client email:", error);
    }
  }

  async function sendAdminNotificationEmail(
    projectId: string,
    eventType: string
  ) {
    try {
      await sendEmail({
        type: "notification",
        to: "admin@example.com",
        subject: `Admin Notification: Project ${projectId} - ${eventType.replace("_", " ")}`,
        variables: { projectId, eventType, isAdminNotification: "true" },
      });
      logEvent(`Admin notification email sent`, { projectId, eventType });
    } catch (error) {
      console.error("Failed to send admin email:", error);
    }
  }

  async function generateInvoice(projectId: string, invoiceType: string) {
    try {
      // Mock invoice generation - replace with actual invoice API
      const invoiceData = {
        projectId,
        type: invoiceType,
        generatedAt: new Date().toISOString(),
        amount: invoiceType === "deposit" ? 1500 : 3500,
      };

      logEvent(`${invoiceType} invoice generated`, invoiceData);

      showNotification({
        type: "info",
        title: "Invoice Generated",
        message: `${invoiceType} invoice has been generated for project ${projectId}`,
        duration: 4000,
      });
    } catch (error: unknown) {
      console.error("Failed to generate invoice:", error);
    }
  }

  // Add event listeners to all status buttons
  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    if (target.classList.contains("status-btn")) {
      const newStatus = parseInt(target.dataset.newStatus || "0");
      const action = target.dataset.action || "";
      const label = target.dataset.label || "";

      handleStatusChange(newStatus, action, label);
    }
  });

  // Notification functions
  document.getElementById("show-success")?.addEventListener("click", () => {
    showNotification({
      type: "success",
      title: "Success!",
      message: "This is a success notification with auto-hide.",
      duration: 3000,
    });
  });

  document.getElementById("show-error")?.addEventListener("click", () => {
    showNotification({
      type: "error",
      title: "Error Occurred",
      message:
        "This is an error notification that stays until manually closed.",
      duration: 0, // Stays until manually closed
    });
  });

  document.getElementById("show-warning")?.addEventListener("click", () => {
    showNotification({
      type: "warning",
      title: "Warning",
      message: "This is a warning notification with actions.",
      duration: 8000,
      actions: [
        {
          label: "Retry",
          action: () => console.log("Retry clicked"),
        },
        {
          label: "Cancel",
          action: () => console.log("Cancel clicked"),
        },
      ],
    });
  });

  document.getElementById("show-info")?.addEventListener("click", () => {
    showNotification({
      type: "info",
      title: "Information",
      message: "This is an informational notification.",
      duration: 5000,
    });
  });

  // File upload functions
  // document
  //   .getElementById("upload-files")
  //   ?.addEventListener("click", async () => {
  //     const fileInput = document.getElementById(
  //       "file-upload"
  //     ) as HTMLInputElement;
  //     const files = fileInput.files;

  //     if (!files || files.length === 0) {
  //       showNotification({
  //         type: "warning",
  //         title: "No Files Selected",
  //         message: "Please select files to upload.",
  //         duration: 3000,
  //       });
  //       return;
  //     }

  //     try {
  //       await uploadFiles(files, currentProjectId || undefined);
  //       fileInput.value = ""; // Clear the input
  //     } catch (error) {
  //       console.error("Failed to upload files:", error);
  //     }
  //   });

  // Get user projects function
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      const projects = await globalServices.getUserProjects();
      displayUserProjects(projects);
      logEvent("projects:fetched", { count: projects.length });

      showNotification({
        type: "success",
        title: "Projects Loaded",
        message: `Found ${projects.length} project(s)`,
        duration: 3000,
      });
    } catch (error: unknown) {
      console.error("Failed to fetch user projects:", error);
      showNotification({
        type: "error",
        title: "Failed to Load Projects",
        message: (error as Error)?.message || "Could not fetch your projects",
        duration: 0, // Errors stay until manually dismissed
      });
    }
  });

  // Get user projects function
  document
    .getElementById("get-user-projects-btn")
    ?.addEventListener("click", async () => {
      try {
        const projects = await globalServices.getUserProjects();
        displayUserProjects(projects);
        logEvent("projects:fetched", { count: projects.length });

        showNotification({
          type: "success",
          title: "Projects Loaded",
          message: `Found ${projects.length} project(s)`,
          duration: 3000,
        });
      } catch (error: unknown) {
        console.error("Failed to fetch user projects:", error);
        showNotification({
          type: "error",
          title: "Failed to Load Projects",
          message: (error as Error)?.message || "Could not fetch your projects",
          duration: 0, // Errors stay until manually dismissed
        });
      }
    });

  // Function to display user projects in the projects list
  function displayUserProjects(projects: any[]) {
    const projectsList = document.getElementById("projects-list");
    if (!projectsList) return;

    if (projects.length === 0) {
      projectsList.innerHTML = `
        <div class="p-4 text-center text-gray-500 dark:text-gray-400">
          <p>No projects found</p>
          <p class="text-sm mt-1">Create a test project to see it listed here</p>
        </div>
      `;
      return;
    }

    // Generate accordion HTML for projects
    const accordionId = "projects-accordion";
    projectsList.innerHTML = `
      <div id="${accordionId}" data-accordion="collapse">
        ${projects
          .map((project, index) => {
            // Calculate time since last update
            const timeSinceUpdate = formatTimeSinceUpdate(
              project.updated_at || project.created
            );

            const isFirst = index === 0;
            const isLast = index === projects.length - 1;
            const projectTitle =
              project.address || project.title || `Project ${project.id}`;
            const projectDescription =
              project.description || "Project created from PDF upload";

            return `
              <!-- Accordion Item ${index} -->
              <div data-project-status="${project.status || 10}">
                <!-- Accordion Header -->
                <div id="accordion-collapse-heading-${index}" class="accordion-header">
                  <button
                    class="relative flex items-center justify-between w-full p-5 font-medium rtl:text-right text-gray-500 border ${isLast ? "" : "border-b-0"} ${isFirst ? "rounded-t-xl" : ""} border-gray-200 focus:ring-1 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 gap-3"
                    data-accordion-target="#accordion-collapse-body-${index}"
                    aria-expanded="false"
                    aria-controls="accordion-collapse-body-${index}"
                    type="button"
                  >
                    <!-- Project Icon -->
                    <div class="rounded-lg border size-9 flex items-center justify-center border-gray-600 dark:border-gray-500 dark:bg-gray-800 overflow-hidden text-white dark:text-gray-300 bg-gray-700">
                      <i class="bx bx-file-blank"></i>
                    </div>

                    <!-- Project Info -->
                    <div class="pl-4 flex flex-col justify-start flex-1 text-left">
                      <h2 class="font-medium text-base text-gray-800 dark:text-gray-200" data-search-text>
                        ${projectTitle}
                      </h2>
                  

                     
                      <div class="flex items-center gap-2 mt-1">
                           



                        <!-- Status badge -->
                        <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-cyan-600 text-white"  data-search-text>
                          ${PROJECT_STATUS_LABELS[(project.status || 10) as unknown as ProjectStatusCode] || "Unknown"}
                        </span>
                        <!-- Email/contact if available -->
                        ${
                          project.author_email &&
                          project.author_email !== "Unknown" &&
                          project.author_email !== "Unassigned"
                            ? `<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-600 text-white"  data-search-text>
                          ${project.author_email}
                        </span>`
                            : project.author_email === "Unassigned"
                              ? `<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-500 text-white">
                          Unassigned
                        </span>`
                              : ""
                        }
                              <i class="bx bx-time"></i>${timeSinceUpdate}

                      </div>
                    </div>

                    <!-- Accordion Arrow -->
                    <svg
                      data-accordion-icon
                      class="w-3 h-3 rotate-180 shrink-0"
                      aria-hidden="true"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 10 6"
                    >
                      <path
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5 5 1 1 5"></path>
                    </svg>
                  </button>
                </div>

                <!-- Accordion Body -->
                <div
                  id="accordion-collapse-body-${index}"
                  class="hidden"
                  aria-labelledby="accordion-collapse-heading-${index}"
                >
                                    <div class="p-5 border ${isLast ? "rounded-b-xl border-t-0" : "border-b-0"} border-gray-200 dark:border-gray-700 dark:bg-gray-900">
                    <!-- Project Edit Form -->
                    <form class="space-y-4" data-project-id="${project.id}">
                      <div class="project-form-container" data-project-index="${index}"></div>

                      <!-- Project Status -->
                      <div class="relative">
                        <label for="status-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Project Status</label>
                        <select
                          id="status-${index}"
                          name="status"
                          class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
                        >
                          ${Object.entries(PROJECT_STATUS_LABELS)
                            .map(
                              ([statusCode, statusLabel]) =>
                                `<option value="${statusCode}" ${project.status == statusCode ? "selected" : ""}>${statusLabel}</option>`
                            )
                            .join("")}
                        </select>
                      </div>

                      <!-- Project Metadata (readonly) -->
                      <div class="grid grid-cols-2 gap-4 pt-2 border-t border-gray-200 dark:border-gray-600">
                        <div>
                          <span class="text-xs text-gray-500 dark:text-gray-400">Project ID:</span>
                          <div class="text-sm text-gray-800 dark:text-gray-200">${project.id}</div>
                        </div>
                        <div>
                          <span class="text-xs text-gray-500 dark:text-gray-400">Last Updated:</span>
                          <div class="text-sm text-gray-800 dark:text-gray-200">${timeSinceUpdate}</div>
                        </div>
                        <div>
                          <span class="text-xs text-gray-500 dark:text-gray-400">Author:</span>
                          <div class="text-sm text-gray-800 dark:text-gray-200">${project.author_email || "Unassigned"}</div>
                        </div>
                        <div>
                          <span class="text-xs text-gray-500 dark:text-gray-400">Created:</span>
                          <div class="text-sm text-gray-800 dark:text-gray-200">${new Date(project.created || project.created_at).toLocaleDateString()}</div>
                        </div>
                      </div>

                      <!-- Action Buttons -->
                      <div class="flex flex-wrap gap-2 pt-4 border-t border-gray-200 dark:border-gray-600">
                        <button 
                          type="submit"
                          class="px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 transition-colors"
                        >
                          <i class="bx bx-save mr-1"></i>
                          Save Changes
                        </button>
                       
                        <button 
                          type="button"
                          class="px-4 py-2 bg-gray-600 text-white text-sm font-medium rounded-lg hover:bg-gray-700 transition-colors"
                          onclick="resetProjectForm('${project.id}')"
                        >
                          <i class="bx bx-refresh mr-1"></i>
                          Reset
                        </button>
                        
                        <button 
                          type="button"
                          class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors pdf-generate-btn"
                          data-project-id="${project.id}"
                          data-template-type="project-agreement"
                          data-project-data='${JSON.stringify({
                            title: project.title || project.address,
                            address: project.address,
                            owner: project.owner,
                            architect: project.architect,
                            description: project.description,
                            sq_ft: project.sq_ft,
                            status:
                              PROJECT_STATUS_LABELS[
                                (project.status ||
                                  10) as unknown as ProjectStatusCode
                              ] || "Unknown",
                          }).replace(/'/g, "&#39;")}'
                        >
                          <i class="bx bx-file-pdf mr-1"></i>
                          Generate PDF
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            `;
          })
          .join("")}
      </div>
    `;

    // Initialize accordion functionality
    setTimeout(() => {
      initializeAccordion(accordionId);
      initializeButtonGroups(accordionId);
      populateFormContainers(projects);
    }, 100);

    // Show the project filter after projects are loaded
    if ((window as any).projectFilter) {
      (window as any).projectFilter.show();
      (window as any).projectFilter.updateCountBubbles();
      (window as any).projectFilter.updateProjectCount();
    }

    // Initialize text filter functionality
    initializeTextFilter(accordionId);
  }

  // Function to load a project from the list
  (window as any).loadProject = function (projectId: string, status: number) {
    currentProjectId = projectId;
    currentProjectStatus = status;
    updateProjectButtons();

    showNotification({
      type: "info",
      title: "Project Loaded",
      message: `Project ${projectId} is now active`,
      duration: 3000,
    });

    logEvent("project:loaded", { projectId, status });
  };

  // Function to view project details (placeholder for future implementation)
  (window as any).viewProjectDetails = function (projectId: string) {
    showNotification({
      type: "info",
      title: "Project Details",
      message: `Viewing details for project ${projectId}`,
      duration: 3000,
    });

    logEvent("project:details-viewed", { projectId });
  };

  // Function to initialize accordion functionality
  function initializeAccordion(accordionId: string) {
    const accordionElement = document.getElementById(accordionId);
    if (!accordionElement) return;

    // Find all accordion buttons
    const buttons = accordionElement.querySelectorAll(
      "[data-accordion-target]"
    );

    buttons.forEach((button) => {
      button.addEventListener("click", function (this: HTMLElement) {
        const targetId = this.getAttribute("data-accordion-target");
        const targetElement = document.querySelector(targetId as string);
        const icon = this.querySelector("[data-accordion-icon]");

        if (!targetElement) return;

        // Check if this accordion is currently open
        const isOpen = !targetElement.classList.contains("hidden");

        if (isOpen) {
          // Close this accordion
          targetElement.classList.add("hidden");
          this.setAttribute("aria-expanded", "false");
          // Remove sticky class from header
          const header = this.closest(".accordion-header");
          if (header) {
            header.classList.remove(
              "sticky",
              "top-16",
              "z-20",
              "bg-white",
              "dark:bg-gray-800"
            );
          }
          if (icon) {
            icon.classList.add("rotate-180");
          }
        } else {
          // Close all other accordions first (optional - remove if you want multiple open)
          buttons.forEach((otherButton) => {
            if (otherButton !== this) {
              const otherTargetId = otherButton.getAttribute(
                "data-accordion-target"
              );
              const otherTarget = document.querySelector(
                otherTargetId as string
              );
              const otherIcon = otherButton.querySelector(
                "[data-accordion-icon]"
              );

              if (otherTarget && !otherTarget.classList.contains("hidden")) {
                otherTarget.classList.add("hidden");
                (otherButton as HTMLElement).setAttribute(
                  "aria-expanded",
                  "false"
                );
                // Remove sticky class from other headers
                const otherHeader = otherButton.closest(".accordion-header");
                if (otherHeader) {
                  otherHeader.classList.remove(
                    "sticky",
                    "top-16",
                    "z-20",
                    "bg-white",
                    "dark:bg-gray-800"
                  );
                }
                if (otherIcon) {
                  otherIcon.classList.add("rotate-180");
                }
              }
            }
          });

          // Open this accordion
          targetElement.classList.remove("hidden");
          this.setAttribute("aria-expanded", "true");
          // Add sticky class to header when opened
          const header = this.closest(".accordion-header");
          if (header) {
            header.classList.add(
              "sticky",
              "top-16",
              "z-20",
              "bg-white",
              "dark:bg-gray-800"
            );
          }
          if (icon) {
            icon.classList.remove("rotate-180");
          }
        }
      });
    });

    console.log(`Initialized accordion with ${buttons.length} items`);
  }

  // Function to initialize button group functionality
  function initializeButtonGroups(accordionId: string) {
    const accordionElement = document.getElementById(accordionId);
    if (!accordionElement) return;

    // Handle button group clicks
    accordionElement.addEventListener("click", (e) => {
      const button = (e.target as HTMLElement).closest(
        ".building-type-radio, .consulting-service-btn, .fire-service-radio, .fire-safety-service-btn"
      );
      if (!button) return;

      e.preventDefault();

      const value = (button as HTMLElement).dataset.value;
      const group = (button as HTMLElement).dataset.group;
      const type = (button as HTMLElement).dataset.type;

      if (!value || !group || !type) return;

      if (type === "radio") {
        // Single select - clear all other buttons in this group
        const groupButtons = accordionElement.querySelectorAll(
          `[data-group="${group}"]`
        );
        groupButtons.forEach((btn) => {
          btn.classList.remove("bg-blue-500", "text-white", "border-blue-500");
          btn.classList.add(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );
        });

        // Set this button as selected
        button.classList.add("bg-blue-500", "text-white", "border-blue-500");
        button.classList.remove(
          "bg-white",
          "dark:bg-gray-700",
          "text-gray-700",
          "dark:text-gray-300",
          "border-gray-300",
          "dark:border-gray-600"
        );

        // Store the value for form submission
        (button as any)._selectedValue = value;
      } else if (type === "multi-select") {
        // Multi-select - toggle this button
        const isSelected = button.classList.contains("bg-blue-500");

        if (isSelected) {
          // Deselect
          button.classList.remove(
            "bg-blue-500",
            "text-white",
            "border-blue-500"
          );
          button.classList.add(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );
          (button as any)._selectedValue = null;
        } else {
          // Select
          button.classList.add("bg-blue-500", "text-white", "border-blue-500");
          button.classList.remove(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );
          (button as any)._selectedValue = value;
        }
      }
    });

    console.log("Initialized button groups for accordion");
  }

  // Function to initialize text filter functionality
  function initializeTextFilter(accordionId: string) {
    const searchInput = document.getElementById(
      "project-search-input"
    ) as HTMLInputElement;
    const accordionElement = document.getElementById(accordionId);

    if (!searchInput || !accordionElement) return;

    let debounceTimer: ReturnType<typeof setTimeout>;

    searchInput.addEventListener("input", (e) => {
      clearTimeout(debounceTimer);

      debounceTimer = setTimeout(() => {
        const searchTerm = (e.target as HTMLInputElement).value
          .trim()
          .toLowerCase();

        // Only filter if search term has 2 or more characters, or if it's empty (show all)
        if (searchTerm.length === 0 || searchTerm.length >= 0) {
          filterAccordionItems(accordionId, searchTerm);
        }
      }, 300); // Small debounce delay for better performance
    });

    console.log("Initialized text filter for accordion");
  }

  // Function to filter accordion items based on search term
  function filterAccordionItems(accordionId: string, searchTerm: string) {
    const accordionElement = document.getElementById(accordionId);
    if (!accordionElement) return;

    const accordionItems = accordionElement.querySelectorAll(
      "[data-project-status]"
    );
    let visibleCount = 0;

    accordionItems.forEach((item) => {
      const htmlItem = item as HTMLElement;

      if (searchTerm === "") {
        // Show all items when search is empty
        htmlItem.style.display = "block";
        visibleCount++;
      } else {
        // Get all text content from the accordion item
        const textContent =
          htmlItem
            .querySelector("[data-search-text]")
            ?.textContent?.toLowerCase() || "";

        // Check if the search term is found in the text content
        if (textContent.includes(searchTerm)) {
          htmlItem.style.display = "block";
          visibleCount++;
        } else {
          htmlItem.style.display = "none";
        }
      }
    });

    // Update the search input placeholder with results count
    const searchInput = document.getElementById(
      "project-search-input"
    ) as HTMLInputElement;
    if (searchInput && searchTerm !== "") {
      searchInput.placeholder = `Showing ${visibleCount} of ${accordionItems.length} projects`;
    } else if (searchInput) {
      searchInput.placeholder = "Filter projects...";
    }

    console.log(
      `Text filter applied: "${searchTerm}" - ${visibleCount}/${accordionItems.length} items visible`
    );
  }

  // Helper function to convert units value to slider position
  function getSliderValue(units: number): number {
    const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
    const index = values.indexOf(units);
    return index >= 0 ? index : 0;
  }

  // Function to reset project form to original values
  (window as any).resetProjectForm = function (projectId: string) {
    const form = document.querySelector(
      `form[data-project-id="${projectId}"]`
    ) as HTMLFormElement;
    if (!form) return;

    // Find the original project data and repopulate
    showNotification({
      type: "info",
      title: "Form Reset",
      message: `Form reset to original values for project ${projectId}`,
      duration: 2000,
    });

    // You could implement actual reset logic here by re-fetching project data
    logEvent("project:form-reset", { projectId });
  };

  // Function to handle form submission
  function setupFormHandlers() {
    // Use event delegation for dynamically created forms
    document.addEventListener("submit", async (e) => {
      const form = e.target as HTMLFormElement;
      if (!form.matches("form[data-project-id]")) return;

      e.preventDefault();
      const projectId = form.dataset.projectId;

      try {
        // Collect form data
        const formData = new FormData(form);
        const projectData: any = {};

        for (const [key, value] of formData.entries()) {
          if (key === "new_construction") {
            projectData[key] = true; // Checkbox is checked
          } else if (key === "sq_ft" || key === "units" || key === "status") {
            projectData[key] = parseInt(value as string) || 0;
          } else {
            projectData[key] = value;
          }
        }

        // Handle unchecked checkbox
        if (!formData.has("new_construction")) {
          projectData.new_construction = false;
        }

        // Convert units slider to actual value
        const unitsSlider = form.querySelector(
          `input[name="units"]`
        ) as HTMLInputElement;
        if (unitsSlider) {
          const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
          const sliderIndex = parseInt(unitsSlider.value);
          projectData.units = values[sliderIndex] || 1;
        }

        // Collect button group data
        const buttonGroups = [
          "building",
          "project",
          "service",
          "requested_docs",
        ];

        buttonGroups.forEach((groupName) => {
          const groupButtons = form.querySelectorAll(
            `[data-group="${groupName}"]`
          );
          const groupType =
            groupButtons.length > 0
              ? (groupButtons[0] as HTMLElement).dataset.type
              : null;

          if (groupType === "radio") {
            // Single select - find the selected button
            const selectedButton = Array.from(groupButtons).find((btn) =>
              btn.classList.contains("bg-blue-500")
            );
            if (selectedButton) {
              projectData[groupName] = (
                selectedButton as HTMLElement
              ).dataset.value;
            }
          } else if (groupType === "multi-select") {
            // Multi-select - collect all selected buttons
            const selectedButtons = Array.from(groupButtons).filter((btn) =>
              btn.classList.contains("bg-blue-500")
            );
            if (selectedButtons.length > 0) {
              projectData[groupName] = selectedButtons.map(
                (btn) => (btn as HTMLElement).dataset.value
              );
            }
          }
        });

        console.log("Saving project data:", projectData);

        // Make API call to update project
        const requestPayload = {
          projectId,
          ...projectData,
        };
        console.log("Sending to API:", requestPayload);

        const response = await fetch("/api/update-project-status", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(requestPayload),
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error("API Error Response:", errorText);
          try {
            const errorJson = JSON.parse(errorText);
            throw new Error(`API Error: ${errorJson.error || "Unknown error"}`);
          } catch {
            throw new Error(
              `HTTP error! status: ${response.status} - ${errorText}`
            );
          }
        }

        const result = await response.json();
        console.log("API Response:", result);

        showNotification({
          type: "success",
          title: "Project Updated",
          message: `Project ${projectId} has been successfully updated`,
          duration: 3000,
        });

        logEvent("project:updated", { projectId, changes: projectData });

        // Refresh project list to show updated data
        setTimeout(() => {
          document.getElementById("get-projects")?.click();
        }, 1000);
      } catch (error: unknown) {
        console.error("Error updating project:", error);
        showNotification({
          type: "error",
          title: "Update Failed",
          message: (error as Error)?.message || "Could not update project",
          duration: 0,
        });
      }
    });

    // Handle units slider changes
    document.addEventListener("input", (e) => {
      const slider = e.target as HTMLInputElement;
      if (!slider.matches('input[name="units"]')) return;

      const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
      const sliderIndex = parseInt(slider.value);
      const actualValue = values[sliderIndex] || 1;

      const projectIndex = slider.dataset.projectIndex;
      const valueDisplay = document.getElementById(
        `units-value-${projectIndex}`
      );
      if (valueDisplay) {
        valueDisplay.textContent = actualValue.toString();
      }
    });
  }

  // Initialize form handlers
  setupFormHandlers();

  // Function to populate form containers with generated HTML
  function populateFormContainers(projects: any[]) {
    projects.forEach((project, index) => {
      const container = document.querySelector(
        `[data-project-index="${index}"]`
      ) as HTMLElement;
      if (container && (window as any).generateCompleteFormHTML) {
        container.innerHTML = (window as any).generateCompleteFormHTML(
          index,
          project
        );
      }
    });
  }

  // Make generateCompleteFormHTML available globally for template use
  (window as any).generateCompleteFormHTML = function (
    index: number,
    projectData: any
  ) {
    // Project form fields configuration (inline for template access)
    const coreFieldsHTML = `
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="relative">
          <label for="address-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address / Title *</label>
          <input type="text" id="address-${index}" name="address" value="${projectData.address || projectData.title || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Address / Title *" required>
        </div>
        <div class="relative">
          <label for="owner-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Owner *</label>
          <input type="text" id="owner-${index}" name="owner" value="${projectData.owner || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Owner *" required>
        </div>
        <div class="relative">
          <label for="architect-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Architect</label>
          <input type="text" id="architect-${index}" name="architect" value="${projectData.architect || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Architect">
        </div>
        <div class="relative">
          <label for="sq-ft-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Square Footage *</label>
          <input type="number" id="sq-ft-${index}" name="sq_ft" value="${projectData.sq_ft || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Gross Square Footage (GFA) *" min="0" max="50000" step="1" required>
        </div>
      </div>
    `;

    const descriptionHTML = `
      <div class="relative">
        <label for="description-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</label>
        <textarea id="description-${index}" name="description" rows="3" 
          class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
          placeholder="Project description...">${projectData.description || ""}</textarea>
      </div>
    `;

    const sliderValue = getSliderValue(projectData.units || 1);
    const constructionAndUnitsHTML = `
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Construction Type</label>
          <div class="flex gap-4">
            <label class="inline-flex items-center cursor-pointer">
              <input type="checkbox" id="new-construction-${index}" name="new_construction" ${projectData.new_construction ? "checked" : ""} class="sr-only peer">
              <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 dark:peer-checked:bg-blue-600"></div>
              <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">New Construction</span>
            </label>
          </div>
        </div>
        <div>
          <label for="units-slider-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Units: <span id="units-value-${index}" class="font-semibold text-blue-600 dark:text-blue-400">${projectData.units || 1}</span>
          </label>
          <div class="relative">
            <input type="range" id="units-slider-${index}" name="units" min="0" max="14" value="${sliderValue}" 
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 units-range-slider relative z-10" 
              data-values="1,2,3,4,5,6,7,8,9,10,15,20,30,40,50" data-project-index="${index}">
            <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span>1</span><span>5</span><span>10</span><span>30</span><span>50</span>
            </div>
          </div>
        </div>
      </div>
    `;

    // Button groups
    const buttonGroupsHTML = [
      {
        name: "building",
        label: "Building",
        type: "radio",
        cssClass: "building-type-radio",
        options: [
          "Residential",
          "Mixed use",
          "Mercantile",
          "Commercial",
          "Storage",
          "Warehouse",
          "Institutional",
        ],
      },
      {
        name: "project",
        label: "Project",
        type: "multi-select",
        cssClass: "consulting-service-btn",
        options: [
          "Sprinkler",
          "Alarm",
          "Mechanical",
          "Electrical",
          "Plumbing",
          "Civil engineering",
          "Other",
        ],
      },
      {
        name: "service",
        label: "Supply / Service",
        type: "radio",
        cssClass: "fire-service-radio",
        options: [
          "Pump & Tank",
          "2' copper",
          "4' Ductile",
          "6' Ductile",
          "Unknown",
        ],
      },
      {
        name: "requested_docs",
        label: "Reports Required",
        type: "multi-select",
        cssClass: "fire-safety-service-btn",
        options: ["Sprinkler", "Alarm", "NFPA 241", "IEBC", "IBC"],
      },
    ]
      .map((group) => {
        const selectedValues = projectData[group.name]
          ? Array.isArray(projectData[group.name])
            ? projectData[group.name]
            : [projectData[group.name]]
          : [];

        return `
        <div class="space-y-3">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">${group.label}</label>
          <div class="flex flex-wrap gap-2">
            ${group.options
              .map((option) => {
                const isSelected = selectedValues.includes(option);
                return `
                <button type="button" 
                  class="${group.cssClass} px-3 py-2 text-sm rounded-full border transition-colors ${isSelected ? "bg-blue-500 text-white border-blue-500" : "border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600"}" 
                  data-value="${option}" data-group="${group.name}" data-type="${group.type}">
                  ${option}
                </button>
              `;
              })
              .join("")}
          </div>
        </div>
      `;
      })
      .join("");

    return (
      coreFieldsHTML +
      descriptionHTML +
      constructionAndUnitsHTML +
      buttonGroupsHTML
    );
  };

  // Clear log function
  document.getElementById("clear-log")?.addEventListener("click", () => {
    eventLog.innerHTML = "<p>Events will appear here...</p>";
  });

  // Check email configuration on load
  async function checkEmailConfiguration() {
    const configStatus = document.getElementById("config-status");
    if (!configStatus) return;

    try {
      const response = await fetch("/api/send-email");
      const result = await response.json();

      if (result.configured && result.verification === "OK") {
        // Email is properly configured
        configStatus.className =
          "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4 mb-4";
        configStatus.innerHTML = `
          <h4 class="font-medium text-green-800 dark:text-green-200 mb-2">
            ‚úÖ Email Configuration Active
          </h4>
          <p class="text-sm text-green-700 dark:text-green-300">
            Email service is configured and ready. All email functions should work!
          </p>
        `;
      } else {
        throw new Error("Email not configured");
      }
    } catch (error) {
      // Keep the existing warning banner
      console.log("Email configuration check failed:", error);
    }
  }

  // PDF Generation Handler
  function handlePDFGeneration(
    projectId: string,
    templateType: string,
    projectData: any
  ) {
    const templateUrl = buildTemplateUrl(templateType, projectId, projectData);

    // Open template page for signature collection and PDF generation
    const signatureWindow = window.open(
      templateUrl,
      "pdf-signature",
      "width=1200,height=800,scrollbars=yes,resizable=yes"
    );

    if (!signatureWindow) {
      if ((window as any).globalServices) {
        (window as any).globalServices.showNotification({
          type: "error",
          title: "Popup Blocked",
          message: "Please allow popups to generate PDF documents.",
          duration: 0,
        });
      }
      return;
    }

    if ((window as any).globalServices) {
      (window as any).globalServices.showNotification({
        type: "info",
        title: "PDF Generation",
        message:
          "Please complete signatures in the new window to generate PDF.",
        duration: 5000,
      });
    }
  }

  function buildTemplateUrl(
    templateType: string,
    projectId: string,
    projectData: any
  ) {
    const baseUrl = new URL(`/pdf/${templateType}`, window.location.origin);

    if (projectId) {
      baseUrl.searchParams.set("projectId", projectId);
    }

    // Add project data as URL parameters
    Object.entries(projectData).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        baseUrl.searchParams.set(key, String(value));
      }
    });

    return baseUrl.toString();
  }

  // Initialize configuration check
  document.addEventListener("DOMContentLoaded", () => {
    checkEmailConfiguration();

    // Set up PDF generation event listener
    document.addEventListener("click", (event) => {
      const btn = (event.target as HTMLElement)?.closest(
        ".pdf-generate-btn"
      ) as HTMLElement;
      if (btn) {
        event.preventDefault();
        const projectId = btn.dataset.projectId || "";
        const templateType = btn.dataset.templateType || "project-agreement";
        const projectData = JSON.parse(btn.dataset.projectData || "{}");

        if (projectId) {
          handlePDFGeneration(projectId, templateType, projectData);
        }
      }
    });
  });
</script>
