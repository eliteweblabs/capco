---
// Example component showing how to use global services
---

<div class="p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
  <h3 class="text-lg font-semibold mb-4">Global Services Demo</h3>

  <div class="space-y-4">
    <!-- Configuration Status -->
    <div
      id="config-status"
      class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-4"
    >
      <h4 class="font-medium text-yellow-800 dark:text-yellow-200 mb-2">
        üîç Checking Email Configuration...
      </h4>
      <p class="text-sm text-yellow-700 dark:text-yellow-300 mb-2">
        Verifying email service setup...
      </p>
    </div>

    <!-- Email Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Email Functions</h4>
      <div class="flex gap-2 flex-wrap">
        <button
          id="send-welcome-email"
          class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Send Welcome Email
        </button>
        <button
          id="send-notification-email"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Send Notification
        </button>
        <button
          id="send-custom-email"
          class="px-3 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
        >
          Send Custom Email
        </button>
      </div>
    </div>

    <!-- Project Status Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Project Status Functions</h4>
      <div class="mb-3 p-3 bg-gray-50 dark:bg-gray-900 rounded">
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
          <span class="font-medium">Current Project ID:</span>
          <span
            id="current-project-id"
            class="font-mono text-blue-600 dark:text-blue-400">None</span
          >
        </p>
        <button
          id="create-test-project"
          class="px-3 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Create Test Project
        </button>
      </div>
      <div class="flex gap-2 flex-wrap">
        <button
          id="update-to-progress"
          class="px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Set In Progress
        </button>
        <button
          id="update-to-completed"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Mark Completed
        </button>
        <button
          id="update-metadata"
          class="px-3 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Update Metadata
        </button>
      </div>
    </div>

    <!-- Notification Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Notification Functions</h4>
      <div class="flex gap-2 flex-wrap">
        <button
          id="show-success"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Success Notification
        </button>
        <button
          id="show-error"
          class="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Error Notification
        </button>
        <button
          id="show-warning"
          class="px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600"
        >
          Warning Notification
        </button>
        <button
          id="show-info"
          class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Info Notification
        </button>
      </div>
    </div>

    <!-- File Upload -->
    <div>
      <h4 class="font-medium mb-2">File Upload Functions</h4>
      <input
        type="file"
        id="file-upload"
        multiple
        accept=".pdf"
        class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
      />
      <button
        id="upload-files"
        class="mt-2 px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Upload Files
      </button>
    </div>

    <!-- Event Log -->
    <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-900 rounded">
      <h4 class="font-medium mb-2">Event Log</h4>
      <div
        id="event-log"
        class="text-sm text-gray-600 dark:text-gray-400 max-h-40 overflow-y-auto"
      >
        <p>Events will appear here...</p>
      </div>
      <button
        id="clear-log"
        class="mt-2 px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
      >
        Clear Log
      </button>
    </div>
  </div>
</div>

<script>
  import {
    globalServices,
    sendEmail,
    updateProjectStatus,
    showNotification,
    uploadFiles,
    createTestProject,
    useGlobalEvents,
  } from "../lib/global-services";

  // Current project ID - will be set when creating or selecting a project
  let currentProjectId: string | null = null;

  // Set up event logging
  const eventLog = document.getElementById("event-log")!;
  const { on } = useGlobalEvents();

  function logEvent(type: string, data: any) {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement("div");
    logEntry.className = "mb-1 p-2 bg-white dark:bg-gray-800 rounded text-xs";
    logEntry.innerHTML = `
      <span class="font-mono text-blue-600 dark:text-blue-400">[${timestamp}]</span>
      <span class="font-medium">${type}</span>
      <span class="text-gray-500">:</span>
      <span>${JSON.stringify(data, null, 2).substring(0, 100)}...</span>
    `;
    eventLog.appendChild(logEntry);
    eventLog.scrollTop = eventLog.scrollHeight;
  }

  // Listen to all global events
  const eventTypes = [
    "email:sending",
    "email:sent",
    "email:error",
    "project:status-updating",
    "project:status-updated",
    "project:status-error",
    "files:uploading",
    "files:uploaded",
    "files:error",
    "notification:show",
    "notification:hide",
  ];

  eventTypes.forEach((eventType) => {
    on(eventType, (data) => logEvent(eventType, data));
  });

  // Email functions
  document
    .getElementById("send-welcome-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "user@example.com",
          type: "welcome",
          variables: { name: "John Doe" },
        });
      } catch (error) {
        console.error("Failed to send welcome email:", error);

        // Show helpful error message
        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure EMAIL_PROVIDER and EMAIL_API_KEY environment variables. Check the console for details.",
          duration: 10000,
        });
      }
    });

  document
    .getElementById("send-notification-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "user@example.com",
          type: "notification",
          variables: {
            title: "Project Update",
            message: "Your project status has been updated successfully.",
          },
        });
      } catch (error) {
        console.error("Failed to send notification email:", error);

        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message: "Please set up Resend or SendGrid API credentials.",
          duration: 8000,
        });
      }
    });

  document
    .getElementById("send-custom-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "user@example.com",
          type: "custom",
          subject: "Custom Email Subject",
          html: "<h1>Hello!</h1><p>This is a custom email with <strong>HTML content</strong>.</p>",
          text: "Hello! This is a custom email with plain text content.",
        });
      } catch (error) {
        console.error("Failed to send custom email:", error);

        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure your email provider in environment variables.",
          duration: 8000,
        });
      }
    });

  // Helper function to enable/disable project buttons
  function updateProjectButtons(projectId: string | null) {
    currentProjectId = projectId;
    const projectIdSpan = document.getElementById("current-project-id");
    const buttons = [
      "update-to-progress",
      "update-to-completed",
      "update-metadata",
    ];

    if (projectId && projectIdSpan) {
      projectIdSpan.textContent = projectId;
      buttons.forEach((buttonId) => {
        const button = document.getElementById(buttonId) as HTMLButtonElement;
        if (button) button.disabled = false;
      });
    } else if (projectIdSpan) {
      projectIdSpan.textContent = "None";
      buttons.forEach((buttonId) => {
        const button = document.getElementById(buttonId) as HTMLButtonElement;
        if (button) button.disabled = true;
      });
    }
  }

  // Create test project function
  document
    .getElementById("create-test-project")
    ?.addEventListener("click", async () => {
      try {
        const project = await createTestProject();
        updateProjectButtons(project.id);
        logEvent("project:created", { projectId: project.id });
      } catch (error) {
        console.error("Failed to create test project:", error);
      }
    });

  // Project status functions
  document
    .getElementById("update-to-progress")
    ?.addEventListener("click", async () => {
      if (!currentProjectId) {
        showNotification({
          type: "warning",
          title: "No Project Selected",
          message: "Please create a test project first.",
          duration: 3000,
        });
        return;
      }

      try {
        await updateProjectStatus({
          projectId: currentProjectId,
          status: "in-progress",
          metadata: { startedAt: new Date().toISOString() },
        });
      } catch (error) {
        console.error("Failed to update project status:", error);
      }
    });

  document
    .getElementById("update-to-completed")
    ?.addEventListener("click", async () => {
      if (!currentProjectId) {
        showNotification({
          type: "warning",
          title: "No Project Selected",
          message: "Please create a test project first.",
          duration: 3000,
        });
        return;
      }

      try {
        await updateProjectStatus({
          projectId: currentProjectId,
          status: "completed",
          metadata: {
            completedAt: new Date().toISOString(),
            finalNotes: "Project completed successfully",
          },
        });
      } catch (error) {
        console.error("Failed to update project status:", error);
      }
    });

  document
    .getElementById("update-metadata")
    ?.addEventListener("click", async () => {
      if (!currentProjectId) {
        showNotification({
          type: "warning",
          title: "No Project Selected",
          message: "Please create a test project first.",
          duration: 3000,
        });
        return;
      }

      try {
        await globalServices.updateProjectStatus({
          projectId: currentProjectId,
          status: "review",
          metadata: {
            reviewedBy: "admin@example.com",
            reviewNotes: "Ready for final review",
            priority: "high",
          },
        });
      } catch (error) {
        console.error("Failed to update project metadata:", error);
      }
    });

  // Notification functions
  document.getElementById("show-success")?.addEventListener("click", () => {
    showNotification({
      type: "success",
      title: "Success!",
      message: "This is a success notification with auto-hide.",
      duration: 3000,
    });
  });

  document.getElementById("show-error")?.addEventListener("click", () => {
    showNotification({
      type: "error",
      title: "Error Occurred",
      message:
        "This is an error notification that stays until manually closed.",
      duration: 0, // Stays until manually closed
    });
  });

  document.getElementById("show-warning")?.addEventListener("click", () => {
    showNotification({
      type: "warning",
      title: "Warning",
      message: "This is a warning notification with actions.",
      duration: 8000,
      actions: [
        {
          label: "Retry",
          action: () => console.log("Retry clicked"),
        },
        {
          label: "Cancel",
          action: () => console.log("Cancel clicked"),
        },
      ],
    });
  });

  document.getElementById("show-info")?.addEventListener("click", () => {
    showNotification({
      type: "info",
      title: "Information",
      message: "This is an informational notification.",
      duration: 5000,
    });
  });

  // File upload functions
  document
    .getElementById("upload-files")
    ?.addEventListener("click", async () => {
      const fileInput = document.getElementById(
        "file-upload"
      ) as HTMLInputElement;
      const files = fileInput.files;

      if (!files || files.length === 0) {
        showNotification({
          type: "warning",
          title: "No Files Selected",
          message: "Please select files to upload.",
          duration: 3000,
        });
        return;
      }

      try {
        await uploadFiles(files, currentProjectId || undefined);
        fileInput.value = ""; // Clear the input
      } catch (error) {
        console.error("Failed to upload files:", error);
      }
    });

  // Clear log function
  document.getElementById("clear-log")?.addEventListener("click", () => {
    eventLog.innerHTML = "<p>Events will appear here...</p>";
  });

  // Check email configuration on load
  async function checkEmailConfiguration() {
    const configStatus = document.getElementById("config-status");
    if (!configStatus) return;

    try {
      const response = await fetch("/api/send-email");
      const result = await response.json();

      if (result.configured && result.verification === "OK") {
        // Email is properly configured
        configStatus.className =
          "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4 mb-4";
        configStatus.innerHTML = `
          <h4 class="font-medium text-green-800 dark:text-green-200 mb-2">
            ‚úÖ Email Configuration Active
          </h4>
          <p class="text-sm text-green-700 dark:text-green-300">
            Email service is configured and ready. All email functions should work!
          </p>
        `;
      } else {
        throw new Error("Email not configured");
      }
    } catch (error) {
      // Keep the existing warning banner
      console.log("Email configuration check failed:", error);
    }
  }

  // Initialize configuration check
  document.addEventListener("DOMContentLoaded", () => {
    checkEmailConfiguration();
  });
</script>
