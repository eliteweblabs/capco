---
// Example component showing how to use global services
import { formatTimeSinceUpdate } from "../lib/global-services";
// import ProjectFilter from "./ProjectFilter.astro";
import PushNotificationDemo from "./PushNotificationDemo.astro";
import PDFGenerator from "./PDFGenerator.astro";
import {
  generateCompleteFormHTML,
  BUTTON_GROUPS,
} from "../lib/project-form-config";
---

<div class="p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
  <h3 class="text-lg font-semibold mb-4">Global Services Demo</h3>

  <div class="space-y-4">
    <!-- Configuration Status -->
    <div
      id="config-status"
      class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-4"
    >
      <h4 class="font-medium text-yellow-800 dark:text-yellow-200 mb-2">
        üîç Checking Email Configuration...
      </h4>
      <p class="text-sm text-yellow-700 dark:text-yellow-300 mb-2">
        Verifying email service setup...
      </p>
    </div>

    <!-- Email Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Email Functions</h4>
      <div class="flex gap-2 flex-wrap mb-3">
        <button
          id="send-welcome-email"
          class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Send Welcome Email
        </button>
        <button
          id="send-notification-email"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Send Notification
        </button>
        <button
          id="send-custom-email"
          class="px-3 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
        >
          Send Custom Email
        </button>
      </div>
    </div>

    <!-- Project Management -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Project Management</h4>
      <div class="flex gap-2 flex-wrap mb-2">
        <button
          id="get-user-projects-btn"
          class="px-3 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600"
        >
          Get My Projects
        </button>
      </div>
    </div>

    <!-- Project Status Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Project Status Functions</h4>
      <div class="mb-3 p-3 bg-gray-50 dark:bg-gray-900 rounded">
        <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
          <span class="font-medium">Current Project ID:</span>
          <span
            id="current-project-id"
            class="font-mono text-blue-600 dark:text-blue-400">None</span
          >
        </p>
        <button
          id="create-test-project"
          class="px-3 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Create Test Project
        </button>
      </div>
      <div class="flex gap-2 flex-wrap">
        <button
          class="status-btn px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="20"
          data-label="Generate Proposal"
          data-action="proposal_generation"
          disabled
        >
          Generate Proposal
        </button>
        <button
          class="status-btn px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="30"
          data-label="Ship Proposal"
          data-action="proposal_shipped"
          disabled
        >
          Ship Proposal
        </button>
        <button
          class="status-btn px-3 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="50"
          data-label="Proposal Approved"
          data-action="proposal_approved"
          disabled
        >
          Proposal Approved
        </button>
        <button
          class="status-btn px-3 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="60"
          data-label="Generate Deposit Invoice"
          data-action="deposit_invoice_generation"
          disabled
        >
          Generate Deposit Invoice
        </button>
        <button
          class="status-btn px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
          data-new-status="220"
          data-label="Mark Complete"
          data-action="project_complete"
          disabled
        >
          Mark Complete
        </button>
      </div>
    </div>

    <!-- Notification Actions -->
    <div class="border-b pb-4">
      <h4 class="font-medium mb-2">Notification Functions</h4>
      <div class="flex gap-2 flex-wrap">
        <button
          id="show-success"
          class="px-3 py-2 bg-green-500 text-white rounded hover:bg-green-600"
        >
          Success Notification
        </button>
        <button
          id="show-error"
          class="px-3 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          Error Notification
        </button>
        <button
          id="show-warning"
          class="px-3 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600"
        >
          Warning Notification
        </button>
        <button
          id="show-info"
          class="px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Info Notification
        </button>
      </div>
    </div>

    <!-- File Upload -->
    <div>
      <h4 class="font-medium mb-2">File Upload Functions</h4>
      <input
        type="file"
        id="file-upload"
        multiple
        accept=".pdf"
        class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
      />
      <button
        id="upload-files"
        class="mt-2 px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        Upload Files
      </button>
    </div>

    <!-- Event Log -->
    <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-900 rounded">
      <h4 class="font-medium mb-2">Event Log</h4>
      <div
        id="event-log"
        class="text-sm text-gray-600 dark:text-gray-400 max-h-40 overflow-y-auto"
      >
        <p>Events will appear here...</p>
      </div>
      <button
        id="clear-log"
        class="mt-2 px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
      >
        Clear Log
      </button>
    </div>
  </div>
</div>

<!-- ProjectList removed to prevent confusion - now only on index page -->

<!-- PDF Generator Container -->
<div class="mt-6">
  <!-- PDF generation will be handled by buttons in project cards -->
</div>

<!-- Push Notification Demo -->
<PushNotificationDemo />

<script>
  import {
    globalServices,
    PROJECT_STATUS,
    PROJECT_STATUS_LABELS,
    sendEmail,
    sendReactEmail,
    updateProjectStatus,
    showNotification,
    uploadFiles,
    createTestProject,
    useGlobalEvents,
    formatTimeSinceUpdate,
    type ProjectStatusCode,
  } from "../lib/global-services";

  // Current project ID and status - will be set when creating or selecting a project
  let currentProjectId: string | null = null;
  let currentProjectStatus: number | null = null;

  // Set up event logging
  const eventLog = document.getElementById("event-log")!;
  const { on } = useGlobalEvents();

  function logEvent(type: string, data: any) {
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement("div");
    logEntry.className = "mb-1 p-2 bg-white dark:bg-gray-800 rounded text-xs";
    logEntry.innerHTML = `
      <span class="font-mono text-blue-600 dark:text-blue-400">[${timestamp}]</span>
      <span class="font-medium">${type}</span>
      <span class="text-gray-500">:</span>
      <span>${JSON.stringify(data, null, 2).substring(0, 100)}...</span>
    `;
    eventLog.appendChild(logEntry);
    eventLog.scrollTop = eventLog.scrollHeight;
  }

  // Listen to all global events
  const eventTypes = [
    "email:sending",
    "email:sent",
    "email:error",
    "project:status-updating",
    "project:status-updated",
    "project:status-error",
    "files:uploading",
    "files:uploaded",
    "files:error",
    "notification:show",
    "notification:hide",
  ];

  eventTypes.forEach((eventType) => {
    on(eventType, (data) => logEvent(eventType, data));
  });

  // Email functions
  document
    .getElementById("send-welcome-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "abcwelcome@eliteweblabs.com",
          type: "welcome",
          variables: { name: "John Doe" },
        });
      } catch (error) {
        console.error("Failed to send welcome email:", error);

        // Show helpful error message
        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure EMAIL_PROVIDER and EMAIL_API_KEY environment variables. Check the console for details.",
          duration: 10000,
        });
      }
    });

  document
    .getElementById("send-notification-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "245welcome@eliteweblabs.com",
          type: "notification",
          variables: {
            title: "Project Update",
            message: "Your project status has been updated successfully.",
          },
        });
      } catch (error) {
        console.error("Failed to send notification email:", error);

        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message: "Please set up Resend or SendGrid API credentials.",
          duration: 8000,
        });
      }
    });

  document
    .getElementById("send-custom-email")
    ?.addEventListener("click", async () => {
      try {
        await sendEmail({
          to: "global123@eliteweblabs.com",
          type: "custom",
          subject: "Custom Email Subject",
          html: "<h1>Hello!</h1><p>This is a custom email with <strong>HTML content</strong>.</p>",
          text: "Hello! This is a custom email with plain text content.",
        });
      } catch (error) {
        console.error("Failed to send custom email:", error);

        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure your email provider in environment variables.",
          duration: 8000,
        });
      }
    });

  // React Email functions
  document
    .getElementById("send-react-welcome")
    ?.addEventListener("click", async () => {
      try {
        await sendReactEmail({
          to: "4567welcome@eliteweblabs.com",
          type: "welcome",
          name: "John Doe",
          appName: "CAPCo Demo",
        });
      } catch (error) {
        console.error("Failed to send React welcome email:", error);
        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure EMAIL_PROVIDER and EMAIL_API_KEY environment variables.",
          duration: 8000,
        });
      }
    });

  document
    .getElementById("send-react-notification")
    ?.addEventListener("click", async () => {
      try {
        await sendReactEmail({
          to: "675welcome@eliteweblabs.com",
          type: "project-notification",
          recipientName: "Jane Smith",
          projectTitle: "Fire Protection System - Building A",
          projectId: "PROJ-2024-001",
          statusMessage:
            "Your project status has been updated to 'In Review'. Please check the latest changes and provide feedback.",
          actionRequired: true,
          actionUrl: "https://yourapp.com/projects/123",
          actionText: "Review Project",
        });
      } catch (error) {
        console.error("Failed to send React project notification:", error);
        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message: "Please set up Resend or SendGrid API credentials.",
          duration: 8000,
        });
      }
    });

  document
    .getElementById("send-react-test")
    ?.addEventListener("click", async () => {
      try {
        await sendReactEmail({
          to: "7896welcome@eliteweblabs.com",
          type: "test",
        });
      } catch (error) {
        console.error("Failed to send React test email:", error);
        showNotification({
          type: "error",
          title: "Email Configuration Required",
          message:
            "Please configure your email provider in environment variables.",
          duration: 8000,
        });
      }
    });

  // Helper function to enable/disable project buttons
  function updateProjectButtons(projectId: string | null = currentProjectId) {
    const projectIdSpan = document.getElementById("current-project-id");
    const statusButtons = document.querySelectorAll(
      ".status-btn"
    ) as NodeListOf<HTMLButtonElement>;

    if (projectId && projectIdSpan) {
      projectIdSpan.textContent = projectId;
      statusButtons.forEach((btn) => (btn.disabled = false));
    } else if (projectIdSpan) {
      projectIdSpan.textContent = "None";
      statusButtons.forEach((btn) => (btn.disabled = true));
    }

    // Update current status display
    const statusSpan = document.getElementById("current-project-status");
    if (statusSpan && currentProjectStatus !== null) {
      statusSpan.textContent = globalServices.getStatusLabel(
        currentProjectStatus as any
      );
    } else if (statusSpan) {
      statusSpan.textContent = "-";
    }
  }

  // Create test project function
  document
    .getElementById("create-test-project")
    ?.addEventListener("click", async () => {
      try {
        const project = await createTestProject();
        currentProjectId = project.id.toString();
        currentProjectStatus = project.status || PROJECT_STATUS.SPECS_RECEIVED;
        updateProjectButtons();
        logEvent("project:created", { projectId: project.id });
      } catch (error) {
        console.error("Failed to create test project:", error);
      }
    });

  // Project status functions
  // Unified status change handler
  async function handleStatusChange(
    newStatus: number,
    action: string,
    label: string
  ) {
    if (!currentProjectId) {
      showNotification({
        type: "warning",
        title: "No Project Selected",
        message: "Please create a test project first.",
        duration: 3000,
      });
      return;
    }

    try {
      // Base update data
      const updateData: any = {
        projectId: currentProjectId,
        status: newStatus,
        project: {
          updatedAt: new Date().toISOString(),
          action: action,
          previousStatus: currentProjectStatus,
        },
      };

      // Add action-specific data and trigger related processes
      switch (action) {
        case "proposal_generation":
          updateData.project = {
            ...updateData.project,
            startedAt: new Date().toISOString(),
          };
          // Trigger proposal generation process
          logEvent(
            `Starting proposal generation for project ${currentProjectId}`,
            { action, newStatus }
          );
          break;

        case "proposal_shipped":
          updateData.project = {
            ...updateData.project,
            shippedAt: new Date().toISOString(),
            shippedBy: "admin@example.com",
          };
          // Send email to client about proposal
          await sendClientNotificationEmail(
            currentProjectId,
            "proposal_shipped"
          );
          logEvent(`Proposal shipped for project ${currentProjectId}`, {
            action,
            newStatus,
          });
          break;

        case "proposal_approved":
          updateData.project = {
            ...updateData.project,
            approvedAt: new Date().toISOString(),
          };
          // Send confirmation email
          await sendClientNotificationEmail(
            currentProjectId,
            "proposal_approved"
          );
          logEvent(`Proposal approved for project ${currentProjectId}`, {
            action,
            newStatus,
          });
          break;

        case "deposit_invoice_generation":
          updateData.project = {
            ...updateData.project,
            invoiceGenerationStarted: new Date().toISOString(),
          };
          // Generate deposit invoice
          await generateInvoice(currentProjectId, "deposit");
          logEvent(
            `Generating deposit invoice for project ${currentProjectId}`,
            { action, newStatus }
          );
          break;

        case "project_complete":
          updateData.project = {
            ...updateData.project,
            completedAt: new Date().toISOString(),
            finalNotes: "Project completed successfully",
          };
          // Send completion emails to both client and admin
          await sendClientNotificationEmail(
            currentProjectId,
            "project_complete"
          );
          await sendAdminNotificationEmail(
            currentProjectId,
            "project_complete"
          );
          logEvent(`Project ${currentProjectId} marked as complete`, {
            action,
            newStatus,
          });
          break;

        default:
          logEvent(`Status updated for project ${currentProjectId}`, {
            action,
            newStatus,
          });
      }

      // Update the project status
      await updateProjectStatus(updateData);

      // Update current status for UI
      currentProjectStatus = newStatus;
      updateProjectButtons();

      showNotification({
        type: "success",
        title: "Status Updated",
        message: `${label} completed successfully`,
        duration: 3000,
      });
    } catch (error: unknown) {
      console.error(`Failed to ${action}:`, error);
      showNotification({
        type: "error",
        title: "Status Update Failed",
        message:
          (error as Error)?.message || `Failed to ${label.toLowerCase()}`,
        duration: 5000,
      });
    }
  }

  // Helper functions for different actions
  async function sendClientNotificationEmail(
    projectId: string,
    eventType: string
  ) {
    try {
      const emailTypes: Record<string, string> = {
        proposal_shipped: "notification",
        proposal_approved: "notification",
        project_complete: "notification",
      };

      if (emailTypes[eventType]) {
        await sendEmail({
          type: emailTypes[eventType] as any,
          to: "client@example.com", // Replace with actual client email
          subject: `Project ${projectId} Update: ${eventType.replace("_", " ")}`,
          variables: { projectId, eventType },
        });
        logEvent(`Client notification email sent`, { projectId, eventType });
      }
    } catch (error: unknown) {
      console.error("Failed to send client email:", error);
    }
  }

  async function sendAdminNotificationEmail(
    projectId: string,
    eventType: string
  ) {
    try {
      await sendEmail({
        type: "notification",
        to: "admin@example.com",
        subject: `Admin Notification: Project ${projectId} - ${eventType.replace("_", " ")}`,
        variables: { projectId, eventType, isAdminNotification: "true" },
      });
      logEvent(`Admin notification email sent`, { projectId, eventType });
    } catch (error) {
      console.error("Failed to send admin email:", error);
    }
  }

  async function generateInvoice(projectId: string, invoiceType: string) {
    try {
      // Mock invoice generation - replace with actual invoice API
      const invoiceData = {
        projectId,
        type: invoiceType,
        generatedAt: new Date().toISOString(),
        amount: invoiceType === "deposit" ? 1500 : 3500,
      };

      logEvent(`${invoiceType} invoice generated`, invoiceData);

      showNotification({
        type: "info",
        title: "Invoice Generated",
        message: `${invoiceType} invoice has been generated for project ${projectId}`,
        duration: 4000,
      });
    } catch (error: unknown) {
      console.error("Failed to generate invoice:", error);
    }
  }

  // Add event listeners to all status buttons
  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    if (target.classList.contains("status-btn")) {
      const newStatus = parseInt(target.dataset.newStatus || "0");
      const action = target.dataset.action || "";
      const label = target.dataset.label || "";

      handleStatusChange(newStatus, action, label);
    }
  });

  // Notification functions
  document.getElementById("show-success")?.addEventListener("click", () => {
    showNotification({
      type: "success",
      title: "Success!",
      message: "This is a success notification with auto-hide.",
      duration: 3000,
    });
  });

  document.getElementById("show-error")?.addEventListener("click", () => {
    showNotification({
      type: "error",
      title: "Error Occurred",
      message:
        "This is an error notification that stays until manually closed.",
      duration: 0, // Stays until manually closed
    });
  });

  document.getElementById("show-warning")?.addEventListener("click", () => {
    showNotification({
      type: "warning",
      title: "Warning",
      message: "This is a warning notification with actions.",
      duration: 8000,
      actions: [
        {
          label: "Retry",
          action: () => console.log("Retry clicked"),
        },
        {
          label: "Cancel",
          action: () => console.log("Cancel clicked"),
        },
      ],
    });
  });

  document.getElementById("show-info")?.addEventListener("click", () => {
    showNotification({
      type: "info",
      title: "Information",
      message: "This is an informational notification.",
      duration: 5000,
    });
  });

  // File upload functions
  // document
  //   .getElementById("upload-files")
  //   ?.addEventListener("click", async () => {
  //     const fileInput = document.getElementById(
  //       "file-upload"
  //     ) as HTMLInputElement;
  //     const files = fileInput.files;

  //     if (!files || files.length === 0) {
  //       showNotification({
  //         type: "warning",
  //         title: "No Files Selected",
  //         message: "Please select files to upload.",
  //         duration: 3000,
  //       });
  //       return;
  //     }

  //     try {
  //       await uploadFiles(files, currentProjectId || undefined);
  //       fileInput.value = ""; // Clear the input
  //     } catch (error) {
  //       console.error("Failed to upload files:", error);
  //     }
  //   });

  // Projects are now loaded by ProjectsList component automatically
  // No need to auto-load here to prevent duplicate notifications

  // Get user projects function
  document
    .getElementById("get-user-projects-btn")
    ?.addEventListener("click", async () => {
      try {
        const projects = await globalServices.getUserProjects();
        displayUserProjects(projects);
        logEvent("projects:fetched", { count: projects.length });

        showNotification({
          type: "success",
          title: "Projects Loaded",
          message: `Found ${projects.length} project(s)`,
          duration: 3000,
        });
      } catch (error: unknown) {
        console.error("Failed to fetch user projects:", error);
        showNotification({
          type: "error",
          title: "Failed to Load Projects",
          message: (error as Error)?.message || "Could not fetch your projects",
          duration: 0, // Errors stay until manually dismissed
        });
      }
    });

  // Function to display user projects in the projects list
  function displayUserProjects(projects: any[]) {
    // Delegate to the ProjectsList component
    if (
      (window as any).projectsList &&
      (window as any).projectsList.displayUserProjects
    ) {
      (window as any).projectsList.displayUserProjects(projects);
    } else {
      console.warn("ProjectsList component not available");
    }
  }

  // Project-related functions now handled by ProjectsList component
  // These are set up automatically when ProjectsList component initializes

  // Function to initialize button group functionality
  function initializeButtonGroups(accordionId: string) {
    const accordionElement = document.getElementById(accordionId);
    if (!accordionElement) return;

    // Handle button group clicks
    accordionElement.addEventListener("click", (e) => {
      const button = (e.target as HTMLElement).closest(
        ".building-type-radio, .consulting-service-btn, .fire-service-radio, .fire-safety-service-btn"
      );
      if (!button) return;

      e.preventDefault();

      const value = (button as HTMLElement).dataset.value;
      const group = (button as HTMLElement).dataset.group;
      const type = (button as HTMLElement).dataset.type;

      if (!value || !group || !type) return;

      if (type === "radio") {
        // Single select - clear all other buttons in this group
        const groupButtons = accordionElement.querySelectorAll(
          `[data-group="${group}"]`
        );
        groupButtons.forEach((btn) => {
          btn.classList.remove("bg-blue-500", "text-white", "border-blue-500");
          btn.classList.add(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );
        });

        // Set this button as selected
        button.classList.add("bg-blue-500", "text-white", "border-blue-500");
        button.classList.remove(
          "bg-white",
          "dark:bg-gray-700",
          "text-gray-700",
          "dark:text-gray-300",
          "border-gray-300",
          "dark:border-gray-600"
        );

        // Store the value for form submission
        (button as any)._selectedValue = value;
      } else if (type === "multi-select") {
        // Multi-select - toggle this button
        const isSelected = button.classList.contains("bg-blue-500");

        if (isSelected) {
          // Deselect
          button.classList.remove(
            "bg-blue-500",
            "text-white",
            "border-blue-500"
          );
          button.classList.add(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );
          (button as any)._selectedValue = null;
        } else {
          // Select
          button.classList.add("bg-blue-500", "text-white", "border-blue-500");
          button.classList.remove(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );
          (button as any)._selectedValue = value;
        }
      }
    });

    console.log("Initialized button groups for accordion");
  }

  // Helper function to convert units value to slider position
  function getSliderValue(units: number): number {
    const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
    const index = values.indexOf(units);
    return index >= 0 ? index : 0;
  }

  // resetProjectForm function now handled by ProjectsList component

  // Function to handle form submission - REMOVED (duplicate of ProjectList.astro)
  // Form submission is now handled by ProjectList.astro component

  // Initialize form handlers - REMOVED (handled by ProjectList.astro)

  // populateFormContainers function now handled by ProjectsList component

  // Make generateCompleteFormHTML available globally for template use
  (window as any).generateCompleteFormHTML = function (
    index: number,
    projectData: any
  ) {
    // Project form fields configuration (inline for template access)
    const coreFieldsHTML = `
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="relative">
          <label for="address-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Address / Title *</label>
          <input type="text" id="address-${index}" name="address" value="${projectData.address || projectData.title || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Address / Title *" required>
        </div>
        <div class="relative">
          <label for="owner-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Owner *</label>
          <input type="text" id="owner-${index}" name="owner" value="${projectData.owner || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Owner *" required>
        </div>
        <div class="relative">
          <label for="architect-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Architect</label>
          <input type="text" id="architect-${index}" name="architect" value="${projectData.architect || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Architect">
        </div>
        <div class="relative">
          <label for="sq-ft-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Square Footage *</label>
          <input type="number" id="sq-ft-${index}" name="sq_ft" value="${projectData.sq_ft || ""}" 
            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
            placeholder="Gross Square Footage (GFA) *" min="0" max="50000" step="1" required>
        </div>
      </div>
    `;

    const descriptionHTML = `
      <div class="relative">
        <label for="description-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</label>
        <textarea id="description-${index}" name="description" rows="3" 
          class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400" 
          placeholder="Project description...">${projectData.description || ""}</textarea>
      </div>
    `;

    const sliderValue = getSliderValue(projectData.units || 1);
    const constructionAndUnitsHTML = `
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Construction Type</label>
          <div class="flex gap-4">
            <label class="inline-flex items-center cursor-pointer">
              <input type="checkbox" id="new-construction-${index}" name="new_construction" ${projectData.new_construction ? "checked" : ""} class="sr-only peer">
              <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 dark:peer-checked:bg-blue-600"></div>
              <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">New Construction</span>
            </label>
          </div>
        </div>
        <div>
          <label for="units-slider-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Units: <span id="units-value-${index}" class="font-semibold text-blue-600 dark:text-blue-400">${projectData.units || 1}</span>
          </label>
          <div class="relative">
            <input type="range" id="units-slider-${index}" name="units" min="0" max="14" value="${sliderValue}" 
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 units-range-slider relative z-10" 
              data-values="1,2,3,4,5,6,7,8,9,10,15,20,30,40,50" data-project-index="${index}">
            <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
              <span>1</span><span>5</span><span>10</span><span>30</span><span>50</span>
            </div>
          </div>
        </div>
      </div>
    `;

    // Button groups
    const buttonGroupsHTML = [
      {
        name: "building",
        label: "Building",
        type: "radio",
        cssClass: "building-type-radio",
        options: [
          "Residential",
          "Mixed use",
          "Mercantile",
          "Commercial",
          "Storage",
          "Warehouse",
          "Institutional",
        ],
      },
      {
        name: "project",
        label: "Project",
        type: "multi-select",
        cssClass: "consulting-service-btn",
        options: [
          "Sprinkler",
          "Alarm",
          "Mechanical",
          "Electrical",
          "Plumbing",
          "Civil engineering",
          "Other",
        ],
      },
      {
        name: "service",
        label: "Supply / Service",
        type: "radio",
        cssClass: "fire-service-radio",
        options: [
          "Pump & Tank",
          "2' copper",
          "4' Ductile",
          "6' Ductile",
          "Unknown",
        ],
      },
      {
        name: "requested_docs",
        label: "Reports Required",
        type: "multi-select",
        cssClass: "fire-safety-service-btn",
        options: ["Sprinkler", "Alarm", "NFPA 241", "IEBC", "IBC"],
      },
    ]
      .map((group) => {
        const selectedValues = projectData[group.name]
          ? Array.isArray(projectData[group.name])
            ? projectData[group.name]
            : [projectData[group.name]]
          : [];

        return `
        <div class="space-y-3">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">${group.label}</label>
          <div class="flex flex-wrap gap-2">
            ${group.options
              .map((option) => {
                const isSelected = selectedValues.includes(option);
                return `
                <button type="button" 
                  class="${group.cssClass} px-3 py-2 text-sm rounded-full border transition-colors ${isSelected ? "bg-blue-500 text-white border-blue-500" : "border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600"}" 
                  data-value="${option}" data-group="${group.name}" data-type="${group.type}">
                  ${option}
                </button>
              `;
              })
              .join("")}
          </div>
        </div>
      `;
      })
      .join("");

    return (
      coreFieldsHTML +
      descriptionHTML +
      constructionAndUnitsHTML +
      buttonGroupsHTML
    );
  };

  // Clear log function
  document.getElementById("clear-log")?.addEventListener("click", () => {
    eventLog.innerHTML = "<p>Events will appear here...</p>";
  });

  // Check email configuration on load
  async function checkEmailConfiguration() {
    const configStatus = document.getElementById("config-status");
    if (!configStatus) return;

    try {
      const response = await fetch("/api/send-email");
      const result = await response.json();

      if (result.configured && result.verification === "OK") {
        // Email is properly configured
        configStatus.className =
          "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4 mb-4";
        configStatus.innerHTML = `
          <h4 class="font-medium text-green-800 dark:text-green-200 mb-2">
            ‚úÖ Email Configuration Active
          </h4>
          <p class="text-sm text-green-700 dark:text-green-300">
            Email service is configured and ready. All email functions should work!
          </p>
        `;
      } else {
        throw new Error("Email not configured");
      }
    } catch (error) {
      // Keep the existing warning banner
      console.log("Email configuration check failed:", error);
    }
  }

  // PDF Generation Handler
  function handlePDFGeneration(
    projectId: string,
    templateType: string,
    projectData: any
  ) {
    const templateUrl = buildTemplateUrl(templateType, projectId, projectData);

    // Open template page for signature collection and PDF generation
    const signatureWindow = window.open(
      templateUrl,
      "pdf-signature",
      "width=1200,height=800,scrollbars=yes,resizable=yes"
    );

    if (!signatureWindow) {
      if ((window as any).globalServices) {
        (window as any).globalServices.showNotification({
          type: "error",
          title: "Popup Blocked",
          message: "Please allow popups to generate PDF documents.",
          duration: 0,
        });
      }
      return;
    }

    if ((window as any).globalServices) {
      (window as any).globalServices.showNotification({
        type: "info",
        title: "PDF Generation",
        message:
          "Please complete signatures in the new window to generate PDF.",
        duration: 5000,
      });
    }
  }

  function buildTemplateUrl(
    templateType: string,
    projectId: string,
    projectData: any
  ) {
    const baseUrl = new URL(`/pdf/${templateType}`, window.location.origin);

    if (projectId) {
      baseUrl.searchParams.set("projectId", projectId);
    }

    // Add project data as URL parameters
    Object.entries(projectData).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        baseUrl.searchParams.set(key, String(value));
      }
    });

    return baseUrl.toString();
  }

  // Initialize configuration check
  document.addEventListener("DOMContentLoaded", () => {
    checkEmailConfiguration();

    // Set up PDF generation event listener
    document.addEventListener("click", (event) => {
      const btn = (event.target as HTMLElement)?.closest(
        ".pdf-generate-btn"
      ) as HTMLElement;
      if (btn) {
        event.preventDefault();
        const projectId = btn.dataset.projectId || "";
        const templateType = btn.dataset.templateType || "project-agreement";
        const projectData = JSON.parse(btn.dataset.projectData || "{}");

        if (projectId) {
          handlePDFGeneration(projectId, templateType, projectData);
        }
      }
    });
  });
</script>
