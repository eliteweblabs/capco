---
// Toast Alerts Component
---

<div
  id="toast-alerts-container"
  class="fixed top-20 left-4 sm:left-auto sm:max-w-lg z-50 space-y-2 sm:right-4"
>
</div>

<script>
  import { globalServices } from "../lib/global-services";

  interface ToastAlert {
    id: string;
    type: "success" | "error" | "warning" | "info";
    title: string;
    message: string;
    duration?: number;
    actions?: Array<{ label: string; action: () => void }>;
  }

  class ToastAlertManager {
    private container: HTMLElement;
    private alerts: Map<string, ToastAlert> = new Map();

    constructor() {
      this.container = document.getElementById("toast-alerts-container")!;
      this.setupEventListeners();
    }

    setupEventListeners() {
      // Listen for global notification events
      globalServices.on("notification:show", (data) => {
        this.show(data);
      });

      globalServices.on("notification:hide", (data) => {
        this.hide(data.id);
      });
    }

    show(alert: Omit<ToastAlert, "id">) {
      const id = crypto.randomUUID();
      const fullAlert: ToastAlert = { ...alert, id };

      this.alerts.set(id, fullAlert);
      this.render(fullAlert);

      // Auto-hide after duration
      const duration = alert.duration || 5000;
      if (duration > 0) {
        setTimeout(() => this.hide(id), duration);
        // leave this here for testing
        // setTimeout(() => this.hide(id), 1000000);
      }

      return id;
    }

    hide(id?: string) {
      if (id) {
        this.alerts.delete(id);
        const element = document.getElementById(`toast-alert-${id}`);
        if (element) {
          element.classList.add("animate-fade-out");
          setTimeout(() => element.remove(), 300);
        }
      } else {
        // Hide all alerts
        this.alerts.clear();
        this.container.innerHTML = "";
      }
    }

    private render(alert: ToastAlert) {
      // Flowbite toast icon and background colors by type
      const typeConfig = {
        success: {
          iconBg: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
          icon: `<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"/>
                 </svg>`,
          label: "Check icon",
        },
        error: {
          iconBg: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
          icon: `<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
                 </svg>`,
          label: "Error icon",
        },
        warning: {
          iconBg: "text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200",
          icon: `<svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM10 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm0-4a1 1 0 0 1-1-1V6a1 1 0 0 1 2 0v4a1 1 0 0 1-1 1Z"/>
                 </svg>`,
          label: "Warning icon",
        },
        info: {
          iconBg: "text-blue-500 bg-blue-100 dark:bg-blue-800 dark:text-blue-200",
          icon: `<svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                   <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.147 15.085a7.159 7.159 0 0 1-6.189 3.307A6.713 6.713 0 0 1 3.1 15.444c-2.679-4.513.287-8.737.888-9.548A4.373 4.373 0 0 0 5 1.608c1.287.953 6.445 3.218 5.537 10.5 1.5-1.122 2.706-3.01 2.853-6.14 1.433 1.049 3.993 5.395 1.757 9.117Z"/>
                 </svg>`,
          label: "Fire icon",
        },
      };

      const config = typeConfig[alert.type];

      const element = document.createElement("div");
      element.id = `toast-alert-${alert.id}`;
      element.setAttribute("role", "alert");
      element.className = `
        border flex items-center w-full max-w-lg p-4 text-gray-500 bg-white rounded-lg shadow-sm 
        dark:text-gray-400 dark:bg-gray-800 transform transition-all duration-300 ease-in-out animate-slide-in
      `.trim();

      element.innerHTML = `
        <div class="inline-flex items-center justify-center shrink-0 w-8 h-8 ${config.iconBg} rounded-lg">
          ${config.icon}
          <span class="sr-only">${config.label}</span>
        </div>
        <div class="ms-3 text-sm font-normal">
          ${alert.title ? `<div class="font-semibold text-gray-900 dark:text-white mb-1">${alert.title}</div>` : ""}
          <div>${alert.message}</div>
          ${alert.actions ? this.renderActions(alert.actions) : ""}
        </div>
        <button 
          type="button" 
          class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" 
          data-dismiss-target="#toast-alert-${alert.id}" 
          aria-label="Close"
          onclick="toastAlertManager.hide('${alert.id}')"
        >
          <span class="sr-only">Close</span>
          <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
          </svg>
        </button>
      `;

      this.container.appendChild(element);
    }

    private renderActions(actions: Array<{ label: string; action: () => void }>) {
      return `
        <div class="grid grid-cols-${actions.length} gap-2 mt-2">
          ${actions
            .map((action, index) => {
              const actionId = crypto.randomUUID();
              // Store the action globally for onclick access
              (window as any).toastAlertActions = (window as any).toastAlertActions || {};
              (window as any).toastAlertActions[actionId] = action.action;

              // Primary button for first action, secondary for others
              const buttonClasses =
                index === 0
                  ? "inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800"
                  : "inline-flex justify-center w-full px-2 py-1.5 text-xs font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 dark:bg-gray-600 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700";

              return `
                  <div>
                    <button 
                      class="${buttonClasses}"
                      onclick="(window.toastAlertActions?.['${actionId}'] || (() => {}))(); return false;"
                    >
                      ${action.label}
                    </button>
                  </div>
                `;
            })
            .join("")}
        </div>
      `;
    }
  }

  // Global toast alert manager
  const toastAlertManager = new ToastAlertManager();

  // Make it globally accessible
  (window as any).toastAlertManager = toastAlertManager;
  (window as any).toastAlertActions = {};
</script>

<style>
  @keyframes slide-in {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  .animate-slide-in {
    animation: slide-in 0.3s ease-out;
  }

  .animate-fade-out {
    animation: fade-out 0.3s ease-out;
  }
</style>
