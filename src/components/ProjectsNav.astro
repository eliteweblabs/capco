---
import Delivery from "./Delivery.astro";
import Project from "./Project.astro";
import Invoice from "./Invoice.astro";
import NavButton from "./index/NavButton.astro";
import SectionContainer from "./SectionContainer.astro";
import GlobalServicesExample from "./GlobalServicesExample.astro";
import { getI18N } from "@/i18n";

const { role } = Astro.props;
let activeTab = role === "Admin" ? "dashboard" : "submittals";
// const { activeTab } = Astro.props;

//Para cambiar idioma de textos
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

let adminHoldCount = 5;
let clientHoldCount = 14;
---

  <nav
    class="pl-6 relative overflow-x-auto scrollbar-hide flex gap-1 whitespace-nowrap text-hub-inactive dark:border-hub-border-dark"
  >
   

    {role === "Admin" ? (




    <div
      class="flex gap-1 whitespace-nowrap rounded-full bg-hub-background-nav p-[2px] mt-6 dark:bg-hub-background-nav border-[1px] border-hub-border"
      id="status-filter-buttons">
      
      </div>

      ) : (
      <div
      class="flex gap-1 whitespace-nowrap rounded-full bg-hub-background-nav p-[2px] mt-6 dark:bg-hub-background-nav border-[1px] border-hub-border"
    >
      <NavButton
      class="tab-btn"
      aria-label="btn-submittals"
      data-target="submittals"
      data-default="true">{i18n.NAVBAR.SUBMITTALS}</NavButton
    >
    <NavButton class="tab-btn" aria-label="btn-invoices" data-target="invoice"
      >{i18n.NAVBAR.INVOICE}</NavButton
    >
    <NavButton class="tab-btn" aria-label="btn-delivery" data-target="delivery"
      >{i18n.NAVBAR.DELIVERY}</NavButton
    >
    </div>
      )}
    
  </nav>


  {role === "Admin" ? (

   ''
    
    // <SectionContainer id="client-hold" class="tab-content mb-0 mt-0 hidden mx-6">
    //   <Invoice />
    // </SectionContainer>
    // <SectionContainer id="services-test" class="tab-content mb-0 mt-0 hidden mx-6">
    //   <GlobalServicesExample />
    // </SectionContainer>
    // <SectionContainer id="admin-hold" class="tab-content mb-0 mt-0 hidden mx-6">
    //   <Invoice />
    // </SectionContainer>
    // <SectionContainer id="pdf-editor" class="tab-content mb-0 mt-0 hidden mx-6">
    //   <Project />
    // </SectionContainer>
    // <SectionContainer id="archives" class="tab-content mb-0 mt-0 hidden mx-6">
    //   <Invoice />
    // </SectionContainer>

  ) : (

    <SectionContainer id="submittals" class="tab-content mb-0 mt-0 mx-6">
      <Project />
    </SectionContainer>
    <SectionContainer id="invoices" class="tab-content mb-0 mt-0 hidden mx-6">
      <Invoice />
    </SectionContainer>
    <SectionContainer id="delivery" class="tab-content mb-0 mt-0 hidden mx-6">
      <Delivery />
    </SectionContainer>
    
  )}
 

{/* <script define:vars={{ activeTab }}>
  const buttons = document.querySelectorAll(".tab-btn");
  const contents = document.querySelectorAll(".tab-content");

  // Establece el botón activo por defecto
  const defaultActive = document.querySelector(`[data-target="${activeTab}"]`);
  if (defaultActive) {
    defaultActive.classList.add(
      "bg-hub-background",
      "drop-shadow-md",
      "text-hub-title",
      "font-bold",
      "dark:text-hub-title-dark",
      "dark:bg-hub-background-dark"
    );
    const projectsSection = document.getElementById("dashboard");
    if (projectsSection) {
      projectsSection.classList.remove("hidden");
    }
  }

  buttons.forEach((button) => {
    button.addEventListener("click", () => {
      const target = button.getAttribute("data-target");
      // Actualiza el estado de los botones
      buttons.forEach((btn) =>
        btn.classList.remove(
          "bg-hub-background",
          "drop-shadow-md",
          "text-hub-title",
          "font-bold",
          "dark:text-hub-title-dark",
          "dark:bg-hub-background-dark"
        )
      );
      button.classList.add(
        "bg-hub-background",
        "drop-shadow-md",
        "text-hub-title",
        "font-bold",
        "dark:text-hub-title-dark",
        "dark:bg-hub-background-dark"
      );

      // Oculta todas las secciones
      contents.forEach((content) => content.classList.add("hidden"));

      // Muestra la sección seleccionada
      if (target) {
        const targetElement = document.getElementById(target);
        if (targetElement) {
          targetElement.classList.remove("hidden");
        }
      }

      // Desliza el botón al centro del nav
      button.scrollIntoView({
        behavior: "smooth", // Deslizamiento suave
        block: "nearest", // Mantiene la posición vertical
        inline: "center", // Centra horizontalmente
      });
    });
  });
</script> */}




<script>
  import {
    PROJECT_STATUS,
    PROJECT_STATUS_LABELS,
    type ProjectStatusCode,
  } from "../lib/global-services";

  // Type definitions
  declare global {
    interface Window {
      projectFilter: ProjectFilter;
    }
  }

  class ProjectFilter {
    private container: HTMLElement | null;
    private buttonsContainer: HTMLElement | null;
    private currentFilter: string;

    constructor() {
      this.container = document.getElementById("project-filter-container");
      this.buttonsContainer = document.getElementById("status-filter-buttons");
      this.currentFilter = "all";

      this.setupFilterButtons();
      this.setupEventListeners();
    }

    setupFilterButtons() {
      if (!this.buttonsContainer) return;

      // Generate filter buttons for each status
      const statusButtons = Object.entries(PROJECT_STATUS_LABELS)
        .map(
          ([statusCode, label]) => `
          <button 
            data-status="${statusCode}"
            data-count="0"
            class="filter-btn px-3 py-2 text-xs font-medium rounded-full border transition-colors relative
                   bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 
                   border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600"
          >
            ${label}
          </button>
        `
        )
        .join("");

      // Insert status buttons after the "All Projects" button
      this.buttonsContainer.innerHTML = `
        <button 
          data-status="all"
          data-count="0"
          class="filter-btn selected px-3 py-2 text-xs font-medium rounded-full border transition-colors relative
                 bg-blue-500 text-white border-blue-500"
        >
          All Projects
        </button>
        ${statusButtons}
      `;
    }

    setupEventListeners() {
      if (!this.buttonsContainer) return;

      this.buttonsContainer.addEventListener("click", (event: Event) => {
        const button = (event.target as HTMLElement).closest(
          ".filter-btn"
        ) as HTMLButtonElement;
        if (!button) return;

        const status = button.dataset.status;
        if (status) {
          this.setActiveFilter(status);
          this.filterProjects(status);
        }
           button.scrollIntoView({
        behavior: "smooth", // Deslizamiento suave
        block: "nearest", // Mantiene la posición vertical
        inline: "center", // Centra horizontalmente
      });
      });
    }

    setActiveFilter(status: string) {
      // Update visual state of buttons
      const buttons = this.buttonsContainer?.querySelectorAll(".filter-btn");

      buttons?.forEach((btn) => {
        const htmlBtn = btn as HTMLButtonElement;

        if (htmlBtn.dataset.status === status) {
          // Selected state
          htmlBtn.classList.remove(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600",
            "hover:bg-gray-50",
            "dark:hover:bg-gray-600"
          );
          htmlBtn.classList.add(
            "selected",
            "bg-blue-500",
            "text-white",
            "border-blue-500"
          );
        } else {
          // Unselected state
          htmlBtn.classList.remove(
            "selected",
            "bg-blue-500",
            "text-white",
            "border-blue-500"
          );
          htmlBtn.classList.add(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600",
            "hover:bg-gray-50",
            "dark:hover:bg-gray-600"
          );
        }
      });

      this.currentFilter = status;
    }

    filterProjects(status: string) {
      const projectsList = document.getElementById("projects-list");
      if (!projectsList) return;

      const projectItems = projectsList.querySelectorAll(
        "[data-project-status]"
      );

      projectItems.forEach((item) => {
        const htmlItem = item as HTMLElement;
        const projectStatus = htmlItem.dataset.projectStatus;

        if (status === "all" || projectStatus === status) {
          htmlItem.style.display = "block";
        } else {
          htmlItem.style.display = "none";
        }
      });

      // Update visible count
      this.updateProjectCount();
    }

    updateProjectCount() {
      const projectsList = document.getElementById("projects-list");
      if (!projectsList) return;

      const visibleItems = projectsList.querySelectorAll(
        '[data-project-status]:not([style*="display: none"])'
      );
      const totalItems = projectsList.querySelectorAll("[data-project-status]");

      // Update count bubbles for each status
      this.updateCountBubbles();

      // Create or update count display
      let countDisplay = document.getElementById("filter-count");
      if (!countDisplay) {
        countDisplay = document.createElement("p");
        countDisplay.id = "filter-count";
        countDisplay.className =
          "text-sm text-gray-600 dark:text-gray-400 mt-2";
        this.container?.appendChild(countDisplay);
      }

      const filterText =
        this.currentFilter === "all"
          ? "All"
          : PROJECT_STATUS_LABELS[
              this.currentFilter as unknown as ProjectStatusCode
            ] || "Unknown";
      countDisplay.textContent = `Showing ${visibleItems.length} of ${totalItems.length} projects (${filterText})`;
    }

    updateCountBubbles() {
      const projectsList = document.getElementById("projects-list");
      if (!projectsList || !this.buttonsContainer) return;

      const allProjects = projectsList.querySelectorAll(
        "[data-project-status]"
      );
      const statusCounts: Record<string, number> = {};

      // Count projects by status
      allProjects.forEach((project) => {
        const htmlProject = project as HTMLElement;
        const status = htmlProject.dataset.projectStatus || "10";
        statusCounts[status] = (statusCounts[status] || 0) + 1;
      });

      // Update each filter button's data-count attribute
      const filterButtons =
        this.buttonsContainer.querySelectorAll(".filter-btn");
      filterButtons.forEach((button) => {
        const htmlButton = button as HTMLButtonElement;
        const status = htmlButton.dataset.status;

        if (status) {
          let count = 0;

          if (status === "all") {
            // Count all projects for "All Projects" button
            count = allProjects.length;
          } else {
            // Count projects with specific status
            count = statusCounts[status] || 0;
          }

          // Update data-count attribute (CSS will handle showing/hiding)
          htmlButton.dataset.count = count.toString();
        }
      });
    }

    show() {
      if (this.container) {
        this.container.classList.remove("hidden");
      }
    }

    hide() {
      if (this.container) {
        this.container.classList.add("hidden");
      }
    }

    reset() {
      this.setActiveFilter("all");
      this.filterProjects("all");
    }
  }

  // Search Filter Class for Text-based Filtering
  class ProjectSearchFilter {
    private searchInputAdmin: HTMLInputElement | null;
    private searchInputClient: HTMLInputElement | null;

    constructor() {
      this.searchInputAdmin = document.getElementById("project-search-input") as HTMLInputElement;
      this.searchInputClient = document.getElementById("project-search-input-client") as HTMLInputElement;
      this.setupEventListeners();
    }

    setupEventListeners() {
      if (this.searchInputAdmin) {
        this.setupSearchInput(this.searchInputAdmin, "projects-list");
      }
      if (this.searchInputClient) {
        this.setupSearchInput(this.searchInputClient, "client-projects-container");
      }
    }

    setupSearchInput(searchInput: HTMLInputElement, containerId: string) {
      let debounceTimer: ReturnType<typeof setTimeout>;

      searchInput.addEventListener("input", (e) => {
        clearTimeout(debounceTimer);

        debounceTimer = setTimeout(() => {
          const searchTerm = (e.target as HTMLInputElement).value
            .trim()
            .toLowerCase();

          this.filterProjects(searchTerm, containerId);
        }, 300);
      });
    }

    filterProjects(searchTerm: string, containerId: string) {
      const container = document.getElementById(containerId);
      if (!container) return;

      // Look for projects in various possible containers
      let projectItems = container.querySelectorAll("[data-project-status]");
      
      // If no projects found, try looking in nested accordions or lists
      if (projectItems.length === 0) {
        const hasSearchText = container.querySelectorAll("[data-search-text]").length > 0;
        if (hasSearchText) {
          projectItems = Array.from(container.querySelectorAll("*")).filter(el => el.closest("[data-search-text]"));
        } else {
          projectItems = container.querySelectorAll(".project-item, .accordion-item, [class*='project']");
        }
      }

      let visibleCount = 0;

      projectItems.forEach((item) => {
        const htmlItem = item as HTMLElement;

        if (searchTerm === "") {
          htmlItem.style.display = "block";
          visibleCount++;
        } else {
          // Get searchable text content
          let textContent = "";
          
          // Try data-search-text elements first
          const searchTextElements = htmlItem.querySelectorAll("[data-search-text]");
          if (searchTextElements.length > 0) {
            searchTextElements.forEach((el) => {
              textContent += " " + (el.textContent || "").toLowerCase();
            });
          } else {
            // Fallback to all text content
            textContent = (htmlItem.textContent || "").toLowerCase();
          }

          if (textContent.includes(searchTerm)) {
            htmlItem.style.display = "block";
            visibleCount++;
          } else {
            htmlItem.style.display = "none";
          }
        }
      });

      // Update placeholder with results count
      const searchInput = containerId === "projects-list" ? this.searchInputAdmin : this.searchInputClient;
      if (searchInput && searchTerm !== "") {
        searchInput.placeholder = `Showing ${visibleCount} of ${projectItems.length} projects`;
      } else if (searchInput) {
        searchInput.placeholder = "Filter projects...";
      }

      console.log(`Search filter applied in ${containerId}: "${searchTerm}" - ${visibleCount}/${projectItems.length} items visible`);
    }

    reset() {
      if (this.searchInputAdmin) {
        this.searchInputAdmin.value = "";
        this.filterProjects("", "projects-list");
      }
      if (this.searchInputClient) {
        this.searchInputClient.value = "";
        this.filterProjects("", "client-projects-container");
      }
    }
  }

  // Global instances
  const projectFilter = new ProjectFilter();
  const projectSearchFilter = new ProjectSearchFilter();

  // Make them globally accessible
  window.projectFilter = projectFilter;
  (window as any).projectSearchFilter = projectSearchFilter;
</script>




<style>
  /* Use shared data-count bubble styles from global.css */
  .tab-btn {
    --count-bubble-bg: #0ea5e9; /* bg-sky-500 */
  }

  /* Hover effect for consistency */
  .tab-btn:hover::after {
    transform: translateX(50%) translateY(-50%) scale(1.1);
  }
</style>


