---
// import { getI18N } from "@/i18n";
import IconMoon from "../../icons/IconMoon.astro";
import IconSun from "../../icons/IconSun.astro";
import HeroButton from "../HeroButton.astro";
// import LanguagePicker from "../LanguagePicker.astro";
import Tooltip from "../Tooltip.astro";
import NavLi from "./NavLi.astro";
// const { currentLocale } = Astro;s
// const i18n = getI18N({ currentLocale });

console.log("ðŸ“‹ [HEADER] Header component loading...");

// Check authentication
import { checkAuth } from "../../lib/auth";
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Navigation schema
interface NavItem {
  label: string;
  href: string;
  requiresAuth?: boolean;
  hideWhenAuth?: boolean;
  adminOnly?: boolean;
  primary?: boolean; // For styling primary CTA buttons
}

const primaryNavigation: NavItem[] = [
  {
    label: "About",
    href: "/about",
  },
  {
    label: "Projects",
    href: "/projects",
  },
  {
    label: "Login",
    href: "/login",
    hideWhenAuth: true,
    primary: true,
  },
  {
    label: "Dashboard",
    href: "/dashboard",
    requiresAuth: true,
    primary: true,
  },
];

const adminNavigation: NavItem[] = [
  {
    label: "PDF Review",
    href: "/pdf-review",
    adminOnly: true,
  },
  {
    label: "Services Test",
    href: "/services-test",
    adminOnly: true,
  },
  {
    label: "PDF Editor",
    href: "/pdf-editor",
    adminOnly: true,
  },
];

// Filter navigation items based on auth state and role
function getVisibleNavItems(navItems: NavItem[], isAuth: boolean, role?: string | null): NavItem[] {
  return navItems.filter((item) => {
    // Hide if requires auth but user not authenticated
    if (item.requiresAuth && !isAuth) return false;

    // Hide if should be hidden when authenticated
    if (item.hideWhenAuth && isAuth) return false;

    // Hide if admin only but user is not admin
    if (item.adminOnly && role !== "Admin") return false;

    return true;
  });
}

const visiblePrimaryNav = getVisibleNavItems(primaryNavigation, isAuth, role);
const visibleAdminNav = getVisibleNavItems(adminNavigation, isAuth, role);
---

<header class="sticky top-0 z-30 mb-2 bg-hub-background pb-2 pt-4 dark:bg-hub-background-dark">
  <div class="mx-6 flex justify-between">
    <a href="/">
      <!--?xml version="1.0" encoding="UTF-8"?-->
      <svg
        id="Layer_1"
        xmlns="http://www.w3.org/2000/svg"
        width="100"
        version="1.1"
        viewBox="0 0 400 143.7"
      >
        <defs>
          <style>
            .fill {
              fill: black;
            }

            .dark .fill {
              fill: white;
            }
          </style>
        </defs>
        <g>
          <path class="fill" d="M60.7,135.7c-.7-.9-1.2-2.2-2.7-2"></path>
          <path
            class="fill"
            d="M38.3,133.2c-7.6-16.2-6.7-28.6-.5-44.8,4-10.2,18.3-31.4,15.9-41.8-1.3-5.7-2.5-11.9-4.1-17.4s-3.4-3-.9-3.6c10.2,12.1,18.8,22,18.4,38.9-.2,8.8-6.2,19.5,0,27,6.1,7.5,12.8,1,17.5-4.5l3.4-10.1c9.3,17.7,9.3,40.6-3.6,56.4"
          ></path>
          <path
            class="fill"
            d="M22.4,124.8c-1.4.6-1.8-1.4-2.4-2.4-24.6-36.8,20.1-62.5,12.1-98.8s-4.8-10-6.4-15.2c6.9,6,11.2,14.4,12.6,23.5,3.8,24.4-20.9,45.2-21,69.2s2.1,15.6,5.1,23.7Z"
          ></path>
          <path
            class="fill"
            d="M46.3,47.4c1.6,14-9.3,28.5-13.8,41.3-5.3,15.2-7.6,29.8,1.6,44.2-18.4-15.9-12.7-38.6-3.9-57.9,3.8-8.5,10.8-17.2,12.1-26.6.6-4.2-.2-8.3-.3-12.4,0-1.2-.8-3.3.8-3.4.7,4.8,3,10.1,3.5,14.8Z"
          ></path>
          <path class="fill" d="M72.6,90.3c-8.6-4.5-3-15.6-2.5-22.9v-15.3c6.7,12.5.7,25.3,2.5,38.3Z"
          ></path>
        </g>
        <g>
          <path
            class="fill"
            d="M158.4,134.4c-7.6,0-14.7-1.3-21.3-4s-12.2-6.4-17.1-11.3c-4.9-4.8-8.7-10.5-11.4-16.9-2.7-6.4-4.1-13.4-4.1-20.8s1.4-14.4,4.1-20.8c2.7-6.4,6.5-12,11.4-16.8,4.9-4.7,10.6-8.4,17.1-11.1,6.5-2.7,13.6-4,21.3-4s15.4,1.3,21.7,3.9c6.3,2.6,11.9,6.2,16.6,10.7l-15.4,15.5c-2.6-2.9-5.8-5.2-9.7-6.8-3.8-1.6-8.3-2.5-13.3-2.5s-8.5.8-12.2,2.3c-3.7,1.5-6.9,3.7-9.6,6.5-2.7,2.8-4.8,6.2-6.2,10.2-1.5,4-2.2,8.3-2.2,12.9s.7,9.2,2.2,13.1c1.5,3.9,3.5,7.3,6.2,10.2,2.7,2.9,5.9,5,9.6,6.5,3.7,1.5,7.7,2.3,12.2,2.3s9.8-.8,13.7-2.4c3.9-1.6,7.2-3.9,9.9-6.9l15.5,15.5c-4.8,4.6-10.5,8.3-16.8,10.8s-13.8,3.8-22.2,3.8Z"
          ></path>
          <path
            class="fill"
            d="M276.9,132.8h24.3l-40.2-102.5h-20.8l-40.5,102.5h23.7l6.8-18.4h40.1l6.7,18.4ZM237,95.7l13.4-36.4,13.1,36.4h-26.6Z"
          ></path>
          <path
            class="fill"
            d="M385.1,45.4c-3-4.9-7.2-8.6-12.5-11.3-5.3-2.6-11.2-3.9-17.6-3.9h-43v102.5h22.9v-37.3h20c6.5,0,12.4-1.3,17.6-3.9,5.3-2.6,9.4-6.4,12.5-11.3,3-4.9,4.6-10.7,4.6-17.4s-1.5-12.6-4.6-17.5ZM364.7,70.9c-1.4,2.2-3.2,3.9-5.4,5-2.3,1.1-4.8,1.7-7.6,1.7h-16.7v-29.5h16.7c2.8,0,5.3.6,7.6,1.7,2.3,1.1,4.1,2.8,5.4,5,1.4,2.2,2,4.9,2,8.1s-.7,5.8-2,8Z"
          ></path>
        </g>
      </svg>
    </a>

    <!-- Main Navigation (Desktop) -->
    <nav class="hidden items-center space-x-8 md:flex">
      {
        visiblePrimaryNav.map((item) =>
          item.primary ? (
            <a
              href={item.href}
              class="inline-flex items-center rounded-lg bg-red-600 px-4 py-2 font-medium text-white transition-colors hover:bg-red-700"
            >
              {item.label}
            </a>
          ) : (
            <a
              href={item.href}
              class="font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
            >
              {item.label}
            </a>
          )
        )
      }
    </nav>

    <!-- Admin Navigation (when authenticated as admin) -->
    {
      visibleAdminNav.length > 0 && (
        <nav class="ml-8 hidden items-center space-x-4 border-l border-gray-300 pl-8 dark:border-gray-600 lg:flex">
          {visibleAdminNav.map((item) => (
            <NavLi
              href={item.href}
              aria-label={`btn-${item.label.toLowerCase().replace(/\s+/g, "-")}`}
              class="tab-btn relative text-sm"
            >
              {item.label}
            </NavLi>
          ))}
        </nav>
      )
    }

    <div class="flex flex-wrap gap-2">
      <!-- Add User Link (Admin Only) -->
      {
        role === "Admin" && (
          <Tooltip content="Add User">
            <a
              href="/create-staff"
              aria-label="btn-add-user"
              class="flex size-8 items-center justify-center rounded-full bg-blue-600 text-white transition-colors hover:bg-blue-700"
            >
              <i class="bx bx-user-plus text-lg" />
            </a>
          </Tooltip>
        )
      }

      <HeroButton aria-label="btn-theme" id="toggle-theme" class="size-8">
        <IconSun class="size-5 dark:hidden" />
        <IconMoon class="hidden size-5 dark:inline" />
      </HeroButton>

      {/* <LanguagePicker /> */}

      <div class="relative">
        {
          isAuth ? (
            // Authenticated: Profile Button with Dropdown
            <Tooltip content="Profile" variant="link" href="/profile">
              <HeroButton
                aria-label="btn-profile"
                id="profile-btn"
                class="size-8 overflow-hidden rounded-full"
              >
                <img
                  id="user-avatar"
                  src=""
                  alt="User avatar"
                  class="h-full w-full object-cover"
                  onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                />
                <i class="bx bx-user bx-sm" style="display:none;" />
              </HeroButton>

              <!-- Dropdown menu -->
              <div
                id="profile-dropdown"
                class="absolute right-0 top-full mt-2 hidden w-48 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 dark:bg-gray-800 dark:ring-gray-700"
              >
                <div class="py-1">
                  <a
                    href="/profile"
                    class="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-200 dark:hover:bg-gray-700"
                  >
                    <i class="bx bx-user bx-sm mr-2" />
                    Profile
                  </a>
                  <button
                    id="logout-btn"
                    class="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-200 dark:hover:bg-gray-700"
                  >
                    <i class="bx bx-log-out bx-sm mr-2" />
                    Logout
                  </button>
                </div>
              </div>
            </Tooltip>
          ) : (
            // Not Authenticated: Login Button
            <Tooltip content="Login" variant="link" href="/login" placement="bottom">
              <HeroButton
                aria-label="btn-profile"
                id="profile-btn"
                class="size-8 overflow-hidden rounded-full"
              >
                <i class="bx bx-log-in text-lg text-gray-700 dark:text-gray-300" />

              </HeroButton>
              {/* <div
                aria-label="btn-login"
                class="flex size-8 cursor-pointer items-center justify-center rounded-full bg-gray-100 transition-colors hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700"
              >
              </div> */}
            </Tooltip>
          )
        }

        {/* Mobile Menu Button (Hamburger) */}
        <button
          id="mobile-menu-btn"
          aria-label="Open mobile menu"
          class="flex size-8 items-center justify-center text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400 md:hidden"
        >
          <i id="hamburger-icon" class="bx bx-menu text-xl"></i>
          <i id="close-icon" class="bx bx-x hidden text-xl"></i>
        </button>
      </div>
    </div>
  </div>

  {/* Mobile Navigation Menu */}
  <div
    id="mobile-menu"
    class="hidden border-b border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800 md:hidden"
  >
    <nav class="space-y-4 px-6 py-4">
      {/* Primary Navigation */}
      {
        visiblePrimaryNav.map((item) =>
          item.primary ? (
            <a
              href={item.href}
              class="block w-full rounded-lg bg-red-600 px-4 py-3 text-center font-medium text-white transition-colors hover:bg-red-700"
            >
              {item.label}
            </a>
          ) : (
            <a
              href={item.href}
              class="block py-2 font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
            >
              {item.label}
            </a>
          )
        )
      }

      {/* Admin Tools Section */}
      {
        visibleAdminNav.length > 0 && (
          <div class="mt-4 border-t border-gray-200 pt-4 dark:border-gray-700">
            <p class="mb-2 text-sm font-medium text-gray-500 dark:text-gray-400">Admin Tools</p>
            {visibleAdminNav.map((item) => (
              <a
                href={item.href}
                class="block py-2 text-gray-600 transition-colors hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400"
              >
                {item.label}
              </a>
            ))}
          </div>
        )
      }
    </nav>
  </div>
</header>

<script type="module" define:vars={{ session }}>
  console.log("ðŸ“‹ [HEADER] Header script execution started");
  console.log("ðŸ“‹ [HEADER] Session data:", session);

  const profileBtn = document.getElementById("profile-btn");
  const userAvatar = document.getElementById("user-avatar");
  const fallbackIcon = userAvatar?.nextElementSibling;
  const profileDropdown = document.getElementById("profile-dropdown");
  const logoutBtn = document.getElementById("logout-btn");

  // Mobile menu elements
  const mobileMenuBtn = document.getElementById("mobile-menu-btn");
  const mobileMenu = document.getElementById("mobile-menu");
  const hamburgerIcon = document.getElementById("hamburger-icon");
  const closeIcon = document.getElementById("close-icon");

  console.log("ðŸ“‹ [HEADER] DOM elements found:", {
    profileBtn: !!profileBtn,
    userAvatar: !!userAvatar,
    fallbackIcon: !!fallbackIcon,
    profileDropdown: !!profileDropdown,
    logoutBtn: !!logoutBtn,
    mobileMenuBtn: !!mobileMenuBtn,
    mobileMenu: !!mobileMenu,
    hamburgerIcon: !!hamburgerIcon,
    closeIcon: !!closeIcon,
  });

  // Initialize mobile menu icon states
  if (hamburgerIcon && closeIcon) {
    hamburgerIcon.classList.remove("hidden");
    closeIcon.classList.add("hidden");
    console.log("ðŸ“‹ [HEADER] Mobile menu icons initialized");
  }

  function updateProfileButton(session) {
    console.log("ðŸ“‹ [HEADER] updateProfileButton called with session:", session);

    if (session && session.data.user) {
      const avatarUrl = session.data.user.user_metadata?.avatar_url;
      console.log("ðŸ“‹ [HEADER] Avatar URL:", avatarUrl);

      // Only update avatar if elements exist (user is authenticated)
      if (userAvatar && fallbackIcon) {
        if (avatarUrl) {
          userAvatar.src = avatarUrl;
          userAvatar.style.display = "block";
          fallbackIcon.style.display = "none";
          console.log("ðŸ“‹ [HEADER] Using avatar image");
        } else {
          userAvatar.style.display = "none";
          fallbackIcon.style.display = "block";
          console.log("ðŸ“‹ [HEADER] Using fallback icon");
        }
      }
      console.log("ðŸ“‹ [HEADER] Profile button configured for authenticated user");
    } else {
      console.log("ðŸ“‹ [HEADER] Profile button configured for unauthenticated user - avatar elements not present");
    }
  }

  // Check initial auth state
  console.log("ðŸ“‹ [HEADER] Checking initial auth state...");
  updateProfileButton(session);

  // Toggle dropdown (only if profile button exists - when authenticated)
  if (profileBtn) {
    profileBtn.addEventListener("click", (e) => {
      console.log("ðŸ“‹ [HEADER] Profile button clicked");
      e.stopPropagation();
      if (profileDropdown) {
        profileDropdown.classList.toggle("hidden");
        console.log("ðŸ“‹ [HEADER] Dropdown toggled");
      }
    });
  }

  // Close dropdown when clicking outside
  document.addEventListener("click", () => {
    if (profileDropdown) {
      console.log("ðŸ“‹ [HEADER] Document clicked, closing dropdown");
      profileDropdown.classList.add("hidden");
    }
  });

  // Mobile menu toggle functionality
  function toggleMobileMenu() {
    if (!mobileMenu || !hamburgerIcon || !closeIcon) {
      console.error("ðŸ“‹ [HEADER] Missing mobile menu elements");
      return;
    }

    const isOpen = !mobileMenu.classList.contains("hidden");

    if (isOpen) {
      // Close menu
      mobileMenu.classList.add("hidden");
      hamburgerIcon.classList.remove("hidden");
      closeIcon.classList.add("hidden");
      console.log("ðŸ“‹ [HEADER] Mobile menu closed");
    } else {
      // Open menu
      mobileMenu.classList.remove("hidden");
      hamburgerIcon.classList.add("hidden");
      closeIcon.classList.remove("hidden");
      console.log("ðŸ“‹ [HEADER] Mobile menu opened");
    }
  }

  // Mobile menu button event listener
  if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
  }

  // Close mobile menu when clicking outside or on menu links
  document.addEventListener("click", (e) => {
    if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
      // Close if clicking outside the mobile menu
      if (!mobileMenu.contains(e.target) && !mobileMenuBtn?.contains(e.target)) {
        mobileMenu.classList.add("hidden");
        if (hamburgerIcon && closeIcon) {
          hamburgerIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
        console.log("ðŸ“‹ [HEADER] Mobile menu closed by outside click");
      }
    }
  });

  // Close mobile menu when clicking on navigation links
  if (mobileMenu) {
    const mobileNavLinks = mobileMenu.querySelectorAll("a");
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
        if (hamburgerIcon && closeIcon) {
          hamburgerIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
        console.log("ðŸ“‹ [HEADER] Mobile menu closed by navigation link click");
      });
    });
  }

  // Logout functionality (only if logout button exists - when authenticated)
  if (logoutBtn) {
    logoutBtn.addEventListener("click", async () => {
      console.log("ðŸ“‹ [HEADER] Logout button clicked");
      try {
        console.log("ðŸ“‹ [HEADER] Sending logout request...");
        const response = await fetch("/api/auth/signout", {
          method: "POST",
        });
        console.log("ðŸ“‹ [HEADER] Logout response status:", response.status);

        if (response.ok) {
          console.log("ðŸ“‹ [HEADER] Logout successful, redirecting...");
          window.location.href = "/";
        } else {
          console.error("ðŸ“‹ [HEADER] Logout failed with status:", response.status);
        }
      } catch (error) {
        console.error("ðŸ“‹ [HEADER] Logout error:", error);
      }
      if (profileDropdown) {
        profileDropdown.classList.add("hidden");
      }
    });
  }
</script>
