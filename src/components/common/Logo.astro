---
import { replacePlaceholders } from "../../lib/placeholder-utils";

const logoSvg = replacePlaceholders("{{COMPANY_LOGO_LIGHT}}", null);
const logoSvgLight = replacePlaceholders("{{COMPANY_LOGO_LIGHT}}", null);
const logoSvgDark = replacePlaceholders("{{COMPANY_LOGO_DARK}}", null);
const logoSvgIcon = replacePlaceholders("{{COMPANY_ICON}}", null);
const logoSvgIconLight = replacePlaceholders("{{COMPANY_ICON_LIGHT}}", null);
const logoSvgIconDark = replacePlaceholders("{{COMPANY_ICON_DARK}}", null);

export interface Props {
  file?: "svg" | "string" | "data-url" | "base64";
  size?: "sm" | "md" | "lg" | "xl";
  link?: string;
  className?: string;
  isBackend?: boolean;
}

const { file = "svg", link = "/", size = "md", isBackend } = Astro.props;
// Defensive: ensure link is a URL/path, not raw SVG/XML accidentally passed in
const safeLink =
  typeof link === "string" && !link.trim().startsWith("<") && !link.trim().startsWith("%3C")
    ? link
    : "/";
// Get the logo SVG content with the current size
// const logoSvg = getCapcoLogoSvg(size, file, link);

// Return different types based on the file prop
if (file === "string") {
  // Return just the SVG string for use in utilities
  return logoSvg;
} else if (file === "data-url") {
  // Return as data URL
  const encoded = Buffer.from(logoSvg).toString("base64");
  return `data:image/svg+xml;base64,${encoded}`;
} else if (file === "base64") {
  // Return just the base64 encoded string
  return Buffer.from(logoSvg).toString("base64");
}
---

{
  file === "svg" && link && isBackend ? (
    <a
      class="flex sm:hidden w-10"
      href={safeLink}
      title="Go to home page"
      set:html={logoSvgIconLight}
    />
    <a class="hidden sm:flex" href={safeLink} title="Go to home page" set:html={logoSvg} />

  ) : (
    file === "svg" && link && !isBackend && (
      <a href={safeLink} title="Go to home page" set:html={logoSvg} />
    )
  )
}
{file === "svg" && !link && <div set:html={logoSvg} />}
