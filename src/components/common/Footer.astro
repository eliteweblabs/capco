---
// import { getI18N } from "@/i18n";
import Logo from "./Logo.astro";
// Check authentication
import { checkAuth } from "../../lib/auth";
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
console.log("ðŸ“‹ [HEADER] currentUrl:", currentUrl);
const isBackendPage =
  currentUrl.startsWith("/dashboard") ||
  currentUrl.startsWith("/project/") || // Only match /project/123, not /projects
  currentUrl.startsWith("/pdf-review") ||
  currentUrl.startsWith("/pdf-editor") ||
  currentUrl.startsWith("/admin") ||
  currentUrl.startsWith("/create-staff");

// Navigation schema
type UserRole = "any" | "client" | "admin" | "adminStaff";
type NavType = "frontend" | "backend";

interface NavItem {
  label: string;
  href: string;
  roles: UserRole[]; // Array of roles that can access this item
  isPrimary: boolean; // For styling primary CTA buttons
  pageType: NavType; // Frontend or backend navigation
}

const navigation: NavItem[] = [
  // Always visible - Home link for easy return to main site
  // {
  //   label: "Home",
  //   href: "/",
  //   roles: ["any"],
  //   pageType: "frontend",
  //   isPrimary: currentUrl === "/",
  // },

  // Frontend navigation (hidden on backend pages to reduce clutter)
  {
    label: "About",
    href: "/about",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/about"),
  },
  {
    label: "Projects",
    href: "/projects",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/projects"),
  },

  // Backend navigation (shown on backend pages)
  {
    label: "Dashboard",
    href: "/dashboard",
    roles: ["client", "admin", "adminStaff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/dashboard"),
  },
  // {
  //   label: "PDF Review",
  //   href: "/pdf-review",
  //   roles: ["admin", "adminStaff"],
  //   type: "backend",
  // },
  {
    label: "PDF Editor",
    href: "/pdf-editor",
    roles: ["admin", "adminStaff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/pdf-editor"),
  },
  {
    label: "User Management",
    href: "/create-staff",
    roles: ["admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/create-staff"),
  },
  {
    label: "Global Activity",
    href: "/admin/global-activity",
    roles: ["admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/admin/global-activity"),
  },
];

// Filter navigation items based on auth state, role, and page type
function getVisibleNavItems(
  navItems: NavItem[],
  isAuth: boolean,
  userRole?: string | null,
  isBackendPage: boolean = false
): NavItem[] {
  return navItems.filter((item) => {
    // Always show Home link - users should always be able to return to main site
    if (item.href === "/") {
      return true;
    }

    // Page type filtering - hide other frontend nav on backend pages to reduce clutter
    if (isBackendPage && item.pageType === "frontend") {
      return false;
    }

    // Show backend nav only on backend pages
    if (item.pageType === "backend" && !isBackendPage) {
      return false;
    }

    // If item allows "any" role, show it based on page type rules above
    if (item.roles.includes("any")) return true;

    // If user is not authenticated, only show "any" role items
    if (!isAuth) return false;

    // Map database role to our role system
    const mappedRole: UserRole = userRole === "Admin" ? "admin" : "client";

    // Check if user's role is in the allowed roles for this item
    return item.roles.includes(mappedRole);
  });
}

const visibleNavigation = getVisibleNavItems(navigation, isAuth, role, isBackendPage);
---

<footer class="bottom-0 z-10 mb-2 bg-hub-background pb-2 pt-4 dark:bg-hub-background-dark">
  <div class="relative mx-6 flex items-center justify-between">
    <!-- Navigation (Desktop) -->
    <!-- <nav class="hidden items-center space-x-8 md:flex">
      {
        visibleNavigation.map((item) =>
          item.isPrimary ? (
            <a
              href={item.href}
              class="inline-flex items-center rounded-lg bg-red-600 px-4 py-2 font-medium text-white transition-colors hover:bg-red-700"
            >
              {item.label}
            </a>
          ) : (
            <a
              href={item.href}
              class="font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
            >
              {item.label}
            </a>
          )
        )
      }
    </nav> -->

    <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        &copy; {new Date().getFullYear()} CAPCo Fire. All rights reserved.
      </p>
    </div>

    <Logo />

    <!-- <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        <a href="/privacy-policy" class="text-gray-500 hover:text-red-600">Privacy Policy</a>
      </p>
    </div>

    <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        <a href="/terms-of-service" class="text-gray-500 hover:text-red-600">Terms of Service</a>
      </p>
    </div>

    <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        <a href="/contact" class="text-gray-500 hover:text-red-600">Contact Us</a>
      </p>
    </div>

    <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        <a href="/faq" class="text-gray-500 hover:text-red-600">FAQ</a>
      </p>
    </div>

    <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        <a href="/blog" class="text-gray-500 hover:text-red-600">Blog</a>
      </p>
    </div>

    <div class="flex items-center justify-center">
      <p class="text-sm text-gray-500">
        <a href="/careers" class="text-gray-500 hover:text-red-600">Careers</a>
      </p>
    </div> -->
  </div>
</footer>
