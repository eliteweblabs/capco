---
import BoxIcon from "./BoxIcon.astro";
import Button from "./Button.astro";

export interface Props {
  title?: string;
  showFilters?: boolean;
  limit?: number;
  class?: string;
}

const {
  title = "Global Discussions Feed",
  showFilters = true,
  limit = 50,
  class: className = "",
} = Astro.props;
---

<div
  class={`rounded-lg border bg-gray-100 shadow-sm dark:border-gray-700 dark:bg-gray-800 ${className}`}
  data-limit={limit}
>
  <!-- Header -->
  <div class="border-b border-gray-200 p-6 dark:border-gray-700">
    <div class="flex items-center justify-between">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
        <BoxIcon name="message-square-dots" class="mr-2 inline text-blue-600 dark:text-blue-400" />
        {title}
      </h2>
      <Button id="refresh-discussions-feed" variant="primary" icon="refresh" iconPosition="left">
        Refresh
      </Button>
    </div>

    <!-- Filter Controls -->
    {
      showFilters && (
        <div class="mt-4 flex flex-wrap gap-3">
          <select
            id="internal-filter"
            class="rounded-full border border-gray-300 bg-gray-100 px-3 py-1.5 text-sm text-gray-700 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300"
          >
            <option value="all">All Discussions</option>
            <option value="false">Client Visible</option>
            <option value="true">Internal Only</option>
          </select>

          <select
            id="completed-filter"
            class="rounded-full border border-gray-300 bg-gray-100 px-3 py-1.5 text-sm text-gray-700 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300"
          >
            <option value="all">All Status</option>
            <option value="false">Active</option>
            <option value="true">Completed</option>
          </select>

          <input
            type="text"
            id="user-filter"
            placeholder="Filter by author..."
            class="rounded-full border border-gray-300 bg-gray-100 px-3 py-1.5 text-sm text-gray-700 placeholder-gray-400 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:placeholder-gray-500"
          />

          <input
            type="text"
            id="project-filter"
            placeholder="Filter by project..."
            class="rounded-full border border-gray-300 bg-gray-100 px-3 py-1.5 text-sm text-gray-700 placeholder-gray-400 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:placeholder-gray-500"
          />
        </div>
      )
    }
  </div>

  <!-- Loading State -->
  <div id="discussions-feed-loading" class="flex items-center justify-center py-12">
    <div class="flex items-center space-x-3 text-gray-500 dark:text-gray-400">
      <div class="h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600">
      </div>
      <span>Loading discussions...</span>
    </div>
  </div>

  <!-- Error State -->
  <div id="discussions-feed-error" class="hidden p-6">
    <div class="rounded-full bg-red-50 p-4 text-red-800 dark:bg-red-900/20 dark:text-red-400">
      <div class="flex items-center space-x-2">
        <BoxIcon name="error-circle" class="text-lg" />
        <span
          >Failed to load discussions feed. <button
            id="retry-discussions-feed"
            class="underline hover:no-underline">Try again</button
          ></span
        >
      </div>
    </div>
  </div>

  <!-- Empty State -->
  <div id="discussions-feed-empty" class="hidden p-6">
    <div class="py-8 text-center">
      <BoxIcon name="message-x" class="mx-auto mb-3 text-4xl text-gray-400 dark:text-gray-600" />
      <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">No Discussions Found</h3>
      <p class="text-gray-500 dark:text-gray-400">No discussions found with the current filters.</p>
    </div>
  </div>

  <!-- Discussions Feed Content -->
  <div id="discussions-feed-content" class="hidden">
    <div class="p-6">
      <!-- Stats Summary -->
      <div id="discussions-stats" class="mb-6 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <div class="rounded-lg bg-blue-50 p-4 dark:bg-blue-900/20">
          <div class="flex items-center">
            <BoxIcon name="message-square-dots" class="mr-2 text-blue-600 dark:text-blue-400" />
            <div>
              <p class="text-sm text-blue-600 dark:text-blue-400">Total Discussions</p>
              <p
                id="total-discussions"
                class="text-lg font-semibold text-blue-900 dark:text-blue-100"
              >
                -
              </p>
            </div>
          </div>
        </div>

        <div class="rounded-lg bg-green-50 p-4 dark:bg-green-900/20">
          <div class="flex items-center">
            <BoxIcon name="time" class="mr-2 text-green-600 dark:text-green-400" />
            <div>
              <p class="text-sm text-green-600 dark:text-green-400">Recent (24h)</p>
              <p
                id="recent-discussions"
                class="text-lg font-semibold text-green-900 dark:text-green-100"
              >
                -
              </p>
            </div>
          </div>
        </div>

        <div class="rounded-lg bg-purple-50 p-4 dark:bg-purple-900/20">
          <div class="flex items-center">
            <BoxIcon name="group" class="mr-2 text-purple-600 dark:text-purple-400" />
            <div>
              <p class="text-sm text-purple-600 dark:text-purple-400">Active Users</p>
              <p
                id="active-users-discussions"
                class="text-lg font-semibold text-purple-900 dark:text-purple-100"
              >
                -
              </p>
            </div>
          </div>
        </div>

        <div class="rounded-lg bg-orange-50 p-4 dark:bg-orange-900/20">
          <div class="flex items-center">
            <BoxIcon name="check-circle" class="mr-2 text-orange-600 dark:text-orange-400" />
            <div>
              <p class="text-sm text-orange-600 dark:text-orange-400">Completed</p>
              <p
                id="completed-discussions"
                class="text-lg font-semibold text-orange-900 dark:text-orange-100"
              >
                -
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Discussions Timeline -->
      <div id="discussions-timeline" class="space-y-4">
        <!-- Discussions will be dynamically inserted here -->
      </div>

      <!-- Load More Button -->
      <div id="load-more-container" class="mt-6 text-center">
        <button
          id="load-more-btn"
          class="rounded-full border border-gray-300 bg-gray-100 px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
        >
          Load More Discussions
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  interface GlobalDiscussion {
    id: number;
    projectId: number;
    address: string;
    title: string;
    projectOwner: string;
    projectOwnerId: string;
    authorId: string;
    authorName: string;
    authorRole: string;
    authorAvatar?: string;
    authorFirstName?: string;
    authorLastName?: string;
    message: string;
    internal: boolean;
    markCompleted: boolean;
    parentId?: number;
    isReply: boolean;
    imageUrls?: string[];
    imagePaths?: any;
    companyName?: string;
    createdAt: string;
    updatedAt: string;
  }

  interface DiscussionsFeedResponse {
    success: boolean;
    discussions: GlobalDiscussion[];
    total: number;
    totalAll: number;
    stats: {
      total: number;
      internal: number;
      completed: number;
      replies: number;
      recent_24h: number;
      active_users_24h: number;
    };
    pagination: {
      limit: number;
      offset: number;
      hasMore: boolean;
    };
  }

  class GlobalDiscussionsFeedManager {
    private currentOffset = 0;
    private currentLimit = parseInt(
      document.querySelector("[data-limit]")?.getAttribute("data-limit") || "50"
    );
    private allDiscussions: GlobalDiscussion[] = [];
    private filteredDiscussions: GlobalDiscussion[] = [];

    constructor() {
      this.loadDiscussions();
      this.setupEventListeners();
    }

    private setupEventListeners() {
      // Refresh button
      document
        .getElementById("refresh-discussions-feed")
        ?.addEventListener("click", () => this.refresh());

      // Retry button
      document
        .getElementById("retry-discussions-feed")
        ?.addEventListener("click", () => this.refresh());

      // Load more button
      document.getElementById("load-more-btn")?.addEventListener("click", () => this.loadMore());

      // Filter listeners
      document
        .getElementById("internal-filter")
        ?.addEventListener("change", () => this.applyFilters());

      document
        .getElementById("completed-filter")
        ?.addEventListener("change", () => this.applyFilters());

      document
        .getElementById("user-filter")
        ?.addEventListener("input", () => this.debounce(() => this.applyFilters(), 300));

      document
        .getElementById("project-filter")
        ?.addEventListener("input", () => this.debounce(() => this.applyFilters(), 300));
    }

    private debounce(func: Function, wait: number) {
      let timeout: NodeJS.Timeout;
      return (...args: any[]) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    private async loadDiscussions(offset = 0) {
      try {
        this.showLoading();

        const internalFilter =
          (document.getElementById("internal-filter") as HTMLSelectElement)?.value || "all";
        const completedFilter =
          (document.getElementById("completed-filter") as HTMLSelectElement)?.value || "all";

        const url = `/api/discussions?global=true&limit=${this.currentLimit}&offset=${offset}&internal=${internalFilter}&completed=${completedFilter}`;

        console.log("🔄 [DISCUSSIONS-FEED] Fetching from:", url);

        const response = await fetch(url);
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data: DiscussionsFeedResponse = await response.json();

        console.log(
          `✅ [DISCUSSIONS-FEED] Loaded ${data.discussions.length} discussions`,
          data.stats
        );

        if (offset === 0) {
          this.allDiscussions = data.discussions;
        } else {
          this.allDiscussions = [...this.allDiscussions, ...data.discussions];
        }

        this.currentOffset = offset;

        this.updateStats(data.stats);
        this.applyFilters();

        // Update load more button
        const loadMoreContainer = document.getElementById("load-more-container");
        if (loadMoreContainer) {
          loadMoreContainer.style.display = data.pagination.hasMore ? "block" : "none";
        }
      } catch (error) {
        console.error("❌ [DISCUSSIONS-FEED] Error loading discussions:", error);
        this.showError();
      }
    }

    private applyFilters() {
      const userFilter = (
        document.getElementById("user-filter") as HTMLInputElement
      )?.value.toLowerCase();
      const projectFilter = (
        document.getElementById("project-filter") as HTMLInputElement
      )?.value.toLowerCase();

      this.filteredDiscussions = this.allDiscussions.filter((discussion) => {
        // User filter
        if (userFilter && !discussion.authorName.toLowerCase().includes(userFilter)) {
          return false;
        }

        // Project filter
        if (
          projectFilter &&
          !discussion.address.toLowerCase().includes(projectFilter) &&
          !discussion.title.toLowerCase().includes(projectFilter)
        ) {
          return false;
        }

        return true;
      });

      this.renderDiscussions();
    }

    private renderDiscussions() {
      const timeline = document.getElementById("discussions-timeline");
      if (!timeline) return;

      if (this.filteredDiscussions.length === 0) {
        this.showEmpty();
        return;
      }

      this.showContent();

      timeline.innerHTML = this.filteredDiscussions
        .map((discussion) => this.renderDiscussionItem(discussion))
        .join("");
    }

    private renderDiscussionItem(discussion: GlobalDiscussion): string {
      const timestamp = new Date(discussion.createdAt).toLocaleString();
      const internalBadge = discussion.internal
        ? `<span class="rounded-full bg-yellow-100 px-2 py-1 text-xs font-medium text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400">Internal</span>`
        : "";
      const completedBadge = discussion.markCompleted
        ? `<span class="rounded-full bg-green-100 px-2 py-1 text-xs font-medium text-green-800 dark:bg-green-900/30 dark:text-green-400">Completed</span>`
        : "";
      const replyBadge = discussion.isReply
        ? `<span class="rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900/30 dark:text-blue-400">Reply</span>`
        : "";

      const roleColor =
        discussion.authorRole === "Admin"
          ? "text-purple-600 dark:text-purple-400"
          : discussion.authorRole === "Staff"
            ? "text-blue-600 dark:text-blue-400"
            : "text-green-600 dark:text-green-400";

      return `
        <div class="rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-900/50">
          <div class="mb-3 flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center gap-2 mb-2">
                ${
                  discussion.authorAvatar
                    ? `
                  <img
                    class="h-6 w-6 rounded-full border border-gray-200 dark:border-gray-600 shadow-sm"
                    src="${discussion.authorAvatar}"
                    alt="${discussion.authorName}"
                    onerror="this.style.display='none'; if (this.nextElementSibling) this.nextElementSibling.style.display='flex'"
                  />
                `
                    : ""
                }
                <div class="h-6 w-6 rounded-full border border-gray-200 dark:border-gray-600 shadow-sm bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-xs font-semibold text-white" style="${discussion.authorAvatar ? "display: none;" : ""}">
                  ${discussion.authorName ? discussion.authorName.charAt(0).toUpperCase() : "?"}
                </div>
                <span class="font-semibold ${roleColor}">
                  ${
                    discussion.authorFirstName && discussion.authorLastName
                      ? `${discussion.authorFirstName} ${discussion.authorLastName}`
                      : discussion.authorName
                  }
                </span>
                <span class="text-xs text-gray-500 dark:text-gray-400">(${discussion.authorRole})</span>
                ${internalBadge}
                ${completedBadge}
                ${replyBadge}
              </div>
              <a href="/project/${discussion.projectId}?status=discussion" class="text-sm text-blue-600 hover:underline dark:text-blue-400">
                ${discussion.address || discussion.title}
              </a>
              <span class="mx-2 text-gray-400">•</span>
              <span class="text-xs text-gray-500 dark:text-gray-400">${timestamp}</span>
            </div>
          </div>
          <div class="mt-2 text-gray-700 dark:text-gray-300">
            ${this.escapeHtml(discussion.message)}
          </div>
          ${discussion.imagePaths && Array.isArray(discussion.imagePaths) && discussion.imagePaths.length > 0 ? `<div class="mt-2 text-xs text-gray-500 dark:text-gray-400">📎 ${discussion.imagePaths.length} attachment(s)</div>` : ""}
        </div>
      `;
    }

    private escapeHtml(text: string): string {
      const div = document.createElement("div");
      div.textContent = text;
      return div.innerHTML.replace(/\n/g, "<br>");
    }

    private updateStats(stats: any) {
      document.getElementById("total-discussions")!.textContent = stats.total.toString();
      document.getElementById("recent-discussions")!.textContent = stats.recent_24h.toString();
      document.getElementById("active-users-discussions")!.textContent =
        stats.active_users_24h.toString();
      document.getElementById("completed-discussions")!.textContent = stats.completed.toString();
    }

    private showLoading() {
      document.getElementById("discussions-feed-loading")!.classList.remove("hidden");
      document.getElementById("discussions-feed-error")!.classList.add("hidden");
      document.getElementById("discussions-feed-empty")!.classList.add("hidden");
      document.getElementById("discussions-feed-content")!.classList.add("hidden");
    }

    private showError() {
      document.getElementById("discussions-feed-loading")!.classList.add("hidden");
      document.getElementById("discussions-feed-error")!.classList.remove("hidden");
      document.getElementById("discussions-feed-empty")!.classList.add("hidden");
      document.getElementById("discussions-feed-content")!.classList.add("hidden");
    }

    private showEmpty() {
      document.getElementById("discussions-feed-loading")!.classList.add("hidden");
      document.getElementById("discussions-feed-error")!.classList.add("hidden");
      document.getElementById("discussions-feed-empty")!.classList.remove("hidden");
      document.getElementById("discussions-feed-content")!.classList.add("hidden");
    }

    private showContent() {
      document.getElementById("discussions-feed-loading")!.classList.add("hidden");
      document.getElementById("discussions-feed-error")!.classList.add("hidden");
      document.getElementById("discussions-feed-empty")!.classList.add("hidden");
      document.getElementById("discussions-feed-content")!.classList.remove("hidden");
    }

    private async loadMore() {
      const newOffset = this.currentOffset + this.currentLimit;
      await this.loadDiscussions(newOffset);
    }

    private async refresh() {
      this.currentOffset = 0;
      this.allDiscussions = [];
      this.filteredDiscussions = [];
      await this.loadDiscussions();
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new GlobalDiscussionsFeedManager();
  });
</script>
