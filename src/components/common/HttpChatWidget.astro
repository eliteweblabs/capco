---
// HTTP-based Chat Widget Component - Fixed bottom-right floating chat
// Only visible to Admin/Staff users

interface Props {
  user?: {
    id: string;
    email: string;
  };
  role?: string;
}

const { user, role } = Astro.props;
---

<div
  id="chat-widget"
  class="fixed bottom-4 right-4 z-50"
  data-user-role={role || "Client"}
  data-user-id={user?.id || "unknown"}
  data-user-name={user?.email?.split("@")[0] || "Unknown User"}
>
  <!-- Chat Icon (Always Visible) -->
  <button
    id="chat-toggle"
    class="rounded-full bg-red-600 px-4 py-3 text-white shadow-lg transition-all duration-200 hover:scale-110 hover:bg-red-700"
    title="Team Chat"
  >
    <i class="bx bx-message-rounded-dots text-xl"></i>
  </button>

  <!-- Chat Widget (Hidden by Default) -->
  <div
    id="chat-panel"
    class="h-100 absolute bottom-16 right-0 hidden w-80 rounded-lg border border-gray-200 bg-white shadow-xl dark:border-gray-700 dark:bg-gray-800"
  >
    <!-- Chat Header -->
    <div
      class="flex items-center justify-between rounded-t-lg border-b border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700"
    >
      <div class="flex items-center space-x-2">
        <div
          class="flex h-8 w-8 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/30"
        >
          <i class="bx bx-message-rounded-dots text-red-600 dark:text-red-400"></i>
        </div>
        <div>
          <h3 class="text-sm font-medium text-gray-900 dark:text-white">Team Chat</h3>
          <div class="group relative">
            <p class="cursor-help text-xs text-gray-500 dark:text-gray-400" id="online-count">
              0 online
            </p>
            <!-- Online users tooltip -->
            <div
              class="absolute bottom-full left-0 z-50 mb-2 hidden min-w-32 rounded-lg bg-gray-800 p-2 text-xs text-white shadow-lg group-hover:block"
            >
              <div class="mb-1 font-medium">Online Users:</div>
              <div id="online-users-list" class="space-y-1">
                <div class="text-gray-300">No users online</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <button
        id="chat-close"
        class="text-gray-400 transition-colors hover:text-gray-600 dark:hover:text-gray-300"
      >
        <i class="bx bx-x text-xl"></i>
      </button>
    </div>

    <!-- Chat Messages -->
    <div class="h-64 flex-1 space-y-3 overflow-y-auto p-4" id="chat-messages">
      <div class="py-8 text-center text-sm text-gray-500 dark:text-gray-400">
        <i class="bx bx-message-rounded-dots mx-auto mb-2 text-2xl"></i>
        <p>Start chatting with your team!</p>
      </div>
    </div>

    <!-- Chat Input -->
    <div class="border-t border-gray-200 p-4 dark:border-gray-700">
      <div class="flex space-x-2">
        <input
          type="text"
          id="chat-input"
          placeholder="Type your message..."
          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          maxlength="500"
        />
        <button
          id="chat-send"
          class="rounded-lg bg-red-600 px-4 py-2 text-sm text-white transition-colors hover:bg-red-700 disabled:cursor-not-allowed disabled:opacity-50"
          disabled
        >
          <i class="bx bx-send"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // HTTP-based Chat Widget Functionality
  let currentUser: any = null;
  let onlineUsers: any[] = [];
  let isInitialized = false;
  let heartbeatInterval: any = null;

  // Initialize chat widget
  function initializeChat() {
    if (isInitialized) {
      console.log("ðŸ”” [HTTP-CHAT] Chat widget already initialized, skipping");
      return;
    }

    console.log("ðŸ”” [HTTP-CHAT] Initializing HTTP chat widget");

    // Check if user is Admin/Staff
    const chatWidget = document.getElementById("chat-widget");
    if (!chatWidget) {
      console.log("ðŸ”” [HTTP-CHAT] Chat widget element not found!");
      return;
    }

    const userRole = chatWidget.dataset.userRole || "Client";
    const userId = chatWidget.dataset.userId || "unknown";
    const userName = chatWidget.dataset.userName || "Unknown User";

    console.log("ðŸ”” [HTTP-CHAT] User role:", userRole);
    console.log("ðŸ”” [HTTP-CHAT] User ID:", userId);
    console.log("ðŸ”” [HTTP-CHAT] User name:", userName);

    if (userRole !== "Admin" && userRole !== "Staff") {
      console.log("ðŸ”” [HTTP-CHAT] User not Admin/Staff, hiding chat widget");
      chatWidget.classList.add("hidden");
      return;
    }

    console.log("ðŸ”” [HTTP-CHAT] User is Admin/Staff, showing chat widget");

    // Get current user info
    currentUser = {
      id: userId,
      name: userName,
      role: userRole,
    };

    console.log("ðŸ”” [HTTP-CHAT] Current user:", currentUser);

    // Setup event listeners
    setupChatEvents();

    // Join chat
    joinChat();

    // Start heartbeat
    startHeartbeat();

    isInitialized = true;
    console.log("ðŸ”” [HTTP-CHAT] HTTP chat widget initialization complete");
  }

  // Setup chat event listeners
  function setupChatEvents() {
    const chatToggle = document.getElementById("chat-toggle");
    const chatClose = document.getElementById("chat-close");
    const chatInput = document.getElementById("chat-input");
    const chatSend = document.getElementById("chat-send");

    // Toggle chat panel
    chatToggle?.addEventListener("click", () => {
      const chatPanel = document.getElementById("chat-panel");
      chatPanel?.classList.toggle("hidden");

      if (!chatPanel?.classList.contains("hidden")) {
        chatInput?.focus();
      }
    });

    // Close chat panel
    chatClose?.addEventListener("click", () => {
      document.getElementById("chat-panel")?.classList.add("hidden");
    });

    // Handle input changes
    chatInput?.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      const sendBtn = document.getElementById("chat-send") as HTMLButtonElement;
      sendBtn.disabled = !target.value.trim();
    });

    // Handle send button
    chatSend?.addEventListener("click", sendMessage);

    // Handle Enter key
    chatInput?.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  }

  // Join chat
  async function joinChat() {
    try {
      console.log("ðŸ”” [HTTP-CHAT] Joining chat...");
      
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action: "join",
          userId: currentUser.id,
          userName: currentUser.name,
          userRole: currentUser.role,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("ðŸ”” [HTTP-CHAT] Join response:", data);

      if (data.success) {
        // Load chat history
        if (data.chatHistory && data.chatHistory.length > 0) {
          console.log("ðŸ”” [HTTP-CHAT] Loading chat history:", data.chatHistory.length, "messages");
          loadChatHistory(data.chatHistory);
        }

        // Update online users
        if (data.onlineUsers) {
          onlineUsers = data.onlineUsers;
          updateOnlineCount();
        }

        console.log("ðŸ”” [HTTP-CHAT] Successfully joined chat");
      }
    } catch (error) {
      console.error("ðŸ”” [HTTP-CHAT] Error joining chat:", error);
    }
  }

  // Send message
  async function sendMessage() {
    const input = document.getElementById("chat-input") as HTMLInputElement;
    const message = input.value.trim();

    if (!message) return;

    try {
      console.log("ðŸ”” [HTTP-CHAT] Sending message:", message);

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action: "message",
          userId: currentUser.id,
          userName: currentUser.name,
          userRole: currentUser.role,
          message: message,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("ðŸ”” [HTTP-CHAT] Message response:", data);

      if (data.success && data.message) {
        // Add message to chat
        addMessage(data.message);
        
        // Update online users
        if (data.onlineUsers) {
          onlineUsers = data.onlineUsers;
          updateOnlineCount();
        }

        // Clear input
        input.value = "";
        const sendBtn = document.getElementById("chat-send") as HTMLButtonElement;
        sendBtn.disabled = true;

        console.log("ðŸ”” [HTTP-CHAT] Message sent successfully");
      }
    } catch (error) {
      console.error("ðŸ”” [HTTP-CHAT] Error sending message:", error);
    }
  }

  // Load chat history
  function loadChatHistory(messages: any[]) {
    const messagesContainer = document.getElementById("chat-messages");
    if (!messagesContainer) return;

    // Clear existing messages
    messagesContainer.innerHTML = "";

    // Add each message
    messages.forEach((msg) => {
      addMessage(msg);
    });

    console.log("ðŸ”” [HTTP-CHAT] Chat history loaded:", messages.length, "messages");
  }

  // Add message to chat
  function addMessage(data: any) {
    const messagesContainer = document.getElementById("chat-messages");
    if (!messagesContainer) return;

    const userName = data.user_name || data.userName || "Unknown User";
    const userId = data.user_id || data.userId || "unknown";
    const message = data.message || "";
    const timestamp = data.timestamp || data.created_at || new Date().toISOString();

    const isOwnMessage = userId === currentUser.id;
    const messageElement = document.createElement("div");
    messageElement.className = `flex ${isOwnMessage ? "justify-end" : "justify-start"}`;
    messageElement.setAttribute('data-message-id', data.id || 'unknown');

    messageElement.innerHTML = `
      <div class="max-w-xs ${isOwnMessage ? "bg-red-600 text-white" : "bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white"} rounded-lg px-3 py-2">
        <div class="flex items-center space-x-2 mb-1">
          <span class="text-xs font-medium">${userName}</span>
          <span class="text-xs opacity-75">${new Date(timestamp).toLocaleTimeString()}</span>
        </div>
        <p class="text-sm">${message}</p>
      </div>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Start heartbeat to maintain connection
  function startHeartbeat() {
    heartbeatInterval = setInterval(async () => {
      try {
        const response = await fetch("/api/chat", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            action: "heartbeat",
            userId: currentUser.id,
            userName: currentUser.name,
            userRole: currentUser.role,
          }),
        });

        if (response.ok) {
          const data = await response.json();
          if (data.onlineUsers) {
            onlineUsers = data.onlineUsers;
            updateOnlineCount();
          }
        }
      } catch (error) {
        console.error("ðŸ”” [HTTP-CHAT] Heartbeat error:", error);
      }
    }, 30000); // Every 30 seconds

    // Also poll for new messages every 5 seconds
    setInterval(async () => {
      try {
        const response = await fetch("/api/chat", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            action: "get_messages",
            userId: currentUser.id,
          }),
        });

        if (response.ok) {
          const data = await response.json();
          if (data.messages && data.messages.length > 0) {
            // Check if we have new messages
            const messagesContainer = document.getElementById("chat-messages");
            if (messagesContainer) {
              const existingMessageIds = new Set(
                Array.from(messagesContainer.children).map(el => el.getAttribute('data-message-id'))
              );
              
              // Add only new messages
              data.messages.forEach(msg => {
                if (!existingMessageIds.has(msg.id.toString())) {
                  addMessage(msg);
                }
              });
            }
          }
        }
      } catch (error) {
        console.error("ðŸ”” [HTTP-CHAT] Message polling error:", error);
      }
    }, 5000); // Every 5 seconds
  }

  // Update online count and show usernames
  function updateOnlineCount() {
    const countElement = document.getElementById("online-count");
    const usersListElement = document.getElementById("online-users-list");

    if (countElement) {
      if (onlineUsers.length === 0) {
        countElement.textContent = "0 online";
      } else if (onlineUsers.length === 1) {
        const user = onlineUsers[0];
        countElement.textContent = `${user.userName || user.user_name} online`;
      } else if (onlineUsers.length === 2) {
        const users = onlineUsers;
        countElement.textContent = `${users[0].userName || users[0].user_name} and ${users[1].userName || users[1].user_name} online`;
      } else {
        const users = onlineUsers;
        const firstTwo = users
          .slice(0, 2)
          .map((u) => u.userName || u.user_name)
          .join(", ");
        countElement.textContent = `${firstTwo} and ${onlineUsers.length - 2} more online`;
      }
    }

    // Update the online users list in the tooltip
    if (usersListElement) {
      if (onlineUsers.length === 0) {
        usersListElement.innerHTML = '<div class="text-gray-300">No users online</div>';
      } else {
        const users = onlineUsers;
        usersListElement.innerHTML = users
          .map(
            (user) =>
              `<div class="flex items-center space-x-2">
            <div class="w-2 h-2 bg-green-400 rounded-full"></div>
            <span>${user.userName || user.user_name}</span>
            <span class="text-gray-400 text-xs">(${user.userRole || user.user_role})</span>
          </div>`
          )
          .join("");
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    console.log("ðŸ”” [HTTP-CHAT] DOM Content Loaded");
    setTimeout(initializeChat, 1000);
  });

  // Also initialize when window loads (fallback)
  window.addEventListener("load", () => {
    console.log("ðŸ”” [HTTP-CHAT] Window Loaded");
    if (!isInitialized) {
      setTimeout(initializeChat, 500);
    }
  });

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    if (heartbeatInterval) {
      clearInterval(heartbeatInterval);
    }
  });
</script>
