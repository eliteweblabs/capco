---
// Simple Chat Widget Component - HTTP-based instead of WebSocket
// Only visible to Admin/Staff users

interface Props {
  user?: {
    id: string;
    email: string;
  };
  role?: string;
}

const { user, role } = Astro.props;
---

<div
  id="simple-chat-widget"
  class="fixed bottom-4 right-4 z-50"
  data-user-role={role || "Client"}
  data-user-id={user?.id || "unknown"}
  data-user-name={user?.email?.split("@")[0] || "Unknown User"}
>
  <!-- Chat Icon (Always Visible) -->
  <button
    id="simple-chat-toggle"
    class="rounded-full bg-red-600 px-4 py-3 text-white shadow-lg transition-all duration-200 hover:scale-110 hover:bg-red-700"
    title="Team Chat"
  >
    <i class="bx bx-message-rounded-dots text-xl"></i>
  </button>

  <!-- Chat Widget (Hidden by Default) -->
  <div
    id="simple-chat-panel"
    class="h-100 absolute bottom-16 right-0 hidden w-80 rounded-lg border border-gray-200 bg-white shadow-xl dark:border-gray-700 dark:bg-gray-800"
  >
    <!-- Chat Header -->
    <div
      class="flex items-center justify-between rounded-t-lg border-b border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700"
    >
      <div class="flex items-center space-x-2">
        <div
          class="flex h-8 w-8 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/30"
        >
          <i class="bx bx-message-rounded-dots text-red-600 dark:text-red-400"></i>
        </div>
        <div>
          <h3 class="text-sm font-medium text-gray-900 dark:text-white">Team Chat</h3>
          <p class="text-xs text-gray-500 dark:text-gray-400" id="simple-online-count">
            Loading...
          </p>
        </div>
      </div>
      <button
        id="simple-chat-close"
        class="text-gray-400 transition-colors hover:text-gray-600 dark:hover:text-gray-300"
      >
        <i class="bx bx-x text-xl"></i>
      </button>
    </div>

    <!-- Chat Messages -->
    <div class="h-64 flex-1 space-y-3 overflow-y-auto p-4" id="simple-chat-messages">
      <div class="py-8 text-center text-sm text-gray-500 dark:text-gray-400">
        <i class="bx bx-message-rounded-dots mx-auto mb-2 text-2xl"></i>
        <p>Loading chat...</p>
      </div>
    </div>

    <!-- Chat Input -->
    <div class="border-t border-gray-200 p-4 dark:border-gray-700">
      <div class="flex space-x-2">
        <input
          type="text"
          id="simple-chat-input"
          placeholder="Type your message..."
          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          maxlength="500"
        />
        <button
          id="simple-chat-send"
          class="rounded-lg bg-red-600 px-4 py-2 text-sm text-white transition-colors hover:bg-red-700 disabled:cursor-not-allowed disabled:opacity-50"
          disabled
        >
          <i class="bx bx-send"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Simple Chat Widget Functionality (HTTP-based)
  let currentUser: any = null;
  let isInitialized = false;
  let chatMessages: any[] = [];

  // Initialize simple chat widget
  function initializeSimpleChat() {
    if (isInitialized) {
      console.log("ðŸ”” [SIMPLE-CHAT] Already initialized, skipping");
      return;
    }

    console.log("ðŸ”” [SIMPLE-CHAT] Initializing simple chat widget");

    // Check if user is Admin/Staff
    const chatWidget = document.getElementById("simple-chat-widget");
    if (!chatWidget) {
      console.log("ðŸ”” [SIMPLE-CHAT] Chat widget element not found!");
      return;
    }

    const userRole = chatWidget.dataset.userRole || "Client";
    const userId = chatWidget.dataset.userId || "unknown";
    const userName = chatWidget.dataset.userName || "Unknown User";

    console.log("ðŸ”” [SIMPLE-CHAT] User role:", userRole);
    console.log("ðŸ”” [SIMPLE-CHAT] User ID:", userId);
    console.log("ðŸ”” [SIMPLE-CHAT] User name:", userName);

    if (userRole !== "Admin" && userRole !== "Staff") {
      console.log("ðŸ”” [SIMPLE-CHAT] User not Admin/Staff, hiding chat widget");
      chatWidget.classList.add("hidden");
      return;
    }

    console.log("ðŸ”” [SIMPLE-CHAT] User is Admin/Staff, showing chat widget");

    // Get current user info
    currentUser = {
      id: userId,
      name: userName,
      role: userRole,
    };

    // Setup event listeners
    setupSimpleChatEvents();

    // Load chat history
    loadChatHistory();

    // Mark as initialized
    isInitialized = true;
    console.log("ðŸ”” [SIMPLE-CHAT] Simple chat widget initialization complete");
  }

  // Setup simple chat event listeners
  function setupSimpleChatEvents() {
    const chatToggle = document.getElementById("simple-chat-toggle");
    const chatClose = document.getElementById("simple-chat-close");
    const chatInput = document.getElementById("simple-chat-input");
    const chatSend = document.getElementById("simple-chat-send");

    // Toggle chat panel
    chatToggle?.addEventListener("click", () => {
      const chatPanel = document.getElementById("simple-chat-panel");
      chatPanel?.classList.toggle("hidden");

      if (!chatPanel?.classList.contains("hidden")) {
        chatInput?.focus();
        loadChatHistory(); // Refresh messages when opening
      }
    });

    // Close chat panel
    chatClose?.addEventListener("click", () => {
      document.getElementById("simple-chat-panel")?.classList.add("hidden");
    });

    // Handle input changes
    chatInput?.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      const sendBtn = document.getElementById("simple-chat-send") as HTMLButtonElement;
      sendBtn.disabled = !target.value.trim();
    });

    // Handle send button
    chatSend?.addEventListener("click", sendSimpleMessage);

    // Handle Enter key
    chatInput?.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        sendSimpleMessage();
      }
    });
  }

  // Load chat history
  async function loadChatHistory() {
    try {
      console.log("ðŸ”” [SIMPLE-CHAT] Loading chat history...");

      const response = await fetch("/api/chat-server", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action: "getHistory",
        }),
      });

      const result = await response.json();

      if (result.success && result.messages) {
        console.log("ðŸ”” [SIMPLE-CHAT] Loaded", result.messages.length, "messages");
        chatMessages = result.messages;
        displayMessages(result.messages);
      } else {
        console.error("ðŸ”” [SIMPLE-CHAT] Failed to load chat history:", result.error);
      }
    } catch (error) {
      console.error("ðŸ”” [SIMPLE-CHAT] Error loading chat history:", error);
    }
  }

  // Send message
  async function sendSimpleMessage() {
    const input = document.getElementById("simple-chat-input") as HTMLInputElement;
    const message = input.value.trim();

    if (!message) return;

    const messageData = {
      userId: currentUser.id,
      userName: currentUser.name,
      userRole: currentUser.role,
      message: message,
      timestamp: new Date().toISOString(),
    };

    try {
      console.log("ðŸ”” [SIMPLE-CHAT] Sending message:", messageData);

      const response = await fetch("/api/chat-server", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          action: "message",
          data: messageData,
        }),
      });

      const result = await response.json();

      if (result.success) {
        console.log("ðŸ”” [SIMPLE-CHAT] Message sent successfully");
        input.value = "";

        // Disable send button
        const sendBtn = document.getElementById("simple-chat-send") as HTMLButtonElement;
        sendBtn.disabled = true;

        // Add message to display immediately
        addSimpleMessage(messageData);

        // Refresh chat history after a short delay
        setTimeout(loadChatHistory, 1000);
      } else {
        console.error("ðŸ”” [SIMPLE-CHAT] Failed to send message:", result.error);
      }
    } catch (error) {
      console.error("ðŸ”” [SIMPLE-CHAT] Error sending message:", error);
    }
  }

  // Display messages
  function displayMessages(messages: any[]) {
    const messagesContainer = document.getElementById("simple-chat-messages");
    if (!messagesContainer) return;

    messagesContainer.innerHTML = "";

    if (messages.length === 0) {
      messagesContainer.innerHTML = `
        <div class="py-8 text-center text-sm text-gray-500 dark:text-gray-400">
          <i class="bx bx-message-rounded-dots mx-auto mb-2 text-2xl"></i>
          <p>No messages yet. Start the conversation!</p>
        </div>
      `;
      return;
    }

    messages.forEach((msg) => {
      addSimpleMessage(msg);
    });
  }

  // Add message to chat display
  function addSimpleMessage(data: any) {
    const messagesContainer = document.getElementById("simple-chat-messages");
    if (!messagesContainer) return;

    const userName = data.userName || data.user_name || "Unknown User";
    const userId = data.userId || data.user_id || "unknown";
    const message = data.message || "";
    const timestamp = data.timestamp || new Date().toISOString();

    const isOwnMessage = userId === currentUser.id;
    const messageElement = document.createElement("div");
    messageElement.className = `flex ${isOwnMessage ? "justify-end" : "justify-start"}`;

    messageElement.innerHTML = `
      <div class="max-w-xs ${isOwnMessage ? "bg-red-600 text-white" : "bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white"} rounded-lg px-3 py-2">
        <div class="flex items-center space-x-2 mb-1">
          <span class="text-xs font-medium">${userName}</span>
          <span class="text-xs opacity-75">${new Date(timestamp).toLocaleTimeString()}</span>
        </div>
        <p class="text-sm">${message}</p>
      </div>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    console.log("ðŸ”” [SIMPLE-CHAT] DOM Content Loaded");
    setTimeout(initializeSimpleChat, 1000);
  });

  // Also initialize when window loads (fallback)
  window.addEventListener("load", () => {
    console.log("ðŸ”” [SIMPLE-CHAT] Window Loaded");
    if (!isInitialized) {
      setTimeout(initializeSimpleChat, 500);
    }
  });
</script>
