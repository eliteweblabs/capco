---
// import { languages } from "../i18n/ui";
// import { useTranslations } from "../i18n/utils";

// const lang = getLangFromUrl(Astro.url);
// const translatePath = useTranslatedPath(lang);

// const getPathWithoutLocale = (path: string): string => {
//   const segments = path.split("/").filter(Boolean);
//   return segments.slice(1).join("/") || "/";
// };

// const currentPathWithoutLocale = getPathWithoutLocale(Astro.url.pathname);
// const currentLang = Astro.currentLocale || "es";
// const translateLabels = useTranslations(currentLang as keyof typeof languages);
---

<!-- 
<div class="group relative">
  <div aria-label="Cambiar idioma">
    <span class="uppercase">{currentLang}</span>
  </div>

  <div
    class="invisible absolute right-0 top-full mt-2 w-24 opacity-0 transition-all duration-200 group-hover:visible group-hover:opacity-100"
  >
    <div
    class="absolute right-0 w-32  dark:bg-gray-800 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200"
  >
    <ul class="text-right">
      {
        Object.entries(languages).map(
          ([langCode, langName]) =>
            currentLang !== langCode && (
              <li>
                <a
                  href={getRelativeLocaleUrl(langCode as any, currentPathWithoutLocale)}
                  class="w-auto rounded-full border-[1px]  px-4 py-2 text-center text-sm font-bold text-muted drop-shadow-md hover:text-primary dark:border-border-dark dark:bg-gray-800 dark:text-muted hover:dark:bg-neutral-700 dark:hover:text-primary-dark"
                >
                  {langName}
                </a>
              </li>
            )
        )
      }
    </ul>
  </div>
</div>

<ul> 
  {
    Object.entries(languages).map(([lang, label]) => (
      <li>
        <a href={translatePath("/", lang)}>{label}</a>
      </li>
    ))
  }
</ul> -->
