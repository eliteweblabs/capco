---
export interface Props {
  id: string;
  title: string;
  options: Array<{ value: string; label: string }>;
  selectedValue?: string;
  theme?: "default" | "blue" | "green" | "orange" | "purple";
  placeholder?: string;
  disabled?: boolean;
  onSelect?: (value: string, label: string) => void;
  onCancel?: () => void;
}

const {
  id,
  title,
  options,
  selectedValue,
  theme = "default",
  placeholder = "Select an option",
  disabled = false,
  onSelect,
  onCancel,
} = Astro.props;

// Theme colors
const themeColors = {
  default: {
    primary: "bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600",
    selected: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
    button: "bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600",
  },
  blue: {
    primary: "bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600",
    selected: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200",
    button: "bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600",
  },
  green: {
    primary: "bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600",
    selected: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
    button: "bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-600",
  },
  orange: {
    primary: "bg-orange-600 hover:bg-orange-700 dark:bg-orange-500 dark:hover:bg-orange-600",
    selected: "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
    button: "bg-orange-600 hover:bg-orange-700 dark:bg-orange-500 dark:hover:bg-orange-600",
  },
  purple: {
    primary: "bg-purple-600 hover:bg-purple-700 dark:bg-purple-500 dark:hover:bg-purple-600",
    selected: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200",
    button: "bg-purple-600 hover:bg-purple-700 dark:bg-purple-500 dark:hover:bg-purple-600",
  },
};

const colors = themeColors[theme];
---

<div class="slot-machine-picker-wrapper">
  <!-- Trigger Button -->
  <button
    id={`${id}-trigger`}
    class={`w-full px-4 py-2 text-sm font-medium text-white rounded-md transition-colors ${colors.button} ${disabled ? "opacity-50 cursor-not-allowed" : ""}`}
    {disabled}
    data-options={JSON.stringify(options)}
    data-title={title}
    data-selected-value={selectedValue || ""}
    data-placeholder={placeholder}
  >
    {
      selectedValue
        ? options.find((opt) => opt.value === selectedValue)?.label || placeholder
        : placeholder
    }
  </button>

  <!-- Hidden input for form integration -->
  <input type="hidden" id={`${id}-value`} name={id} value={selectedValue || ""} />
</div>

<style>
  .slot-machine-picker-wrapper {
    width: 100%;
  }
</style>

<script define:vars={{ id, title, options, selectedValue, onSelect, onCancel }}>
  // Initialize this specific slot machine picker
  document.addEventListener("DOMContentLoaded", async function () {
    const trigger = document.getElementById(id + "-trigger");
    const hiddenInput = document.getElementById(id + "-value");

    if (!trigger) return;

    // Load the slot machine picker function
    let showSlotMachinePicker;
    try {
      const module = await import("../../lib/slot-machine-utils");
      showSlotMachinePicker = module.showSlotMachinePicker;
    } catch (error) {
      console.error("Failed to load slot machine picker:", error);
      return;
    }

    trigger.addEventListener("click", async () => {
      if (trigger.disabled) return;

      try {
        // Get options from data attribute if available, otherwise use static options
        let pickerOptions = options;
        const dataOptions = trigger.getAttribute("data-options");
        if (dataOptions) {
          try {
            pickerOptions = JSON.parse(dataOptions);
          } catch (e) {
            console.warn("Failed to parse data-options:", e);
          }
        }

        const result = await showSlotMachinePicker({
          id: id,
          title: title,
          options: pickerOptions,
          selectedValue: selectedValue || "",
          onSelect: (value, label) => {
            // Update the hidden input
            if (hiddenInput) {
              hiddenInput.value = value;
            }

            // Update the button text
            trigger.textContent = label;

            // Call the onSelect callback if provided
            if (typeof window[id + "_onSelect"] === "function") {
              window[id + "_onSelect"](value, label);
            }
          },
        });

        // Handle the result
        if (result.value) {
          if (hiddenInput) {
            hiddenInput.value = result.value;
          }
          trigger.textContent = result.label;

          // Call the onSelect callback if provided
          if (typeof window[id + "_onSelect"] === "function") {
            window[id + "_onSelect"](result.value, result.label);
          }
        } else {
          // Handle cancel
          if (typeof window[id + "_onCancel"] === "function") {
            window[id + "_onCancel"]();
          }
        }
      } catch (error) {
        console.error("Slot machine picker error:", error);
      }
    });
  });

  // Expose callbacks to global scope for external access
  if (typeof window !== "undefined") {
    window[id + "_onSelect"] = onSelect || null;
    window[id + "_onCancel"] = onCancel || null;
  }
</script>
