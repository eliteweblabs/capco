---
// Handle OAuth callback if code is present
const authCode = Astro.url.searchParams.get("code");
if (authCode) {
  return Astro.redirect(`/api/auth/callback?code=${authCode}`);
}

interface Props {
  title?: string;
  description?: string;
  currentUser?: any;
  session?: any;
  project?: any;
  supabase?: any;
  supabaseUrl?: string;
  noNavigation?: boolean;
  projects?: any;
  isBackend?: boolean;
  id?: string;
}

const {
  title = undefined,
  description = undefined,
  currentUser = undefined,
  session = undefined,
  project = undefined,
  supabase = undefined,
  supabaseUrl = undefined,
  noNavigation = false,
  projects = undefined,
  isBackend = false,
  id = undefined,
} = Astro.props;

// console.log("[App] currentUser:", currentUser);
// console.log("[App] session:", session);
// console.log("[App] project:", project);
// console.log("[App] supabase:", supabase);
// console.log("üîç [App] supabaseUrl:", supabaseUrl);
// console.log("üîç [App] noNavigation:", noNavigation);

// Derived properties (8 props ‚Üí 13 total)
const isAuth = currentUser ? true : false;
const currentUserId = currentUser?.id || undefined;
const currentRole = currentUser?.profile.role || undefined;
const projectId = project?.id || undefined;
const currentUrl = Astro.url.pathname;

// Get navigation data
import { navigation } from "@/pages/api/navigation";
const navigationData = navigation(currentUrl, isAuth, currentRole || "Client", isBackend || false);
const { desktopNavigationHTML, visibleNavItems } = navigationData;

import "../../styles/boxicons.css"; // this is sketchy
import "../../styles/global.css"; // Import Tailwind CSS
import Preloader from "./Preloader.astro";
import Footer from "./Footer.astro";
import UserCenter from "./UserCenter.astro";
import UnifiedNotification from "./UnifiedNotification.astro";
import CookieBanner from "./CookieBanner.astro";
import SpeedDial from "./SpeedDial.astro";
import Navbar from "./Navbar.astro";
import Aside from "./Aside.astro";
---

<!doctype html>
<html lang="en" class="v2fLMH8w3xgUEQcl63H9">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover"
    />
    <meta name="author" content="Tomsens+REKKO" />
    <!-- <meta name="generator" content="Hugo 0.123.8" /> -->

    <!-- Safari 18 beta specific viewport fixes -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <title>{title}</title>
    <meta name="description" content={description} />

    <link
      rel="stylesheet"
      href="https://www.unpkg.com/flowbite-datepicker@1.3.2/dist/css/datepicker.min.css"
    />
    <link rel="stylesheet" href="https://flowbite.com/application-ui/demo/app.css" />

    <link rel="icon" type="image/svg+xml" href="/img/favicon.svg" sizes="any" />
    <link rel="icon" type="image/png" href="/img/favicon.png" sizes="any" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#000000" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="CAPCo Fire App" />
    <meta name="generator" content={Astro.generator} />

    <!-- Safari Privacy Protection Meta Tags -->
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta http-equiv="Cross-Origin-Embedder-Policy" content="unsafe-none" />
    <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin-allow-popups" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.png" />
    <meta property="og:url" content={Astro.url} />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.png" />

    <meta name="robots" content="max-image-preview:large" /><link
      rel="canonical"
      href={currentUrl}
    />
    <meta property="og:site_name" content="CAPCo Fire" /><meta
      property="og:type"
      content="website"
    />
    <!-- <link rel="canonical" href="https://flowbite.com/application-ui/demo/" />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://www.unpkg.com/flowbite-datepicker@1.3.2/dist/css/datepicker.min.css"
    />
    <link rel="stylesheet" href="https://flowbite.com/application-ui/demo/app.css" />

    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="https://flowbite.com/application-ui/demo/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="https://flowbite.com/application-ui/demo/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="https://flowbite.com/application-ui/demo/favicon-16x16.png"
    />
    <link rel="icon" type="image/png" href="https://flowbite.com/application-ui/demo/favicon.ico" />
    <link rel="manifest" href="https://flowbite.com/application-ui/demo/site.webmanifest" />
    <link
      rel="mask-icon"
      href="https://flowbite.com/application-ui/demo/safari-pinned-tab.svg"
      color="#5bbad5"
    />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="theme-color" content="#ffffff" /> -->

    <!-- Twitter -->
    <!-- <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@" />
    <meta name="twitter:creator" content="@" />
    <meta name="twitter:title" content="Tailwind CSS Dashboard - Flowbite" />
    <meta
      name="twitter:description"
      content="Get started with a premium admin dashboard interface built with Tailwind CSS and Flowbite featuring over 50 example pages of charts, calendars, kanban boards, dashboards, CRUD pages, mailing systems, and more."
    />
    <meta name="twitter:image" content="https://flowbite.com/application-ui/demo/" /> -->

    <!-- Facebook -->
    <!-- <meta property="og:url" content="https://flowbite.com/application-ui/demo/" />
    <meta property="og:title" content="Tailwind CSS Dashboard - Flowbite" />
    <meta
      property="og:description"
      content="Get started with a premium admin dashboard interface built with Tailwind CSS and Flowbite featuring over 50 example pages of charts, calendars, kanban boards, dashboards, CRUD pages, mailing systems, and more."
    />
    <meta property="og:type" content="website" />
    <meta
      property="og:image"
      content="https://flowbite.com/application-ui/demo/images/og-image.jpg"
    />
    <meta property="og:image:type" content="image/png" /> -->

    <script>
      if (
        localStorage.getItem("color-theme") === "dark" ||
        (!("color-theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("v2fLMH8w3xgUEQcl63H9", "dark");
      } else {
        document.documentElement.classList.remove("v2fLMH8w3xgUEQcl63H9", "dark");
      }
    </script>
  </head>

  <!-- Inject environment variables for client-side use FIRST -->
  <script
    set:html={`window.GOOGLE_MAPS_API_KEY = "${import.meta.env.GOOGLE_MAPS_API_KEY || ""}"; window.GOOGLE_PLACES_API_KEY = "${import.meta.env.GOOGLE_PLACES_API_KEY || ""}"; window.STRIPE_PUBLISHABLE_KEY = "${import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY || ""}";`}
  />

  <!-- User data and Supabase config handled server-side -->
  <!-- SimpleProjectLogger is now handled server-side only -->

  <body class="jtAJHOc7mn7b4IKRO59D h8KYXnua2NT4kTVzieom KRANKvs7gs1E_d0fCA0k">
    <!-- Preloader -->
    <Preloader />

    {
      !noNavigation ? (
        <>
          <Navbar
            desktopNavigationHTML={desktopNavigationHTML}
            currentUser={currentUser}
            session={session}
            supabaseUrl={supabaseUrl}
            id={id}
            projects={projects}
            project={project}
            isBackend={isBackend}
          />

          <div class="YRrCJSr_j5nopfm4duUc wBVMFkIGfrKshbvi2gS1 jtAJHOc7mn7b4IKRO59D UZ9xFK4mqjHjj8e8yJwf h8KYXnua2NT4kTVzieom">
            <Aside
              isAuth={isAuth}
              currentUser={currentUser}
              currentRole={currentRole || ""}
              session={session}
              navigationData={navigationData}
            />

            <slot />
          </div>
        </>
      ) : (
        <slot />
      )
    }
    <!-- Footer -->

    <!-- <UserCenter
      isAuth={isAuth}
      currentUser={currentUser}
      currentRole={currentRole || ""}
      session={session}
      visibleNavItems={visibleNavItems}
      desktopNavigationHTML={desktopNavigationHTML}
      project={project}
    /> -->
    <!-- Unified Notification System -->
    <UnifiedNotification />
    <!-- Cookie Banner -->
    <CookieBanner />

    <!-- Speed Dial -->
    <SpeedDial currentUser={currentUser || undefined} isBackend={isBackend} />
  </body>

  <script src="../../assets/js/app.bundle.js"></script>

  <!-- Flowbite JavaScript -->
  <!-- <script src="https://unpkg.com/flowbite@2.5.2/dist/flowbite.min.js"></script> -->

  <script>
    // Import UX utilities
    import {
      debounce,
      fixSafariViewport,
      getViewportSize,
      handleUrlNotification,
      hideOnFormFocus,
      isDesktop,
      isMobile,
      isSafariIOS,
      isTablet,
      lockBodyScroll,
      scrollToTop,
      scrollToTopOnMobile,
      setupViewportHandling,
      throttle,
      unlockBodyScroll,
    } from "../../lib/ux-utils.ts";

    // Make UX utilities globally available
    (window as any).scrollToTopOnMobile = scrollToTopOnMobile;
    (window as any).scrollToTop = scrollToTop;
    (window as any).isMobile = isMobile;
    (window as any).isTablet = isTablet;
    (window as any).isDesktop = isDesktop;
    (window as any).isSafariIOS = isSafariIOS;
    (window as any).fixSafariViewport = fixSafariViewport;
    (window as any).setupViewportHandling = setupViewportHandling;
    (window as any).getViewportSize = getViewportSize;
    (window as any).debounce = debounce;
    (window as any).throttle = throttle;
    (window as any).handleUrlNotification = handleUrlNotification;
    (window as any).hideOnFormFocus = hideOnFormFocus;
    (window as any).lockBodyScroll = lockBodyScroll;
    (window as any).unlockBodyScroll = unlockBodyScroll;

    // Initialize viewport handling for all elements
    setupViewportHandling();

    document.addEventListener("DOMContentLoaded", () => {
      const currentUrl = new URL(window.location.href);
      const errorParam = currentUrl.searchParams.get("error");
      const messageParam = currentUrl.searchParams.get("message");

      // Handle error messages
      if (errorParam) {
        handleUrlNotification("error", errorParam);
      }

      // Handle success messages
      if (messageParam) {
        handleUrlNotification("success", messageParam);
      }
    });
  </script>

  <!-- Expose centralized notification system to window object -->
  <script>
    // Suppress ResizeObserver loop warnings (they're usually harmless)
    window.addEventListener("error", (e) => {
      if (e.message === "ResizeObserver loop completed with undelivered notifications.") {
        e.stopImmediatePropagation();
      }
    });

    // Centralized notification handler for update-status API responses
    (window as any).handleUpdateStatusNotification = function (response: any, context: any) {
      if (!response.success) {
        console.error(`ERROR [${context || "NOTIFICATION"}] API call failed:`, response.error);
        return;
      }

      if (!response.notificationData || !(window as any).showModal) {
        console.warn(
          `WARNING [${context || "NOTIFICATION"}] No notification data or showModal function available`
        );
        return;
      }

      // Get user role from API response (more secure than frontend)
      const currentUserRole = response.notificationData.currentUserRole || "Client";
      const isAdminOrStaff = currentUserRole === "Admin" || currentUserRole === "Staff";
      const notification = isAdminOrStaff
        ? response.notificationData.admin
        : response.notificationData.client;

      if (notification) {
        (window as any).showModal(
          notification.type,
          notification.title,
          notification.message,
          notification.duration,
          notification.redirect
        );
      } else {
        console.warn(
          `WARNING [${context || "NOTIFICATION"}] No ${isAdminOrStaff ? "admin" : "client"} notification found in response`
        );
      }
    };
  </script>

  <!-- Magic Link Authentication Handler -->
  <script>
    // Global magic link authentication handler
    (window as any).handleMagicLinkAuth = async function () {
      try {
        // Check if we have auth tokens in the URL fragment
        const fragment = window.location.hash.substring(1);
        if (!fragment) return;

        const params = new URLSearchParams(fragment);
        const accessToken = params.get("access_token");
        const refreshToken = params.get("refresh_token");
        const expiresIn = params.get("expires_in");
        const tokenType = params.get("token_type");
        const type = params.get("type");

        // Only handle magic link callbacks
        if (!accessToken || !refreshToken || type !== "magiclink") {
          return;
        }

        console.log("üîê [MAGIC-LINK] Processing magic link authentication...");

        // Set auth cookies via API call
        const response = await fetch("/api/auth/callback", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            access_token: accessToken,
            refresh_token: refreshToken,
            expires_in: parseInt(expiresIn || "3600"),
            token_type: tokenType || "bearer",
          }),
        });

        if (response.ok) {
          console.log("‚úÖ [MAGIC-LINK] Authentication successful, redirecting...");

          // Clear the URL fragment to prevent reprocessing
          window.history.replaceState(
            {},
            document.title,
            window.location.pathname + window.location.search
          );

          // Redirect to dashboard
          window.location.href = "/dashboard";
        } else {
          const errorData = await response.json();
          console.error("‚ùå [MAGIC-LINK] Authentication failed:", errorData);

          // Show error message to user
          if (typeof (window as any).showModal === "function") {
            (window as any).showModal(
              "error",
              "Login Failed",
              "There was an error processing your login. Please try again."
            );
          }
        }
      } catch (error) {
        console.error("‚ùå [MAGIC-LINK] Error processing magic link:", error);

        // Show error message to user
        if (typeof (window as any).showModal === "function") {
          (window as any).showModal(
            "error",
            "Login Error",
            "There was an unexpected error. Please try again."
          );
        }
      }
    };

    // Run magic link handler on page load
    document.addEventListener("DOMContentLoaded", (window as any).handleMagicLinkAuth);

    // Also run immediately in case DOM is already loaded
    if (document.readyState === "loading") {
      // DOM is still loading, event listener will handle it
    } else {
      // DOM is already loaded, run immediately
      (window as any).handleMagicLinkAuth();
    }
  </script>

  <!-- Service Worker Registration for PWA -->
  <script>
    // Register service worker for PWA functionality
    if ("serviceWorker" in navigator) {
      window.addEventListener("load", () => {
        navigator.serviceWorker
          .register("/sw.js")
          .then((registration) => {
            console.log("‚úÖ Service Worker registered successfully:", registration.scope);
          })
          .catch((error) => {
            console.log("‚ùå Service Worker registration failed:", error);
          });
      });
    } else {
      console.log("‚ùå Service Worker not supported in this browser");
    }

    // iOS Safari Mobile Beta Detection and CSS Application
    function isSafariIOS(): boolean {
      const ua = navigator.userAgent;
      const isIOS = /iPad|iPhone|iPod/.test(ua);
      const isSafari = /Safari/.test(ua) && !/Chrome|CriOS|FxiOS|EdgiOS/.test(ua);
      return isIOS && isSafari;
    }

    function isSafari18Beta(): boolean {
      const ua = navigator.userAgent;
      return /Safari/.test(ua) && /Version\/18\./.test(ua) && !/Chrome|CriOS|FxiOS|EdgiOS/.test(ua);
    }

    function isMobile(): boolean {
      return window.innerWidth < 768;
    }

    // Apply iOS Safari Mobile Beta specific CSS
    if (isSafariIOS() && isSafari18Beta() && isMobile()) {
      console.log("üçé [APP] iOS Safari Mobile Beta detected - Applying specific CSS fixes");

      // Add iOS Safari Mobile Beta class to body
      document.body.classList.add("ios-safari-mobile-beta");

      // Apply the specific CSS class to the target element
      const targetElement = document.querySelector(
        ".YRrCJSr_j5nopfm4duUc.wBVMFkIGfrKshbvi2gS1.jtAJHOc7mn7b4IKRO59D.UZ9xFK4mqjHjj8e8yJwf.h8KYXnua2NT4kTVzieom"
      );
      if (targetElement) {
        targetElement.classList.add("ios-safari-mobile-beta-fix");
        console.log("üçé [APP] Applied iOS Safari Mobile Beta CSS fix to target element");
      }
    } else {
      console.log("üåê [APP] Not iOS Safari Mobile Beta - Skipping specific CSS fixes");
    }
  </script>

  <script>
    // Global function to close the drawer
    (window as any).closeUserCenterDrawer = function () {
      const closeBtn = document.querySelector(
        '[data-drawer-hide="drawer-user-center"]'
      ) as HTMLButtonElement;
      if (closeBtn) {
        closeBtn.click();
      }
    };
  </script>
</html>

<style>
  /* iOS Safari Mobile Beta specific CSS - Only applied when detected */
  .ios-safari-mobile-beta-fix {
    height: 100dvh !important;
    overflow-y: scroll !important;
  }
</style>
