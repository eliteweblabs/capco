---
interface Props {
  title?: string;
  description?: string;
  requireAuth?: boolean;
  requireRole?: string;
  redirectTo?: string;
}

import { checkAuth } from "../../lib/auth";
const { isAuth, session, currentUser, currentRole } = await checkAuth(Astro.cookies);

// Handle auth requirements
const { requireAuth = false, requireRole, redirectTo = "/login" } = Astro.props;
if (requireAuth && !isAuth) {
  return Astro.redirect(redirectTo);
}
if (requireRole && currentRole !== requireRole) {
  return Astro.redirect(redirectTo);
}

// Status data is now fetched in individual pages as needed

import { getI18N } from "../../i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Use provided props or fall back to i18n defaults
const title = Astro.props.title || i18n.SEO_TITLE;
const description = Astro.props.description || i18n.SEO_DESCRIPTION;

// Import components
import Header from "./Header.astro";
import Footer from "./Footer.astro";
import UnifiedNotification from "./UnifiedNotification.astro";
import StickySMS from "./StickySMS.astro";
import HttpChatWidget from "./HttpChatWidget.astro";
import "../../styles/boxicons.css"; // Import Boxicons CSS first
import "../../styles/global.css"; // Import Tailwind CSS

import { getLangFromUrl } from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);

// console.log("üèóÔ∏è [APP] App component loading...", user);
---

<!doctype html>
<html {lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/svg+xml" href="/img/capco-logo.svg" sizes="any" />

    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#000000" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Fire Pro" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.svg" />
    <meta property="og:url" content={Astro.url} />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.svg" />

    <link rel="icon" href="/public/img/capco-favicon.png" sizes="any" />

    <!-- <link
      rel="apple-touch-icon"
      href="https://tomsens.com/wp-content/uploads/2025/05/tomsens-rekko-favicon.svg"
    /> -->

    <meta
      name="description"
      content="Saving small businesses money with workflow automation, generating leads for them with website design and giving them a professional look with full stack branding."
    />
    <meta name="robots" content="max-image-preview:large" /><link
      rel="canonical"
      href="https://capcofire.com"
    /><meta name="generator" content="All in One SEO (AIOSEO) 4.8.6.1" /><meta
      property="og:locale"
      content="en_US"
    /><meta property="og:site_name" content="CAPCo Fire" /><meta
      property="og:type"
      content="website"
    /><meta property="og:title" content="CAPCo Fire" /><meta
      property="og:description"
      content="Fire protection project management and proposal system."
    />
    <!-- sms -->
    <meta name="twitter:card" content="summary_large_image" /><meta
      name="twitter:title"
      content="CAPCo Fire"
    /><meta
      name="twitter:description"
      content="Fire protection project management and proposal system."
    />
    <!-- <meta
      name="twitter:image"
      content="https://tomsens.com/wp-content/uploads/2025/05/Screenshot-2025-05-15-at-9.57.05‚ÄØPM.png"
    /> -->

    <title>{title}</title>

    <!-- Inject environment variables for client-side use FIRST -->
    <script
      set:html={`window.SUPABASE_URL = "${import.meta.env.SUPABASE_URL || ""}"; window.SUPABASE_ANON_KEY = "${(import.meta.env.SUPABASE_ANON_KEY || "").replace(/\s/g, "")}"; window.GOOGLE_MAPS_API_KEY = "${import.meta.env.GOOGLE_MAPS_API_KEY || ""}"; window.STRIPE_PUBLISHABLE_KEY = "${import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY || ""}"; ${currentUser ? `window.USER_DATA = ${JSON.stringify(currentUser)};` : ""}`}
    />

    <!-- Flowbite CSS and JavaScript for tooltips and other components -->
    <link href="https://unpkg.com/flowbite@2.2.1/dist/flowbite.min.css" rel="stylesheet" />
    <script src="https://unpkg.com/flowbite@2.2.1/dist/flowbite.min.js"></script>

    <!-- Google Maps Places API - Load only if API key is available -->
    <script>
      // Wait for environment variables to be loaded, then load Google Maps
      function loadGoogleMaps() {
        if (
          (window as any).GOOGLE_MAPS_API_KEY &&
          (window as any).GOOGLE_MAPS_API_KEY.trim() !== ""
        ) {
          // Check if script already exists
          if (document.getElementById("google-maps-script")) {
            console.log("‚úÖ [GoogleMaps] Google Maps API already loaded");
            return;
          }

          const script = document.createElement("script");
          script.async = true;
          script.defer = true;
          // Use the stable version with places library for new PlaceAutocompleteElement API
          script.src = `https://maps.googleapis.com/maps/api/js?key=${(window as any).GOOGLE_MAPS_API_KEY}&libraries=places&loading=async`;
          script.id = "google-maps-script";

          // Add error handling
          script.onerror = function () {
            console.error("‚ùå [GoogleMaps] Failed to load Google Maps API script");
          };

          script.onload = function () {
            console.log("‚úÖ [GoogleMaps] Google Maps API (stable version) loaded successfully");
            // console.log("üó∫Ô∏è [GoogleMaps] Available APIs:", {
            //   maps: !!window.google?.maps,
            //   places: !!window.google?.maps?.places,
            //   autocomplete: !!window.google?.maps?.places?.Autocomplete,
            //   placeAutocompleteElement: !!window.google?.maps?.places?.PlaceAutocompleteElement,
            //   version: window.google?.maps?.version,
            // });

            // Dispatch custom event for components to listen to
            window.dispatchEvent(new CustomEvent("googleMapsLoaded"));
          };

          document.head.appendChild(script);
        } else {
          console.warn(
            "‚ùå [GoogleMaps] Google Maps API key not found. Maps functionality will be disabled."
          );
        }
      }

      // Try to load immediately, and also on DOMContentLoaded as fallback
      loadGoogleMaps();
      document.addEventListener("DOMContentLoaded", loadGoogleMaps);

      // Hide preloader when page is fully loaded
      function hidePreloader() {
        const preloader = document.getElementById("preloader");
        if (preloader) {
          preloader.style.opacity = "0";
          setTimeout(() => {
            preloader.style.display = "none";
          }, 300); // Match the transition duration
        }
      }

      // Global function to hide preloader (can be called by components)
      (window as any).hidePreloader = hidePreloader;

      // Hide preloader when everything is loaded
      if (document.readyState === "complete") {
        hidePreloader();
      } else {
        window.addEventListener("load", hidePreloader);
      }

      // Also hide preloader after a maximum delay to prevent it from staying forever
      setTimeout(() => {
        hidePreloader();
      }, 2000); // 2 second maximum (reduced from 5 seconds)
    </script>
  </head>
  <body
    class="h-min-screen bg-hub-background dark:bg-hub-background-dark md:flex md:justify-center"
  >
    <!-- Preloader -->
    <div
      id="preloader"
      class="fixed inset-0 z-50 flex items-center justify-center bg-white transition-opacity duration-300 dark:bg-gray-900"
    >
      <div class="text-center">
        <div
          class="inline-block h-12 w-12 animate-spin rounded-full border-4 border-solid border-blue-600 border-r-transparent motion-reduce:animate-[spin_1.5s_linear_infinite]"
        >
        </div>
        <p class="mt-4 text-lg font-medium text-gray-900 dark:text-white">Loading...</p>
      </div>
    </div>

    <!-- Loading Overlay for Save Operations -->

    <main class="section relative mx-auto w-full max-w-[2000px]">
      <Header
        isAuth={isAuth}
        currentUser={currentUser}
        currentRole={currentRole || ""}
        session={session}
      />
      <slot />
      <Footer
        isAuth={isAuth}
        session={session}
        currentUser={currentUser}
        currentRole={currentRole || ""}
      />
    </main>

    <!-- Unified Notification System -->
    <UnifiedNotification />
    <div id="sticky-container" class="fixed bottom-6 right-6 z-40">
      <!-- 
      <div data-dial-init class="fixed end-6 bottom-6 group">
        <div id="speed-dial-menu-default" class="flex flex-col items-center hidden mb-4 space-y-2">
          <button
            type="button"
            data-tooltip-target="tooltip-share"
            data-tooltip-placement="left"
            class="flex justify-center items-center w-[52px] h-[52px] text-gray-500 hover:text-gray-900 bg-white rounded-full border border-gray-200 dark:border-gray-600 shadow-xs dark:hover:text-white dark:text-gray-400 hover:bg-gray-50 dark:bg-gray-700 dark:hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 focus:outline-none dark:focus:ring-gray-400"
          >
            <svg
              class="w-5 h-5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              viewBox="0 0 18 18"
            >
              <path
                d="M14.419 10.581a3.564 3.564 0 0 0-2.574 1.1l-4.756-2.49a3.54 3.54 0 0 0 .072-.71 3.55 3.55 0 0 0-.043-.428L11.67 6.1a3.56 3.56 0 1 0-.831-2.265c.006.143.02.286.043.428L6.33 6.218a3.573 3.573 0 1 0-.175 4.743l4.756 2.491a3.58 3.58 0 1 0 3.508-2.871Z"
              ></path>
            </svg>
            <span class="sr-only">Share</span>
          </button>
          <div
            id="tooltip-share"
            role="tooltip"
            class="absolute z-10 invisible inline-block w-auto px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700"
          >
            Share
            <div class="tooltip-arrow" data-popper-arrow></div>
          </div>
          <button
            type="button"
            data-tooltip-target="tooltip-print"
            data-tooltip-placement="left"
            class="flex justify-center items-center w-[52px] h-[52px] text-gray-500 hover:text-gray-900 bg-white rounded-full border border-gray-200 dark:border-gray-600 shadow-xs dark:hover:text-white dark:text-gray-400 hover:bg-gray-50 dark:bg-gray-700 dark:hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 focus:outline-none dark:focus:ring-gray-400"
          >
            <svg
              class="w-5 h-5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path d="M5 20h10a1 1 0 0 0 1-1v-5H4v5a1 1 0 0 0 1 1Z"></path>
              <path
                d="M18 7H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2v-3a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v3a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2Zm-1-2V2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3h14Z"
              ></path>
            </svg>
            <span class="sr-only">Print</span>
          </button>
          <div
            id="tooltip-print"
            role="tooltip"
            class="absolute z-10 invisible inline-block w-auto px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700"
          >
            Print
            <div class="tooltip-arrow" data-popper-arrow></div>
          </div>
          <button
            type="button"
            data-tooltip-target="tooltip-download"
            data-tooltip-placement="left"
            class="flex justify-center items-center w-[52px] h-[52px] text-gray-500 hover:text-gray-900 bg-white rounded-full border border-gray-200 dark:border-gray-600 shadow-xs dark:hover:text-white dark:text-gray-400 hover:bg-gray-50 dark:bg-gray-700 dark:hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 focus:outline-none dark:focus:ring-gray-400"
          >
            <svg
              class="w-5 h-5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                d="M14.707 7.793a1 1 0 0 0-1.414 0L11 10.086V1.5a1 1 0 0 0-2 0v8.586L6.707 7.793a1 1 0 1 0-1.414 1.414l4 4a1 1 0 0 0 1.416 0l4-4a1 1 0 0 0-.002-1.414Z"
              ></path>
              <path
                d="M18 12h-2.55l-2.975 2.975a3.5 3.5 0 0 1-4.95 0L4.55 12H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2Zm-3 5a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"
              ></path>
            </svg>
            <span class="sr-only">Download</span>
          </button>
          <div
            id="tooltip-download"
            role="tooltip"
            class="absolute z-10 invisible inline-block w-auto px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700"
          >
            Download
            <div class="tooltip-arrow" data-popper-arrow></div>
          </div>
          <button
            type="button"
            data-tooltip-target="tooltip-copy"
            data-tooltip-placement="left"
            class="flex justify-center items-center w-[52px] h-[52px] text-gray-500 hover:text-gray-900 bg-white rounded-full border border-gray-200 dark:border-gray-600 dark:hover:text-white shadow-xs dark:text-gray-400 hover:bg-gray-50 dark:bg-gray-700 dark:hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 focus:outline-none dark:focus:ring-gray-400"
          >
            <svg
              class="w-5 h-5"
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              fill="currentColor"
              viewBox="0 0 18 20"
            >
              <path
                d="M5 9V4.13a2.96 2.96 0 0 0-1.293.749L.879 7.707A2.96 2.96 0 0 0 .13 9H5Zm11.066-9H9.829a2.98 2.98 0 0 0-2.122.879L7 1.584A.987.987 0 0 0 6.766 2h4.3A3.972 3.972 0 0 1 15 6v10h1.066A1.97 1.97 0 0 0 18 14V2a1.97 1.97 0 0 0-1.934-2Z"
              ></path>
              <path
                d="M11.066 4H7v5a2 2 0 0 1-2 2H0v7a1.969 1.969 0 0 0 1.933 2h9.133A1.97 1.97 0 0 0 13 18V6a1.97 1.97 0 0 0-1.934-2Z"
              ></path>
            </svg>
            <span class="sr-only">Copy</span>
          </button>
          <div
            id="tooltip-copy"
            role="tooltip"
            class="absolute z-10 invisible inline-block w-auto px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700"
          >
            Copy
            <div class="tooltip-arrow" data-popper-arrow></div>
          </div>
        </div>
        <button
          type="button"
          data-dial-toggle="speed-dial-menu-default"
          aria-controls="speed-dial-menu-default"
          aria-expanded="false"
          class="flex items-center justify-center text-white bg-blue-700 rounded-full w-14 h-14 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 focus:outline-none dark:focus:ring-blue-800"
        >
          <svg
            class="w-5 h-5 transition-transform group-hover:rotate-45"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 18 18"
          >
            <path
              stroke="currentColor"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 1v16M1 9h16"></path>
          </svg>
          <span class="sr-only">Open actions menu</span>
        </button>
      </div> -->

      {
        !isAuth || currentRole === "Client" ? (
          <StickySMS isAuth={isAuth} currentUser={currentUser} currentRole={currentRole} />
        ) : (
          currentUser && (
            <HttpChatWidget
              currentUser={{
                id: currentUser.id,
                email: currentUser.email || "",
                company_name: currentUser.company_name || "User",
              }}
              currentRole={currentRole || ""}
            />
          )
        )
      }
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const currentUrl = new URL(window.location.href);
        const errorParam = currentUrl.searchParams.get("error");
        const messageParam = currentUrl.searchParams.get("message");

        // Handle error messages
        if (errorParam) {
          let errorMessage = "";
          let errorTitle = "Error";

          switch (errorParam) {
            case "oauth_failed":
              errorMessage = "OAuth authentication failed. Please try again.";
              errorTitle = "Authentication Failed";
              break;
            case "verification_failed":
              errorMessage = "Email verification failed. Please try again.";
              errorTitle = "Verification Failed";
              break;
            case "verification_expired":
              errorMessage = "Verification link has expired. Please request a new one.";
              errorTitle = "Link Expired";
              break;
            case "verification_invalid":
              errorMessage = "Invalid verification link.";
              errorTitle = "Invalid Link";
              break;
            case "verification_error":
              errorMessage = "An error occurred during verification.";
              errorTitle = "Verification Error";
              break;
            case "no_token":
              errorMessage = "Invalid or missing verification token.";
              errorTitle = "Invalid Token";
              break;
            case "no_user":
              errorMessage = "User not found.";
              errorTitle = "User Not Found";
              break;
            case "invalid_credentials":
              errorMessage = "Invalid email or password.";
              errorTitle = "Invalid Credentials";
              break;
            case "email_exists":
              errorMessage = "An account with this email already exists.";
              errorTitle = "Account Exists";
              break;
            case "weak_password":
              errorMessage = "Password must be at least 6 characters long.";
              errorTitle = "Weak Password";
              break;
            case "invalid_email":
              errorMessage = "Please enter a valid email address.";
              errorTitle = "Invalid Email";
              break;
            case "sms_missing_fields":
              errorMessage = "Please fill in all required fields for SMS.";
              errorTitle = "SMS Error";
              break;
            case "sms_invalid_phone":
              errorMessage = "Please enter a valid 10-digit phone number.";
              errorTitle = "Invalid Phone";
              break;
            case "sms_invalid_carrier":
              errorMessage = "Please select a valid carrier.";
              errorTitle = "Invalid Carrier";
              break;
            case "sms_send_failed":
              errorMessage = "Failed to send SMS. Please try again.";
              errorTitle = "SMS Failed";
              break;
            case "sms_email_error":
              errorMessage = "Email service error. Please try again later.";
              errorTitle = "Service Error";
              break;
            case "sms_unexpected_error":
              errorMessage = "An unexpected error occurred while sending SMS.";
              errorTitle = "SMS Error";
              break;
            default:
              errorMessage = "An error occurred. Please try again.";
              errorTitle = "Error";
          }

          // Use centralized notification system
          if ((window as any).showModal) {
            (window as any).showModal(errorTitle, errorMessage, "error");
          } else {
            console.error(`üîî [${errorTitle}] ${errorMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("error");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }

        // Handle success messages
        if (messageParam) {
          let successMessage = "";
          let successTitle = "Success!";

          switch (messageParam) {
            case "registration_success":
              successMessage =
                "Registration successful! Please check your email to verify your account.";
              successTitle = "Account Created";
              break;
            case "verification_success":
              successMessage = "Email verified successfully! You can now sign in.";
              successTitle = "Email Verified";
              break;
            case "welcome":
              successMessage = "Welcome! Your account has been verified and you're now signed in.";
              successTitle = "Welcome!";
              break;
            case "logout_success":
              successMessage = "You have been successfully signed out.";
              successTitle = "Signed Out";
              break;
            case "sms_sent_success":
              successMessage = "Your message has been sent to CAPCo successfully.";
              successTitle = "Message Sent";
              break;
            default:
              successMessage = messageParam;
              successTitle = "Success!";
          }

          // Use centralized notification system
          if ((window as any).showModal) {
            (window as any).showModal(successTitle, successMessage, "success");
          } else {
            console.error(`üîî [${successTitle}] ${successMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("message");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }
      });
    </script>

    <!-- Expose centralized notification system to window object -->
    <script>
      // Suppress ResizeObserver loop warnings (they're usually harmless)
      window.addEventListener("error", (e) => {
        if (e.message === "ResizeObserver loop completed with undelivered notifications.") {
          e.stopImmediatePropagation();
        }
      });
    </script>
  </body>
</html>
