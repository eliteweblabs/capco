---
interface Props {
  title?: string;
  description?: string;
  user?: {
    id: string;
    email: string;
  };
}

import { checkAuth } from "../../lib/auth";
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

import { getI18N } from "../../i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Use provided props or fall back to i18n defaults
const title = Astro.props.title || i18n.SEO_TITLE;
const description = Astro.props.description || i18n.SEO_DESCRIPTION;

// Import components
import Header from "./Header.astro";
import Footer from "./Footer.astro";
import SimpleToast from "./SimpleToast.astro";
import ToastAlerts from "./ToastAlerts.astro";
import StickySMS from "./StickySMS.astro";
import "../../styles/boxicons.css"; // Import Boxicons CSS first
import "../../styles/global.css"; // Import Tailwind CSS

import { getLangFromUrl } from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);

console.log("üèóÔ∏è [APP] App component loading...", user);
---

<!doctype html>
<html {lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/svg+xml" href="/img/capco-logo.svg" sizes="any" />

    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#000000" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Fire Pro" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.svg" />
    <meta property="og:url" content="{Astro.url}" />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.svg" />

    <link
      rel="icon"
      href="https://tomsens.com/wp-content/uploads/2025/05/tomsens-rekko-favicon.png"
      sizes="any"
    />

    <link
      rel="apple-touch-icon"
      href="https://tomsens.com/wp-content/uploads/2025/05/tomsens-rekko-favicon.svg"
    />

    <meta
      name="description"
      content="Saving small businesses money with workflow automation, generating leads for them with website design and giving them a professional look with full stack branding."
    />
    <meta name="robots" content="max-image-preview:large" /><link
      rel="canonical"
      href="https://tomsens.com/"
    /><meta name="generator" content="All in One SEO (AIOSEO) 4.8.6.1" /><meta
      property="og:locale"
      content="en_US"
    /><meta property="og:site_name" content="tomsens + REKKO - web + brand development" /><meta
      property="og:type"
      content="website"
    /><meta property="og:title" content="tomsens + REKKO - web + brand development üêï‚Äçü¶∫" /><meta
      property="og:description"
      content="Saving small businesses money with workflow automation, generating leads for them with website design and giving them a professional look with full stack branding."
    /><meta property="og:url" content="https://tomsens.com/" /><meta
      property="og:image"
      content="https://tomsens.com/wp-content/uploads/2025/05/Screenshot-2025-05-15-at-9.57.05‚ÄØPM.png"
    /><meta
      property="og:image:secure_url"
      content="https://tomsens.com/wp-content/uploads/2025/05/Screenshot-2025-05-15-at-9.57.05‚ÄØPM.png"
    /><meta property="og:image:width" content="1616" /><meta
      property="og:image:height"
      content="1426"
    /><meta name="twitter:card" content="summary_large_image" /><meta
      name="twitter:title"
      content="tomsens + REKKO - web + brand development üêï‚Äçü¶∫"
    /><meta
      name="twitter:description"
      content="Saving small businesses money with workflow automation, generating leads for them with website design and giving them a professional look with full stack branding."
    /><meta
      name="twitter:image"
      content="https://tomsens.com/wp-content/uploads/2025/05/Screenshot-2025-05-15-at-9.57.05‚ÄØPM.png"
    />

    <title>{title}</title>

    <!-- Inject environment variables for client-side use FIRST -->
    <script
      set:html={`window.SUPABASE_URL = "${import.meta.env.SUPABASE_URL || ""}"; window.SUPABASE_ANON_KEY = "${(import.meta.env.SUPABASE_ANON_KEY || "").replace(/\s/g, "")}"; window.GOOGLE_MAPS_API_KEY = "${import.meta.env.GOOGLE_MAPS_API_KEY || ""}"; ${user ? `window.USER_DATA = ${JSON.stringify(user)};` : ""} console.log("Environment variables loaded:", { SUPABASE_URL: window.SUPABASE_URL ? "Set" : "Missing", SUPABASE_ANON_KEY: window.SUPABASE_ANON_KEY ? "Set" : "Missing", GOOGLE_MAPS_API_KEY: window.GOOGLE_MAPS_API_KEY ? "Set" : "Missing" });`}
    />

    <!-- Google Maps Places API - Load only if API key is available -->
    <script>
      // Wait for environment variables to be loaded, then load Google Maps
      function loadGoogleMaps() {
        console.log("üîç [GoogleMaps] Checking for API key...");
        console.log(
          "üîç [GoogleMaps] window.GOOGLE_MAPS_API_KEY:",
          (window as any).GOOGLE_MAPS_API_KEY ? "Present" : "Missing"
        );
        console.log(
          "üîç [GoogleMaps] API key length:",
          (window as any).GOOGLE_MAPS_API_KEY ? (window as any).GOOGLE_MAPS_API_KEY.length : 0
        );

        if (
          (window as any).GOOGLE_MAPS_API_KEY &&
          (window as any).GOOGLE_MAPS_API_KEY.trim() !== ""
        ) {
          // Check if script already exists
          if (document.getElementById("google-maps-script")) {
            console.log("‚úÖ [GoogleMaps] Google Maps API already loaded");
            return;
          }

          const script = document.createElement("script");
          script.async = true;
          script.defer = true;
          script.src = `https://maps.googleapis.com/maps/api/js?key=${(window as any).GOOGLE_MAPS_API_KEY}&libraries=places`;
          script.id = "google-maps-script";

          // Add error handling
          script.onerror = function () {
            console.error("‚ùå [GoogleMaps] Failed to load Google Maps API script");
          };

          script.onload = function () {
            console.log("‚úÖ [GoogleMaps] Google Maps API loaded successfully");
            // Dispatch custom event for components to listen to
            window.dispatchEvent(new CustomEvent("googleMapsLoaded"));
          };

          document.head.appendChild(script);
        } else {
          console.warn(
            "‚ùå [GoogleMaps] Google Maps API key not found. Maps functionality will be disabled."
          );
          console.log("üîç [GoogleMaps] Available environment variables:", {
            SUPABASE_URL: (window as any).SUPABASE_URL ? "Set" : "Missing",
            SUPABASE_ANON_KEY: (window as any).SUPABASE_ANON_KEY ? "Set" : "Missing",
            GOOGLE_MAPS_API_KEY: (window as any).GOOGLE_MAPS_API_KEY ? "Set" : "Missing",
          });
        }
      }

      // Try to load immediately, and also on DOMContentLoaded as fallback
      loadGoogleMaps();
      document.addEventListener("DOMContentLoaded", loadGoogleMaps);
    </script>
  </head>
  <body class="bg-hub-background dark:bg-hub-background-dark md:flex md:justify-center">
    <main class="section relative mx-auto w-full max-w-[2000px]">
      <Header />
      <slot />
      <Footer />
    </main>

    <SimpleToast />
    <ToastAlerts />
    <StickySMS />

    <!-- Flowbite removed - not being used -->

    <!-- Inject session tokens for client-side Supabase auth -->
    <script
      set:html={`
        const accessToken = "${Astro.cookies.get("sb-access-token")?.value || ""}";
        const refreshToken = "${Astro.cookies.get("sb-refresh-token")?.value || ""}";
        if (accessToken) window.SUPABASE_ACCESS_TOKEN = accessToken;
        if (refreshToken) window.SUPABASE_REFRESH_TOKEN = refreshToken;
      `}
    />

    <!-- Global URL Parameter Toast Handler -->
    <script>
      // Handle URL parameters and show appropriate toast notifications globally
      document.addEventListener("DOMContentLoaded", () => {
        const currentUrl = new URL(window.location.href);
        const errorParam = currentUrl.searchParams.get("error");
        const messageParam = currentUrl.searchParams.get("message");

        // Handle error messages
        if (errorParam) {
          let errorMessage = "";
          let errorTitle = "Error";

          switch (errorParam) {
            case "oauth_failed":
              errorMessage = "OAuth authentication failed. Please try again.";
              errorTitle = "Authentication Failed";
              break;
            case "verification_failed":
              errorMessage = "Email verification failed. Please try again.";
              errorTitle = "Verification Failed";
              break;
            case "verification_expired":
              errorMessage = "Verification link has expired. Please request a new one.";
              errorTitle = "Link Expired";
              break;
            case "verification_invalid":
              errorMessage = "Invalid verification link.";
              errorTitle = "Invalid Link";
              break;
            case "verification_error":
              errorMessage = "An error occurred during verification.";
              errorTitle = "Verification Error";
              break;
            case "no_token":
              errorMessage = "Invalid or missing verification token.";
              errorTitle = "Invalid Token";
              break;
            case "no_user":
              errorMessage = "User not found.";
              errorTitle = "User Not Found";
              break;
            case "invalid_credentials":
              errorMessage = "Invalid email or password.";
              errorTitle = "Invalid Credentials";
              break;
            case "email_exists":
              errorMessage = "An account with this email already exists.";
              errorTitle = "Account Exists";
              break;
            case "weak_password":
              errorMessage = "Password must be at least 6 characters long.";
              errorTitle = "Weak Password";
              break;
            case "invalid_email":
              errorMessage = "Please enter a valid email address.";
              errorTitle = "Invalid Email";
              break;
            case "sms_missing_fields":
              errorMessage = "Please fill in all required fields for SMS.";
              errorTitle = "SMS Error";
              break;
            case "sms_invalid_phone":
              errorMessage = "Please enter a valid 10-digit phone number.";
              errorTitle = "Invalid Phone";
              break;
            case "sms_invalid_carrier":
              errorMessage = "Please select a valid carrier.";
              errorTitle = "Invalid Carrier";
              break;
            case "sms_send_failed":
              errorMessage = "Failed to send SMS. Please try again.";
              errorTitle = "SMS Failed";
              break;
            case "sms_email_error":
              errorMessage = "Email service error. Please try again later.";
              errorTitle = "Service Error";
              break;
            case "sms_unexpected_error":
              errorMessage = "An unexpected error occurred while sending SMS.";
              errorTitle = "SMS Error";
              break;
            default:
              errorMessage = "An error occurred. Please try again.";
              errorTitle = "Error";
          }

          // Use centralized notification system
          if ((window as any).showError) {
            (window as any).showError(errorTitle, errorMessage, 0); // Keep error messages until manually dismissed
          } else {
            console.error(`üîî [${errorTitle}] ${errorMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("error");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }

        // Handle success messages
        if (messageParam) {
          let successMessage = "";
          let successTitle = "Success!";

          switch (messageParam) {
            case "registration_success":
              successMessage =
                "Registration successful! Please check your email to verify your account.";
              successTitle = "Account Created";
              break;
            case "verification_success":
              successMessage = "Email verified successfully! You can now sign in.";
              successTitle = "Email Verified";
              break;
            case "welcome":
              successMessage = "Welcome! Your account has been verified and you're now signed in.";
              successTitle = "Welcome!";
              break;
            case "logout_success":
              successMessage = "You have been successfully signed out.";
              successTitle = "Signed Out";
              break;
            case "sms_sent_success":
              successMessage = "Your message has been sent to CAPCo successfully.";
              successTitle = "Message Sent";
              break;
            default:
              successMessage = messageParam;
              successTitle = "Success!";
          }

          // Use centralized notification system
          if ((window as any).showSuccess) {
            (window as any).showSuccess(successTitle, successMessage, 6000);
          } else {
            console.log(`üîî [${successTitle}] ${successMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("message");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }
      });
    </script>

    <!-- Expose centralized notification system to window object -->
    <script>
      import {
        showNotification,
        showSuccess,
        showError,
        showWarning,
        showInfo,
        showStatusToast,
      } from "../../lib/centralized-notifications";

      // Make centralized notifications available globally
      (window as any).showNotification = showNotification;
      (window as any).showSuccess = showSuccess;
      (window as any).showError = showError;
      (window as any).showWarning = showWarning;
      (window as any).showInfo = showInfo;
      (window as any).showStatusToast = showStatusToast;

      console.log("üîî [APP] Centralized notification system exposed to window object");
      console.log("üîî [APP] Window functions available:", {
        showSuccess: typeof (window as any).showSuccess,
        showError: typeof (window as any).showError,
        showWarning: typeof (window as any).showWarning,
        showInfo: typeof (window as any).showInfo,
      });
    </script>
  </body>
</html>
