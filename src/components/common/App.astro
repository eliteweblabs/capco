---
interface Props {
  title?: string;
  description?: string;
  requireAuth?: boolean;
  requireRole?: string;
  redirectTo?: string;
  isAuth?: boolean;
  currentUser?: any;
  currentRole?: string;
  session?: any;
}

// Use props if provided, otherwise fetch auth state directly
const { isAuth, currentUser, currentRole, session } = Astro.props;

// If auth propse not provided, fetch them directly

// Status data is now fetched in individual pages as needed

import { getI18N } from "../../i18n";
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Use provided props or fall back to i18n defaults
const title = Astro.props.title || i18n.SEO_TITLE;
const description = Astro.props.description || i18n.SEO_DESCRIPTION;

// Import components
import Preloader from "./Preloader.astro";
import Header from "./Header.astro";
import Footer from "./Footer.astro";
import UnifiedNotification from "./UnifiedNotification.astro";
import CookieBanner from "./CookieBanner.astro";
import SpeedDial from "./SpeedDial.astro";
import "../../styles/boxicons.css"; // Import Boxicons CSS first
import "../../styles/global.css"; // Import Tailwind CSS

import { getLangFromUrl } from "../../i18n/utils";
import { SimpleProjectLogger } from "../../lib/simple-logging";

const lang = getLangFromUrl(Astro.url);

import { isBackendPage } from "../../pages/api/backend-page-check";

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
const isBackend = isBackendPage(currentUrl);

// Navigation schema
type UserRole = "any" | "Client" | "Admin" | "Staff";
type NavType = "frontend" | "backend";

interface NavItem {
  label: string;
  href: string;
  roles: UserRole[];
  pageType: NavType;
  isPrimary: boolean;
  isDrawer?: boolean; // Special flag for drawer trigger
  mobileOnly?: boolean; // Show only on mobile
  desktopOnly?: boolean; // Show only on desktop
  buttonStyle?: "primary" | "secondary" | "ghost" | "outline"; // Button variant
  isDropdown?: boolean; // Is a dropdown menu
  dropdownItems?: DropdownItem[]; // Items for dropdown
  showWhenAuth?: boolean; // Show only when authenticated
  hideWhenAuth?: boolean; // Hide when authenticated
}

interface DropdownItem {
  label: string;
  href: string;
}

interface DropdownMenu {
  label: string;
  items: DropdownItem[];
}

// Navigation items
const navItems: NavItem[] = [
  // Frontend navigation (hidden on backend pages to reduce clutter)
  {
    label: "Why CAPCo",
    href: "#",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: false,
    isDropdown: true,
    dropdownItems: [
      { label: "Unified Fire Protection Platform", href: "/solutions" },
      { label: "CAPCo vs Competitors", href: "/solutions" },
      { label: "Move to CAPCo", href: "/solutions" },
      { label: "See Our Customers", href: "/customers" },
    ],
  },
  {
    label: "Pricing",
    href: "/pricing",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/pricing"),
    desktopOnly: true,
  },
  {
    label: "Book Demo",
    href: "/demo",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/demo"),
    buttonStyle: "primary",
    desktopOnly: true,
  },
  // Backend navigation (shown on backend pages)
  {
    label: "New Project",
    href: "/dashboard#new-project",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/dashboard#new-project"),
  },
  {
    label: "Projects",
    href: "#",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: false,
    isDrawer: true, // Special flag for drawer trigger
  },
  {
    label: "Discussions",
    href: "/discussions",
    roles: ["Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/discussions"),
  },
  {
    label: "Global Activity",
    href: "/admin/global-activity",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/admin/global-activity"),
  },
  {
    label: "Users",
    href: "/users",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/users"),
  },
];

// Dropdown menus are now integrated into navItems array above

// Filter navigation items based on auth state, role, and page type
function getVisibleNavItems(
  navItems: NavItem[],
  isAuth: boolean,
  currentRole: string | null,
  isBackend: boolean
): NavItem[] {
  return navItems.filter((item) => {
    // Check auth-specific visibility
    if (item.hideWhenAuth && isAuth) return false;
    if (item.showWhenAuth && !isAuth) return false;

    // Show frontend items when not on backend pages
    if (item.pageType === "frontend" && !isBackend) {
      return (
        item.roles.includes("any") ||
        (isAuth && currentRole && item.roles.includes(currentRole as UserRole))
      );
    }

    // Show backend items when on backend pages and authenticated
    if (item.pageType === "backend" && isBackend && isAuth) {
      return (
        item.roles.includes("any") || (currentRole && item.roles.includes(currentRole as UserRole))
      );
    }

    return false;
  });
}

const visibleNavItems = getVisibleNavItems(
  navItems,
  isAuth || false,
  currentRole || null,
  isBackend
);

// Generate navigation HTML for reuse
async function generateNavigationHTML(
  navItems: NavItem[],
  filterType: "desktop" | "mobile" = "desktop"
): Promise<string> {
  const filteredItems = navItems.filter((item: any) => {
    if (filterType === "desktop") {
      return !item.mobileOnly; // Show only desktop items
    } else {
      return !item.desktopOnly; // Show only mobile items
    }
  });

  const results = await Promise.all(
    filteredItems.map(async (item: any) => {
      // Handle dropdown items
      if (item.isDropdown && item.dropdownItems) {
        return `
        <div class="group relative">
          <button
            type="button"
            class="inline-flex items-center justify-center font-medium rounded-full transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed px-3 py-2 text-sm font-medium transition-colors ${
              item.isPrimary ? "text-primary dark:text-primary-dark" : "text-black dark:text-white"
            }"
          >
            ${item.label}
            <i class="bx bx-chevron-down ml-1 h-4 w-4"></i>
          </button>
          <div class="invisible absolute left-0 mt-2 w-64 rounded-lg border border-border-light bg-background-card opacity-0 shadow-lg transition-all duration-200 group-hover:visible group-hover:opacity-100 dark:border-border-dark dark:bg-background-card-dark">
            <div class="py-1">
              ${item.dropdownItems
                .map(
                  (dropdownItem: any) => `
                <a
                  href="${dropdownItem.href}"
                  class="block px-4 py-2 text-sm text-text-secondary hover:bg-neutral-100 dark:text-text-secondary-dark dark:hover:bg-neutral-700"
                >
                  ${dropdownItem.label}
                </a>
              `
                )
                .join("")}
            </div>
          </div>
        </div>
      `;
      }

      // Handle button style items
      if (item.buttonStyle && item.href && item.label) {
        // Since we can't use fetch() during SSR, create the button HTML manually
        // This matches the Button component's output structure

        return `<a href="${item.href}" class="relative inline-flex items-center justify-center font-medium rounded-full transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed px-5 py-2.5 text-sm bg-primary-500 text-white hover:bg-primary-600 dark:bg-primary-500 dark:hover:bg-primary-600 shadow-lg hover:shadow-xl w-full">${item.label}</a>`;
      }

      // Handle regular links
      return `
      <a
        href="${item.href}"
        class="px-3 py-2 text-sm font-medium transition-colors ${
          item.isPrimary
            ? "text-prim dark:text-primary-dark"
            : "hover:text-primary dark:hover:text-primary-dark text-black dark:text-white"
        }"
      >
        ${item.label}
      </a>
    `;
    })
  );

  return results.join("");
}

let assignedProjectsCount = 0;
let assignedProjects: any[] = [];

if (currentUser?.id) {
  // console.log("üèóÔ∏è [APP] Fetching assigned projects for user:", currentUser.id);
  const baseUrl = Astro.url.origin || "http://localhost:4321";
  const fullUrl = `${baseUrl}/api/get-project?assigned_to_id=${currentUser.id}`;
  // console.log("üèóÔ∏è [APP] Full URL:", fullUrl);
  try {
    const response = await fetch(fullUrl);
    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [APP] Assigned projects:", data);
      assignedProjects = data.projects || [];
      assignedProjectsCount = data.count || 0;
    }
  } catch (error) {
    console.error("Error fetching assigned projects:", error);
  }
}

// Genee navigation HTML for desktop and mobile
const desktopNavigationHTML = await generateNavigationHTML(visibleNavItems, "desktop");
const mobileNavigationHTML = (assignedProjects = []);

// console.log("üèóÔ∏è [APP] App component loading...", user);
---

<!doctype html>
<html {lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/svg+xml" href="/img/capco-logo.svg" sizes="any" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#000000" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="CAPCo Fire App" />
    <meta name="generator" content={Astro.generator} />

    <!-- Safari Privacy Protection Meta Tags -->
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta http-equiv="Cross-Origin-Embedder-Policy" content="unsafe-none" />
    <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin-allow-popups" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.svg" />
    <meta property="og:url" content={Astro.url} />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.svg" />
    <link rel="icon" href="/public/img/capco-favicon.png" sizes="any" />

    <!-- <link
      rel="apple-touch-icon"
      href="https://tomsens.com/wp-content/uploads/2025/05/tomsens-rekko-favicon.svg"
    /> -->
    <meta
      name="description"
      content="Saving small businesses money with workflow automation, generating leads for them with website design and giving them a professional look with full stack branding."
    />
    <meta name="robots" content="max-image-preview:large" /><link
      rel="canonical"
      href="https://capcofire.com"
    /><meta name="generator" content="All in One SEO (AIOSEO) 4.8.6.1" /><meta
      property="og:locale"
      content="en_US"
    /><meta property="og:site_name" content="CAPCo Fire" /><meta
      property="og:type"
      content="website"
    /><meta property="og:title" content="CAPCo Fire" /><meta
      property="og:description"
      content="Fire protection project management and proposal system."
    />
    <!-- sms -->
    <meta name="twitter:card" content="summary_large_image" /><meta
      name="twitter:title"
      content="CAPCo Fire"
    /><meta
      name="twitter:description"
      content="Fire protection project management and proposal system."
    />
    <!-- <meta
      name="twitter:image"
      content="https://tomsens.com/wp-content/uploads/2025/05/Screenshot-2025-05-15-at-9.57.05‚ÄØPM.png"
    /> -->

    <title>{title}</title>

    <!-- SimpleProjectLogger Global Setup -->
    <!-- <script define:vars={{ SimpleProjectLogger }}>
      if (typeof window !== "undefined") {
        (window as any).SimpleProjectLogger = SimpleProjectLogger;
      }
    </script> -->

    <!-- Google Maps Places API - Load only if API key is available -->
    <script>
      // Wait for environment variables to be loaded, then load Google Maps
      function loadGoogleMaps() {
        if (
          (window as any).GOOGLE_MAPS_API_KEY &&
          (window as any).GOOGLE_MAPS_API_KEY.trim() !== ""
        ) {
          // Check if script already exists
          if (document.getElementById("google-maps-script")) {
            console.log("‚úÖ [GoogleMaps] Google Maps API already loaded");
            return;
          }

          const script = document.createElement("script");
          script.async = true;
          script.defer = true;
          // Use the stable version of Google Maps API with Places library
          script.src = `https://maps.googleapis.com/maps/api/js?key=${(window as any).GOOGLE_MAPS_API_KEY}&libraries=places&loading=async`;
          script.id = "google-maps-script";

          // Add error handling
          script.onerror = function () {
            console.error("‚ùå [GoogleMaps] Failed to load Google Maps API script");
          };

          script.onload = function () {
            // console.log("‚úÖ [GoogleMaps] Google Maps API (stable version) loaded successfully");
            // console.log("üó∫Ô∏è [GoogleMaps] Available APIs:", {
            //   maps: !!window.google?.maps,
            //   places: !!window.google?.maps?.places,
            //   autocomplete: !!window.google?.maps?.places?.Autocomplete,
            //   placeAutocompleteElement: !!window.google?.maps?.places?.PlaceAutocompleteElement,
            //   version: window.google?.maps?.version,
            // });

            // Dispatch custom event for components to listen to
            window.dispatchEvent(new CustomEvent("googleMapsLoaded"));
          };

          document.head.appendChild(script);
        } else {
          console.warn(
            "‚ùå [GoogleMaps] Google Maps API key not found. Maps functionality will be disabled."
          );
        }
      }

      // Try to load immediately, and also on DOMContentLoaded as fallback
      loadGoogleMaps();
      document.addEventListener("DOMContentLoaded", loadGoogleMaps);
    </script>
  </head>
  <body class="h-min-screen bg-background-light dark:bg-background-dark md:flex md:justify-center">
    <!-- Preloader -->
    <Preloader />
    <!-- Loading Overlay for Save Operations -->
    <main class="section relative mx-auto w-full max-w-[2000px]">
      <Header
        isAuth={isAuth}
        currentUser={currentUser}
        currentRole={currentRole || ""}
        session={session}
        visibleNavItems={visibleNavItems}
        assignedProjects={assignedProjects}
        assignedProjectsCount={assignedProjectsCount}
        desktopNavigationHTML={desktopNavigationHTML}
        mobileNavigationHTML={mobileNavigationHTML}
      />
      <slot />
      <!-- F
o       oter -->
      <Footer
        isAuth={isAuth}
        session={session}
        currentUser={currentUser}
        currentRole={currentRole || ""}
        assignedProjects={assignedProjects}
        assignedProjectsCount={assignedProjectsCount}
        visibleNavItems={visibleNavItems}
        desktopNavigationHTML={desktopNavigationHTML}
        mobileNavigationHTML={mobileNavigationHTML}
      />
    </main>

    <!-- Unified Notification System -->
    <UnifiedNotification />
    <!-- Cookie Banner -->
    <CookieBanner />

    <!-- Speed Dial -->
    <SpeedDial
      currentUser={currentUser || undefined}
      currentRole={currentRole || ""}
      isAuth={isAuth}
    />

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const currentUrl = new URL(window.location.href);
        const errorParam = currentUrl.searchParams.get("error");
        const messageParam = currentUrl.searchParams.get("message");

        // Handle error messages
        if (errorParam) {
          let errorMessage = "";
          let errorTitle = "Error";

          switch (errorParam) {
            case "oauth_failed":
              errorMessage = "OAuth authentication failed. Please try again.";
              errorTitle = "Authentication Failed";
              break;
            case "verification_failed":
              errorMessage = "Email verification failed. Please try again.";
              errorTitle = "Verification Failed";
              break;
            case "verification_expired":
              errorMessage = "Verification link has expired. Please request a new one.";
              errorTitle = "Link Expired";
              break;
            case "verification_invalid":
              errorMessage = "Invalid verification link.";
              errorTitle = "Invalid Link";
              break;
            case "verification_error":
              errorMessage = "An error occurred during verification.";
              errorTitle = "Verification Error";
              break;
            case "no_token":
              errorMessage = "Invalid or missing verification token.";
              errorTitle = "Invalid Token";
              break;
            case "no_user":
              errorMessage = "User not found.";
              errorTitle = "User Not Found";
              break;
            case "invalid_credentials":
              errorMessage = "Invalid email or password.";
              errorTitle = "Invalid Credentials";
              break;
            case "email_exists":
              errorMessage = "An account with this email already exists.";
              errorTitle = "Account Exists";
              break;
            case "weak_password":
              errorMessage = "Password must be at least 6 characters long.";
              errorTitle = "Weak Password";
              break;
            case "invalid_email":
              errorMessage = "Please enter a valid email address.";
              errorTitle = "Invalid Email";
              break;
            case "sms_missing_fields":
              errorMessage = "Please fill in all required fields for SMS.";
              errorTitle = "SMS Error";
              break;
            case "sms_invalid_phone":
              errorMessage = "Please enter a valid 10-digit phone number.";
              errorTitle = "Invalid Phone";
              break;
            case "sms_invalid_carrier":
              errorMessage = "Please select a valid carrier.";
              errorTitle = "Invalid Carrier";
              break;
            case "sms_send_failed":
              errorMessage = "Failed to send SMS. Please try again.";
              errorTitle = "SMS Failed";
              break;
            case "sms_email_error":
              errorMessage = "Email service error. Please try again later.";
              errorTitle = "Service Error";
              break;
            case "sms_unexpected_error":
              errorMessage = "An unexpected error occurred while sending SMS.";
              errorTitle = "SMS Error";
              break;
            default:
              errorMessage = "An error occurred. Please try again.";
              errorTitle = "Error";
          }

          // Use centralized notification system
          if ((window as any).showModal) {
            (window as any).showModal("error", errorTitle, errorMessage);
          } else {
            console.error(`üîî [${errorTitle}] ${errorMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("error");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }

        // Handle success messages
        if (messageParam) {
          let successMessage = "";
          let successTitle = "Success!";

          switch (messageParam) {
            case "registration_success":
              successMessage =
                "Registration successful! Please check your email to verify your account.";
              successTitle = "Account Created";
              break;
            case "verification_success":
              successMessage = "Email verified successfully! You can now sign in.";
              successTitle = "Email Verified";
              break;
            case "welcome":
              successMessage = "Welcome! Your account has been verified and you're now signed in.";
              successTitle = "Welcome!";
              break;
            case "logout_success":
              successMessage = "You have been successfully signed out.";
              successTitle = "Signed Out";
              break;
            case "sms_sent_success":
              successMessage = "Your message has been sent to CAPCo successfully.";
              successTitle = "Message Sent";
              break;
            default:
              successMessage = messageParam;
              successTitle = "Success!";
          }

          // Use centralized notification system
          if ((window as any).showModal) {
            (window as any).showModal(successTitle, successMessage, "success");
          } else {
            console.error(`üîî [${successTitle}] ${successMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("message");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }
      });
    </script>

    <!-- Expose centralized notification system to window object -->
    <script>
      // Suppress ResizeObserver loop warnings (they're usually harmless)
      window.addEventListener("error", (e) => {
        if (e.message === "ResizeObserver loop completed with undelivered notifications.") {
          e.stopImmediatePropagation();
        }
      });

      // Centralized notification handler for update-status API responses
      (window as any).handleUpdateStatusNotification = function (response: any, context: any) {
        if (!response.success) {
          console.error(`‚ùå [${context || "NOTIFICATION"}] API call failed:`, response.error);
          return;
        }

        if (!response.notificationData || !(window as any).showModal) {
          console.warn(
            `‚ö†Ô∏è [${context || "NOTIFICATION"}] No notification data or showModal function available`
          );
          return;
        }

        // Get user role from API response (more secure than frontend)
        const currentUserRole = response.notificationData.currentUserRole || "Client";
        const isAdminOrStaff = currentUserRole === "Admin" || currentUserRole === "Staff";
        const notification = isAdminOrStaff
          ? response.notificationData.admin
          : response.notificationData.client;

        if (notification) {
          // console.log(
          //   `üîî [${context || "NOTIFICATION"}] Showing ${isAdminOrStaff ? "admin" : "client"} notification:`,
          //   {
          //     type: notification.type,
          //     title: notification.title,
          //     message: notification.message,
          //     redirect: notification.redirect,
          //     userRole: currentUserRole,
          //   }
          // );

          (window as any).showModal(
            notification.type,
            notification.title,
            notification.message,
            notification.duration,
            notification.redirect
          );
        } else {
          console.warn(
            `‚ö†Ô∏è [${context || "NOTIFICATION"}] No ${isAdminOrStaff ? "admin" : "client"} notification found in response`
          );
        }
      };
    </script>

    <!-- Flowbite JavaScript -->
    <script src="https://unpkg.com/flowbite@2.5.2/dist/flowbite.min.js"></script>
    <script>
      // Initialize Flowbite components
      document.addEventListener("DOMContentLoaded", function () {
        if (typeof (window as any).initFlowbite === "function") {
          (window as any).initFlowbite();
        }
      });
    </script>
  </body>
</html>
