---
interface Props {
  title?: string;
  description?: string;
  redirectTo?: string;
  isAuth?: boolean;
  currentUser?: any;
  currentRole?: string | null;
  session?: any;
  project?: any;
  projectId?: string;
  supabaseUrl?: string;
  supabaseAdmin?: any;
}

// Use props if provided, otherwise fetch auth state directly
const {
  title = undefined,
  description = undefined,
  redirectTo = undefined,
  isAuth = false,
  currentUser = null,
  currentRole = "Client",
  session = null,
  project = undefined,
  projectId = undefined,
  supabaseUrl = undefined,
  supabaseAdmin = null,
} = Astro.props;

// If auth propse not provided, fetch them directly

// Status data is now fetched in individual pages as needed

// Import components

import "../../styles/boxicons.css"; // Import Boxicons CSS first
import "../../styles/global.css"; // Import Tailwind CSS
import Preloader from "./Preloader.astro";
import Header from "./Header.astro";
import Footer from "./Footer.astro";
import UnifiedNotification from "./UnifiedNotification.astro";
import CookieBanner from "./CookieBanner.astro";
import SpeedDial from "./SpeedDial.astro";

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
const isBackend = isBackendPage(currentUrl);
import { isBackendPage } from "../../pages/api/backend-page-check";
import { navigation } from "@/pages/api/navigation";

const navigationData = navigation(
  currentUrl,
  isAuth || false,
  currentRole || "Client",
  isBackend || false
);
const { desktopNavigationHTML, visibleNavItems } = navigationData;
// console.log("üèóÔ∏è [APP] Desktop navigation HTML:", desktopNavigationHTML);
// console.log("üèóÔ∏è [APP] Visible nav items:", visibleNavItems);

let assignedProjectsCount = 0;
let assignedProjects: any[] = [];

if ((currentUser?.id && currentRole === "Staff") || currentRole === "Admin") {
  // console.log("üèóÔ∏è [APP] Fetching assigned projects for user:", currentUser.id);
  const baseUrl = Astro.url.origin;
  const fullUrl = `${baseUrl}/api/get-project?assigned_to_id=${currentUser.id}`;
  // console.log("üèóÔ∏è [APP] Full URL:", fullUrl);
  try {
    const response = await fetch(fullUrl);
    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [APP] Assigned projects:", data);
      assignedProjects = data.projects || [];
      assignedProjectsCount = data.projects.length || 0;
    }
  } catch (error) {
    console.error("Error fetching assigned projects:", error);
  }
} else if (currentUser?.id && currentRole === "Client") {
  const baseUrl = Astro.url.origin;
  const fullUrl = `${baseUrl}/api/get-project?author_id=${currentUser.id}`;
  // console.log("üèóÔ∏è [APP] Full URL:", fullUrl);
  try {
    const response = await fetch(fullUrl);
    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [APP] Assigned projects:", data);
      assignedProjects = data.projects || [];
      assignedProjectsCount = data.projects.length || 0;
    }
  } catch (error) {
    console.error("Error fetching assigned projects:", error);
  }
}

// Genee navigation HTML for desktop and mobile
// const mobileNavigationHTML = (assignedProjects = []);

// console.log("üèóÔ∏è [APP] App component loading...", user);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"
    />
    <link rel="icon" type="image/png" href="/img/capco-logo.png" sizes="any" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#000000" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="CAPCo Fire App" />
    <meta name="generator" content={Astro.generator} />

    <!-- Safari Privacy Protection Meta Tags -->
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta http-equiv="Cross-Origin-Embedder-Policy" content="unsafe-none" />
    <meta http-equiv="Cross-Origin-Opener-Policy" content="same-origin-allow-popups" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/img/capco-logo.png" />
    <meta property="og:url" content={Astro.url} />
    <meta name="twitter:card" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content="/img/capco-logo.png" />
    <link rel="icon" href="/favicon.png" sizes="any" />

    <!-- <link
      rel="apple-touch-icon"
      href="https://tomsens.com/wp-content/uploads/2025/05/tomsens-rekko-favicon.svg"
    /> -->
    <meta
      name="description"
      content="Saving small businesses money with workflow automation, generating leads for them with website design and giving them a professional look with full stack branding."
    />
    <meta name="robots" content="max-image-preview:large" /><link
      rel="canonical"
      href="https://capcofire.com"
    /><meta name="generator" content="All in One SEO (AIOSEO) 4.8.6.1" /><meta
      property="og:locale"
      content="en_US"
    /><meta property="og:site_name" content="CAPCo Fire" /><meta
      property="og:type"
      content="website"
    /><meta property="og:title" content="CAPCo Fire" /><meta
      property="og:description"
      content="Fire protection project management and proposal system."
    />
    <!-- sms -->
    <meta name="twitter:card" content="summary_large_image" /><meta
      name="twitter:title"
      content="CAPCo Fire"
    /><meta
      name="twitter:description"
      content="Fire protection project management and proposal system."
    />
    <!-- <meta
      name="twitter:image"
      content="https://tomsens.com/wp-content/uploads/2025/05/Screenshot-2025-05-15-at-9.57.05‚ÄØPM.png"
    /> -->

    <title>{title}</title>

    <!-- Inject environment variables for client-side use FIRST -->
    <script
      set:html={`window.GOOGLE_MAPS_API_KEY = "${import.meta.env.GOOGLE_MAPS_API_KEY || ""}"; window.STRIPE_PUBLISHABLE_KEY = "${import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY || ""}";`}
    />

    <!-- ${currentUser ? `window.USER_DATA = ${JSON.stringify(currentUser)};` : ""}
    window.SUPABASE_URL = "${import.meta.env.SUPABASE_URL || ""}"; window.SUPABASE_ANON_KEY = "${(import.meta.env.SUPABASE_ANON_KEY || "").replace(/\s/g, "")}";  -->
    <!-- SimpleProjectLogger is now handled server-side only -->

    <!-- Google Maps Places API - Load only if API key is available -->
    <script>
      // Wait for environment variables to be loaded, then load Google Maps
      function loadGoogleMaps() {
        if (
          (window as any).GOOGLE_MAPS_API_KEY &&
          (window as any).GOOGLE_MAPS_API_KEY.trim() !== ""
        ) {
          // Check if script already exists
          if (document.getElementById("google-maps-script")) {
            console.log("‚úÖ [GoogleMaps] Google Maps API already loaded");
            return;
          }

          const script = document.createElement("script");
          script.async = true;
          script.defer = true;
          // Use the stable version of Google Maps API with Places library
          script.src = `https://maps.googleapis.com/maps/api/js?key=${(window as any).GOOGLE_MAPS_API_KEY}&libraries=places&loading=async`;
          script.id = "google-maps-script";

          // Add error handling
          script.onerror = function () {
            console.error("‚ùå [GoogleMaps] Failed to load Google Maps API script");
          };

          script.onload = function () {
            // console.log("‚úÖ [GoogleMaps] Google Maps API (stable version) loaded successfully");
            // console.log("üó∫Ô∏è [GoogleMaps] Available APIs:", {
            //   maps: !!window.google?.maps,
            //   places: !!window.google?.maps?.places,
            //   autocomplete: !!window.google?.maps?.places?.Autocomplete,
            //   placeAutocompleteElement: !!window.google?.maps?.places?.PlaceAutocompleteElement,
            //   version: window.google?.maps?.version,
            // });

            // Dispatch custom event for components to listen to
            window.dispatchEvent(new CustomEvent("googleMapsLoaded"));
          };

          document.head.appendChild(script);
        } else {
          console.warn(
            "‚ùå [GoogleMaps] Google Maps API key not found. Maps functionality will be disabled."
          );
        }
      }

      // Try to load immediately, and also on DOMContentLoaded as fallback
      loadGoogleMaps();
      document.addEventListener("DOMContentLoaded", loadGoogleMaps);
    </script>
  </head>
  <body class="h-min-screen bg-background-light dark:bg-background-dark md:flex md:justify-center">
    <!-- Preloader -->
    <Preloader />
    <!-- Loading Overlay for Save Operations -->
    <main class="section relative mx-auto w-full max-w-[2000px]">
      <Header
        isAuth={isAuth}
        currentUser={currentUser}
        currentRole={currentRole || ""}
        session={session}
        assignedProjects={assignedProjects}
        assignedProjectsCount={assignedProjectsCount}
        desktopNavigationHTML={desktopNavigationHTML}
      />
      <slot />
      <!-- F
o       oter -->
      <Footer
        isAuth={isAuth}
        session={session}
        currentUser={currentUser}
        currentRole={currentRole || ""}
        assignedProjects={assignedProjects}
        assignedProjectsCount={assignedProjectsCount}
        desktopNavigationHTML={desktopNavigationHTML}
        project={project}
        projectId={projectId}
      />
    </main>

    <!-- Unified Notification System -->
    <UnifiedNotification />
    <!-- Cookie Banner -->
    <CookieBanner />

    <!-- Speed Dial -->
    <SpeedDial
      currentUser={currentUser || undefined}
      currentRole={currentRole || ""}
      isAuth={isAuth}
    />

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const currentUrl = new URL(window.location.href);
        const errorParam = currentUrl.searchParams.get("error");
        const messageParam = currentUrl.searchParams.get("message");

        // Handle error messages
        if (errorParam) {
          let errorMessage = "";
          let errorTitle = "Error";

          switch (errorParam) {
            case "oauth_failed":
              errorMessage = "OAuth authentication failed. Please try again.";
              errorTitle = "Authentication Failed";
              break;
            case "verification_failed":
              errorMessage = "Email verification failed. Please try again.";
              errorTitle = "Verification Failed";
              break;
            case "verification_expired":
              errorMessage = "Verification link has expired. Please request a new one.";
              errorTitle = "Link Expired";
              break;
            case "verification_invalid":
              errorMessage = "Invalid verification link.";
              errorTitle = "Invalid Link";
              break;
            case "verification_error":
              errorMessage = "An error occurred during verification.";
              errorTitle = "Verification Error";
              break;
            case "no_token":
              errorMessage = "Invalid or missing verification token.";
              errorTitle = "Invalid Token";
              break;
            case "no_user":
              errorMessage = "User not found.";
              errorTitle = "User Not Found";
              break;
            case "invalid_credentials":
              errorMessage = "Invalid email or password.";
              errorTitle = "Invalid Credentials";
              break;
            case "email_exists":
              errorMessage = "An account with this email already exists.";
              errorTitle = "Account Exists";
              break;
            case "weak_password":
              errorMessage = "Password must be at least 6 characters long.";
              errorTitle = "Weak Password";
              break;
            case "invalid_email":
              errorMessage = "Please enter a valid email address.";
              errorTitle = "Invalid Email";
              break;
            case "sms_missing_fields":
              errorMessage = "Please fill in all required fields for SMS.";
              errorTitle = "SMS Error";
              break;
            case "sms_invalid_phone":
              errorMessage = "Please enter a valid 10-digit phone number.";
              errorTitle = "Invalid Phone";
              break;
            case "sms_invalid_carrier":
              errorMessage = "Please select a valid carrier.";
              errorTitle = "Invalid Carrier";
              break;
            case "sms_send_failed":
              errorMessage = "Failed to send SMS. Please try again.";
              errorTitle = "SMS Failed";
              break;
            case "sms_email_error":
              errorMessage = "Email service error. Please try again later.";
              errorTitle = "Service Error";
              break;
            case "sms_unexpected_error":
              errorMessage = "An unexpected error occurred while sending SMS.";
              errorTitle = "SMS Error";
              break;
            default:
              errorMessage = "An error occurred. Please try again.";
              errorTitle = "Error";
          }

          // Use centralized notification system
          if ((window as any).showModal) {
            (window as any).showModal("error", errorTitle, errorMessage);
          } else {
            console.error(`üîî [${errorTitle}] ${errorMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("error");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }

        // Handle success messages
        if (messageParam) {
          let successMessage = "";
          let successTitle = "Success!";

          switch (messageParam) {
            case "registration_success":
              successMessage =
                "Registration successful! Please check your email to verify your account.";
              successTitle = "Account Created";
              break;
            case "verification_success":
              successMessage = "Email verified successfully! You can now sign in.";
              successTitle = "Email Verified";
              break;
            case "welcome":
              successMessage = "Welcome! Your account has been verified and you're now signed in.";
              successTitle = "Welcome!";
              break;
            case "logout_success":
              successMessage = "You have been successfully signed out.";
              successTitle = "Signed Out";
              break;
            case "sms_sent_success":
              successMessage = "Your message has been sent to CAPCo successfully.";
              successTitle = "Message Sent";
              break;
            default:
              successMessage = messageParam;
              successTitle = "Success!";
          }

          // Use centralized notification system
          if ((window as any).showModal) {
            (window as any).showModal(successTitle, successMessage, "success");
          } else {
            console.error(`üîî [${successTitle}] ${successMessage}`);
          }

          // Clean up URL parameters
          currentUrl.searchParams.delete("message");
          window.history.replaceState({}, document.title, currentUrl.toString());
        }
      });
    </script>

    <!-- Expose centralized notification system to window object -->
    <script>
      // Suppress ResizeObserver loop warnings (they're usually harmless)
      window.addEventListener("error", (e) => {
        if (e.message === "ResizeObserver loop completed with undelivered notifications.") {
          e.stopImmediatePropagation();
        }
      });

      // Centralized notification handler for update-status API responses
      (window as any).handleUpdateStatusNotification = function (response: any, context: any) {
        if (!response.success) {
          console.error(`‚ùå [${context || "NOTIFICATION"}] API call failed:`, response.error);
          return;
        }

        if (!response.notificationData || !(window as any).showModal) {
          console.warn(
            `‚ö†Ô∏è [${context || "NOTIFICATION"}] No notification data or showModal function available`
          );
          return;
        }

        // Get user role from API response (more secure than frontend)
        const currentUserRole = response.notificationData.currentUserRole || "Client";
        const isAdminOrStaff = currentUserRole === "Admin" || currentUserRole === "Staff";
        const notification = isAdminOrStaff
          ? response.notificationData.admin
          : response.notificationData.client;

        if (notification) {
          // console.log(
          //   `üîî [${context || "NOTIFICATION"}] Showing ${isAdminOrStaff ? "admin" : "client"} notification:`,
          //   {
          //     type: notification.type,
          //     title: notification.title,
          //     message: notification.message,
          //     redirect: notification.redirect,
          //     userRole: currentUserRole,
          //   }
          // );

          (window as any).showModal(
            notification.type,
            notification.title,
            notification.message,
            notification.duration,
            notification.redirect
          );
        } else {
          console.warn(
            `‚ö†Ô∏è [${context || "NOTIFICATION"}] No ${isAdminOrStaff ? "admin" : "client"} notification found in response`
          );
        }
      };
    </script>

    <!-- Magic Link Authentication Handler -->
    <script>
      // Global magic link authentication handler
      (window as any).handleMagicLinkAuth = async function () {
        try {
          // Check if we have auth tokens in the URL fragment
          const fragment = window.location.hash.substring(1);
          if (!fragment) return;

          const params = new URLSearchParams(fragment);
          const accessToken = params.get("access_token");
          const refreshToken = params.get("refresh_token");
          const expiresIn = params.get("expires_in");
          const tokenType = params.get("token_type");
          const type = params.get("type");

          // Only handle magic link callbacks
          if (!accessToken || !refreshToken || type !== "magiclink") {
            return;
          }

          console.log("üîê [MAGIC-LINK] Processing magic link authentication...");

          // Set auth cookies via API call
          const response = await fetch("/api/auth/callback", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              access_token: accessToken,
              refresh_token: refreshToken,
              expires_in: parseInt(expiresIn || "3600"),
              token_type: tokenType || "bearer",
            }),
          });

          if (response.ok) {
            console.log("‚úÖ [MAGIC-LINK] Authentication successful, redirecting...");

            // Clear the URL fragment to prevent reprocessing
            window.history.replaceState(
              {},
              document.title,
              window.location.pathname + window.location.search
            );

            // Redirect to dashboard
            window.location.href = "/dashboard";
          } else {
            const errorData = await response.json();
            console.error("‚ùå [MAGIC-LINK] Authentication failed:", errorData);

            // Show error message to user
            if (typeof (window as any).showModal === "function") {
              (window as any).showModal(
                "error",
                "Login Failed",
                "There was an error processing your login. Please try again."
              );
            }
          }
        } catch (error) {
          console.error("‚ùå [MAGIC-LINK] Error processing magic link:", error);

          // Show error message to user
          if (typeof (window as any).showModal === "function") {
            (window as any).showModal(
              "error",
              "Login Error",
              "There was an unexpected error. Please try again."
            );
          }
        }
      };

      // Run magic link handler on page load
      document.addEventListener("DOMContentLoaded", (window as any).handleMagicLinkAuth);

      // Also run immediately in case DOM is already loaded
      if (document.readyState === "loading") {
        // DOM is still loading, event listener will handle it
      } else {
        // DOM is already loaded, run immediately
        (window as any).handleMagicLinkAuth();
      }
    </script>

    <!-- Flowbite JavaScript -->
    <script src="https://unpkg.com/flowbite@2.5.2/dist/flowbite.min.js"></script>
    <script>
      // Initialize Flowbite components
      document.addEventListener("DOMContentLoaded", function () {
        if (typeof (window as any).initFlowbite === "function") {
          (window as any).initFlowbite();
        }
      });
    </script>

    <!-- Service Worker Registration for PWA -->
    <script>
      // Register service worker for PWA functionality
      if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
          navigator.serviceWorker
            .register("/sw.js")
            .then((registration) => {
              console.log("‚úÖ Service Worker registered successfully:", registration.scope);
            })
            .catch((error) => {
              console.log("‚ùå Service Worker registration failed:", error);
            });
        });
      } else {
        console.log("‚ùå Service Worker not supported in this browser");
      }
    </script>
  </body>
</html>
