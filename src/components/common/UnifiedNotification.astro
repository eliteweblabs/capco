---
// Toast Notification System -
---

<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2 max-w-sm w-full sm:max-w-md">
</div>

<style>
  /* Toast slide-in animation */
  @keyframes toast-slide-in {
    0% {
      opacity: 0;
      transform: translateX(100%);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Toast slide-out animation */
  @keyframes toast-slide-out {
    0% {
      opacity: 1;
      transform: translateX(0);
    }
    100% {
      opacity: 0;
      transform: translateX(100%);
    }
  }

  /* Apply toast animations */
  .toast-slide-in {
    animation: toast-slide-in 300ms ease-out forwards;
  }

  .toast-slide-out {
    animation: toast-slide-out 300ms ease-in forwards;
  }

  /* Initial state for toasts */
  .toast-element {
    opacity: 0;
    transform: translateX(100%);
  }

  /* Mobile responsive positioning */
  @media (max-width: 640px) {
    #toast-container {
      top: 1rem;
      right: 1rem;
      left: 1rem;
      max-width: none;
    }
  }
</style>

<script>
  // Import the client-side button styling
  // import "/src/lib/button-styles-client.js";

  interface NotificationOptions {
    type: "success" | "error" | "warning" | "info";
    title: string;
    message: string;
    duration?: number; // 0 = no auto-hide, >0 = auto-hide after ms
    persist?: boolean; // false = close existing modals, true = keep existing modals
    redirect?: {
      url: string;
      // Note: Using modal duration for redirect timing
      showCountdown?: boolean; // Show countdown in message
    };
    actions?: Array<{
      label: string;
      action: () => void;
      primary?: boolean; // Primary button styling
    }>;
    onClose?: () => void; // Callback when notification is closed
  }

  class ToastNotificationManager {
    private container: HTMLElement;
    private notifications: Map<string, NotificationOptions & { id: string }> = new Map();
    private redirectTimers: Map<string, NodeJS.Timeout> = new Map();

    constructor() {
      this.container = document.getElementById("toast-container")!;
    }

    async show(options: NotificationOptions): Promise<string> {
      console.log("ðŸ”” [TOAST] show() called with options:", options);

      // Clear existing notifications unless persist is true
      if (options.persist !== true) {
        this.hide(); // Clear all existing notifications
      }

      // Generate unique ID with fallback for older browsers
      const id = crypto.randomUUID
        ? crypto.randomUUID()
        : "notification-" + Math.random().toString(36).substr(2, 9) + Date.now();
      const fullNotification = { ...options, id };

      // console.log("ðŸ”” [UNIFIED-NOTIFICATION] Creating notification with ID:", id);
      this.notifications.set(id, fullNotification);
      await this.render(fullNotification);

      // Handle auto-hide with CSS animation (after element is rendered)
      // Only set up auto-hide if there's no redirect
      if (!options.redirect && options.duration !== undefined && options.duration > 0) {
        // Use setTimeout to ensure DOM is ready and CSS is applied
        setTimeout(() => {
          const element = document.getElementById(`toast-${id}`);
          if (element) {
            console.log("ðŸ”” [TOAST] Setting up auto-hide timer");
            // Set up auto-hide timer
            setTimeout(() => {
              console.log("ðŸ”” [TOAST] Auto-hide timer expired, hiding toast");
              this.hide(id);
            }, options.duration);
          }
        }, 100);
      }

      // Handle redirect
      if (options.redirect) {
        // console.log("ðŸ”” [UNIFIED-NOTIFICATION] Setting up redirect:", options.redirect);
        this.setupRedirect(id, options.redirect);
      }

      // console.log("ðŸ”” [UNIFIED-NOTIFICATION] show() returning ID:", id);
      return id;
    }

    hide(id?: string) {
      if (id) {
        const notification = this.notifications.get(id);
        if (notification?.onClose) {
          notification.onClose();
        }

        this.notifications.delete(id);
        this.clearRedirectTimer(id);

        const element = document.getElementById(`toast-${id}`);
        if (element) {
          element.classList.add("toast-slide-out");
          setTimeout(() => element.remove(), 300);
        }
      } else {
        // Hide all notifications
        this.notifications.clear();
        this.clearAllRedirectTimers();
        this.container.innerHTML = "";
      }
    }

    private setupRedirect(id: string, redirect: NotificationOptions["redirect"]) {
      console.log("ðŸ”” [UNIFIED-NOTIFICATION] Setting up redirect with data:", {
        id,
        redirect,
        hasRedirect: !!redirect,
        redirectUrl: redirect?.url,
        showCountdown: redirect?.showCountdown,
      });

      if (!redirect) {
        console.log("ðŸ”” [UNIFIED-NOTIFICATION] No redirect data provided, skipping redirect setup");
        return;
      }

      if (!redirect.url) {
        console.log("ðŸ”” [UNIFIED-NOTIFICATION] No redirect URL provided, skipping redirect setup");
        return;
      }

      // Use the modal's duration for the redirect timing
      const notification = this.notifications.get(id);
      const duration = notification?.duration || 2500; // Default to 2.5s if no duration set
      const delaySeconds = Math.ceil(duration / 1000); // Convert to seconds for countdown
      let countdown = delaySeconds;

      console.log("ðŸ”” [UNIFIED-NOTIFICATION] Redirect timing setup:", {
        duration,
        delaySeconds,
        countdown,
      });

      console.log("ðŸ”” [UNIFIED-NOTIFICATION] Setting up redirect:13241", redirect);
      const updateMessage = () => {
        console.log("ðŸ”” [UNIFIED-NOTIFICATION] Updating countdown message:", {
          countdown,
          id,
          redirectUrl: redirect.url,
        });

        const notification = this.notifications.get(id);
        if (!notification) {
          console.log("ðŸ”” [UNIFIED-NOTIFICATION] No notification found for ID:", id);
          return;
        }

        const element = document.getElementById(`toast-${id}`);
        if (!element) {
          console.log("ðŸ”” [TOAST] No element found for ID:", id);
          return;
        }

        const messageElement = element.querySelector(".notification-message");
        if (messageElement && redirect.showCountdown) {
          const originalMessage = notification.message;
          const action = redirect.url ? "Redirecting" : "Refreshing";
          messageElement.innerHTML = `${originalMessage}<br><strong>${action} in ${countdown} seconds...</strong>`;
          console.log("ðŸ”” [UNIFIED-NOTIFICATION] Updated message with countdown:", countdown);
        }

        countdown--;
        if (countdown < 0) {
          console.log("ðŸ”” [UNIFIED-NOTIFICATION] Countdown finished, preparing redirect");
          // Clear the timer and handle navigation
          this.clearRedirectTimer(id);

          if (redirect.url) {
            try {
              // Handle both absolute and relative URLs
              let finalUrl: string;
              if (redirect.url.startsWith("http")) {
                finalUrl = redirect.url;
              } else {
                // Handle relative URLs with query parameters
                const [path, query] = redirect.url.split("?");
                const baseUrl = new URL(path, window.location.origin);
                if (query) {
                  baseUrl.search = "?" + query;
                }
                finalUrl = baseUrl.href;
              }

              console.log("ðŸ”” [UNIFIED-NOTIFICATION] Redirecting to:", finalUrl);

              // Use setTimeout to ensure the last message update is visible
              window.location.href = finalUrl;
            } catch (error) {
              console.error("ðŸ”” [UNIFIED-NOTIFICATION] Error processing redirect URL:", error);
              // Fallback to direct assignment if URL parsing fails
              window.location.href = redirect.url;
            }
          } else {
            console.log("ðŸ”” [UNIFIED-NOTIFICATION] No redirect URL, refreshing page");
            window.location.reload();
          }
        }
      };

      // Call updateMessage immediately and then set up the interval
      updateMessage(); // Start immediately
      const timer = setInterval(updateMessage, 1000);
      this.redirectTimers.set(id, timer);
    }

    private clearRedirectTimer(id: string) {
      const timer = this.redirectTimers.get(id);
      if (timer) {
        clearInterval(timer);
        this.redirectTimers.delete(id);
      }
    }

    private clearAllRedirectTimers() {
      this.redirectTimers.forEach((timer) => clearInterval(timer));
      this.redirectTimers.clear();
    }

    private async render(notification: NotificationOptions & { id: string }): Promise<void> {
      const typeConfig = {
        success: {
          iconBg: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
          progressColor: "bg-green-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"/>
                 </svg>`,
          label: "Success",
        },
        error: {
          iconBg: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
          progressColor: "bg-red-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
                 </svg>`,
          label: "Error",
        },
        warning: {
          iconBg: "text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200",
          progressColor: "bg-orange-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM10 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm0-4a1 1 0 0 1-1-1V6a1 1 0 0 1 2 0v4a1 1 0 0 1-1 1Z"/>
                 </svg>`,
          label: "Warning",
        },
        info: {
          iconBg: "text-primary-500 bg-primary-100 dark:bg-primary-800 dark:text-primary-200",
          progressColor: "bg-primary-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                   <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.147 15.085a7.159 7.159 0 0 1-6.189 3.307A6.713 6.713 0 0 1 3.1 15.444c-2.679-4.513.287-8.737.888-9.548A4.373 4.373 0 0 0 5 1.608c1.287.953 6.445 3.218 5.537 10.5 1.5-1.122 2.706-3.01 2.853-6.14 1.433 1.049 3.993 5.395 1.757 9.117Z"/>
                 </svg>`,
          label: "Info",
        },
      };

      const config = typeConfig[notification.type];

      // Add error handling for invalid notification types
      if (!config) {
        console.error("ðŸ”” [UNIFIED-NOTIFICATION] Invalid notification type:", notification.type);
        console.error("ðŸ”” [UNIFIED-NOTIFICATION] Available types:", Object.keys(typeConfig));
        // Fallback to info type
        const fallbackConfig = typeConfig.info;
        return await this.render({ ...notification, type: "info" });
      }

      // Generate actions HTML first if needed
      const actionsHTML =
        notification.actions && Array.isArray(notification.actions)
          ? await this.renderActionButtons(notification.actions, notification.id)
          : "";

      const element = document.createElement("div");
      element.id = `toast-${notification.id}`;
      element.setAttribute("role", "alert");

      element.className = `
          color-background rounded-lg shadow-lg border border-gray-200 dark:border-gray-700
          toast-element p-4 mb-2
        `.trim();

      element.innerHTML = `
          <div class="flex items-start">
            ${
              notification.duration && notification.duration > 0
                ? `
              <div class="absolute top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700 rounded-t-lg">
                <div id="progress-bar-${notification.id}" class="h-full ${config?.progressColor || "bg-primary-500"} rounded-t-lg" style="width: 0%; animation: progress-bar-fill ${notification.duration}ms linear forwards;"></div>
              </div>
            `
                : ""
            }
            <div class="flex-shrink-0 mr-3">
              <div class="inline-flex items-center justify-center w-8 h-8 ${config?.iconBg || "text-primary-500 bg-primary-100 dark:bg-primary-800 dark:text-primary-200"} rounded-full">
                ${config?.icon || ""}
                <span class="sr-only">${config?.label || "Notification"}</span>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <h4 class="text-sm font-semibold text-gray-900 dark:text-white mb-1">${notification.title}</h4>
              <div class="notification-message text-sm text-gray-600 dark:text-gray-400">${notification.message}</div>
              ${actionsHTML}
            </div>
            <button 
              type="button" 
              class="flex-shrink-0 ml-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1" 
              aria-label="Close"
              onclick="toastNotificationManager.hide('${notification.id}')"
            >
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
              </svg>
            </button>
          </div>
        `;

      this.container.appendChild(element);

      // Trigger slide-in animation
      setTimeout(() => {
        element.classList.add("toast-slide-in");
      }, 10);

      // Add event listeners for action buttons
      if (notification.actions && Array.isArray(notification.actions)) {
        notification.actions.forEach((action, index) => {
          const button = element.querySelector(
            `[data-action-index="${index}"]`
          ) as HTMLButtonElement;
          if (button) {
            button.addEventListener("click", () => {
              try {
                action.action();
                // Hide the notification after action is executed
                this.hide(notification.id);
              } catch (error) {
                console.error("Error executing action:", error);
              }
            });
          }
        });
      }
    }

    // Helper function to generate button HTML using Button partial
    private async generateButtonHTML(
      text: string,
      variant: string = "primary",
      size: string = "sm",
      dataAttributes: Record<string, string> = {},
      fullWidth: boolean = false
    ): Promise<string> {
      try {
        // Call the Button partial component via API
        const response = await fetch("/api/partials/button", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // body: JSON.stringify({
          //   "x-button-children": text,
          //   "x-button-variant": variant,
          //   "x-button-size": size,
          //   "x-button-data-attributes": dataAttributes,
          // }),

          body: JSON.stringify({
            text,
            variant,
            size,
            dataAttributes,
            fullWidth: true,
          }),

          // body: JSON.stringify({
          //   text,
          //   variant,
          //   size,
          //   dataAttributes,
          //   fullWidth,
          // }),
        });

        if (response.ok) {
          return await response.text();
        } else {
          console.error("Button partial API failed:", response.status, response.statusText);
          throw new Error(`Button partial API failed: ${response.status}`);
        }
      } catch (error) {
        console.error("Error generating button:", error);
        throw error;
      }
    }

    private async renderActionButtons(
      actions: Array<{
        label: string;
        action: () => void;
        primary?: boolean;
        fullWidth?: boolean;
        variant?: string;
      }>,
      notificationId: string
    ) {
      // Ensure actions is an array before calling map
      if (!Array.isArray(actions)) {
        console.warn("ðŸ”” [UNIFIED-NOTIFICATION] Actions is not an array:", actions);
        return "";
      }

      // Generate buttons using Button partial
      const buttonHTMLs = await Promise.all(
        actions.map(async (action, index) => {
          // Use provided variant or determine based on primary flag or position
          const isPrimary = action.primary || index === 0;
          const variant = action.variant || (isPrimary ? "primary" : "secondary");

          const dataAttributes = {
            "action-index": index.toString(),
            "notification-id": notificationId,
          };

          return await this.generateButtonHTML(
            action.label,
            variant,
            "md",
            dataAttributes,
            action.fullWidth
          );
        })
      );

      return `
      <div class="flex gap-2 mt-3">
        ${buttonHTMLs.join("")}
      </div>
    `;
    }
  }

  // Create instance and make it globally accessible
  const toastNotificationManager = new ToastNotificationManager();
  (window as any).toastNotificationManager = toastNotificationManager;

  // Convenience functions for backward compatibility and ease of use
  (window as any).showNotification = async (options: NotificationOptions) => {
    return await toastNotificationManager.show(options);
  };

  // Toast-specific convenience functions
  (window as any).showSuccess = (title: string, message: string, duration: number = 4000) => {
    return toastNotificationManager.show({
      type: "success",
      title,
      message,
      duration,
    });
  };

  (window as any).showError = (title: string, message: string, duration: number = 0) => {
    return toastNotificationManager.show({
      type: "error",
      title,
      message,
      duration,
    });
  };

  (window as any).showWarning = (title: string, message: string, duration: number = 4000) => {
    return toastNotificationManager.show({
      type: "warning",
      title,
      message,
      duration,
    });
  };

  (window as any).showInfo = (title: string, message: string, duration: number = 4000) => {
    return toastNotificationManager.show({
      type: "info",
      title,
      message,
      duration,
    });
  };

  // Default behavior is now toast notifications - supports both object and individual parameters
  (window as any).showModal = async (
    typeOrObject: string | any,
    title?: string,
    message?: string,
    duration?: number,
    redirectOrActions?:
      | Array<{ label: string; action: () => void; primary?: boolean }>
      | { url: string; showCountdown?: boolean },
    persist?: boolean
  ) => {
    console.log("ðŸ”” [TOAST] showModal called with:", typeOrObject);
    let modalData: any;

    // Check if first parameter is an object (new format)
    if (typeof typeOrObject === "object" && typeOrObject !== null) {
      modalData = typeOrObject;
    } else {
      // Legacy format with individual parameters
      modalData = {
        type: typeOrObject,
        title: title || "",
        message: message || "",
        duration: duration || 0,
        actions: redirectOrActions,
        persist: persist || false,
      };
    }

    // Validate notification type
    const validTypes = ["success", "error", "warning", "info"];
    if (!validTypes.includes(modalData.type)) {
      console.warn(`ðŸ”” [UNIFIED-NOTIFICATION] Invalid notification type: ${modalData.type}`);
      modalData.type = "info"; // Default to info for invalid types
    }

    // Check if we have a redirect object (either in actions or redirect property)
    const redirectData = modalData.redirect || modalData.actions;
    const isRedirect = redirectData && typeof redirectData === "object" && "url" in redirectData;

    console.log("ðŸ”” [TOAST] Processed modal data:", modalData);
    console.log("ðŸ”” [TOAST] Is redirect:", isRedirect);
    console.log("ðŸ”” [TOAST] Redirect data:", redirectData);

    // Prepare notification options
    const notificationOptions = {
      type: modalData.type as any,
      title: modalData.title,
      message: modalData.message,
      duration: modalData.duration, // Don't set default duration - let it be undefined for persistent toasts
      persist: modalData.persist, // Pass through the persist parameter
      actions: isRedirect
        ? undefined
        : (modalData.actions as Array<{ label: string; action: () => void; primary?: boolean }>),
      redirect: isRedirect
        ? (redirectData as { url: string; delay?: number; showCountdown?: boolean })
        : modalData.redirect, // Also check for redirect in modalData itself
    };

    console.log("ðŸ”” [TOAST] Showing notification with options:", notificationOptions);

    const result = await toastNotificationManager.show(notificationOptions);

    console.log("ðŸ”” [TOAST] showModal returning ID:", result);
    return result;
  };

  // Ensure showModal is always available with fallback
  if (!(window as any).showModal) {
    console.warn("ðŸ”” [TOAST] showModal not properly initialized, creating fallback");
    (window as any).showModal = (type: string, title: string, message: string) => {
      console.error("ðŸ”” [TOAST] Fallback showModal called - notification system not ready");
      alert(`${title}: ${message}`);
    };
  }

  console.log("ðŸ”” [TOAST] Toast notification system initialized successfully");
</script>

<style>
  /* CSS-based progress bar animation */
  .progress-bar-animation {
    width: 0%;
    animation: progress-bar-fill var(--progress-duration, 3000ms) linear forwards;
  }

  @keyframes progress-bar-fill {
    0% {
      width: 0%;
    }
    100% {
      width: 100%;
    }
  }
</style>
