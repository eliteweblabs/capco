---
// Unified Notification System - Replaces both SimpleToast and ToastAlerts
// Supports simple toasts, modal-like notifications, redirects, and custom actions
---

<div
  id="unified-notification-container"
  class="fixed left-4 right-4 top-4 z-50 space-y-2 sm:left-auto sm:max-w-lg"
>
</div>

<script>
  interface NotificationOptions {
    type: "success" | "error" | "warning" | "info";
    title: string;
    message: string;
    duration?: number; // 0 = no auto-hide, >0 = auto-hide after ms
    showAsToast?: boolean; // If true, shows as small toast (default: false = full-screen modal)
    redirect?: {
      url: string;
      delay?: number; // Delay in seconds before redirect
      showCountdown?: boolean; // Show countdown in message
    };
    actions?: Array<{
      label: string;
      action: () => void;
      primary?: boolean; // Primary button styling
    }>;
    onClose?: () => void; // Callback when notification is closed
  }

  class UnifiedNotificationManager {
    private container: HTMLElement;
    private notifications: Map<string, NotificationOptions & { id: string }> = new Map();
    private redirectTimers: Map<string, NodeJS.Timeout> = new Map();

    constructor() {
      this.container = document.getElementById("unified-notification-container")!;
    }

    show(options: NotificationOptions): string {
      // console.log("ðŸ”” [UNIFIED-NOTIFICATION] show() called with options:", options);

      // Hide any existing modals with duration === 0 before showing new one
      this.hidePersistentModals();

      const id = crypto.randomUUID();
      const fullNotification = { ...options, id };

      // console.log("ðŸ”” [UNIFIED-NOTIFICATION] Creating notification with ID:", id);
      this.notifications.set(id, fullNotification);
      this.render(fullNotification);

      // Handle auto-hide
      if (options.duration !== undefined && options.duration > 0) {
        // console.log(
        //   "ðŸ”” [UNIFIED-NOTIFICATION] Setting auto-hide timer for",
        //   options.duration,
        //   "ms"
        // );
        setTimeout(() => this.hide(id), options.duration);
      }

      // Handle redirect
      if (options.redirect) {
        // console.log("ðŸ”” [UNIFIED-NOTIFICATION] Setting up redirect:", options.redirect);
        this.setupRedirect(id, options.redirect);
      }

      // console.log("ðŸ”” [UNIFIED-NOTIFICATION] show() returning ID:", id);
      return id;
    }

    hide(id?: string) {
      if (id) {
        const notification = this.notifications.get(id);
        if (notification?.onClose) {
          notification.onClose();
        }

        this.notifications.delete(id);
        this.clearRedirectTimer(id);

        const element = document.getElementById(`unified-notification-${id}`);
        if (element) {
          element.classList.add("animate-fade-out");
          setTimeout(() => element.remove(), 300);
        }
      } else {
        // Hide all notifications
        this.notifications.clear();
        this.clearAllRedirectTimers();
        this.container.innerHTML = "";
      }
    }

    private setupRedirect(id: string, redirect: NotificationOptions["redirect"]) {
      if (!redirect) return;

      const delay = redirect.delay || 3; // Default 3 seconds
      let countdown = delay;

      const updateMessage = () => {
        const notification = this.notifications.get(id);
        if (!notification) return;

        const element = document.getElementById(`unified-notification-${id}`);
        if (!element) return;

        const messageElement = element.querySelector(".notification-message");
        if (messageElement && redirect.showCountdown) {
          const originalMessage = notification.message;
          messageElement.innerHTML = `${originalMessage}<br><strong>Redirecting in ${countdown} seconds...</strong>`;
        }

        countdown--;
        if (countdown < 0) {
          window.location.href = redirect.url;
        }
      };

      // Update message every second
      const timer = setInterval(updateMessage, 1000);
      this.redirectTimers.set(id, timer);

      // Final redirect
      setTimeout(() => {
        window.location.href = redirect.url;
      }, delay * 1000);
    }

    private clearRedirectTimer(id: string) {
      const timer = this.redirectTimers.get(id);
      if (timer) {
        clearInterval(timer);
        this.redirectTimers.delete(id);
      }
    }

    private clearAllRedirectTimers() {
      this.redirectTimers.forEach((timer) => clearInterval(timer));
      this.redirectTimers.clear();
    }

    private hidePersistentModals() {
      // Find and hide any notifications with duration === 0 (persistent modals)
      const persistentModals = Array.from(this.notifications.entries()).filter(
        ([_, notification]) => notification.duration === 0
      );

      if (persistentModals.length > 0) {
        // console.log(
        //   `ðŸ”” [UNIFIED-NOTIFICATION] Found ${persistentModals.length} persistent modal(s), hiding them before showing new modal`
        // );
        persistentModals.forEach(([id, notification]) => {
          // console.log(
          //   "ðŸ”” [UNIFIED-NOTIFICATION] Hiding persistent modal:",
          //   id,
          //   "Title:",
          //   notification.title
          // );
          this.hide(id);
        });
      }
    }

    private startProgressBar(notificationId: string, duration: number) {
      const progressBar = document.getElementById(`progress-bar-${notificationId}`);
      if (!progressBar) return;

      // Start the progress bar animation - fill up from 0% to 100%
      progressBar.style.transition = `width ${duration}ms linear`;
      progressBar.style.width = "0%";

      // Force a reflow to start the animation
      progressBar.offsetHeight;

      // Animate to 100% (filling up from left to right)
      progressBar.style.width = "100%";
    }

    private render(notification: NotificationOptions & { id: string }) {
      const typeConfig = {
        success: {
          iconBg: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
          progressColor: "bg-green-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"/>
                 </svg>`,
          label: "Success",
        },
        error: {
          iconBg: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
          progressColor: "bg-red-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"/>
                 </svg>`,
          label: "Error",
        },
        warning: {
          iconBg: "text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200",
          progressColor: "bg-orange-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                   <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM10 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm0-4a1 1 0 0 1-1-1V6a1 1 0 0 1 2 0v4a1 1 0 0 1-1 1Z"/>
                 </svg>`,
          label: "Warning",
        },
        info: {
          iconBg: "text-blue-500 bg-blue-100 dark:bg-blue-800 dark:text-blue-200",
          progressColor: "bg-blue-500",
          icon: `<svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                   <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.147 15.085a7.159 7.159 0 0 1-6.189 3.307A6.713 6.713 0 0 1 3.1 15.444c-2.679-4.513.287-8.737.888-9.548A4.373 4.373 0 0 0 5 1.608c1.287.953 6.445 3.218 5.537 10.5 1.5-1.122 2.706-3.01 2.853-6.14 1.433 1.049 3.993 5.395 1.757 9.117Z"/>
                 </svg>`,
          label: "Info",
        },
      };

      const config = typeConfig[notification.type];
      const showAsToast = notification.showAsToast || false;

      const element = document.createElement("div");
      element.id = `unified-notification-${notification.id}`;
      element.setAttribute("role", "alert");

      // Default to full-screen modal unless explicitly requested as toast
      if (!showAsToast) {
        element.className = `
          fixed inset-0 z-50 flex items-center justify-center bg-black/30 backdrop-blur-sm
          transform transition-all duration-300 ease-in-out animate-fade-in
        `.trim();

        element.innerHTML = `
          <div class="rounded-xl bg-white shadow-2xl dark:bg-gray-800 max-w-md w-full mx-4 relative overflow-hidden">
            ${
              notification.duration && notification.duration > 0
                ? `
              <div class="absolute top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700">
                <div id="progress-bar-${notification.id}" class="h-full ${config.progressColor} transition-all duration-100 ease-linear" style="width: 0%"></div>
              </div>
            `
                : ""
            }
            <div class="p-8">
              <div class="flex items-center justify-center mb-6">
                <div class="inline-flex items-center justify-center w-16 h-16 ${config.iconBg} rounded-full">
                  ${config.icon}
                  <span class="sr-only">${config.label}</span>
                </div>
              </div>
              <div class="text-center">
                <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">${notification.title}</h3>
                <div class="notification-message text-lg text-gray-600 dark:text-gray-400 mb-8 leading-relaxed">${notification.message}</div>
                ${notification.actions && Array.isArray(notification.actions) ? this.renderActions(notification.actions, notification.id) : ""}
              </div>
            </div>
            <button 
              type="button" 
              class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-2" 
              aria-label="Close"
              onclick="unifiedNotificationManager.hide('${notification.id}')"
            >
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
              </svg>
            </button>
          </div>
        `;

        // Start progress bar animation if duration is set
        if (notification.duration && notification.duration > 0) {
          // Small delay to ensure DOM is rendered
          setTimeout(() => {
            this.startProgressBar(notification.id, notification.duration!);
          }, 50);
        }
      } else {
        // Toast mode (small notification)
        element.className = `
          border flex items-center w-full max-w-lg p-4 text-gray-500 bg-white rounded-lg shadow-sm 
          dark:text-gray-400 dark:bg-gray-800 transform transition-all duration-300 ease-in-out animate-slide-in
        `.trim();

        element.innerHTML = `
          <div class="inline-flex items-center justify-center shrink-0 w-8 h-8 ${config.iconBg} rounded-lg">
            ${config.icon}
            <span class="sr-only">${config.label}</span>
          </div>
          <div class="ms-3 text-sm font-normal flex-1">
            ${notification.title ? `<div class="font-semibold text-gray-900 dark:text-white mb-1">${notification.title}</div>` : ""}
            <div class="notification-message">${notification.message}</div>
            ${notification.actions && Array.isArray(notification.actions) ? this.renderActions(notification.actions, notification.id) : ""}
          </div>
          <button 
            type="button" 
            class="ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700" 
            aria-label="Close"
            onclick="unifiedNotificationManager.hide('${notification.id}')"
          >
            <span class="sr-only">Close</span>
            <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
            </svg>
          </button>
        `;
      }

      this.container.appendChild(element);
    }

    private renderActions(
      actions: Array<{ label: string; action: () => void; primary?: boolean }>,
      notificationId: string
    ) {
      // Ensure actions is an array before calling map
      if (!Array.isArray(actions)) {
        console.warn("ðŸ”” [UNIFIED-NOTIFICATION] Actions is not an array:", actions);
        return "";
      }

      return `
        <div class="flex gap-2 mt-3">
          ${actions
            .map((action, index) => {
              const actionId = crypto.randomUUID();
              // Store the action globally for onclick access
              (window as any).unifiedNotificationActions =
                (window as any).unifiedNotificationActions || {};
              (window as any).unifiedNotificationActions[actionId] = action.action;

              // Primary button styling for first action or explicitly marked primary
              const isPrimary = action.primary || index === 0;
              const buttonClasses = isPrimary
                ? "inline-flex justify-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-500 dark:hover:bg-blue-600 dark:focus:ring-blue-800"
                : "inline-flex justify-center px-3 py-2 text-sm font-medium text-center text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 dark:bg-gray-600 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-700 dark:focus:ring-gray-700";

              return `
                <button 
                  class="${buttonClasses}"
                  onclick="(window.unifiedNotificationActions?.['${actionId}'] || (() => {}))(); return false;"
                >
                  ${action.label}
                </button>
              `;
            })
            .join("")}
        </div>
      `;
    }
  }

  // Global unified notification manager
  const unifiedNotificationManager = new UnifiedNotificationManager();

  // Make it globally accessible
  (window as any).unifiedNotificationManager = unifiedNotificationManager;
  (window as any).unifiedNotificationActions = {};

  // Convenience functions for backward compatibility and ease of use
  (window as any).showNotification = (options: NotificationOptions) => {
    return unifiedNotificationManager.show(options);
  };

  // Default behavior is now full-screen modal
  (window as any).showModal = (
    type: string,
    title: string,
    message: string,
    duration?: number,
    actions?: Array<{ label: string; action: () => void; primary?: boolean }>
  ) => {
    // console.log("ðŸ”” [UNIFIED-NOTIFICATION] showModal called with:", {
    //   type,
    //   title,
    //   message,
    //   duration,
    //   actions,
    // });

    const result = unifiedNotificationManager.show({
      type: type as any,
      title,
      message,
      duration: duration || 5000, // Default 5 seconds
      actions,
    });

    // console.log("ðŸ”” [UNIFIED-NOTIFICATION] showModal returning ID:", result);
    return result;
  };

  // For backward compatibility - shows as small toast
  (window as any).showToast = (type: string, title: string, message: string, duration?: number) => {
    return unifiedNotificationManager.show({
      type: type as any,
      title,
      message,
      duration: duration || 5000,
      showAsToast: true, // Explicitly request toast mode
    });
  };

  (window as any).hideNotification = (id?: string) => {
    unifiedNotificationManager.hide(id);
  };

  // console.log("ðŸ”” [UNIFIED-NOTIFICATION] Unified notification system initialized");
  // console.log(
  //   "ðŸ”” [UNIFIED-NOTIFICATION] window.showModal available:",
  //   typeof (window as any).showModal
  // );
  // console.log(
  //   "ðŸ”” [UNIFIED-NOTIFICATION] window.showSuccess available:",
  //   typeof (window as any).showSuccess
  // );
</script>

<style>
  @keyframes slide-in {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  .animate-slide-in {
    animation: slide-in 0.3s ease-out;
  }

  .animate-fade-in {
    animation: fade-in 0.3s ease-out;
  }

  .animate-fade-out {
    animation: fade-out 0.3s ease-out;
  }
</style>
