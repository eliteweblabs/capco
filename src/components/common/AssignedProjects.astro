---
// User center component for header
import LucideIcon from "./LucideIcon.astro";

const { currentUser, projects } = Astro.props;

const currentRole = currentUser?.profile?.role;
if (currentRole === "Client") {
  return null;
}
let assignedProjectsCount = 0;
let assignedProjects: any[] = [];

if (!projects) return null;

// get the projects with assignedToId === currentUser.id
assignedProjects = projects.filter((project: any) => project.assignedToId === currentUser.id);
assignedProjectsCount = assignedProjects.length;

// if (currentRole === "Staff" || currentRole === "Admin") {
//   // console.log("🏗️ [APP] Fetching assigned projects for user:", currentUser.id);
//   const baseUrl = Astro.url.origin;
//   const fullUrl = `${baseUrl}/api/projects/get?assignedToId=${currentUser.id}`;
//   // console.log("🏗️ [APP] Full URL:", fullUrl);
//   try {
//     const response = await fetch(fullUrl);
//     if (response.ok) {
//       const data = await response.json();
//       // console.log("🏗️ [APP] Assigned projects:", data);
//       assignedProjects = data.projects || [];
//       assignedProjectsCount = data.projects.length || 0;
//     }
//   } catch (error) {
//     console.error("Error fetching assigned projects:", error);
//   }
// } else if (currentRole === "Client") {
//   const baseUrl = Astro.url.origin;
//   const fullUrl = `${baseUrl}/api/projects/get?authorId=${currentUser.id}`;
//   // console.log("🏗️ [APP] Full URL:", fullUrl);
//   try {
//     const response = await fetch(fullUrl);
//     if (response.ok) {
//       const data = await response.json();
//       // console.log("🏗️ [APP] Assigned projects:", data);
//       assignedProjects = data.projects || [];
//       assignedProjectsCount = data.projects.length || 0;
//     }
//   } catch (error) {
//     console.error("Error fetching assigned projects:", error);
//   }
// }

// Fetch projects assigned to current user
---

{
  assignedProjectsCount > 0 && (
    <li>
      <a
        href="#"
        type="button"
        class="hover:bg-gray-300 dark:hover:bg-gray-700 flex w-full align-center rounded-lg p-2 relative"
        aria-controls="dropdown-assigned-projects"
        data-collapse-toggle="dropdown-assigned-projects"
        data-sidebar-collapse-item=""
      >
        <LucideIcon name="folder" variant="secondary" size="xs" id="assigned-projects-button">
          <span class="sr-only">View assigned projects</span>
        </LucideIcon>

        <span
          data-sidebar-collapse-hide=""
          class="ml-3 flex-1 whitespace-nowrap text-left"
          data-sidebar-collapse-hide=""
        >
          Assigned Projects
        </span>

        <svg
          class="h-4 w-4"
          data-sidebar-collapse-hide=""
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>

        <span
          class="count-bubble dark:bg-primary-dark pulse absolute -right-2 -top-2 flex h-5 w-5 animate-pulse items-center justify-center rounded-full bg-primary-500 text-xs font-bold text-white"
          style="display: flex;"
        >
          {assignedProjectsCount.toString()}
        </span>
      </a>
      <ul id="dropdown-assigned-projects" class="hidden space-y-2 py-2">
        {assignedProjects.slice(0, 5).map((project: any) => (
          <li>
            <a
              href={`/project/${project.id}`}
              class="hover:bg-gray-300 dark:hover:bg-gray-700 flex w-full align-center rounded-lg p-2 gap-2 ml-2"
              data-sidebar-collapse-subitem=""
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-map-pin-icon lucide-map-pin"
              >
                <path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0" />
                <circle cx="12" cy="10" r="3" />
              </svg>
              {project.title || "Untitled Project"}
            </a>
          </li>
        ))}
      </ul>
    </li>
  )
}
