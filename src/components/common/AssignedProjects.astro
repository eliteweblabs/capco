---
// User center component for header
import BoxIcon from "./BoxIcon.astro";

const { currentUser } = Astro.props;

const currentRole = currentUser?.profile?.role;
if (currentRole === "Client") {
  return null;
}
let assignedProjectsCount = 0;
let assignedProjects: any[] = [];

if (currentRole === "Staff" || currentRole === "Admin") {
  // console.log("üèóÔ∏è [APP] Fetching assigned projects for user:", currentUser.id);
  const baseUrl = Astro.url.origin;
  const fullUrl = `${baseUrl}/api/get-project?assigned_to_id=${currentUser.id}`;
  // console.log("üèóÔ∏è [APP] Full URL:", fullUrl);
  try {
    const response = await fetch(fullUrl);
    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [APP] Assigned projects:", data);
      assignedProjects = data.projects || [];
      assignedProjectsCount = data.projects.length || 0;
    }
  } catch (error) {
    console.error("Error fetching assigned projects:", error);
  }
} else if (currentRole === "Client") {
  const baseUrl = Astro.url.origin;
  const fullUrl = `${baseUrl}/api/get-project?author_id=${currentUser.id}`;
  // console.log("üèóÔ∏è [APP] Full URL:", fullUrl);
  try {
    const response = await fetch(fullUrl);
    if (response.ok) {
      const data = await response.json();
      // console.log("üèóÔ∏è [APP] Assigned projects:", data);
      assignedProjects = data.projects || [];
      assignedProjectsCount = data.projects.length || 0;
    }
  } catch (error) {
    console.error("Error fetching assigned projects:", error);
  }
}

// Fetch projects assigned to current user
---

<div class="relative">
  <BoxIcon
    name="folder-open"
    variant="secondary"
    size="sm"
    class="rounded-lg p-1.5 text-sm text-gray-500 hover:bg-gray-100 focus:outline-2 focus:outline-offset-2 focus:outline-transparent focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
    id="assigned-projects-button"
    data-tooltip-target="tooltip-assigned-projects"
    dataAttributes={{
      "data-count": assignedProjectsCount.toString(),
      "data-dropdown-toggle": "assigned-projects-dropdown",
      "data-dropdown-trigger": "click",
    }}
  >
    <span class="sr-only">View assigned projects</span>
  </BoxIcon>
  <span
    class="count-bubble dark:bg-primary-dark pulse absolute -right-2 -top-2 flex h-5 w-5 animate-pulse items-center justify-center rounded-full bg-primary-500 text-xs font-bold text-white"
    style="display: flex;">{assignedProjectsCount.toString()}</span
  >

  <div
    id="tooltip-assigned-projects"
    role="tooltip"
    class="tooltip invisible absolute z-10 inline-block rounded-lg bg-gray-900 px-3 py-2 text-sm font-medium text-white opacity-0 shadow-sm transition-opacity duration-300 dark:bg-gray-700"
  >
    Assigned Projects
    <div class="tooltip-arrow" data-popper-arrow></div>
  </div>
</div>

<div
  class="z-50 my-4 hidden max-w-96 list-none overflow-hidden rounded-lg bg-gray-100 text-base leading-6 shadow-sm dark:bg-gray-700"
  id="assigned-projects-dropdown"
  data-popper-placement="bottom"
>
  <div
    class="align-center flex justify-between border-b border-gray-200 bg-gray-100 px-4 py-2 text-center font-medium text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
  >
    <h3>Assigned Projects</h3>
  </div>
  <div class="grid max-h-[80dvh] gap-4 overflow-y-scroll p-4 dark:bg-gray-800 lg:grid-cols-1">
    {
      assignedProjectsCount > 0 ? (
        <div class="space-y-2">
          {assignedProjects.slice(0, 5).map((project: any) => (
            <a
              href={`/project/${project.id}`}
              class="block rounded-lg border border-gray-200 p-3 transition-colors hover:bg-gray-50 dark:border-gray-700 dark:hover:bg-gray-700"
            >
              <div class="flex items-start justify-between">
                <div class="min-w-0 flex-1">
                  <p class="truncate text-sm font-medium text-gray-900 dark:text-white">
                    {project.title || "Untitled Project"}
                  </p>
                  <p class="truncate text-xs text-gray-500 dark:text-gray-400">
                    {project.address || "No address"}
                  </p>
                  <p class="text-xs text-gray-400 dark:text-gray-500">
                    Status: {project.status || "Unknown"}
                  </p>
                </div>
                <div class="ml-2 flex-shrink-0">
                  <span class="inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                    {project.comment_count || 0} comments
                  </span>
                </div>
              </div>
            </a>
          ))}
        </div>
      ) : (
        <div class="py-4 text-center">
          <p class="text-sm text-gray-500 dark:text-gray-400">
            No projects currently assigned to you
          </p>
        </div>
      )
    }
  </div>
</div>
