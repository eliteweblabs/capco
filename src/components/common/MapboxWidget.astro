---
const { currentUser } = Astro.props;
if (!currentUser) {
  return null;
}
// Mapbox Widget Component with Scroll Effects
---

<div id="mapbox-widget" class="mapbox-container">
  <!-- Navigation Tabs with Counts -->
  <div class="mapbox-nav">
    <button class="nav-tab active" data-filter="all">
      <span class="tab-label">All Buildings</span>
      <span class="tab-count" id="count-all">24</span>
    </button>
    <button class="nav-tab" data-filter="residential">
      <span class="tab-label">Residential</span>
      <span class="tab-count" id="count-residential">4</span>
    </button>
    <button class="nav-tab" data-filter="commercial">
      <span class="tab-label">Commercial</span>
      <span class="tab-count" id="count-commercial">4</span>
    </button>
    <button class="nav-tab" data-filter="industrial">
      <span class="tab-label">Industrial</span>
      <span class="tab-count" id="count-industrial">3</span>
    </button>
    <button class="nav-tab" data-filter="warehouse">
      <span class="tab-label">Warehouse</span>
      <span class="tab-count" id="count-warehouse">3</span>
    </button>
    <button class="nav-tab" data-filter="institutional">
      <span class="tab-label">Institutional</span>
      <span class="tab-count" id="count-institutional">3</span>
    </button>
    <button class="nav-tab" data-filter="storage">
      <span class="tab-label">Storage</span>
      <span class="tab-count" id="count-storage">3</span>
    </button>
    <button class="nav-tab" data-filter="mercantile">
      <span class="tab-label">Mercantile</span>
      <span class="tab-count" id="count-mercantile">4</span>
    </button>
  </div>

  <!-- Map Container -->
  <div class="map-container">
    <div id="map" class="mapbox-map"></div>
  </div>
</div>
<!-- 
<div class="cellular_maps__IWnVr mapboxgl-map">
  <div class="mapboxgl-canary" style="visibility: hidden;"></div><div
    class="mapboxgl-canvas-container mapboxgl-interactive mapboxgl-touch-drag-pan"
  >
    <canvas
      class="mapboxgl-canvas"
      tabindex="0"
      aria-label="Map"
      role="region"
      width="502"
      height="1004"
      style="width: 251px; height: 502px;"></canvas><div
      class="undefined mapboxgl-marker mapboxgl-marker-anchor-bottom"
      aria-label="Map marker"
      role="img"
      style="transform: translate(126px, 251px) translate(-50%, -100%) translate(0px, 0px); opacity: 0.951862; pointer-events: auto;"
    >
    </div>
  </div><div class="mapboxgl-control-container">
    <div class="mapboxgl-ctrl-top-left"></div><div class="mapboxgl-ctrl-top"></div><div
      class="mapboxgl-ctrl-top-right"
    >
    </div><div class="mapboxgl-ctrl-right">
      <div class="mapboxgl-ctrl mapboxgl-ctrl-group"></div>
    </div><div class="mapboxgl-ctrl-bottom-right">
      <div class="mapboxgl-ctrl mapboxgl-ctrl-attrib mapboxgl-compact">
        <button class="mapboxgl-ctrl-attrib-button" type="button" aria-label="Toggle attribution"
          ><span class="mapboxgl-ctrl-icon" aria-hidden="true" title="Toggle attribution"
          ></span></button
        >
      </div>
    </div><div class="mapboxgl-ctrl-bottom"></div><div class="mapboxgl-ctrl-bottom-left">
      <div class="mapboxgl-ctrl" style="display: block;">
        <a
          class="mapboxgl-ctrl-logo"
          target="_blank"
          rel="noopener nofollow"
          href="https://www.mapbox.com/"
          aria-label="Mapbox homepage"></a>
      </div>
    </div><div class="mapboxgl-ctrl-left"></div>
  </div>
</div> -->

<style>
  .mapbox-container {
    position: relative;
    height: 100vh;
    width: 100%;
    overflow: hidden;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }

  .mapbox-nav {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 1000;
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    background: rgba(255, 255, 255, 0.95);
    padding: 10px;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  }

  /* 3D Building Markers */
  :global(.building-marker) {
    cursor: pointer;
  }

  :global(.marker-3d) {
    position: relative;
    width: 50px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    transform-style: preserve-3d;
    transition: all 0.3s ease;
  }

  :global(.building-marker:hover .marker-3d) {
    transform: scale(1.2) translateY(-5px);
  }

  :global(.marker-icon) {
    font-size: 32px;
    position: relative;
    z-index: 2;
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));
    animation: float 3s ease-in-out infinite;
  }

  @keyframes float {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-8px);
    }
  }

  :global(.marker-pulse) {
    position: absolute;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--marker-color);
    opacity: 0.3;
    animation: pulse-ring 2s ease-out infinite;
  }

  @keyframes pulse-ring {
    0% {
      transform: scale(0.8);
      opacity: 0.5;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }

  :global(.marker-label) {
    position: absolute;
    bottom: -25px;
    left: 50%;
    transform: translateX(-50%);
    background: white;
    padding: 4px 12px;
    border-radius: 12px;
    font-size: 11px;
    font-weight: 600;
    white-space: nowrap;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: none;
  }

  :global(.building-marker:hover .marker-label) {
    opacity: 1;
    bottom: -30px;
  }

  @keyframes markerFadeIn {
    from {
      opacity: 0;
      transform: scale(0.5);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .nav-tab {
    padding: 10px 16px;
    border: none;
    background: transparent;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    font-size: 13px;
    transition: all 0.3s ease;
    color: #666;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .tab-label {
    flex: 1;
  }

  .tab-count {
    background: rgba(102, 126, 234, 0.1);
    color: #667eea;
    padding: 2px 8px;
    border-radius: 10px;
    font-size: 12px;
    font-weight: 600;
    min-width: 24px;
    text-align: center;
  }

  .nav-tab:hover {
    background: rgba(102, 126, 234, 0.1);
    color: #667eea;
  }

  .nav-tab:hover .tab-count {
    background: rgba(102, 126, 234, 0.2);
  }

  .nav-tab.active {
    background: #667eea;
    color: white;
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  .nav-tab.active .tab-count {
    background: rgba(255, 255, 255, 0.25);
    color: white;
  }

  .map-container {
    position: relative;
    height: 100%;
    width: 100%;
  }

  .mapbox-map {
    width: 100%;
    height: 100%;
    border-radius: 0;
  }

  .map-overlay {
    position: absolute;
    top: 0;
    right: 0;
    width: 400px;
    height: 100%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-left: 1px solid rgba(255, 255, 255, 0.2);
    padding: 40px;
    overflow-y: auto;
    transform: translateX(100%);
    transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .map-overlay.visible {
    transform: translateX(0);
  }

  .overlay-content {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease;
  }

  .overlay-content.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .overlay-content h3 {
    font-size: 28px;
    font-weight: 700;
    margin-bottom: 30px;
    color: #2d3748;
    background: linear-gradient(135deg, #667eea, #764ba2);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 20px;
    margin-bottom: 40px;
  }

  .stat-item {
    background: white;
    padding: 24px;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    text-align: center;
    transition: transform 0.3s ease;
  }

  .stat-item:hover {
    transform: translateY(-4px);
  }

  .stat-number {
    font-size: 36px;
    font-weight: 700;
    color: #667eea;
    margin-bottom: 8px;
  }

  .stat-label {
    font-size: 14px;
    color: #718096;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .deployment-timeline {
    margin-top: 20px;
  }

  .timeline-item {
    display: flex;
    align-items: flex-start;
    margin-bottom: 24px;
    position: relative;
  }

  .timeline-item:not(:last-child)::after {
    content: "";
    position: absolute;
    left: 12px;
    top: 32px;
    width: 2px;
    height: calc(100% + 8px);
    background: #e2e8f0;
  }

  .timeline-dot {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: #e2e8f0;
    margin-right: 16px;
    flex-shrink: 0;
    position: relative;
    z-index: 1;
  }

  .timeline-item.completed .timeline-dot {
    background: #48bb78;
  }

  .timeline-item.active .timeline-dot {
    background: #667eea;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
  }

  .timeline-content h4 {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 4px;
    color: #2d3748;
  }

  .timeline-content p {
    font-size: 14px;
    color: #718096;
    margin: 0;
  }

  .chart-container {
    display: flex;
    align-items: end;
    gap: 16px;
    height: 200px;
    margin-top: 20px;
  }

  .chart-bar {
    flex: 1;
    background: linear-gradient(135deg, #667eea, #764ba2);
    border-radius: 8px 8px 0 0;
    position: relative;
    transition: all 0.6s ease;
    animation: growUp 1s ease-out;
  }

  @keyframes growUp {
    from {
      height: 0;
    }
    to {
      height: var(--target-height);
    }
  }

  .chart-label {
    position: absolute;
    bottom: -25px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 12px;
    color: #718096;
    font-weight: 500;
  }

  .chart-value {
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 12px;
    color: #667eea;
    font-weight: 600;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 16px;
    margin-top: 20px;
  }

  .metric-card {
    display: flex;
    align-items: center;
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    transition: all 0.3s ease;
  }

  .metric-card:hover {
    transform: translateX(4px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }

  .metric-icon {
    font-size: 24px;
    margin-right: 16px;
  }

  .metric-title {
    font-size: 14px;
    color: #718096;
    margin-bottom: 4px;
  }

  .metric-value {
    font-size: 18px;
    font-weight: 600;
    color: #2d3748;
  }

  .building-types-list {
    margin-top: 30px;
  }

  .building-types-list h4 {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 20px;
    color: #2d3748;
  }

  .type-breakdown {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .type-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    transition: all 0.3s ease;
  }

  .type-item:hover {
    transform: translateX(4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .type-label {
    font-size: 14px;
    font-weight: 500;
    color: #2d3748;
  }

  .type-count {
    font-size: 16px;
    font-weight: 700;
    color: #667eea;
    background: rgba(102, 126, 234, 0.1);
    padding: 4px 12px;
    border-radius: 12px;
  }

  .hidden {
    display: none;
  }

  @media (max-width: 768px) {
    .map-overlay {
      width: 100%;
      height: 50%;
      bottom: 0;
      top: auto;
      transform: translateY(100%);
    }

    .map-overlay.visible {
      transform: translateY(0);
    }

    .mapbox-nav {
      top: 10px;
      left: 10px;
      right: 10px;
      flex-wrap: wrap;
    }

    .nav-tab {
      flex: 1;
      min-width: 80px;
    }
  }
</style>

<script>
  // Mapbox configuration
  const MAPBOX_ACCESS_TOKEN =
    "pk.eyJ1IjoiZWxpdGV3ZWJsYWJzIiwiYSI6ImNpcTM5Njc3NTAwYXhuam00Zm9wamJ3aHQifQ.2OLtCQYcvQFBWEjFni8ofA"; // Replace with your token

  // Global zoom configuration
  const MIN_ZOOM = 4;
  const MAX_ZOOM = 13;

  let map: any = null;

  // Initialize map when component loads
  document.addEventListener("DOMContentLoaded", () => {
    console.log("🗺️ [MAPBOX] Initializing Mapbox widget...");

    // Check if Mapbox GL is loaded
    if (typeof (window as any).mapboxgl === "undefined") {
      console.error("❌ [MAPBOX] Mapbox GL JS not loaded!");
      return;
    }

    initializeMap();
    setupScrollEffects();
    setupNavigation();
    setupCounterAnimations();

    console.log("✅ [MAPBOX] Widget initialized successfully");
  });

  function initializeMap() {
    // Initialize Mapbox GL JS
    (window as any).mapboxgl.accessToken = MAPBOX_ACCESS_TOKEN;

    map = new (window as any).mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/streets-v11",
      center: [-71.0589, 42.3601], // Boston, MA
      zoom: 1,
      pitch: 45,
      bearing: -17.6,
      minZoom: MIN_ZOOM,
      maxZoom: MAX_ZOOM,
      attributionControl: false,
      zoomControl: false,
      scrollZoom: false,
      dragRotate: false,
      dragPan: false,
      touchZoomRotate: false,
      keyboard: false,
      doubleClickZoom: false,
      touchZoom: false,
    });

    // Add 3D buildings and hide unnecessary layers for performance
    map.on("load", () => {
      // Remove ALL labels for clean map - add back as needed
      const labelsToRemove = [
        // Road labels
        "road-label",
        "road-number-shield",
        "road-exit-shield",
        "motorway-junction",

        // Place labels
        "place-label",
        "place-city-label",
        "place-town-label",
        "place-village-label",
        "place-hamlet-label",
        "place-suburb-label",
        "place-neighbourhood-label",
        "place-islet-label",

        // Geographic labels
        "state-label",
        "country-label",
        "continent-label",
        "postcode-label",

        // Water labels
        "water-label",
        "waterway-label",
        "marine-label",

        // Natural labels
        "natural-label",
        "natural-line-label",
        "natural-point-label",

        // POI labels
        "poi-label",
        "transit-label",
        "airport-label",

        // Other labels
        "settlement-label",
        "settlement-subdivision-label",
      ];

      labelsToRemove.forEach((layerId) => {
        if (map.getLayer(layerId)) {
          map.setLayoutProperty(layerId, "visibility", "none");
        }
      });

      console.log("🗑️ [MAPBOX] Removed all label layers for clean map");

      // Add 3D buildings
      map.addLayer({
        id: "3d-buildings",
        source: "composite",
        "source-layer": "building",
        filter: ["==", "extrude", "true"],
        type: "fill-extrusion",
        minzoom: 1,
        paint: {
          "fill-extrusion-color": "#aaa",
          "fill-extrusion-height": [
            "interpolate",
            ["linear"],
            ["zoom"],
            15,
            0,
            15.05,
            ["get", "height"],
          ],
          "fill-extrusion-base": [
            "interpolate",
            ["linear"],
            ["zoom"],
            15,
            0,
            15.05,
            ["get", "min_height"],
          ],
          "fill-extrusion-opacity": 0.6,
        },
      });

      // Add coverage markers
      addCoverageMarkers(map as any);
    });
  }

  // 24 building markers within 10-mile radius of Boston
  // Priority: 0-100 determines when marker appears
  // Strategy: Only a few early (0-50%), most appear during zoom finale (50-100%)
  const buildingMarkers = [
    // Early arrivals (0-50%) - Just 5 key landmarks
    {
      lng: -71.0589,
      lat: 42.3601,
      name: "Downtown Office Tower",
      type: "commercial",
      color: "#3b82f6",
      icon: "🏢",
      priority: 10, // First to appear
    },
    {
      lng: -71.0703,
      lat: 42.3555,
      name: "Back Bay Residences",
      type: "residential",
      color: "#10b981",
      icon: "🏘️",
      priority: 25,
    },
    {
      lng: -71.0989,
      lat: 42.3734,
      name: "Harvard Square Campus",
      type: "institutional",
      color: "#ec4899",
      icon: "🏛️",
      priority: 35,
    },
    {
      lng: -71.0836,
      lat: 42.3493,
      name: "Fenway Business Center",
      type: "commercial",
      color: "#3b82f6",
      icon: "🏢",
      priority: 40,
    },
    {
      lng: -71.0456,
      lat: 42.3634,
      name: "Faneuil Hall Marketplace",
      type: "mercantile",
      color: "#14b8a6",
      icon: "🏪",
      priority: 48,
    },

    // Main wave (50-100%) - Remaining 19 buildings
    {
      lng: -71.0489,
      lat: 42.3736,
      name: "Cambridge Tech Hub",
      type: "commercial",
      color: "#3b82f6",
      icon: "🏢",
      priority: 52,
    },
    {
      lng: -71.1097,
      lat: 42.3398,
      name: "Brookline Plaza",
      type: "commercial",
      color: "#3b82f6",
      icon: "🏢",
      priority: 56,
    },
    {
      lng: -71.0912,
      lat: 42.339,
      name: "Mission Hill Apartments",
      type: "residential",
      color: "#10b981",
      icon: "🏘️",
      priority: 54,
    },
    {
      lng: -71.0545,
      lat: 42.3656,
      name: "Beacon Hill Condos",
      type: "residential",
      color: "#10b981",
      icon: "🏘️",
      priority: 60,
    },
    {
      lng: -71.0412,
      lat: 42.3512,
      name: "Seaport Towers",
      type: "residential",
      color: "#10b981",
      icon: "🏘️",
      priority: 64,
    },
    {
      lng: -71.0256,
      lat: 42.3456,
      name: "East Boston Manufacturing",
      type: "industrial",
      color: "#8b5cf6",
      icon: "🏭",
      priority: 58,
    },
    {
      lng: -71.0623,
      lat: 42.3323,
      name: "South Boston Industrial",
      type: "industrial",
      color: "#8b5cf6",
      icon: "🏭",
      priority: 68,
    },
    {
      lng: -71.1189,
      lat: 42.3612,
      name: "Brighton Processing Plant",
      type: "industrial",
      color: "#8b5cf6",
      icon: "🏭",
      priority: 74,
    },
    {
      lng: -71.0345,
      lat: 42.3378,
      name: "Port Distribution Center",
      type: "warehouse",
      color: "#f59e0b",
      icon: "📦",
      priority: 62,
    },
    {
      lng: -71.0789,
      lat: 42.3267,
      name: "Roxbury Warehouse",
      type: "warehouse",
      color: "#f59e0b",
      icon: "📦",
      priority: 70,
    },
    {
      lng: -71.1423,
      lat: 42.3545,
      name: "Allston Storage Facility",
      type: "warehouse",
      color: "#f59e0b",
      icon: "📦",
      priority: 78,
    },
    {
      lng: -71.0923,
      lat: 42.3456,
      name: "Longwood Medical Center",
      type: "institutional",
      color: "#ec4899",
      icon: "🏛️",
      priority: 66,
    },
    {
      lng: -71.0534,
      lat: 42.3712,
      name: "MIT Science Building",
      type: "institutional",
      color: "#ec4899",
      icon: "🏛️",
      priority: 72,
    },
    {
      lng: -71.0712,
      lat: 42.3489,
      name: "Copley Square Retail",
      type: "mercantile",
      color: "#14b8a6",
      icon: "🏪",
      priority: 76,
    },
    {
      lng: -71.0578,
      lat: 42.3589,
      name: "Downtown Crossing Mall",
      type: "mercantile",
      color: "#14b8a6",
      icon: "🏪",
      priority: 80,
    },
    {
      lng: -71.1234,
      lat: 42.3456,
      name: "Brookline Village Shops",
      type: "mercantile",
      color: "#14b8a6",
      icon: "🏪",
      priority: 84,
    },
    {
      lng: -71.0823,
      lat: 42.3178,
      name: "Dorchester Self Storage",
      type: "storage",
      color: "#ef4444",
      icon: "🗄️",
      priority: 88,
    },
    {
      lng: -71.1567,
      lat: 42.3623,
      name: "Newton Storage Complex",
      type: "storage",
      color: "#ef4444",
      icon: "🗄️",
      priority: 92,
    },
    {
      lng: -71.0167,
      lat: 42.3723,
      name: "Chelsea Mini Storage",
      type: "storage",
      color: "#ef4444",
      icon: "🗄️",
      priority: 96,
    },
  ];

  let markerObjects: any[] = [];
  let currentFilter = "all";

  function addCoverageMarkers(map: any) {
    buildingMarkers.forEach((building) => {
      // Create 3D-style marker element
      const el = document.createElement("div");
      el.className = "building-marker";
      el.dataset.type = building.type;
      el.dataset.priority = building.priority.toString();
      el.style.display = "none"; // Start hidden
      el.innerHTML = `
        <div class="marker-3d" style="--marker-color: ${building.color}">
          <div class="marker-icon">${building.icon}</div>
          <div class="marker-pulse"></div>
        </div>
        <div class="marker-label">${building.name}</div>
      `;

      const marker = new (window as any).mapboxgl.Marker(el)
        .setLngLat([building.lng, building.lat])
        .addTo(map);

      markerObjects.push({ marker, building });
    });

    console.log(
      "🏢 [MAPBOX] Added",
      buildingMarkers.length,
      "3D building markers with priority-based reveal"
    );
  }

  function updateMarkerVisibility(progress: number) {
    // Reveal markers based on eased progress matching their priority
    markerObjects.forEach(({ marker, building }) => {
      const el = marker.getElement();
      const markerPriority = building.priority;

      // Check if marker should be visible based on filter AND priority
      const matchesFilter = currentFilter === "all" || building.type === currentFilter;
      const reachedPriority = progress >= markerPriority;

      if (matchesFilter && reachedPriority) {
        // Show marker instantly (no transition to avoid elastic effect)
        el.style.display = "block";
      } else {
        // Hide marker
        el.style.display = "none";
      }
    });
  }

  function filterMarkers(type: string) {
    currentFilter = type;

    // Get current scroll progress to respect priority timing
    const currentProgress = animationProgress;

    markerObjects.forEach(({ marker, building }) => {
      const el = marker.getElement();
      const markerPriority = building.priority;
      const reachedPriority = currentProgress >= markerPriority;

      if ((type === "all" || building.type === type) && reachedPriority) {
        el.style.display = "block";
      } else {
        el.style.display = "none";
      }
    });

    console.log("🔍 [MAPBOX] Filtered to:", type);
  }

  let lastScrollY = 0;
  let lastScrollDirection: "down" | "up" | null = null;
  let animationProgress = 0; // 0-100, tracks animation state
  let rafId: number | null = null;

  // Calculate how much of the map is visible in the viewport (0-100%)
  function getMapVisibility(mapContainer: HTMLElement): number {
    const rect = mapContainer.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const elementHeight = rect.height;

    let visibleHeight = 0;
    if (rect.top < viewportHeight && rect.bottom > 0) {
      const visibleTop = Math.max(0, rect.top);
      const visibleBottom = Math.min(viewportHeight, rect.bottom);
      visibleHeight = visibleBottom - visibleTop;
    }

    return Math.max(0, Math.min(100, (visibleHeight / elementHeight) * 100));
  }

  // Apply cubic ease-in for smooth acceleration
  function applyEasing(linearValue: number): number {
    const t = linearValue / 100; // Normalize to 0-1
    return t * t * t * 100; // Cubic ease-in, back to 0-100
  }

  function setupScrollEffects() {
    const mapContainer = document.getElementById("map");

    if (!mapContainer) {
      console.error("❌ [MAPBOX] Map container not found!");
      return;
    }

    console.log("🎢 [MAPBOX] Scroll effects initialized");

    window.addEventListener("scroll", () => {
      if (!mapContainer) return;

      if (rafId !== null) {
        cancelAnimationFrame(rafId);
      }

      rafId = requestAnimationFrame(() => {
        updateMapAnimation(mapContainer);
        rafId = null;
      });
    });
  }

  function updateMapAnimation(mapContainer: HTMLElement) {
    // 1. Get current visibility percentage
    const visibility = getMapVisibility(mapContainer);

    // 2. Detect scroll direction
    const currentScrollY = window.scrollY;
    const scrollDirection = currentScrollY > lastScrollY ? "down" : "up";
    const directionChanged = lastScrollDirection && lastScrollDirection !== scrollDirection;
    lastScrollY = currentScrollY;
    lastScrollDirection = scrollDirection;

    // 3. Update animation progress based on direction
    if (scrollDirection === "down") {
      // Scrolling down: increase progress towards visibility
      animationProgress = Math.max(animationProgress, visibility);
    } else {
      // Scrolling up: rewind progress towards visibility
      animationProgress = Math.min(animationProgress, visibility);
    }

    // 4. Apply easing to get smooth animation curve
    const easedProgress = applyEasing(animationProgress);

    console.log(
      `🗺️ [MAPBOX] ${scrollDirection === "down" ? "⬇️ DOWN" : "⬆️ UP"} Visibility: ${visibility.toFixed(1)}% Progress: ${animationProgress.toFixed(1)}% Eased: ${easedProgress.toFixed(1)}%`
    );

    // 5. Apply camera animation using eased progress
    if (map && map.isStyleLoaded()) {
      // Zoom: MIN to MAX based on eased progress
      const zoom = MIN_ZOOM + (easedProgress / 100) * (MAX_ZOOM - MIN_ZOOM);

      // Pitch: 35° to 75° for dramatic 3D building views
      const pitch = 35 + (easedProgress / 100) * (75 - 35);

      // Bearing: 360° rotation in the final 50% of animation
      const rotationStartThreshold = 40;
      let bearing = 0;
      if (easedProgress > rotationStartThreshold) {
        const rotationProgress =
          (easedProgress - rotationStartThreshold) / (100 - rotationStartThreshold);
        bearing = rotationProgress * 360;
      }

      // Apply camera position
      map.easeTo({
        zoom: zoom,
        pitch: pitch,
        bearing: bearing,
        center: [-71.0589, 42.3601],
        duration: 0,
        easing: (t: number) => t,
      });

      console.log(
        `🎥 [MAPBOX] Zoom: ${zoom.toFixed(2)} Pitch: ${pitch.toFixed(1)}° Bearing: ${bearing.toFixed(1)}°`
      );
    }

    // 6. Update marker visibility
    updateMarkerVisibility(easedProgress);
  }

  function setupNavigation() {
    const navTabs = document.querySelectorAll(".nav-tab");

    navTabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        // Remove active class from all tabs
        navTabs.forEach((t) => t.classList.remove("active"));
        // Add active class to clicked tab
        tab.classList.add("active");

        // Get filter type
        const filter = (tab as any).dataset.filter;

        // Filter markers by building type
        filterMarkers(filter);
      });
    });
  }

  function setupCounterAnimations() {
    const counters = document.querySelectorAll(".stat-number");

    const animateCounter = (counter: HTMLElement) => {
      const target = parseInt(counter.dataset.target as string);
      const duration = 2000;
      const increment = target / (duration / 16);
      let current = 0;

      const timer = setInterval(() => {
        current += increment;
        if (current >= target) {
          current = target;
          clearInterval(timer);
        }
        counter.textContent = Math.floor(current).toString();
      }, 16);
    };

    // Intersection Observer for counter animation
    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting) {
          animateCounter(entry.target as HTMLElement);
          observer.unobserve(entry.target as HTMLElement);
        }
      });
    });

    counters.forEach((counter) => {
      observer.observe(counter as HTMLElement);
    });
  }
</script>

<!-- Mapbox GL JS -->
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
