---
// Feedback Widget Component
// Similar to chat widget but for feedback/comments

interface Props {
  currentUser?: any;
  currentRole?: string;
}

const { debugData, currentRole, currentUser } = Astro.props;
// Only show for authenticated users
const isAuthenticated = currentUser && currentUser.id;

// Debug Panel Component - Admin Only
// Shows all App component parameters in an accordion modal

interface Props {
  debugData?: Record<string, any>;
  currentRole?: string;
}


// Only show for Admin users
const isAdmin = currentRole === "Admin";

if (!isAdmin) {
  // Return empty component for non-admin users
  return;
}

// Helper function to format values for display
function formatValue(value: any): string {
  if (value === null) return "null";
  if (value === undefined) return "undefined";
  if (typeof value === "boolean") return value.toString();
  if (typeof value === "string") return `"${value}"`;
  if (typeof value === "number") return value.toString();
  if (typeof value === "object") {
    try {
      return JSON.stringify(value, null, 2);
    } catch {
      return "[Object - cannot stringify]";
    }
  }
  return String(value);
}

// Get data type for styling
function getDataType(value: any): string {
  if (value === null) return "null";
  if (value === undefined) return "undefined";
  if (Array.isArray(value)) return "array";
  return typeof value;
}

// Group data by categories
const categories = {
  "Basic Info": ["title", "description", "currentUrl"],
  "User & Auth": ["currentUser", "session", "isAuth", "currentUserId", "currentRole"],
  "Project Data": ["project", "projectId", "projects"],
  "System Config": ["supabase", "supabaseUrl", "isBackend", "noNavigation"],
  "Navigation": ["navigationData", "desktopNavigationHTML", "visibleNavItems"],
  "Other": []
};

// Categorize the debug data
const categorizedData: Record<string, Array<[string, any]>> = {};
const usedKeys = new Set<string>();

// Check if debugData exists
if (debugData && typeof debugData === 'object') {
  // First, categorize known keys
  Object.entries(categories).forEach(([category, keys]) => {
    categorizedData[category] = [];
    keys.forEach(key => {
      if (key in debugData) {
        categorizedData[category].push([key, debugData[key]]);
        usedKeys.add(key);
      }
    });
  });

  // Add remaining keys to "Other"
  categorizedData["Other"] = Object.entries(debugData)
    .filter(([key]) => !usedKeys.has(key))
    .sort(([a], [b]) => a.localeCompare(b));
} else {
  // If debugData is undefined or not an object, show a message
  categorizedData["Debug Info"] = [["debugData", "No debug data available"]];
}

// Remove empty categories
Object.keys(categorizedData).forEach(category => {
  if (categorizedData[category].length === 0) {
    delete categorizedData[category];
  }
});
---

<!-- Debug Sticky Button (Admin Only) -->
<div id="debug-panel-container" class="fixed bottom-4 right-20 z-50">
  <!-- Sticky Debug Button -->
  <button
    id="debug-toggle-btn"
    type="button"
    class="group bg-red-500 hover:bg-red-600 text-white p-2 rounded-full shadow-lg transition-all duration-200 hover:scale-110"
    title="Debug Panel (Admin Only)"
  >
    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
    </svg>
  </button>
</div>

<!-- Debug Modal -->
<div
  id="debug-modal"
  class="fixed inset-0 z-50 hidden overflow-y-auto"
  aria-labelledby="debug-modal-title"
  role="dialog"
  aria-modal="true"
>
  <!-- Backdrop -->
  <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

    <!-- Modal panel -->
    <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full sm:p-6">
      <!-- Header -->
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center space-x-2">
          <div class="flex-shrink-0">
            <svg class="h-6 w-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
            </svg>
          </div>
          <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white" id="debug-modal-title">
            Debug Panel - App Component Parameters
          </h3>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
            Admin Only
          </span>
        </div>
        <button
          id="debug-close-btn"
          type="button"
          class="bg-white dark:bg-gray-800 rounded-md text-gray-400 hover:text-gray-500 dark:hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          <span class="sr-only">Close</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Content -->
      <div class="max-h-96 overflow-y-auto">
        <div class="space-y-2">
          {Object.entries(categorizedData).map(([category, items]) => (
            <div class="border border-gray-200 dark:border-gray-700 rounded-lg">
              <!-- Accordion Header -->
              <button
                type="button"
                class="debug-accordion-header w-full px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-red-500 flex items-center justify-between rounded-lg"
                data-category={category}
              >
                <span class="flex items-center space-x-2">
                  <span>{category}</span>
                  <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-200 text-gray-800 dark:bg-gray-600 dark:text-gray-200">
                    {items.length}
                  </span>
                </span>
                <svg class="debug-accordion-icon h-5 w-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              
              <!-- Accordion Content -->
              <div class="debug-accordion-content hidden px-4 py-3 border-t border-gray-200 dark:border-gray-600">
                <div class="space-y-3">
                  {items.map(([key, value]) => {
                    const dataType = getDataType(value);
                    const formattedValue = formatValue(value);
                    
                    return (
                      <div class="bg-gray-50 dark:bg-gray-700 rounded-md p-3">
                        <div class="flex items-start justify-between mb-2">
                          <div class="flex items-center space-x-2">
                            <span class="text-sm font-mono font-semibold text-blue-600 dark:text-blue-400">{key}</span>
                            <span class={`inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium ${
                              dataType === 'string' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                              dataType === 'number' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200' :
                              dataType === 'boolean' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                              dataType === 'object' ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' :
                              dataType === 'array' ? 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200' :
                              'bg-gray-100 text-gray-800 dark:bg-gray-600 dark:text-gray-200'
                            }`}>
                              {dataType}
                            </span>
                          </div>
                          <button
                            type="button"
                            class="debug-copy-btn text-xs text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
                            data-value={formattedValue}
                            title="Copy to clipboard"
                          >
                            Copy
                          </button>
                        </div>
                        <pre class="text-xs text-gray-600 dark:text-gray-300 whitespace-pre-wrap break-all bg-white dark:bg-gray-800 p-2 rounded border max-h-32 overflow-y-auto">{formattedValue}</pre>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Footer -->
      <div class="mt-5 sm:mt-6 flex justify-between items-center">
        <div class="text-sm text-gray-500 dark:text-gray-400">
          Total parameters: {debugData ? Object.keys(debugData).length : 0}
        </div>
        <button
          id="debug-close-btn-2"
          type="button"
          class="inline-flex justify-center px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Debug Panel JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const toggleBtn = document.getElementById('debug-toggle-btn');
    const modal = document.getElementById('debug-modal');
    const closeBtns = [document.getElementById('debug-close-btn'), document.getElementById('debug-close-btn-2')];
    const backdrop = modal?.querySelector('.fixed.inset-0');

    // Toggle modal
    function toggleModal() {
      if (modal) {
        modal.classList.toggle('hidden');
        document.body.style.overflow = modal.classList.contains('hidden') ? '' : 'hidden';
      }
    }

    // Open modal
    toggleBtn?.addEventListener('click', toggleModal);

    // Close modal
    closeBtns.forEach(btn => {
      btn?.addEventListener('click', toggleModal);
    });

    // Close on backdrop click
    backdrop?.addEventListener('click', toggleModal);

    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !modal?.classList.contains('hidden')) {
        toggleModal();
      }
    });

    // Accordion functionality
    const accordionHeaders = document.querySelectorAll('.debug-accordion-header');
    accordionHeaders.forEach(header => {
      header.addEventListener('click', function(this: HTMLElement) {
        const category = this.getAttribute('data-category');
        const content = this.nextElementSibling;
        const icon = this.querySelector('.debug-accordion-icon') as HTMLElement;
        
        if (content && icon) {
          const isHidden = content.classList.contains('hidden');
          
          if (isHidden) {
            content.classList.remove('hidden');
            icon.style.transform = 'rotate(180deg)';
          } else {
            content.classList.add('hidden');
            icon.style.transform = 'rotate(0deg)';
          }
        }
      });
    });

    // Copy to clipboard functionality
    const copyBtns = document.querySelectorAll('.debug-copy-btn');
    copyBtns.forEach(btn => {
      btn.addEventListener('click', async function(this: HTMLElement, e: Event) {
        e.stopPropagation();
        const value = this.getAttribute('data-value');
        
        try {
          await navigator.clipboard.writeText(value || '');
          this.textContent = 'Copied!';
          setTimeout(() => {
            this.textContent = 'Copy';
          }, 2000);
        } catch (err) {
          console.error('Failed to copy to clipboard:', err);
          this.textContent = 'Failed';
          setTimeout(() => {
            this.textContent = 'Copy';
          }, 2000);
        }
      });
    });
  });
</script>


{isAuthenticated && (
    
  <div id="feedback-widget" class="fixed bottom-4 right-4 z-50">
    {/* <!-- Feedback Button --> */}
    <button
      id="feedback-button"
      class="bg-blue-600 hover:bg-blue-700 text-white rounded-full p-3 shadow-lg transition-all duration-200 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      title="Leave Feedback"
      aria-label="Open feedback form"
    >
      <svg class="rxe6apEJoEk8r75xaVNG ADSeKHR1DvUUA48Chci_ VQS2tmQ_zFyBOC2tkmto _JmTNv5EiHqK2A1jcQSf _Oyukq8JlN1X9w2FmPds XIIs8ZOri3wm8Wnj9N_y Lld6j9B1iilEqA6j31e4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
            <path d="m7.4 3.736 3.43 3.429A5.046 5.046 0 0 1 12.133 7c.356.01.71.06 1.056.147l3.41-3.412a2.32 2.32 0 0 1 .451-.344A9.89 9.89 0 0 0 12.268 2a10.022 10.022 0 0 0-5.322 1.392c.165.095.318.211.454.344Zm11.451 1.54-.127-.127a.5.5 0 0 0-.706 0l-2.932 2.932c.03.023.05.054.078.077.237.194.454.41.651.645.033.038.077.067.11.107l2.926-2.927a.5.5 0 0 0 0-.707Zm-2.931 9.81c-.025.03-.058.052-.082.082a4.97 4.97 0 0 1-.633.639c-.04.036-.072.083-.115.117l2.927 2.927a.5.5 0 0 0 .707 0l.127-.127a.5.5 0 0 0 0-.707l-2.932-2.931Zm-1.443-4.763a3.037 3.037 0 0 0-1.383-1.1l-.012-.007a2.956 2.956 0 0 0-1-.213H12a2.964 2.964 0 0 0-2.122.893c-.285.29-.509.634-.657 1.013l-.009.016a2.96 2.96 0 0 0-.21 1 2.99 2.99 0 0 0 .488 1.716l.032.04a3.04 3.04 0 0 0 1.384 1.1l.012.007c.319.129.657.2 1 .213.393.015.784-.05 1.15-.192.012-.005.021-.013.033-.018a3.01 3.01 0 0 0 1.676-1.7v-.007a2.89 2.89 0 0 0 0-2.207 2.868 2.868 0 0 0-.27-.515c-.007-.012-.02-.025-.03-.039Zm6.137-3.373a2.53 2.53 0 0 1-.349.447l-3.426 3.426c.112.428.166.869.161 1.311a4.954 4.954 0 0 1-.148 1.054l3.413 3.412c.133.134.249.283.347.444A9.88 9.88 0 0 0 22 12.269a9.913 9.913 0 0 0-1.386-5.319ZM16.6 20.264l-3.42-3.421c-.386.1-.782.152-1.18.157h-.135c-.356-.01-.71-.06-1.056-.147L7.4 20.265a2.503 2.503 0 0 1-.444.347A9.884 9.884 0 0 0 11.732 22H12a9.9 9.9 0 0 0 5.044-1.388 2.515 2.515 0 0 1-.444-.348ZM3.735 16.6l3.426-3.426a4.608 4.608 0 0 1-.013-2.367L3.735 7.4a2.508 2.508 0 0 1-.349-.447 9.889 9.889 0 0 0 0 10.1 2.48 2.48 0 0 1 .35-.453Zm5.101-.758a4.959 4.959 0 0 1-.65-.645c-.034-.038-.078-.067-.11-.107L5.15 18.017a.5.5 0 0 0 0 .707l.127.127a.5.5 0 0 0 .706 0l2.932-2.933c-.029-.018-.049-.053-.078-.076Zm-.755-6.928c.03-.037.07-.063.1-.1.183-.22.383-.423.6-.609.046-.04.081-.092.128-.13L5.983 5.149a.5.5 0 0 0-.707 0l-.127.127a.5.5 0 0 0 0 .707l2.932 2.931Z"></path>
          </svg>

      {/* <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
      </svg> */}
    </button>

    {/* <!-- Feedback Modal --> */}
    <div
      id="feedback-modal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 items-center justify-center p-4"
      role="dialog"
      aria-labelledby="feedback-modal-title"
      aria-hidden="true"
    >
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-hidden">
        {/* <!-- Modal Header --> */}
        <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
          <h3 id="feedback-modal-title" class="text-lg font-semibold text-gray-900 dark:text-white">
            Leave Feedback
          </h3>
          <button
            id="feedback-close"
            class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
            aria-label="Close feedback form"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Modal Body -->
        <div class="p-4">
          <form id="feedback-form" class="space-y-4">
            <!-- Feedback Type -->
            <div>
              <label for="feedback-type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Type of Feedback
              </label>
              <select
                id="feedback-type"
                name="type"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              >
                <option value="">Select feedback type...</option>
                <option value="bug">🐛 Bug Report</option>
                <option value="feature">💡 Feature Request</option>
                <option value="improvement">⚡ Improvement</option>
                <option value="design">🎨 Design Feedback</option>
                <option value="general">💬 General Comment</option>
              </select>
            </div>

            <!-- Priority -->
            <div>
              <label for="feedback-priority" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Priority
              </label>
              <select
                id="feedback-priority"
                name="priority"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              >
                <option value="low">🟢 Low</option>
                <option value="medium" selected>🟡 Medium</option>
                <option value="high">🟠 High</option>
                <option value="urgent">🔴 Urgent</option>
              </select>
            </div>

            <!-- Subject -->
            <div>
              <label for="feedback-subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Subject
              </label>
              <input
                type="text"
                id="feedback-subject"
                name="subject"
                required
                maxlength="100"
                placeholder="Brief description of your feedback..."
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
              />
            </div>

            <!-- Message -->
            <div>
              <label for="feedback-message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Message
              </label>
              <textarea
                id="feedback-message"
                name="message"
                required
                rows="4"
                maxlength="1000"
                placeholder="Please provide detailed feedback..."
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white resize-none"
              ></textarea>
              <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                <span id="message-count">0</span>/1000 characters
              </div>
            </div>

            <!-- Anonymous Option -->
            <div class="flex items-center">
              <input
                type="checkbox"
                id="feedback-anonymous"
                name="anonymous"
                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded"
              />
              <label for="feedback-anonymous" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">
                Submit anonymously
              </label>
            </div>
          </form>
        </div>

        <!-- Modal Footer -->
        <div class="flex justify-end space-x-3 p-4 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700">
          <button
            type="button"
            id="feedback-cancel"
            class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded-md hover:bg-gray-50 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            id="feedback-submit"
            form="feedback-form"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <span class="submit-text">Submit Feedback</span>
            <span class="loading-text hidden">Submitting...</span>
          </button>
        </div>
      </div>
    </div>
  </div>
)}

<script>
  // Feedback Widget JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    const feedbackButton = document.getElementById('feedback-button') as HTMLButtonElement;
    const feedbackModal = document.getElementById('feedback-modal') as HTMLDivElement;
    const feedbackClose = document.getElementById('feedback-close') as HTMLButtonElement;
    const feedbackCancel = document.getElementById('feedback-cancel') as HTMLButtonElement;
    const feedbackForm = document.getElementById('feedback-form') as HTMLFormElement;
    const feedbackSubmit = document.getElementById('feedback-submit') as HTMLButtonElement;
    const messageTextarea = document.getElementById('feedback-message') as HTMLTextAreaElement;
    const messageCount = document.getElementById('message-count') as HTMLSpanElement;

    // Show modal
    function showModal() {
      feedbackModal.classList.remove('hidden');
      feedbackModal.classList.add('flex');
      feedbackModal.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      
      // Focus first input
      const firstInput = feedbackForm.querySelector('input, select, textarea') as HTMLElement;
      if (firstInput) {
        setTimeout(() => firstInput.focus(), 100);
      }
    }

    // Hide modal
    function hideModal() {
      feedbackModal.classList.add('hidden');
      feedbackModal.classList.remove('flex');
      feedbackModal.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      
      // Reset form
      feedbackForm.reset();
      updateMessageCount();
    }

    // Update character count
    function updateMessageCount() {
      if (!messageTextarea || !messageCount) return;
      
      const count = messageTextarea.value.length;
      messageCount.textContent = count.toString();
      
      if (count > 900) {
        messageCount.classList.add('text-red-500');
      } else {
        messageCount.classList.remove('text-red-500');
      }
    }

    // Event listeners
    feedbackButton?.addEventListener('click', showModal);
    feedbackClose?.addEventListener('click', hideModal);
    feedbackCancel?.addEventListener('click', hideModal);
    messageTextarea?.addEventListener('input', updateMessageCount);

    // Close modal on backdrop click
    feedbackModal?.addEventListener('click', function(e) {
      if (e.target === feedbackModal) {
        hideModal();
      }
    });

    // Close modal on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !feedbackModal.classList.contains('hidden')) {
        hideModal();
      }
    });

    // Form submission
    feedbackForm?.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      if (!feedbackSubmit) return;
      
      const submitText = feedbackSubmit.querySelector('.submit-text') as HTMLElement;
      const loadingText = feedbackSubmit.querySelector('.loading-text') as HTMLElement;
      
      // Show loading state
      feedbackSubmit.disabled = true;
      submitText?.classList.add('hidden');
      loadingText?.classList.remove('hidden');

      try {
        const formData = new FormData(feedbackForm);
        const feedbackData = {
          type: formData.get('type'),
          priority: formData.get('priority'),
          subject: formData.get('subject'),
          message: formData.get('message'),
          anonymous: formData.get('anonymous') === 'on'
        };

        const response = await fetch('/api/feedback', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(feedbackData)
        });

        const result = await response.json();

        if (response.ok) {
          // Show success notification
          if ((window as any).showNotification) {
            (window as any).showNotification({
              type: 'success',
              title: 'Feedback Submitted',
              message: 'Thank you for your feedback! We appreciate your input.',
              duration: 3000
            });
          } else {
            alert('Feedback submitted successfully! Thank you for your input.');
          }
          
          hideModal();
        } else {
          throw new Error(result.error || 'Failed to submit feedback');
        }
      } catch (error) {
        console.error('Feedback submission error:', error);
        
        // Show error notification
        if ((window as any).showNotification) {
          (window as any).showNotification({
            type: 'error',
            title: 'Submission Failed',
            message: 'Failed to submit feedback. Please try again.',
            duration: 5000
          });
        } else {
          alert('Failed to submit feedback. Please try again.');
        }
      } finally {
        // Reset button state
        feedbackSubmit.disabled = false;
        submitText?.classList.remove('hidden');
        loadingText?.classList.add('hidden');
      }
    });

    // Initialize character count
    updateMessageCount();
  });
</script>

<style>
  /* Custom styles for feedback widget */
  #feedback-widget {
    font-family: inherit;
  }

  #feedback-modal {
    backdrop-filter: blur(4px);
  }

  #feedback-modal .bg-white {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  /* Focus styles for accessibility */
  #feedback-button:focus,
  #feedback-close:focus,
  #feedback-cancel:focus,
  #feedback-submit:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Form validation styles */
  #feedback-form input:invalid,
  #feedback-form select:invalid,
  #feedback-form textarea:invalid {
    border-color: #ef4444;
  }

  #feedback-form input:valid,
  #feedback-form select:valid,
  #feedback-form textarea:valid {
    border-color: #10b981;
  }
</style>
