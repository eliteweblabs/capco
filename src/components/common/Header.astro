---
import { isBackendPage } from "../../pages/api/backend-page-check";
import UserCenter from "../project/UserCenter.astro";
import AuthIcon from "./AuthIcon.astro";
import Button from "./Button.astro";
import HamburgerIcon from "./Hamburger.astro";
import Logo from "./Logo.astro";
import ThemeToggle from "./ThemeToggle.astro";

interface Props {
  isAuth: boolean;
  currentUser: any;
  currentRole: string | null;
  session: any;
}

// Header component
const { isAuth, currentUser, session, currentRole } = Astro.props;

// Fetch user's projects for the drawer
let projects: any[] = [];
if (isAuth && currentUser?.id) {
  try {
    const { supabase } = await import("../../lib/supabase");
    if (supabase) {
      const { data, error } = await supabase
        .from("projects")
        .select("id, title, address, status, created_at")
        .order("created_at", { ascending: false });

      if (!error && data) {
        projects = data;
      }
    }
  } catch (error) {
    console.error("Error fetching projects for header:", error);
  }
}

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
const isBackend = isBackendPage(currentUrl);

// Navigation schema
type UserRole = "any" | "Client" | "Admin" | "Staff";
type NavType = "frontend" | "backend";

interface NavItem {
  label: string;
  href: string;
  roles: UserRole[];
  pageType: NavType;
  isPrimary: boolean;
  isDrawer?: boolean; // Special flag for drawer trigger
  mobileOnly?: boolean; // Show only on mobile
  desktopOnly?: boolean; // Show only on desktop
  buttonStyle?: "primary" | "secondary" | "ghost" | "outline"; // Button variant
  isDropdown?: boolean; // Is a dropdown menu
  dropdownItems?: DropdownItem[]; // Items for dropdown
  showWhenAuth?: boolean; // Show only when authenticated
  hideWhenAuth?: boolean; // Hide when authenticated
}

interface DropdownItem {
  label: string;
  href: string;
}

interface DropdownMenu {
  label: string;
  items: DropdownItem[];
}

// Navigation items
const navItems: NavItem[] = [
  // Frontend navigation (hidden on backend pages to reduce clutter)
  {
    label: "Why CAPCo",
    href: "#",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: false,
    isDropdown: true,
    dropdownItems: [
      { label: "Unified Fire Protection Platform", href: "/solutions" },
      { label: "CAPCo vs Competitors", href: "/solutions" },
      { label: "Move to CAPCo", href: "/solutions" },
      { label: "See Our Customers", href: "/customers" },
    ],
  },
  {
    label: "Pricing",
    href: "/pricing",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/pricing"),
    desktopOnly: true,
  },
  {
    label: "Book Demo",
    href: "/demo",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/demo"),
    buttonStyle: "primary",
    desktopOnly: true,
  },
  // {
  //   label: "Log In",
  //   href: "/login",
  //   roles: ["any"],
  //   pageType: "frontend",
  //   isPrimary: currentUrl.startsWith("/login"),
  //   // buttonStyle: "ghost",
  //   desktopOnly: true,
  //   hideWhenAuth: true, // Hide login button when user is authenticated
  // },

  // Backend navigation (shown on backend pages)
  {
    label: "New Project",
    href: "/dashboard#new-project",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/dashboard#new-project"),
  },
  {
    label: "Projects",
    href: "#",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: false,
    isDrawer: true, // Special flag for drawer trigger
  },
  {
    label: "Discussions",
    href: "/discussions",
    roles: ["Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/discussions"),
  },
  {
    label: "Global Activity",
    href: "/admin/global-activity",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/admin/global-activity"),
  },
  {
    label: "Users",
    href: "/users",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/users"),
  },
];

// Dropdown menus are now integrated into navItems array above

// Filter navigation items based on auth state, role, and page type
function getVisibleNavItems(
  navItems: NavItem[],
  isAuth: boolean,
  currentRole: string | null,
  isBackend: boolean
): NavItem[] {
  return navItems.filter((item) => {
    // Check auth-specific visibility
    if (item.hideWhenAuth && isAuth) return false;
    if (item.showWhenAuth && !isAuth) return false;

    // Show frontend items when not on backend pages
    if (item.pageType === "frontend" && !isBackend) {
      return (
        item.roles.includes("any") ||
        (isAuth && currentRole && item.roles.includes(currentRole as UserRole))
      );
    }

    // Show backend items when on backend pages and authenticated
    if (item.pageType === "backend" && isBackend && isAuth) {
      return (
        item.roles.includes("any") || (currentRole && item.roles.includes(currentRole as UserRole))
      );
    }

    return false;
  });
}

const visibleNavItems = getVisibleNavItems(navItems, isAuth, currentRole, isBackend);
---

<header
  class="sticky top-0 z-50 border-b border-border-light bg-background-light backdrop-blur-sm dark:border-border-dark dark:bg-background-dark"
>
  <nav class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      {/* Logo */}
      <div class="flex-shrink-0">
        <Logo />
      </div>

      {/* Unified Navigation - Desktop */}
      <div class="hidden items-center space-x-8 md:flex">
        {/* Navigation Items */}
        {
          visibleNavItems
            .filter((item) => !item.mobileOnly) // Show only desktop items
            .map((item) => {
              // Handle dropdown items
              if (item.isDropdown && item.dropdownItems) {
                return (
                  <div class="group relative">
                    <Button
                      variant="anchor"
                      size="sm"
                      class={`px-3 py-2 text-sm font-medium transition-colors ${
                        item.isPrimary
                          ? "text-primary dark:text-primary-dark"
                          : "text-black dark:text-white"
                      }`}
                      icon="chevron-down"
                      iconPosition="right"
                    >
                      {item.label}
                    </Button>
                    <div class="invisible absolute left-0 mt-2 w-64 rounded-lg border border-border-light bg-background-card opacity-0 shadow-lg transition-all duration-200 group-hover:visible group-hover:opacity-100 dark:border-border-dark dark:bg-background-card-dark">
                      <div class="py-1">
                        {item.dropdownItems.map((dropdownItem) => (
                          <a
                            href={dropdownItem.href}
                            class="block px-4 py-2 text-sm text-text-secondary hover:bg-neutral-100 dark:text-text-secondary-dark dark:hover:bg-neutral-700"
                          >
                            {dropdownItem.label}
                          </a>
                        ))}
                      </div>
                    </div>
                  </div>
                );
              }

              // Handle drawer items
              if (item.isDrawer) {
                // return (
                //   <Button
                //     variant="ghost"
                //     size="sm"
                //     dataAttributes={{
                //       "drawer-target": "project-drawer",
                //       "drawer-toggle": "project-drawer",
                //     }}
                //     class="text-primary dark:text-primary-dark hover:text-primary-dark px-3 py-2 text-sm font-medium transition-colors"
                //   >
                //     {item.label}
                //   </Button>
                // );
              }

              // Handle button style items
              if (item.buttonStyle) {
                return (
                  <Button
                    href={item.href}
                    variant={item.buttonStyle}
                    size="sm"
                    class={
                      item.buttonStyle === "ghost"
                        ? "text-primary dark:text-primary-dark hover:text-primary-dark"
                        : ""
                    }
                  >
                    {item.label}
                  </Button>
                );
              }

              // Handle regular links
              return (
                <a
                  href={item.href}
                  class={`px-3 py-2 text-sm font-medium transition-colors ${
                    item.isPrimary
                      ? "text-primary dark:text-primary-dark"
                      : "hover:text-primary dark:hover:text-primary-dark text-black dark:text-white"
                  }`}
                >
                  {item.label}
                </a>
              );
            })
        }

        {/* Theme Toggle */}
        <!-- <ThemeToggle /> -->

        <!-- {/* Auth Section */}
        {
          isAuth ? (
            <div class="text-center">
              {/* <button
                class="mb-2 rounded-lg px-5 py-2.5 text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                
              > */}
              <AuthIcon
                isAuth={isAuth}
                currentUser={currentUser}
                currentRole={currentRole}
                session={session}
              />
              {/* </button> */}
            </div>
          ) : null
        } -->
      </div>

      {/* Mobile Controls */}
      <div class="flex items-center space-x-4">
        <ThemeToggle />
        <AuthIcon
          isAuth={isAuth}
          currentUser={currentUser}
          currentRole={currentRole}
          session={session}
        />
        <!-- put hamburger icon here -->
        <HamburgerIcon visibleNavigation={visibleNavItems} />
      </div>
    </div>
  </nav>
</header>

<!-- Project Drawer -->
<UserCenter
  isAuth={isAuth}
  currentUser={currentUser}
  currentRole={currentRole || ""}
  session={session}
/>
