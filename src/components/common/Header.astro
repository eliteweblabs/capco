---
import { isBackendPage } from "../../pages/api/backend-page-check";
import AuthIcon from "./AuthIcon.astro";
import BoxIcon from "./BoxIcon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import Logo from "./Logo.astro";
import Button from "./Button.astro";
import ProjectDrawer from "../project/ProjectDrawer.astro";

interface Props {
  isAuth: boolean;
  currentUser: any;
  currentRole: string | null;
  session: any;
}

// Header component
const { isAuth, currentUser, session, currentRole } = Astro.props;

// Fetch user's projects for the drawer
let projects: any[] = [];
if (isAuth && currentUser?.id) {
  try {
    const { supabase } = await import("../../lib/supabase");
    if (supabase) {
      const { data, error } = await supabase
        .from("projects")
        .select("id, title, address, status, created_at")
        .order("created_at", { ascending: false });

      if (!error && data) {
        projects = data;
      }
    }
  } catch (error) {
    console.error("Error fetching projects for header:", error);
  }
}

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
const isBackend = isBackendPage(currentUrl);

// Navigation schema
type UserRole = "any" | "Client" | "Admin" | "Staff";
type NavType = "frontend" | "backend";

interface NavItem {
  label: string;
  href: string;
  roles: UserRole[];
  pageType: NavType;
  isPrimary: boolean;
  isDrawer?: boolean; // Special flag for drawer trigger
  mobileOnly?: boolean; // Show only on mobile
  desktopOnly?: boolean; // Show only on desktop
  buttonStyle?: "primary" | "secondary" | "ghost" | "outline"; // Button variant
  isDropdown?: boolean; // Is a dropdown menu
  dropdownItems?: DropdownItem[]; // Items for dropdown
}

interface DropdownItem {
  label: string;
  href: string;
}

interface DropdownMenu {
  label: string;
  items: DropdownItem[];
}

// Navigation items
const navItems: NavItem[] = [
  // Frontend navigation (hidden on backend pages to reduce clutter)
  {
    label: "Why CAPCo",
    href: "#",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: false,
    isDropdown: true,
    dropdownItems: [
      { label: "Unified Fire Protection Platform", href: "/solutions" },
      { label: "CAPCo vs Competitors", href: "/solutions" },
      { label: "Move to CAPCo", href: "/solutions" },
      { label: "See Our Customers", href: "/customers" },
    ],
  },
  {
    label: "Pricing",
    href: "/pricing",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/pricing"),
    desktopOnly: true,
  },
  {
    label: "Book Demo",
    href: "/demo",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/demo"),
    buttonStyle: "primary",
    desktopOnly: true,
  },
  {
    label: "Log In",
    href: "/login",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/login"),
    buttonStyle: "ghost",
    desktopOnly: true,
  },

  // Backend navigation (shown on backend pages)
  {
    label: "New Project",
    href: "/dashboard#new-project",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/dashboard#new-project"),
  },
  {
    label: "Projects",
    href: "#",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: false,
    isDrawer: true, // Special flag for drawer trigger
  },
  {
    label: "Discussions",
    href: "/discussions",
    roles: ["Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/discussions"),
  },
  {
    label: "Global Activity",
    href: "/admin/global-activity",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/admin/global-activity"),
  },
  {
    label: "Users",
    href: "/users",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/users"),
  },
];

// Dropdown menus are now integrated into navItems array above

// Filter navigation items based on auth state, role, and page type
function getVisibleNavItems(
  navItems: NavItem[],
  isAuth: boolean,
  currentRole: string | null,
  isBackend: boolean
): NavItem[] {
  return navItems.filter((item) => {
    // Show frontend items when not on backend pages
    if (item.pageType === "frontend" && !isBackend) {
      return (
        item.roles.includes("any") ||
        (isAuth && currentRole && item.roles.includes(currentRole as UserRole))
      );
    }

    // Show backend items when on backend pages and authenticated
    if (item.pageType === "backend" && isBackend && isAuth) {
      return (
        item.roles.includes("any") || (currentRole && item.roles.includes(currentRole as UserRole))
      );
    }

    return false;
  });
}

const visibleNavItems = getVisibleNavItems(navItems, isAuth, currentRole, isBackend);
---

<header
  class="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50 backdrop-blur-sm"
>
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      {/* Logo */}
      <div class="flex-shrink-0">
        <Logo />
      </div>

      {/* Unified Navigation - Desktop */}
      <div class="hidden md:flex items-center space-x-8">
        {/* Navigation Items */}
        {
          visibleNavItems
            .filter((item) => !item.mobileOnly) // Show only desktop items
            .map((item) => {
              // Handle dropdown items
              if (item.isDropdown && item.dropdownItems) {
                return (
                  <div class="relative group">
                    <button class="text-gray-700 hover:text-gray-900 px-3 py-2 text-sm font-medium flex items-center">
                      {item.label}
                      <BoxIcon name="chevron-down" class="ml-1 bx-xs" />
                    </button>
                    <div class="absolute left-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 border border-gray-200 dark:border-gray-700">
                      <div class="py-1">
                        {item.dropdownItems.map((dropdownItem) => (
                          <a
                            href={dropdownItem.href}
                            class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                          >
                            {dropdownItem.label}
                          </a>
                        ))}
                      </div>
                    </div>
                  </div>
                );
              }

              // Handle drawer items
              if (item.isDrawer) {
                return (
                  <button
                    data-drawer-target="project-drawer"
                    data-drawer-toggle="project-drawer"
                    class="px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors"
                  >
                    {item.label}
                  </button>
                );
              }

              // Handle button style items
              if (item.buttonStyle) {
                return (
                  <Button
                    href={item.href}
                    variant={item.buttonStyle}
                    size="sm"
                    class={item.buttonStyle === "ghost" ? "text-gray-700 hover:text-gray-900" : ""}
                  >
                    {item.label}
                  </Button>
                );
              }

              // Handle regular links
              return (
                <a
                  href={item.href}
                  class={`px-3 py-2 text-sm font-medium transition-colors ${
                    item.isPrimary
                      ? "text-blue-600 dark:text-blue-400"
                      : "text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white"
                  }`}
                >
                  {item.label}
                </a>
              );
            })
        }

        {/* Auth Section */}
        {
          isAuth ? (
            <AuthIcon
              isAuth={isAuth}
              currentUser={currentUser}
              currentRole={currentRole}
              session={session}
            />
          ) : null
        }

        {/* Theme Toggle */}
        <ThemeToggle />
      </div>

      {/* Mobile Controls */}
      <div class="md:hidden flex items-center space-x-4">
        <ThemeToggle />
        <AuthIcon
          isAuth={isAuth}
          currentUser={currentUser}
          currentRole={currentRole}
          session={session}
        />
        <button
          id="mobile-menu-btn"
          aria-controls="drawer-example"
          aria-label="Toggle mobile menu"
          class="hamburger z-[60] size-10 text-gray-700 transition-colors dark:text-gray-300"
        >
          <span class="line"></span>
          <span class="line"></span>
          <span class="line"></span>
        </button>
      </div>
    </div>
  </nav>
</header>

{/* <!-- Mobile Navigation Menu --> */}
<div
  id="drawer-example"
  class="fixed left-0 top-0 z-40 h-screen w-screen overflow-y-auto bg-white dark:bg-gray-800 p-4"
  tabindex="-1"
  aria-labelledby="drawer-label"
>
  <!-- Close button -->
  <div class="flex justify-end mb-4">
    <button
      id="mobile-menu-close"
      aria-label="Close mobile menu"
      class="flex items-center justify-center w-10 h-10 text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <nav class="space-y-4 px-6 py-4">
    <!-- Navigation Items -->
    {
      visibleNavItems
        .filter((item) => !item.desktopOnly) // Show only mobile items
        .map((item) => {
          // Handle dropdown items - show as expandable sections
          if (item.isDropdown && item.dropdownItems) {
            return (
              <div class="border-t border-gray-200 pt-4 dark:border-gray-600">
                <h3 class="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-3">
                  {item.label}
                </h3>
                {item.dropdownItems.map((dropdownItem) => (
                  <a
                    href={dropdownItem.href}
                    class="block py-2 text-gray-700 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400"
                  >
                    {dropdownItem.label}
                  </a>
                ))}
              </div>
            );
          }

          // Handle drawer items
          if (item.isDrawer) {
            return (
              <button
                data-drawer-target="project-drawer"
                data-drawer-toggle="project-drawer"
                class="w-full text-left py-2 text-gray-700 hover:text-blue-600 dark:text-gray-300 dark:hover:text-blue-400"
              >
                {item.label}
              </button>
            );
          }

          // Handle button style items
          if (item.buttonStyle) {
            return (
              <Button
                href={item.href}
                variant={item.buttonStyle}
                size="md"
                fullWidth
                class={item.buttonStyle === "primary" ? "rounded-full" : "justify-start py-2"}
              >
                {item.label}
              </Button>
            );
          }

          // Handle regular links
          return (
            <Button
              href={item.href}
              variant={item.isPrimary ? "primary" : "ghost"}
              size="md"
              fullWidth
              class={item.isPrimary ? "rounded-full" : "justify-start py-2"}
            >
              {item.label}
            </Button>
          );
        })
    }

    {/* <!-- Auth Section --> */}
    <div class="border-t border-gray-200 pt-4 dark:border-gray-600">
      {
        isAuth ? (
          <div class="space-y-3">
            <AuthIcon
              isAuth={isAuth}
              currentUser={currentUser}
              currentRole={currentRole}
              session={session}
            />
          </div>
        ) : (
          <div class="space-y-3">
            <Button href="/login" variant="secondary" size="md" fullWidth>
              Log In
            </Button>
            <Button
              href="/login?tab=register"
              variant="primary"
              size="md"
              fullWidth
              class="rounded-full"
            >
              Get Started Free
            </Button>
            <Button href="/demo" variant="secondary" size="md" fullWidth>
              Book a Demo
            </Button>
          </div>
        )
      }
    </div>
  </nav>
</div>

<!-- Project Drawer -->
{
  isAuth && (
    <ProjectDrawer
      projects={projects}
      currentProjectId={
        currentUrl.includes("/project/")
          ? currentUrl.split("/project/")[1]?.split("?")[0] || ""
          : ""
      }
      currentUser={currentUser}
      currentRole={currentRole || ""}
    />
  )
}

<style>
  .hamburger .line {
    width: 20px;
    background-color: currentColor;
    height: 2px;
    display: block;
    margin: 3px auto;
    border-radius: 1px;
    -webkit-transition: all 0.3s ease-in-out;
    -o-transition: all 0.3s ease-in-out;
    transition: all 0.3s ease-in-out;
  }
  #mobile-menu-btn {
    -webkit-transition: all 0.3s ease-in-out;
    -o-transition: all 0.3s ease-in-out;
    transition: all 0.3s ease-in-out;
  }

  #mobile-menu-btn.is-active {
    animation: smallbig 0.6s forwards;
  }

  #mobile-menu-btn.is-active .line:nth-child(1),
  #mobile-menu-btn.is-active .line:nth-child(2),
  #mobile-menu-btn.is-active .line:nth-child(3) {
    -webkit-transition-delay: 0.2s;
    -o-transition-delay: 0.2s;
    transition-delay: 0.2s;
  }

  #mobile-menu-btn.is-active .line:nth-child(2) {
    opacity: 0;
  }

  #mobile-menu-btn.is-active .line:nth-child(1) {
    -webkit-transform: translateY(5px) rotate(45deg);
    -ms-transform: translateY(5px) rotate(45deg);
    -o-transform: translateY(5px) rotate(45deg);
    transform: translateY(5px) rotate(45deg);
  }

  #mobile-menu-btn.is-active .line:nth-child(3) {
    -webkit-transform: translateY(-5px) rotate(-45deg);
    -ms-transform: translateY(-5px) rotate(-45deg);
    -o-transform: translateY(-5px) rotate(-45deg);
    transform: translateY(-5px) rotate(-45deg);
  }

  @keyframes smallbig {
    0%,
    100% {
      -webkit-transform: scale(1);
      -ms-transform: scale(1);
      -o-transform: scale(1);
      transform: scale(1);
    }
    50% {
      -webkit-transform: scale(0);
      -ms-transform: scale(0);
      -o-transform: scale(0);
      transform: scale(0);
    }
  }

  /* Mobile menu overlay */
  .mobile-menu-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 30;
    opacity: 0;
    visibility: hidden;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
  }

  .mobile-menu-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  /* Mobile menu drawer */
  #drawer-example {
    transform: translateX(-100%);
    transition: transform 0.3s ease;
  }

  #drawer-example.active {
    transform: translateX(0);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Initialize Flowbite components
    if (typeof window !== "undefined" && (window as any).initFlowbite) {
      (window as any).initFlowbite();
    }
    const mobileMenuBtn = document.getElementById("mobile-menu-btn");
    const mobileMenuClose = document.getElementById("mobile-menu-close");
    const drawer = document.getElementById("drawer-example");
    const body = document.body;

    if (mobileMenuBtn && drawer) {
      // Toggle mobile menu
      mobileMenuBtn.addEventListener("click", function (e) {
        e.preventDefault();
        e.stopPropagation();

        const isActive = mobileMenuBtn.classList.contains("is-active");

        if (isActive) {
          // Close menu
          mobileMenuBtn.classList.remove("is-active");
          drawer.classList.remove("active");
          body.classList.remove("overflow-hidden");
        } else {
          // Open menu
          mobileMenuBtn.classList.add("is-active");
          drawer.classList.add("active");
          body.classList.add("overflow-hidden");
        }
      });

      // Close menu when clicking close button
      if (mobileMenuClose) {
        mobileMenuClose.addEventListener("click", function (e) {
          e.preventDefault();
          e.stopPropagation();

          mobileMenuBtn.classList.remove("is-active");
          drawer.classList.remove("active");
          body.classList.remove("overflow-hidden");
        });
      }

      // Close menu when clicking on overlay or outside
      drawer.addEventListener("click", function (e) {
        if (e.target === drawer) {
          mobileMenuBtn.classList.remove("is-active");
          drawer.classList.remove("active");
          body.classList.remove("overflow-hidden");
        }
      });

      // Close menu when clicking on navigation links
      const navLinks = drawer.querySelectorAll("a");
      navLinks.forEach((link) => {
        link.addEventListener("click", function () {
          mobileMenuBtn.classList.remove("is-active");
          drawer.classList.remove("active");
          body.classList.remove("overflow-hidden");
        });
      });

      // Close menu on escape key
      document.addEventListener("keydown", function (e) {
        if (e.key === "Escape" && drawer.classList.contains("active")) {
          mobileMenuBtn.classList.remove("is-active");
          drawer.classList.remove("active");
          body.classList.remove("overflow-hidden");
        }
      });

      // Close menu on window resize to desktop size
      window.addEventListener("resize", function () {
        if (window.innerWidth >= 768) {
          // md breakpoint
          mobileMenuBtn.classList.remove("is-active");
          drawer.classList.remove("active");
          body.classList.remove("overflow-hidden");
        }
      });
    }
  });
</script>
