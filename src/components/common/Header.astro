---
// import { getI18N } from "@/i18n";
import BoxIcon from "./BoxIcon.astro";
import Logo from "./Logo.astro";
import AuthIcon from "./AuthIcon.astro";
// import LanguagePicker from "../LanguagePicker.astro";
import Tooltip from "./Tooltip.astro";
// import SectionContainer from "./SectionContainer.astro";
// import NavLi from "./NavLi.astro";
import ThemeToggle from "./ThemeToggle.astro";

interface Props {
  isAuth: boolean;
  currentUser: any;
  currentRole: string | null;
  session: any;
}

// console.log("ðŸ“‹ [HEADER] Header component loading...");

const { isAuth, currentUser, session, currentRole } = Astro.props;

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
import { isBackendPage } from "../../pages/api/backend-page-check";
const isBackend = isBackendPage(currentUrl);

// Navigation schema
type UserRole = "any" | "Client" | "Admin" | "Staff";
type NavType = "frontend" | "backend";

interface NavItem {
  label: string;
  href: string;
  roles: UserRole[]; // Array of roles that can access this item
  isPrimary: boolean; // For styling primary CTA buttons
  pageType: NavType; // Frontend or backend navigation
}

const navigation: NavItem[] = [
  // Always visible - Home link for easy return to main site
  // {
  //   label: "Home",
  //   href: "/",
  //   roles: ["any"],
  //   pageType: "frontend",
  //   isPrimary: currentUrl === "/",
  // },

  // Frontend navigation (hidden on backend pages to reduce clutter)
  {
    label: "About",
    href: "/about",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/about"),
  },
  {
    label: "Projects",
    href: "/projects",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/projects"),
  },

  // Backend navigation (shown on backend pages)
  {
    label: "New Project",
    href: "/dashboard#new-project",
    roles: ["Client", "Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/dashboard#new-project"),
  },
  {
    label: "Email Test",
    href: "/email-test",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/email-test"),
  },
  // {
  //   label: "PDF Review",
  //   href: "/pdf-review",
  //   roles: ["Admin", "Staff"],
  //   type: "backend",
  // },
  // {
  //   label: "PDF Editor",
  //   href: "/pdf-editor",
  //   roles: ["Admin"],
  //   pageType: "backend",
  //   isPrimary: currentUrl.startsWith("/pdf-editor"),
  // },
  {
    label: "Discussions",
    href: "/discussions",
    roles: ["Admin", "Staff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/discussions"),
  },
  {
    label: "Global Activity",
    href: "/admin/global-activity",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/admin/global-activity"),
  },
  {
    label: "Users",
    href: "/users",
    roles: ["Admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/users"),
  },
];

// Filter navigation items based on auth state, role, and page type
function getVisibleNavItems(
  navItems: NavItem[],
  isAuth: boolean,
  userRole?: string | null,
  isBackend: boolean = false
): NavItem[] {
  return navItems.filter((item) => {
    // Always show Home link - users should always be able to return to main site
    if (item.href === "/") {
      return true;
    }

    // Page type filtering - hide other frontend nav on backend pages to reduce clutter
    if (isBackend && item.pageType === "frontend") {
      return false;
    }

    // Show backend nav only on backend pages
    if (item.pageType === "backend" && !isBackend) {
      return false;
    }

    // If item allows "any" role, show it based on page type rules above
    if (item.roles.includes("any")) return true;

    // If user is not authenticated, only show "any" role items
    if (!isAuth) return false;

    // Map database role to our role system
    const mappedRole: UserRole =
      userRole === "Admin" ? "Admin" : userRole === "Staff" ? "Staff" : "Client";

    // Check if user's role is in the allowed roles for this item
    return item.roles.includes(mappedRole);
  });
}

const visibleNavigation = getVisibleNavItems(navigation, isAuth, currentRole, isBackend);
---

<header
  class="section sticky top-0 z-50 mx-auto border-b border-gray-200 bg-hub-background p-6 dark:border-gray-700 dark:bg-hub-background-dark"
  style="position: -webkit-sticky !important; position: sticky !important; transform: translateZ(0) !important; backface-visibility: hidden !important; will-change: transform !important;"
>
  <!-- <SectionContainer> -->
  <div class="flex items-center justify-between">
    <Logo />

    {
      isAuth && isBackend && currentUrl !== "/dashboard" && (
        <a
          href="/dashboard"
          class="inline-flex items-center rounded-lg bg-gray-500 px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-600"
        >
          <BoxIcon name="arrow-back" class="mr-2" />
          Back to Projects
        </a>
      )
    }
    <!-- Navigation (Desktop) -->
    <nav class="hidden items-center space-x-8 md:flex">
      {
        visibleNavigation.map((item) =>
          item.isPrimary ? (
            <a
              href={item.href}
              class="inline-flex items-center rounded-lg bg-red-600 px-4 py-2 font-medium text-white transition-colors hover:bg-red-700"
            >
              {item.label}
            </a>
          ) : (
            <a
              href={item.href}
              class="font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
            >
              {item.label}
            </a>
          )
        )
      }
    </nav>

    <div class="flex items-center gap-2">
      <!-- Admin Quick Actions -->
      <ThemeToggle />
      {
        currentRole === "Admin" && isBackend && (
          <>
            <Tooltip content="Global Activity Feed" id="global-activity-tooltip">
              <a
                href="/admin/global-activity"
                aria-label="btn-global-activity"
                class="flex size-8 items-center justify-center rounded-full bg-purple-600 text-white transition-colors hover:bg-purple-700"
              >
                <BoxIcon name="pulse" class="text-lg" />
              </a>
            </Tooltip>
            <Tooltip
              content="New Project"
              id="new-project-tooltip"
              class="cursor-pointer md:hidden"
            >
              <a
                href="/dashboard#new-project"
                aria-label="btn-new-project"
                class="flex size-8 items-center justify-center rounded-full bg-blue-600 text-white transition-colors hover:bg-blue-700"
              >
                <BoxIcon name="plus-circle" class="text-lg" />
              </a>
            </Tooltip>

            <Tooltip content="Users" id="add-user-tooltip">
              <a
                href="/users"
                aria-label="btn-add-user"
                class="flex size-8 items-center justify-center rounded-full bg-blue-600 text-white transition-colors hover:bg-blue-700"
              >
                <BoxIcon name="user-plus" class="text-lg" />
              </a>
            </Tooltip>
          </>
        )
      }

      {/* <LanguagePicker /> */}

      <AuthIcon isAuth={isAuth} currentUser={currentUser} currentRole={currentRole} />

      {/* Mobile Menu Button (Hamburger) */}
      <button
        type="button"
        id="mobile-menu-btn"
        aria-controls="drawer-example"
        aria-label="Toggle mobile menu"
        class="hamburger z-50 size-10 text-gray-700 transition-colors dark:text-gray-300 md:hidden"
      >
        <span class="line"></span>
        <span class="line"></span>
        <span class="line"></span>
      </button>
      {/* Mobile Navigation Menu */}
      <div
        id="drawer-example"
        class="fixed left-0 top-0 z-40 h-screen w-screen -translate-x-full overflow-y-auto bg-white p-4 transition-transform dark:bg-gray-800"
        tabindex="-1"
        aria-labelledby="drawer-label"
      >
        <nav class="space-y-4 px-6 py-4">
          {/* Navigation Items */}
          {
            visibleNavigation.map((item) =>
              item.isPrimary ? (
                <a
                  href={item.href}
                  class="block w-full rounded-lg bg-red-600 px-4 py-3 text-center font-medium text-white transition-colors hover:bg-red-700"
                >
                  {item.label}
                </a>
              ) : (
                <a
                  href={item.href}
                  class="block py-2 font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
                >
                  {item.label}
                </a>
              )
            )
          }
        </nav>
      </div>
    </div>
  </div>
  <!-- </SectionContainer> -->
</header>

<script type="module" define:vars={{ session }}>
  // console.log("ðŸ“‹ [HEADER] Header script execution started");
  // console.log("ðŸ“‹ [HEADER] Session data:", session);

  // const profileBtn = document.getElementById("profile-btn");
  const userAvatar = document.getElementById("user-avatar");
  const fallbackIcon = userAvatar?.nextElementSibling;
  const profileDropdown = document.getElementById("profile-dropdown");
  const logoutBtn = document.getElementById("logout-btn");

  // Mobile menu elements
  const mobileMenuBtn = document.getElementById("mobile-menu-btn");
  const mobileMenu = document.getElementById("drawer-example");
  const hamburgerIcon = document.getElementById("mobile-menu-btn"); // The button IS the hamburger

  // console.log("ðŸ“‹ [HEADER] DOM elements found:", {
  //   profileBtn: !!profileBtn,
  //   userAvatar: !!userAvatar,
  //   fallbackIcon: !!fallbackIcon,
  //   profileDropdown: !!profileDropdown,
  //   logoutBtn: !!logoutBtn,
  //   mobileMenuBtn: !!mobileMenuBtn,
  //   mobileMenu: !!mobileMenu,
  //   hamburgerIcon: !!hamburgerIcon,
  // });

  // Initialize mobile menu icon states
  if (hamburgerIcon) {
    hamburgerIcon.classList.remove("is-active");
    // console.log("ðŸ“‹ [HEADER] Mobile menu icons initialized");
  }

  function updateProfileButton(session) {
    // console.log("ðŸ“‹ [HEADER] updateProfileButton called with session:", session);

    if (session && session.data.user) {
      const avatarUrl = session.data.user.user_metadata?.avatar_url;
      // console.log("ðŸ“‹ [HEADER] Avatar URL:", avatarUrl);

      // Only update avatar if elements exist (user is authenticated)
      if (userAvatar && fallbackIcon) {
        if (avatarUrl) {
          userAvatar.src = avatarUrl;
          userAvatar.style.display = "block";
          fallbackIcon.style.display = "none";
          // console.log("ðŸ“‹ [HEADER] Using avatar image");
        } else {
          userAvatar.style.display = "none";
          fallbackIcon.style.display = "block";
          // console.log("ðŸ“‹ [HEADER] Using fallback icon");
        }
      }
      // console.log("ðŸ“‹ [HEADER] Profile button configured for authenticated user");
    } else {
      // console.log(
      //   "ðŸ“‹ [HEADER] Profile button configured for unauthenticated user - avatar elements not present"
      // );
    }
  }

  // Check initial auth state
  // console.log("ðŸ“‹ [HEADER] Checking initial auth state...");
  updateProfileButton(session);

  // Toggle dropdown (only if profile button exists - when authenticated)
  // if (profileBtn) {
  //   profileBtn.addEventListener("click", (e) => {
  //     // console.log("ðŸ“‹ [HEADER] Profile button clicked");
  //     e.stopPropagation();
  //     if (profileDropdown) {
  //       profileDropdown.classList.toggle("hidden");
  //       // console.log("ðŸ“‹ [HEADER] Dropdown toggled");
  //     }
  //   });
  // }

  // Close dropdown when clicking outside
  // document.addEventListener("click", (e) => {
  //   if (profileDropdown && !profileBtn?.contains(e.target) && !profileDropdown.contains(e.target)) {
  //     // console.log("ðŸ“‹ [HEADER] Document clicked, closing dropdown");
  //     profileDropdown.classList.add("hidden");
  //   }
  // });

  // Prevent dropdown from closing when clicking inside it
  // if (profileDropdown) {
  //   profileDropdown.addEventListener("click", (e) => {
  //     e.stopPropagation();
  //   });
  // }

  // Mobile menu toggle functionality
  function toggleMobileMenu() {
    if (!mobileMenu || !hamburgerIcon) {
      // console.error("ðŸ“‹ [HEADER] Missing mobile menu elements");
      return;
    }

    const isOpen = mobileMenu.classList.contains("translate-x-0");

    // console.log("ðŸ“‹ [HEADER] isOpen:", isOpen);
    if (isOpen) {
      // Close drawer - slide out to the left
      mobileMenu.classList.remove("translate-x-0");
      mobileMenu.classList.add("-translate-x-full");
      hamburgerIcon.classList.remove("is-active");
      // console.log("ðŸ“‹ [HEADER] Mobile menu closed");
    } else {
      // Open drawer - slide in from the left
      mobileMenu.classList.remove("-translate-x-full");
      mobileMenu.classList.add("translate-x-0");
      hamburgerIcon.classList.add("is-active");
      // console.log("ðŸ“‹ [HEADER] Mobile menu opened");
    }
  }

  // Mobile menu button event listener
  if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
  }

  // Close mobile menu when clicking outside or on menu links
  document.addEventListener("click", (e) => {
    if (mobileMenu && mobileMenu.classList.contains("translate-x-0")) {
      // Close if clicking outside the mobile menu
      if (!mobileMenu.contains(e.target) && !mobileMenuBtn?.contains(e.target)) {
        mobileMenu.classList.remove("translate-x-0");
        mobileMenu.classList.add("-translate-x-full");
        if (hamburgerIcon) {
          hamburgerIcon.classList.remove("is-active");
        }
        // console.log("ðŸ“‹ [HEADER] Mobile menu closed by outside click");
      }
    }
  });

  // Close mobile menu when clicking on navigation links
  if (mobileMenu) {
    const mobileNavLinks = mobileMenu.querySelectorAll("a");
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.remove("translate-x-0");
        mobileMenu.classList.add("-translate-x-full");
        if (hamburgerIcon) {
          hamburgerIcon.classList.remove("is-active");
        }
        // console.log("ðŸ“‹ [HEADER] Mobile menu closed by navigation link click");
      });
    });
  }

  // Logout functionality (only if logout button exists - when authenticated)
  if (logoutBtn) {
    logoutBtn.addEventListener("click", async () => {
      // console.log("ðŸ“‹ [HEADER] Logout button clicked");
      try {
        // console.log("ðŸ“‹ [HEADER] Sending logout request...");
        const response = await fetch("/api/auth/signout", {
          method: "POST",
        });
        // console.log("ðŸ“‹ [HEADER] Logout response status:", response.status);

        if (response.ok) {
          // console.log("ðŸ“‹ [HEADER] Logout successful, redirecting...");
          window.location.href = "/";
        } else {
          // console.error("ðŸ“‹ [HEADER] Logout failed with status:", response.status);
        }
      } catch (error) {
        console.error("ðŸ“‹ [HEADER] Logout error:", error);
      }
      if (profileDropdown) {
        profileDropdown.classList.add("hidden");
      }
    });
  }

  // Safari 18 beta fix - ensure header stays fixed to top
  function fixHeaderPosition() {
    const header = document.querySelector("header");
    if (header) {
      // Force re-apply positioning with !important
      header.style.setProperty("position", "sticky", "important");
      header.style.setProperty("top", "0", "important");
      header.style.setProperty("z-index", "50", "important"); // Increased z-index
      header.style.setProperty("transform", "translateZ(0)", "important"); // Force hardware acceleration
      header.style.setProperty("backface-visibility", "hidden", "important"); // Prevent flickering
      header.style.setProperty("will-change", "transform", "important"); // Optimize for transforms

      // Additional Safari-specific fixes
      header.style.setProperty("position", "-webkit-sticky", "important"); // Webkit fallback
      header.style.setProperty("position", "sticky", "important");

      // Force a reflow to ensure styles are applied
      header.offsetHeight;
    }
  }

  // Apply fix on load and multiple events
  fixHeaderPosition();

  // Add multiple event listeners to catch Safari 18 beta resets
  window.addEventListener("resize", fixHeaderPosition);
  window.addEventListener("orientationchange", () => {
    setTimeout(fixHeaderPosition, 100);
  });
  window.addEventListener("scroll", fixHeaderPosition);
  window.addEventListener("focus", fixHeaderPosition);
  window.addEventListener("blur", fixHeaderPosition);

  // Additional Safari mobile specific events
  window.addEventListener("touchstart", fixHeaderPosition);
  window.addEventListener("touchend", fixHeaderPosition);
  window.addEventListener("touchmove", fixHeaderPosition);
  document.addEventListener("visibilitychange", fixHeaderPosition);
  window.addEventListener("pageshow", fixHeaderPosition);
  window.addEventListener("pagehide", fixHeaderPosition);

  // More aggressive periodic check for homepage (every 1 second)
  const isHomepage = window.location.pathname === "/" || window.location.pathname === "/index.html";
  const checkInterval = isHomepage ? 1000 : 3000;
  setInterval(fixHeaderPosition, checkInterval);

  // Use MutationObserver to catch DOM changes that might reset positioning
  const headerObserver = new MutationObserver((mutations) => {
    let shouldFix = false;
    mutations.forEach((mutation) => {
      if (
        mutation.type === "attributes" &&
        (mutation.attributeName === "style" || mutation.attributeName === "class")
      ) {
        const target = mutation.target;
        if (target.tagName === "HEADER") {
          shouldFix = true;
        }
      }
    });
    if (shouldFix) {
      setTimeout(fixHeaderPosition, 50);
    }
  });

  // Start observing
  const header = document.querySelector("header");
  if (header) {
    headerObserver.observe(header, {
      attributes: true,
      attributeFilter: ["style", "class"],
    });
  }

  // console.log("ðŸ“‹ [HEADER] Header initialized with Safari 18 beta fix");
</script>

<style>
  .hamburger .line {
    width: 20px;
    background-color: currentColor;
    height: 2px;
    display: block;
    margin: 3px auto;
    border-radius: 1px;
    -webkit-transition: all 0.3s ease-in-out;
    -o-transition: all 0.3s ease-in-out;
    transition: all 0.3s ease-in-out;
  }
  #mobile-menu-btn {
    -webkit-transition: all 0.3s ease-in-out;
    -o-transition: all 0.3s ease-in-out;
    transition: all 0.3s ease-in-out;
  }

  #mobile-menu-btn.is-active {
    animation: smallbig 0.6s forwards;
  }

  #mobile-menu-btn.is-active .line:nth-child(1),
  #mobile-menu-btn.is-active .line:nth-child(2),
  #mobile-menu-btn.is-active .line:nth-child(3) {
    -webkit-transition-delay: 0.2s;
    -o-transition-delay: 0.2s;
    transition-delay: 0.2s;
  }

  #mobile-menu-btn.is-active .line:nth-child(2) {
    opacity: 0;
  }

  #mobile-menu-btn.is-active .line:nth-child(1) {
    -webkit-transform: translateY(5px) rotate(45deg);
    -ms-transform: translateY(5px) rotate(45deg);
    -o-transform: translateY(5px) rotate(45deg);
    transform: translateY(5px) rotate(45deg);
  }

  #mobile-menu-btn.is-active .line:nth-child(3) {
    -webkit-transform: translateY(-5px) rotate(-45deg);
    -ms-transform: translateY(-5px) rotate(-45deg);
    -o-transform: translateY(-5px) rotate(-45deg);
    transform: translateY(-5px) rotate(-45deg);
  }

  @keyframes smallbig {
    0%,
    100% {
      -webkit-transform: scale(1);
      -ms-transform: scale(1);
      -o-transform: scale(1);
      transform: scale(1);
    }

    50% {
      -webkit-transform: scale(0);
      -ms-transform: scale(0);
      -o-transform: scale(0);
      transform: scale(0);
    }
  }

  /* Safari 18 beta fix for header */
  header {
    position: sticky !important;
    top: 0 !important;
    z-index: 10 !important;
    transform: translateZ(0) !important; /* Force hardware acceleration */
  }
</style>
