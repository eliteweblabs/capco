---
// import { getI18N } from "@/i18n";
import BoxIcon from "./BoxIcon.astro";
import HeroButton from "../HeroButton.astro";
import Logo from "./Logo.astro";
import Auth from "./Auth.astro";
// import LanguagePicker from "../LanguagePicker.astro";
import Tooltip from "../Tooltip.astro";
import NavLi from "./NavLi.astro";
import ThemeToggle from "./ThemeToggle.astro";
// const { currentLocale } = Astro;s
// const i18n = getI18N({ currentLocale });

console.log("ðŸ“‹ [HEADER] Header component loading...");

// Check authentication
import { checkAuth } from "../../lib/auth";
const { isAuth, session, user, role } = await checkAuth(Astro.cookies);

// Get current URL and determine page type
const currentUrl = Astro.url.pathname;
console.log("ðŸ“‹ [HEADER] currentUrl:", currentUrl);
const isBackendPage =
  currentUrl.startsWith("/dashboard") ||
  currentUrl.startsWith("/project/") || // Only match /project/123, not /projects
  currentUrl.startsWith("/pdf-review") ||
  currentUrl.startsWith("/pdf-editor") ||
  currentUrl.startsWith("/admin") ||
  currentUrl.startsWith("/register") ||
  currentUrl.startsWith("/create-staff");

// Navigation schema
type UserRole = "any" | "client" | "admin" | "adminStaff";
type NavType = "frontend" | "backend";

interface NavItem {
  label: string;
  href: string;
  roles: UserRole[]; // Array of roles that can access this item
  isPrimary: boolean; // For styling primary CTA buttons
  pageType: NavType; // Frontend or backend navigation
}

const navigation: NavItem[] = [
  // Always visible - Home link for easy return to main site
  // {
  //   label: "Home",
  //   href: "/",
  //   roles: ["any"],
  //   pageType: "frontend",
  //   isPrimary: currentUrl === "/",
  // },

  // Frontend navigation (hidden on backend pages to reduce clutter)
  {
    label: "About",
    href: "/about",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/about"),
  },
  {
    label: "Projects",
    href: "/projects",
    roles: ["any"],
    pageType: "frontend",
    isPrimary: currentUrl.startsWith("/projects"),
  },

  // Backend navigation (shown on backend pages)
  {
    label: "Dashboard",
    href: "/dashboard",
    roles: ["client", "admin", "adminStaff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/dashboard"),
  },
  // {
  //   label: "PDF Review",
  //   href: "/pdf-review",
  //   roles: ["admin", "adminStaff"],
  //   type: "backend",
  // },
  {
    label: "PDF Editor",
    href: "/pdf-editor",
    roles: ["admin", "adminStaff"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/pdf-editor"),
  },
  {
    label: "User Management",
    href: "/create-staff",
    roles: ["admin"],
    pageType: "backend",
    isPrimary: currentUrl.startsWith("/create-staff"),
  },
];

// Filter navigation items based on auth state, role, and page type
function getVisibleNavItems(
  navItems: NavItem[],
  isAuth: boolean,
  userRole?: string | null,
  isBackendPage: boolean = false
): NavItem[] {
  return navItems.filter((item) => {
    // Always show Home link - users should always be able to return to main site
    if (item.href === "/") {
      return true;
    }

    // Page type filtering - hide other frontend nav on backend pages to reduce clutter
    if (isBackendPage && item.pageType === "frontend") {
      return false;
    }

    // Show backend nav only on backend pages
    if (item.pageType === "backend" && !isBackendPage) {
      return false;
    }

    // If item allows "any" role, show it based on page type rules above
    if (item.roles.includes("any")) return true;

    // If user is not authenticated, only show "any" role items
    if (!isAuth) return false;

    // Map database role to our role system
    const mappedRole: UserRole = userRole === "Admin" ? "admin" : "client";

    // Check if user's role is in the allowed roles for this item
    return item.roles.includes(mappedRole);
  });
}

const visibleNavigation = getVisibleNavItems(navigation, isAuth, role, isBackendPage);
---

<header class="sticky top-0 z-30 mb-2 bg-hub-background pb-2 pt-4 dark:bg-hub-background-dark">
  <div class="mx-6 flex items-center justify-between">
    <Logo />

    <!-- Navigation (Desktop) -->
    <nav class="hidden items-center space-x-8 md:flex">
      {
        visibleNavigation.map((item) =>
          item.isPrimary ? (
            <a
              href={item.href}
              class="inline-flex items-center rounded-lg bg-red-600 px-4 py-2 font-medium text-white transition-colors hover:bg-red-700"
            >
              {item.label}
            </a>
          ) : (
            <a
              href={item.href}
              class="font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
            >
              {item.label}
            </a>
          )
        )
      }
    </nav>

    <div class="flex items-center gap-2">
      <!-- Add User Link (Admin Only) -->
      {
        role === "Admin" && isBackendPage && (
          <Tooltip content="Add User">
            <a
              href="/create-staff"
              aria-label="btn-add-user"
              class="flex size-8 items-center justify-center rounded-full bg-blue-600 text-white transition-colors hover:bg-blue-700"
            >
              <BoxIcon name="user-plus" class="text-lg" />
            </a>
          </Tooltip>
        )
      }

      <ThemeToggle />

      {/* <LanguagePicker /> */}

      <Auth />

      {/* Mobile Menu Button (Hamburger) */}
      <button
        id="mobile-menu-btn"
        aria-label="Open mobile menu"
        class="flex size-8 items-center justify-center text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400 md:hidden"
      >
        <BoxIcon name="menu" id="hamburger-icon" class="text-xl" />
        <BoxIcon name="x" id="close-icon" class="hidden text-xl" />
      </button>
      {/* Mobile Navigation Menu */}
      <div
        id="mobile-menu"
        class="hidden border-b border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800 md:hidden"
      >
        <nav class="space-y-4 px-6 py-4">
          {/* Navigation Items */}
          {
            visibleNavigation.map((item) =>
              item.isPrimary ? (
                <a
                  href={item.href}
                  class="block w-full rounded-lg bg-red-600 px-4 py-3 text-center font-medium text-white transition-colors hover:bg-red-700"
                >
                  {item.label}
                </a>
              ) : (
                <a
                  href={item.href}
                  class="block py-2 font-medium text-gray-700 transition-colors hover:text-red-600 dark:text-gray-300 dark:hover:text-red-400"
                >
                  {item.label}
                </a>
              )
            )
          }
        </nav>
      </div>
    </div>
  </div>
</header>

<script type="module" define:vars={{ session }}>
  console.log("ðŸ“‹ [HEADER] Header script execution started");
  console.log("ðŸ“‹ [HEADER] Session data:", session);

  const profileBtn = document.getElementById("profile-btn");
  const userAvatar = document.getElementById("user-avatar");
  const fallbackIcon = userAvatar?.nextElementSibling;
  const profileDropdown = document.getElementById("profile-dropdown");
  const logoutBtn = document.getElementById("logout-btn");

  // Mobile menu elements
  const mobileMenuBtn = document.getElementById("mobile-menu-btn");
  const mobileMenu = document.getElementById("mobile-menu");
  const hamburgerIcon = document.getElementById("hamburger-icon");
  const closeIcon = document.getElementById("close-icon");

  console.log("ðŸ“‹ [HEADER] DOM elements found:", {
    profileBtn: !!profileBtn,
    userAvatar: !!userAvatar,
    fallbackIcon: !!fallbackIcon,
    profileDropdown: !!profileDropdown,
    logoutBtn: !!logoutBtn,
    mobileMenuBtn: !!mobileMenuBtn,
    mobileMenu: !!mobileMenu,
    hamburgerIcon: !!hamburgerIcon,
    closeIcon: !!closeIcon,
  });

  // Initialize mobile menu icon states
  if (hamburgerIcon && closeIcon) {
    hamburgerIcon.classList.remove("hidden");
    closeIcon.classList.add("hidden");
    console.log("ðŸ“‹ [HEADER] Mobile menu icons initialized");
  }

  function updateProfileButton(session) {
    console.log("ðŸ“‹ [HEADER] updateProfileButton called with session:", session);

    if (session && session.data.user) {
      const avatarUrl = session.data.user.user_metadata?.avatar_url;
      console.log("ðŸ“‹ [HEADER] Avatar URL:", avatarUrl);

      // Only update avatar if elements exist (user is authenticated)
      if (userAvatar && fallbackIcon) {
        if (avatarUrl) {
          userAvatar.src = avatarUrl;
          userAvatar.style.display = "block";
          fallbackIcon.style.display = "none";
          console.log("ðŸ“‹ [HEADER] Using avatar image");
        } else {
          userAvatar.style.display = "none";
          fallbackIcon.style.display = "block";
          console.log("ðŸ“‹ [HEADER] Using fallback icon");
        }
      }
      console.log("ðŸ“‹ [HEADER] Profile button configured for authenticated user");
    } else {
      console.log(
        "ðŸ“‹ [HEADER] Profile button configured for unauthenticated user - avatar elements not present"
      );
    }
  }

  // Check initial auth state
  console.log("ðŸ“‹ [HEADER] Checking initial auth state...");
  updateProfileButton(session);

  // Toggle dropdown (only if profile button exists - when authenticated)
  if (profileBtn) {
    profileBtn.addEventListener("click", (e) => {
      console.log("ðŸ“‹ [HEADER] Profile button clicked");
      e.stopPropagation();
      if (profileDropdown) {
        profileDropdown.classList.toggle("hidden");
        console.log("ðŸ“‹ [HEADER] Dropdown toggled");
      }
    });
  }

  // Close dropdown when clicking outside
  document.addEventListener("click", () => {
    if (profileDropdown) {
      console.log("ðŸ“‹ [HEADER] Document clicked, closing dropdown");
      profileDropdown.classList.add("hidden");
    }
  });

  // Mobile menu toggle functionality
  function toggleMobileMenu() {
    if (!mobileMenu || !hamburgerIcon || !closeIcon) {
      console.error("ðŸ“‹ [HEADER] Missing mobile menu elements");
      return;
    }

    const isOpen = !mobileMenu.classList.contains("hidden");

    if (isOpen) {
      // Close menu
      mobileMenu.classList.add("hidden");
      hamburgerIcon.classList.remove("hidden");
      closeIcon.classList.add("hidden");
      console.log("ðŸ“‹ [HEADER] Mobile menu closed");
    } else {
      // Open menu
      mobileMenu.classList.remove("hidden");
      hamburgerIcon.classList.add("hidden");
      closeIcon.classList.remove("hidden");
      console.log("ðŸ“‹ [HEADER] Mobile menu opened");
    }
  }

  // Mobile menu button event listener
  if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
  }

  // Close mobile menu when clicking outside or on menu links
  document.addEventListener("click", (e) => {
    if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
      // Close if clicking outside the mobile menu
      if (!mobileMenu.contains(e.target) && !mobileMenuBtn?.contains(e.target)) {
        mobileMenu.classList.add("hidden");
        if (hamburgerIcon && closeIcon) {
          hamburgerIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
        console.log("ðŸ“‹ [HEADER] Mobile menu closed by outside click");
      }
    }
  });

  // Close mobile menu when clicking on navigation links
  if (mobileMenu) {
    const mobileNavLinks = mobileMenu.querySelectorAll("a");
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.add("hidden");
        if (hamburgerIcon && closeIcon) {
          hamburgerIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
        console.log("ðŸ“‹ [HEADER] Mobile menu closed by navigation link click");
      });
    });
  }

  // Logout functionality (only if logout button exists - when authenticated)
  if (logoutBtn) {
    logoutBtn.addEventListener("click", async () => {
      console.log("ðŸ“‹ [HEADER] Logout button clicked");
      try {
        console.log("ðŸ“‹ [HEADER] Sending logout request...");
        const response = await fetch("/api/auth/signout", {
          method: "POST",
        });
        console.log("ðŸ“‹ [HEADER] Logout response status:", response.status);

        if (response.ok) {
          console.log("ðŸ“‹ [HEADER] Logout successful, redirecting...");
          window.location.href = "/";
        } else {
          console.error("ðŸ“‹ [HEADER] Logout failed with status:", response.status);
        }
      } catch (error) {
        console.error("ðŸ“‹ [HEADER] Logout error:", error);
      }
      if (profileDropdown) {
        profileDropdown.classList.add("hidden");
      }
    });
  }
</script>
