---
// Push Notification Demo Component
---

<div class="rounded-full bg-background-card p-6 shadow dark:bg-background-card-dark">
  <h3 class="mb-4 text-lg font-semibold">üîî Push Notification Demo</h3>

  <div class="space-y-4">
    <!-- Notification Permission Status -->
    <div id="permission-status" class="rounded-full bg-gray-100 p-3 dark:bg-gray-700">
      <p class="text-sm text-gray-600 dark:text-gray-400">Checking notification permissions...</p>
    </div>

    <!-- Controls -->
    <div class="flex flex-wrap gap-3">
      <button
        id="request-permission-btn"
        class="rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 disabled:opacity-50"
        disabled
      >
        Request Permission
      </button>

      <button
        id="test-local-push-btn"
        class="rounded bg-green-500 px-4 py-2 text-white hover:bg-green-600 disabled:opacity-50"
        disabled
      >
        Test Local Push
      </button>

      <button
        id="test-project-update-btn"
        class="rounded bg-purple-500 px-4 py-2 text-white hover:bg-purple-600 disabled:opacity-50"
        disabled
      >
        Demo: Project Update
      </button>

      <button
        id="test-deadline-reminder-btn"
        class="rounded bg-orange-500 px-4 py-2 text-white hover:bg-orange-600 disabled:opacity-50"
        disabled
      >
        Demo: Deadline Reminder
      </button>
    </div>

    <!-- Installation Instructions for iOS -->
    <div
      id="ios-instructions"
      class="hidden rounded-full border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20"
    >
      <h4 class="mb-2 font-semibold text-blue-800 dark:text-blue-200">üì± iOS Users:</h4>
      <p class="mb-2 text-sm text-blue-700 dark:text-blue-300">
        To enable push notifications on iOS:
      </p>
      <ol class="list-inside list-decimal space-y-1 text-sm text-blue-700 dark:text-blue-300">
        <li>Tap the Share button (square with arrow) in Safari</li>
        <li>Select "Add to Home Screen"</li>
        <li>Tap "Add"</li>
        <li>Open the app from your home screen</li>
        <li>Then try the buttons above</li>
      </ol>
    </div>

    <!-- Debug Info -->
    <details class="text-sm">
      <summary class="cursor-pointer text-gray-600 dark:text-gray-400">üõ†Ô∏è Debug Info</summary>
      <div id="debug-info" class="mt-2 rounded bg-gray-50 p-3 font-mono text-xs dark:bg-gray-900">
        Loading...
      </div>
    </details>
  </div>
</div>

<script>
  // Check if push notifications are supported
  function isPushSupported() {
    return "serviceWorker" in navigator && "Notification" in window && "PushManager" in window;
  }

  // Check if running on iOS
  function isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent);
  }

  // Check if running as standalone app (PWA)
  function isStandalone() {
    return (
      window.matchMedia("(display-mode: standalone)").matches ||
      (window.navigator as any).standalone === true
    );
  }

  // Update permission status display
  function updatePermissionStatus() {
    const statusDiv = document.getElementById("permission-status");
    const permissionState = Notification.permission;
    const isSupported = isPushSupported();
    const ios = isIOS();
    const standalone = isStandalone();

    let statusHTML = `
      <p><strong>Browser:</strong> ${navigator.userAgent.includes("Chrome") ? "Chrome" : navigator.userAgent.includes("Firefox") ? "Firefox" : navigator.userAgent.includes("Safari") ? "Safari" : "Other"}</p>
      <p><strong>Platform:</strong> ${ios ? "iOS" : "Desktop/Android"}</p>
      <p><strong>Push Support:</strong> ${isSupported ? "‚úÖ Yes" : "‚ùå No"}</p>
      <p><strong>Permission:</strong> ${permissionState}</p>
    `;

    if (ios) {
      statusHTML += `<p><strong>Standalone:</strong> ${standalone ? "‚úÖ Yes (PWA)" : "‚ùå No (Safari Tab)"}</p>`;
      if (!standalone) {
        document.getElementById("ios-instructions")?.classList.remove("hidden");
      }
    }

    if (statusDiv) statusDiv.innerHTML = statusHTML;

    // Enable/disable buttons based on status
    const canRequest = isSupported && permissionState === "default" && (!ios || standalone);
    const canSend = isSupported && permissionState === "granted" && (!ios || standalone);

    (document.getElementById("request-permission-btn") as HTMLButtonElement)!.disabled =
      !canRequest;
    (document.getElementById("test-local-push-btn") as HTMLButtonElement)!.disabled = !canSend;
    (document.getElementById("test-project-update-btn") as HTMLButtonElement)!.disabled = !canSend;
    (document.getElementById("test-deadline-reminder-btn") as HTMLButtonElement)!.disabled =
      !canSend;
  }

  // Update debug info
  function updateDebugInfo() {
    const debugDiv = document.getElementById("debug-info");
    const info = {
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      cookieEnabled: navigator.cookieEnabled,
      onLine: navigator.onLine,
      language: navigator.language,
      standalone: isStandalone(),
      displayMode: window.matchMedia("(display-mode: standalone)").matches
        ? "standalone"
        : "browser",
      notificationPermission: Notification.permission,
      pushSupported: isPushSupported(),
      serviceWorkerSupported: "serviceWorker" in navigator,
      location: window.location.href,
      timestamp: new Date().toISOString(),
    };

    if (debugDiv) {
      debugDiv.innerHTML = JSON.stringify(info, null, 2);
    }
  }

  // Request notification permission
  async function requestPermission() {
    try {
      const permission = await Notification.requestPermission();
      console.log("Permission result:", permission);
      updatePermissionStatus();

      if (permission === "granted") {
        // Also register for push if we want remote notifications later
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration && registration.pushManager) {
          try {
            const subscription = await registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey: null, // We'll add VAPID keys later for remote push
            });
            console.log("Push subscription:", subscription);
          } catch (pushError) {
            console.log(
              "Push subscription failed (this is OK for local notifications):",
              pushError
            );
          }
        }
      }
    } catch (error) {
      console.error("Error requesting permission:", error);
      alert("Error requesting permission: " + error);
    }
  }

  // Send a local push notification
  function sendLocalPush(title: string, body: string, icon?: string) {
    console.log("üîî [PUSH-DEMO] sendLocalPush called with:", { title, body, icon });
    console.log("üîî [PUSH-DEMO] Notification permission:", Notification.permission);

    if (Notification.permission === "granted") {
      console.log("üîî [PUSH-DEMO] Creating notification...");
      try {
        const notification = new Notification(title, {
          body: body,
          icon: icon || "/favicon.svg",
          badge: "/favicon.svg",
          tag: "capco-demo",
          requireInteraction: false,
        });

        console.log("‚úÖ [PUSH-DEMO] Notification created successfully");

        // Auto-close after 5 seconds
        setTimeout(() => {
          console.log("üîî [PUSH-DEMO] Auto-closing notification");
          notification.close();
        }, 5000);

        notification.onclick = function () {
          console.log("üîî [PUSH-DEMO] Notification clicked");
          window.focus();
          notification.close();
        };
      } catch (error) {
        console.error("‚ùå [PUSH-DEMO] Error creating notification:", error);
      }
    } else {
      console.log("‚ùå [PUSH-DEMO] Notification permission not granted:", Notification.permission);
    }
  }

  // Initialize the component
  function initPushDemo() {
    console.log("üîî [PUSH-DEMO] Initializing push notification demo...");

    updatePermissionStatus();
    updateDebugInfo();

    // Set up event listeners with debugging
    const requestBtn = document.getElementById("request-permission-btn") as HTMLButtonElement;
    console.log(
      "üîî [PUSH-DEMO] Request button found:",
      !!requestBtn,
      "disabled:",
      requestBtn?.disabled
    );
    requestBtn?.addEventListener("click", () => {
      console.log("üîî [PUSH-DEMO] Request permission button clicked");
      requestPermission();
    });

    const testLocalBtn = document.getElementById("test-local-push-btn") as HTMLButtonElement;
    console.log(
      "üîî [PUSH-DEMO] Test local button found:",
      !!testLocalBtn,
      "disabled:",
      testLocalBtn?.disabled
    );
    testLocalBtn?.addEventListener("click", () => {
      console.log("üîî [PUSH-DEMO] Test local push button clicked");
      sendLocalPush("üîî Test Notification", "This is a test push notification from CAPCo Fire!");
    });

    const testProjectBtn = document.getElementById("test-project-update-btn") as HTMLButtonElement;
    console.log(
      "üîî [PUSH-DEMO] Test project button found:",
      !!testProjectBtn,
      "disabled:",
      testProjectBtn?.disabled
    );
    testProjectBtn?.addEventListener("click", () => {
      console.log("üîî [PUSH-DEMO] Test project update button clicked");
      sendLocalPush(
        "üìã Project Update",
        "Your fire protection project status has been updated to 'Under Review'",
        "/img/capco-icon.svg"
      );
    });

    const testDeadlineBtn = document.getElementById(
      "test-deadline-reminder-btn"
    ) as HTMLButtonElement;
    console.log(
      "üîî [PUSH-DEMO] Test deadline button found:",
      !!testDeadlineBtn,
      "disabled:",
      testDeadlineBtn?.disabled
    );
    testDeadlineBtn?.addEventListener("click", () => {
      console.log("üîî [PUSH-DEMO] Test deadline reminder button clicked");
      sendLocalPush(
        "‚è∞ Deadline Reminder",
        "Don't forget: Your project documentation is due in 2 days",
        "/img/capco-icon.svg"
      );
    });

    // Update status periodically
    setInterval(() => {
      updatePermissionStatus();
      updateDebugInfo();
    }, 2000);
  }

  // Run when DOM is ready
  console.log("üîî [PUSH-DEMO] Script loaded, document.readyState:", document.readyState);

  if (document.readyState === "loading") {
    console.log("üîî [PUSH-DEMO] DOM still loading, adding event listener");
    document.addEventListener("DOMContentLoaded", () => {
      console.log("üîî [PUSH-DEMO] DOMContentLoaded fired");
      initPushDemo();
    });
  } else {
    console.log("üîî [PUSH-DEMO] DOM already loaded, initializing immediately");
    initPushDemo();
  }
</script>
