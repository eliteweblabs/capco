---
import BoxIcon from "./BoxIcon.astro";
import Tooltip from "./Tooltip.astro";

interface Props {
  isAuth: boolean;
  currentUser: any;
  currentRole: string | null;
  session: any;
}

const { isAuth, currentUser, currentRole, session } = Astro.props;

// Debug logging
console.log("üîç [AuthIcon] Props:", {
  isAuth,
  currentUser: !!currentUser,
  currentRole,
  session: !!session,
});

const userProfile = currentUser?.profile || null;
---

{
  isAuth ? (
    <>
      {/* Authenticated: Profile Button with Drawer */}
      <div id="profile-btn" class="text-black dark:text-white cursor-pointer">
        <img
          id="user-avatar"
          src={currentUser?.user_metadata?.avatar_url || ""}
          alt="User avatar"
          class="block size-8 rounded-full"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
        />
        <BoxIcon name="user" style="display:none;" class="bx-sm" />
      </div>

      {/* Profile Drawer */}
      <div
        id="profile-drawer"
        class="fixed inset-0 z-50 hidden overflow-y-auto"
        aria-labelledby="profile-drawer-title"
        role="dialog"
        aria-modal="true"
      >
        {/* Backdrop */}
        <div
          class="fixed inset-0 bg-gray-900 bg-opacity-50 transition-opacity"
          id="profile-drawer-backdrop"
        />

        {/* Drawer */}
        <div class="fixed right-0 top-0 z-50 h-screen w-80 transform transition-transform">
          <div class="flex h-full flex-col bg-white shadow-xl dark:bg-gray-800">
            {/* Header */}
            <div class="flex items-center justify-between border-b border-gray-200 px-4 py-6 dark:border-gray-700">
              <h2
                id="profile-drawer-title"
                class="text-lg font-semibold text-gray-900 dark:text-white"
              >
                User Menu
              </h2>
              <button
                type="button"
                id="profile-drawer-close"
                class="rounded-lg bg-transparent p-1.5 text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white"
              >
                <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path
                    fill-rule="evenodd"
                    d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                    clip-rule="evenodd"
                  />
                </svg>
              </button>
            </div>

            {/* User Info Section */}
            <div class="border-b border-gray-200 px-4 py-6 dark:border-gray-700">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <img
                    id="drawer-avatar"
                    src={currentUser?.user_metadata?.avatar_url || ""}
                    alt="User avatar"
                    class="h-12 w-12 rounded-full"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                  />
                  <BoxIcon name="user" style="display:none;" class="text-gray-400 bx-lg" />
                </div>
                <div class="ml-4">
                  <p class="text-base font-medium text-gray-900 dark:text-white">
                    {userProfile?.company_name || currentUser?.email?.split("@")[0] || "User"}
                  </p>
                  <p class="text-sm text-gray-500 dark:text-gray-400">{currentUser?.email}</p>
                  <p class="text-sm text-blue-600 dark:text-blue-400 font-medium">
                    {currentRole || "User"}
                  </p>
                </div>
              </div>
            </div>

            {/* Menu Items */}
            <div class="flex-1 overflow-y-auto px-4 py-6">
              <div class="space-y-2">
                <a
                  href="/dashboard"
                  class="flex items-center rounded-lg px-3 py-2 text-base font-medium text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
                >
                  <BoxIcon name="building" class="mr-3 bx-sm" />
                  Dashboard
                </a>

                <a
                  href="/profile"
                  class="flex items-center rounded-lg px-3 py-2 text-base font-medium text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
                >
                  <BoxIcon name="user" class="mr-3 bx-sm" />
                  My Profile
                </a>
              </div>
            </div>

            {/* Footer */}
            <div class="border-t border-gray-200 px-4 py-6 dark:border-gray-700">
              <button
                id="logout-btn"
                class="flex w-full items-center justify-center rounded-lg bg-red-600 px-3 py-2 text-base font-medium text-white hover:bg-red-700"
              >
                <BoxIcon name="log-out" class="mr-3 bx-sm" />
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  ) : (
    <>
      {/* Not Authenticated: Login Button */}
      <a href="/login" class="text-black dark:text-white" aria-label="btn-profile" id="profile-btn">
        {/* <div  class="size-8 overflow-hidden rounded-full"> */}
        <BoxIcon name="user" />
        {/* </div> */}
      </a>
    </>
  )
}

<script type="module" define:vars={{ session }}>
  // console.log("üìã [HEADER] Header script execution started");
  // console.log("üìã [HEADER] Session data:", session);

  const profileBtn = document.getElementById("profile-btn");
  const userAvatar = document.getElementById("user-avatar");
  const fallbackIcon = userAvatar?.nextElementSibling;
  const profileDrawer = document.getElementById("profile-drawer");
  const profileDrawerClose = document.getElementById("profile-drawer-close");
  const profileDrawerBackdrop = document.getElementById("profile-drawer-backdrop");
  const logoutBtn = document.getElementById("logout-btn");

  // Mobile menu elements
  const mobileMenuBtn = document.getElementById("mobile-menu-btn");
  const mobileMenu = document.getElementById("drawer-example");
  const hamburgerIcon = document.getElementById("mobile-menu-btn"); // The button IS the hamburger

  // console.log("üìã [HEADER] DOM elements found:", {
  //   profileBtn: !!profileBtn,
  //   userAvatar: !!userAvatar,
  //   fallbackIcon: !!fallbackIcon,
  //   profileDropdown: !!profileDropdown,
  //   logoutBtn: !!logoutBtn,
  //   mobileMenuBtn: !!mobileMenuBtn,
  //   mobileMenu: !!mobileMenu,
  //   hamburgerIcon: !!hamburgerIcon,
  // });

  // Initialize mobile menu icon states
  if (hamburgerIcon) {
    hamburgerIcon.classList.remove("is-active");
    // console.log("üìã [HEADER] Mobile menu icons initialized");
  }

  function updateProfileButton(session) {
    // console.log("üìã [HEADER] updateProfileButton called with session:", session);

    if (session && session.data.user) {
      const avatarUrl = session.data.user.user_metadata?.avatar_url;
      // console.log("üìã [HEADER] Avatar URL:", avatarUrl);

      // Only update avatar if elements exist (user is authenticated)
      if (userAvatar && fallbackIcon) {
        if (avatarUrl) {
          userAvatar.src = avatarUrl;
          userAvatar.style.display = "block";
          fallbackIcon.style.display = "none";
          // console.log("üìã [HEADER] Using avatar image");
        } else {
          userAvatar.style.display = "none";
          fallbackIcon.style.display = "block";
          // console.log("üìã [HEADER] Using fallback icon");
        }
      }

      // Update drawer avatar if it exists
      const drawerAvatar = document.getElementById("drawer-avatar");
      if (drawerAvatar) {
        if (avatarUrl) {
          drawerAvatar.src = avatarUrl;
          drawerAvatar.style.display = "block";
          const drawerFallback = drawerAvatar.nextElementSibling;
          if (drawerFallback) {
            drawerFallback.style.display = "none";
          }
        } else {
          drawerAvatar.style.display = "none";
          const drawerFallback = drawerAvatar.nextElementSibling;
          if (drawerFallback) {
            drawerFallback.style.display = "block";
          }
        }
      }
      // console.log("üìã [HEADER] Profile button configured for authenticated user");
    } else {
      // console.log(
      //   "üìã [HEADER] Profile button configured for unauthenticated user - avatar elements not present"
      // );
    }
  }

  // Check initial auth state
  // console.log("üìã [HEADER] Checking initial auth state...");
  // updateProfileButton(session); // Removed - let static HTML handle the display

  // Toggle profile drawer (only if profile button exists - when authenticated)
  if (profileBtn) {
    profileBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      if (profileDrawer) {
        profileDrawer.classList.remove("hidden");
        document.body.classList.add("overflow-hidden");
      }
    });
  }

  // Close drawer when clicking close button
  if (profileDrawerClose) {
    profileDrawerClose.addEventListener("click", (e) => {
      e.stopPropagation();
      if (profileDrawer) {
        profileDrawer.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
    });
  }

  // Close drawer when clicking backdrop
  if (profileDrawerBackdrop) {
    profileDrawerBackdrop.addEventListener("click", (e) => {
      e.stopPropagation();
      if (profileDrawer) {
        profileDrawer.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
    });
  }

  // Close drawer when clicking outside
  document.addEventListener("click", (e) => {
    if (profileDrawer && !profileDrawer.classList.contains("hidden")) {
      if (!profileBtn?.contains(e.target) && !profileDrawer.contains(e.target)) {
        profileDrawer.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
    }
  });

  // Close drawer on escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && profileDrawer && !profileDrawer.classList.contains("hidden")) {
      profileDrawer.classList.add("hidden");
      document.body.classList.remove("overflow-hidden");
    }
  });

  // Mobile menu toggle functionality
  function toggleMobileMenu() {
    if (!mobileMenu || !hamburgerIcon) {
      // console.error("üìã [HEADER] Missing mobile menu elements");
      return;
    }

    const isOpen = mobileMenu.classList.contains("translate-x-0");

    // console.log("üìã [HEADER] isOpen:", isOpen);
    if (isOpen) {
      // Close drawer - slide out to the left
      mobileMenu.classList.remove("translate-x-0");
      mobileMenu.classList.add("-translate-x-full");
      hamburgerIcon.classList.remove("is-active");
      // console.log("üìã [HEADER] Mobile menu closed");
    } else {
      // Open drawer - slide in from the left
      mobileMenu.classList.remove("-translate-x-full");
      mobileMenu.classList.add("translate-x-0");
      hamburgerIcon.classList.add("is-active");
      // console.log("üìã [HEADER] Mobile menu opened");
    }
  }

  // Mobile menu button event listener
  if (mobileMenuBtn) {
    mobileMenuBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });
  }

  // Close mobile menu when clicking outside or on menu links
  document.addEventListener("click", (e) => {
    if (mobileMenu && mobileMenu.classList.contains("translate-x-0")) {
      // Close if clicking outside the mobile menu
      if (!mobileMenu.contains(e.target) && !mobileMenuBtn?.contains(e.target)) {
        mobileMenu.classList.remove("translate-x-0");
        mobileMenu.classList.add("-translate-x-full");
        if (hamburgerIcon) {
          hamburgerIcon.classList.remove("is-active");
        }
        // console.log("üìã [HEADER] Mobile menu closed by outside click");
      }
    }
  });

  // Close mobile menu when clicking on navigation links
  if (mobileMenu) {
    const mobileNavLinks = mobileMenu.querySelectorAll("a");
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.remove("translate-x-0");
        mobileMenu.classList.add("-translate-x-full");
        if (hamburgerIcon) {
          hamburgerIcon.classList.remove("is-active");
        }
        // console.log("üìã [HEADER] Mobile menu closed by navigation link click");
      });
    });
  }

  // Logout functionality (only if logout button exists - when authenticated)
  if (logoutBtn) {
    logoutBtn.addEventListener("click", async () => {
      // console.log("üìã [HEADER] Logout button clicked");
      try {
        // console.log("üìã [HEADER] Sending logout request...");
        const response = await fetch("/api/auth/signout", {
          method: "POST",
        });
        // console.log("üìã [HEADER] Logout response status:", response.status);

        if (response.ok) {
          // console.log("üìã [HEADER] Logout successful, redirecting...");
          window.location.href = "/";
        } else {
          // console.error("üìã [HEADER] Logout failed with status:", response.status);
        }
      } catch (error) {
        console.error("üìã [HEADER] Logout error:", error);
      }
      if (profileDropdown) {
        profileDropdown.classList.add("hidden");
      }
    });
  }
</script>
