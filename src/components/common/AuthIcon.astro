---
import SimpleIcon from "./SimpleIcon.astro";
import Button from "./Button.astro";
import { checkAuth } from "../../lib/auth";

interface Props {
  currentUser: any;
  session: any;
  isBackend?: boolean;
}

const { currentUser } = await checkAuth(Astro.cookies);
const { session, isBackend } = Astro.props;

// Prioritize profile.avatarUrl (Supabase Storage) over user_metadata.avatarUrl (Google CDN)
const avatarUrl =
  currentUser?.profile?.avatarUrl ||
  currentUser?.user_metadata?.avatarUrl ||
  currentUser?.user_metadata?.picture;
---

{
  currentUser ? (
    <>
      {avatarUrl && avatarUrl !== "" ? (
        <button
          id="user-menu-button"
          class="dark:hover:text-primary-dark disabled avatar-button relative inline-flex items-center justify-center rounded-full border-none p-1.5 text-sm font-medium text-gray-500 opacity-100 outline-none transition-all duration-200 hover:bg-gray-100 hover:text-primary hover:shadow-none focus:outline-none focus:outline-2 focus:outline-offset-2 focus:outline-transparent focus:ring-2 focus:ring-gray-200 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50 dark:text-gray-400 dark:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700"
          style="min-width: 44px; min-height: 44px;"
          data-dropdown-toggle="accountDropdown"
          aria-expanded="false"
          data-avatar-url={avatarUrl}
        >
          <span class="sr-only">Open user menu</span>
          {/* <!-- Fallback icon (visible initially, hidden if avatar loads) --> */}
          <SimpleIcon name="user" class="avatar-fallback text-2xl" />
        </button>
      ) : (
        <SimpleIcon
          name="user"
          id="user-menu-button"
          data-dropdown-toggle="accountDropdown"
          aria-expanded="false"
          class="rounded-lg px-3 py-2 text-sm font-medium"
        >
          <span class="sr-only">Open user menu</span>
        </SimpleIcon>
      )}

      <div
        id="accountDropdown"
        class="hidden w-60 divide-y divide-gray-100 overflow-hidden overflow-y-auto rounded-lg bg-gray-100 shadow-sm dark:divide-gray-600 dark:bg-gray-700"
        data-popper-placement="bottom"
      >
        <ul class="Sh_nhSr0Y5lUywmHhhs_ p-2 text-sm font-medium text-gray-900 dark:text-white">
          <li>
            <a
              href="/profile"
              title=""
              class="align-center flex px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
            >
              <SimpleIcon name="user" class="mr-2" />
              {currentUser?.profile?.companyName || "Add Company Name"} / Profile
            </a>
          </li>
          <li>
            <a
              href="/dashboard"
              title=""
              class="align-center flex px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
            >
              <SimpleIcon name="dashboard" class="mr-2" />
              Dashboard
            </a>
          </li>
        </ul>

        <ul class="Sh_nhSr0Y5lUywmHhhs_ p-2 text-sm font-medium text-gray-900 dark:text-white">
          <li>
            <a
              id="logout-btn"
              href="#"
              title=""
              class="align-center flex px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
            >
              <SimpleIcon name="log-out" class="mr-2" />
              Sign Out
            </a>
          </li>
        </ul>
      </div>
    </>
  ) : !isBackend ? (
    <Button
      href="/auth/login"
      variant="outline"
      icon="user"
      size="xs"
      iconPosition="left"
      iconClasses="block sm:hidden mr-0 md:mr-2"
    >
      <span class="hidden sm:block">sign&nbsp;in</span>
    </Button>
  ) : null
}

<script>
  // Handle Google avatar loading errors and rate limiting (429 errors)
  document.addEventListener("DOMContentLoaded", () => {
    const avatarButton = document.querySelector(".avatar-button");

    if (avatarButton) {
      const avatarUrl = avatarButton.getAttribute("data-avatar-url");
      const fallbackIcon = avatarButton.querySelector(".avatar-fallback");

      if (avatarUrl && fallbackIcon) {
        // Test if the image can load BEFORE applying it
        const img = new Image();

        img.onload = () => {
          console.log("✅ [AUTH-ICON] Avatar loaded successfully");

          // Avatar loaded successfully - apply it as background and hide fallback
          (avatarButton as HTMLElement).style.backgroundImage = `url('${avatarUrl}')`;
          (avatarButton as HTMLElement).style.backgroundSize = "cover";
          (avatarButton as HTMLElement).style.backgroundPosition = "center";
          (avatarButton as HTMLElement).style.backgroundRepeat = "no-repeat";
          (fallbackIcon as HTMLElement).style.display = "none";
        };

        img.onerror = () => {
          console.warn(
            "⚠️ [AUTH-ICON] Avatar failed to load (likely Google rate limit 429), keeping fallback icon"
          );
          // Do nothing - fallback icon is already visible
        };

        // Start loading the image
        img.src = avatarUrl;
      }
    }
  });
</script>
