---
import BoxIcon from "./BoxIcon.astro";
import Button from "./Button.astro";

interface Props {
  currentUser: any;
  session: any;
}

const { currentUser, session } = Astro.props;
const currentRole = currentUser?.profile?.role;

// Prioritize profile.avatarUrl (Supabase Storage) over user_metadata.avatarUrl (Google CDN)
const avatarUrl =
  currentUser?.profile?.avatarUrl ||
  currentUser?.user_metadata?.avatarUrl ||
  currentUser?.user_metadata?.picture;
---

{
  currentUser ? (
    <>
      {avatarUrl && avatarUrl !== "" ? (
        <button
          id="user-menu-button"
          class="dark:hover:text-primary-dark disabled avatar-button relative inline-flex items-center justify-center rounded-full border-none p-1.5 text-sm font-medium text-black text-gray-500 opacity-100 outline-none transition-all duration-200 hover:bg-gray-100 hover:text-primary hover:shadow-none focus:outline-none focus:outline-2 focus:outline-offset-2 focus:outline-transparent focus:ring-0 focus:ring-2 focus:ring-gray-200 focus:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50 dark:text-gray-400 dark:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700"
          style="min-width: 44px; min-height: 44px;"
          data-dropdown-toggle="accountDropdown"
          aria-expanded="false"
          data-avatar-url={avatarUrl}
        >
          <span class="sr-only">Open user menu</span>
          {/* <!-- Fallback icon (visible initially, hidden if avatar loads) --> */}
          <BoxIcon name="user" class="avatar-fallback text-2xl" />
        </button>
      ) : (
        <BoxIcon
          name="user"
          variant="secondary"
          id="user-menu-button"
          dataAttributes={{
            "data-dropdown-toggle": "accountDropdown",
            "aria-expanded": "false",
          }}
          class="rounded-lg px-3 py-2 text-sm font-medium"
        >
          <span class="sr-only">Open user menu</span>
        </BoxIcon>
      )}

      <div
        id="accountDropdown"
        class="hidden w-60 divide-y divide-gray-100 overflow-hidden overflow-y-auto rounded-lg bg-gray-100 shadow-sm dark:divide-gray-600 dark:bg-gray-700"
        data-popper-placement="bottom"
      >
        <ul class="Sh_nhSr0Y5lUywmHhhs_ p-2 text-sm font-medium text-gray-900 dark:text-white">
          <li>
            <a
              href="/profile"
              title=""
              class="align-center flex px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
            >
              <svg
                class="_o2IXcpM0qnG3JPReKus E9GV5sZJIbfO_GEQ_moc text-gray-500 text-gray-900 dark:text-gray-400 dark:text-white"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  fill-rule="evenodd"
                  d="M12 20a7.966 7.966 0 0 1-5.002-1.756l.002.001v-.683c0-1.794 1.492-3.25 3.333-3.25h3.334c1.84 0 3.333 1.456 3.333 3.25v.683A7.966 7.966 0 0 1 12 20ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10c0 5.5-4.44 9.963-9.932 10h-.138C6.438 21.962 2 17.5 2 12Zm10-5c-1.84 0-3.333 1.455-3.333 3.25S10.159 13.5 12 13.5c1.84 0 3.333-1.455 3.333-3.25S13.841 7 12 7Z"
                  clip-rule="evenodd"
                />
              </svg>
              {currentUser?.profile?.companyName || "Add Company Name"} / Profile
            </a>
          </li>
          <li>
            <a
              href="/dashboard"
              title=""
              class="align-center flex px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
            >
              <svg
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  fill-rule="evenodd"
                  d="M9.586 2.586A2 2 0 0 1 11 2h2a2 2 0 0 1 2 2v.089l.473.196.063-.063a2.002 2.002 0 0 1 2.828 0l1.414 1.414a2 2 0 0 1 0 2.827l-.063.064.196.473H20a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-.089l-.196.473.063.063a2.002 2.002 0 0 1 0 2.828l-1.414 1.414a2 2 0 0 1-2.828 0l-.063-.063-.473.196V20a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-.089l-.473-.196-.063.063a2.002 2.002 0 0 1-2.828 0l-1.414-1.414a2 2 0 0 1 0-2.827l.063-.064L4.089 15H4a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h.09l.195-.473-.063-.063a2 2 0 0 1 0-2.828l1.414-1.414a2 2 0 0 1 2.827 0l.064.063L9 4.089V4a2 2 0 0 1 .586-1.414ZM8 12a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z"
                  clip-rule="evenodd"
                />
              </svg>
              Dashboard
            </a>
          </li>
        </ul>

        <ul class="Sh_nhSr0Y5lUywmHhhs_ p-2 text-sm font-medium text-gray-900 dark:text-white">
          <li>
            <a
              id="logout-btn"
              href="#"
              title=""
              class="align-center flex px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg"
            >
              <svg
                class="_o2IXcpM0qnG3JPReKus E9GV5sZJIbfO_GEQ_moc"
                aria-hidden="true"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <path
                  stroke="currentColor"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M20 12H8m12 0-4 4m4-4-4-4M9 4H7a3 3 0 0 0-3 3v10a3 3 0 0 0 3 3h2"
                />
              </svg>
              Sign Out
            </a>
          </li>
        </ul>
      </div>
    </>
  ) : (
    <Button
      href="/login"
      variant="anchor"
      icon="user"
      iconPosition="left"
      iconClasses="block sm:hidden mr-0 md:mr-2"
    >
      login
    </Button>
  )
}

<script>
  // Handle Google avatar loading errors and rate limiting (429 errors)
  document.addEventListener("DOMContentLoaded", () => {
    const avatarButton = document.querySelector(".avatar-button");

    if (avatarButton) {
      const avatarUrl = avatarButton.getAttribute("data-avatar-url");
      const fallbackIcon = avatarButton.querySelector(".avatar-fallback");

      if (avatarUrl && fallbackIcon) {
        // Test if the image can load BEFORE applying it
        const img = new Image();

        img.onload = () => {
          console.log("✅ [AUTH-ICON] Avatar loaded successfully");

          // Avatar loaded successfully - apply it as background and hide fallback
          (avatarButton as HTMLElement).style.backgroundImage = `url('${avatarUrl}')`;
          (avatarButton as HTMLElement).style.backgroundSize = "cover";
          (avatarButton as HTMLElement).style.backgroundPosition = "center";
          (avatarButton as HTMLElement).style.backgroundRepeat = "no-repeat";
          (fallbackIcon as HTMLElement).style.display = "none";
        };

        img.onerror = () => {
          console.warn(
            "⚠️ [AUTH-ICON] Avatar failed to load (likely Google rate limit 429), keeping fallback icon"
          );
          // Do nothing - fallback icon is already visible
        };

        // Start loading the image
        img.src = avatarUrl;
      }
    }
  });
</script>
