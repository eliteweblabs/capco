---
// Chat Widget Component - Fixed bottom-right floating chat
// Only visible to Admin/Staff users

interface Props {
  user?: {
    id: string;
    email: string;
  };
  role?: string;
}

const { user, role } = Astro.props;
---

<div
  id="chat-widget"
  data-user-role={role || "Client"}
  data-user-id={user?.id || "unknown"}
  data-user-name={user?.email?.split("@")[0] || "Unknown User"}
>
  <!-- Chat Icon (Always Visible) -->
  <button
    id="chat-toggle"
    class="rounded-full bg-red-600 px-4 py-3 text-white shadow-lg transition-all duration-200 hover:scale-110 hover:bg-red-700"
    title="Team Chat"
  >
    <i class="bx bx-message-rounded-dots text-xl"></i>
  </button>

  <!-- Chat Widget (Hidden by Default) -->
  <div
    id="chat-panel"
    class="h-100 absolute bottom-16 right-0 hidden w-80 rounded-lg border border-gray-200 bg-white shadow-xl dark:border-gray-700 dark:bg-gray-800"
  >
    <!-- Chat Header -->
    <div
      class="flex items-center justify-between rounded-t-lg border-b border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-700"
    >
      <div class="flex items-center space-x-2">
        <div
          class="flex h-8 w-8 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/30"
        >
          <i class="bx bx-message-rounded-dots text-red-600 dark:text-red-400"></i>
        </div>
        <div>
          <h3 class="text-sm font-medium text-gray-900 dark:text-white">Team Chat</h3>
          <div class="group relative">
            <p class="cursor-help text-xs text-gray-500 dark:text-gray-400" id="online-count">
              0 online
            </p>
            <!-- Online users tooltip -->
            <div
              class="absolute bottom-full left-0 z-50 mb-2 hidden min-w-32 rounded-lg bg-gray-800 p-2 text-xs text-white shadow-lg group-hover:block"
            >
              <div class="mb-1 font-medium">Online Users:</div>
              <div id="online-users-list" class="space-y-1">
                <div class="text-gray-300">No users online</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <button
        id="chat-close"
        class="text-gray-400 transition-colors hover:text-gray-600 dark:hover:text-gray-300"
      >
        <i class="bx bx-x text-xl"></i>
      </button>
    </div>

    <!-- Chat Messages -->
    <div class="h-64 flex-1 space-y-3 overflow-y-auto p-4" id="chat-messages">
      <div class="py-8 text-center text-sm text-gray-500 dark:text-gray-400">
        <i class="bx bx-message-rounded-dots mx-auto mb-2 text-2xl"></i>
        <p>Start chatting with your team!</p>
      </div>
    </div>

    <!-- Typing Indicator -->
    <div id="typing-indicator" class="hidden px-4 py-2 text-xs text-gray-500 dark:text-gray-400">
      <span class="typing-text">Someone is typing...</span>
    </div>

    <!-- Chat Input -->
    <div class="border-t border-gray-200 p-4 dark:border-gray-700">
      <div class="flex space-x-2">
        <input
          type="text"
          id="chat-input"
          placeholder="Type your message..."
          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          maxlength="500"
        />
        <button
          id="chat-send"
          class="rounded-lg bg-red-600 px-4 py-2 text-sm text-white transition-colors hover:bg-red-700 disabled:cursor-not-allowed disabled:opacity-50"
          disabled
        >
          <i class="bx bx-send"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Chat Widget Functionality
  let socket: any = null;
  let isConnected = false;
  let currentUser: any = null;
  let typingTimeout: any = null;
  let onlineUsers = new Map(); // Map of userId -> {id, name, role}
  let isInitialized = false; // Prevent multiple initializations

  // Initialize chat widget
  function initializeChat() {
    // Prevent multiple initializations
    if (isInitialized) {
      console.log("ðŸ”” [CHAT] Chat widget already initialized, skipping");
      return;
    }

    console.log("ðŸ”” [CHAT] Initializing chat widget");

    // Check if user is Admin/Staff
    const chatWidget = document.getElementById("chat-widget");
    if (!chatWidget) {
      console.log("ðŸ”” [CHAT] Chat widget element not found!");
      return;
    }

    console.log("ðŸ”” [CHAT] Chat widget element found:", chatWidget);
    console.log("ðŸ”” [CHAT] All data attributes:", chatWidget.dataset);

    const userRole = chatWidget.dataset.userRole || "Client";
    const userId = chatWidget.dataset.userId || "unknown";
    const userName = chatWidget.dataset.userName || "Unknown User";

    console.log("ðŸ”” [CHAT] User role from data attribute:", userRole);
    console.log("ðŸ”” [CHAT] User ID:", userId);
    console.log("ðŸ”” [CHAT] User name:", userName);

    if (userRole !== "Admin" && userRole !== "Staff") {
      console.log("ðŸ”” [CHAT] User not Admin/Staff, hiding chat widget");
      chatWidget.classList.add("hidden");
      return;
    }

    console.log("ðŸ”” [CHAT] User is Admin/Staff, showing chat widget");

    // Get current user info from data attributes
    currentUser = {
      id: userId,
      name: userName,
      role: userRole,
    };

    console.log("ðŸ”” [CHAT] Current user:", currentUser);

    // Setup event listeners
    setupChatEvents();

    // Connect to chat server
    connectToChat();

    // Mark as initialized
    isInitialized = true;
    console.log("ðŸ”” [CHAT] Chat widget initialization complete");
  }

  // Setup chat event listeners
  function setupChatEvents() {
    const chatToggle = document.getElementById("chat-toggle");
    const chatClose = document.getElementById("chat-close");
    const chatInput = document.getElementById("chat-input");
    const chatSend = document.getElementById("chat-send");

    // Toggle chat panel
    chatToggle?.addEventListener("click", () => {
      const chatPanel = document.getElementById("chat-panel");
      chatPanel?.classList.toggle("hidden");

      if (!chatPanel?.classList.contains("hidden")) {
        chatInput?.focus();
      }
    });

    // Close chat panel
    chatClose?.addEventListener("click", () => {
      document.getElementById("chat-panel")?.classList.add("hidden");
    });

    // Handle input changes
    chatInput?.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      const sendBtn = document.getElementById("chat-send") as HTMLButtonElement;

      // Enable/disable send button
      sendBtn.disabled = !target.value.trim();

      // Send typing indicator
      if (socket && isConnected) {
        socket.emit("typing", { userId: currentUser.id, userName: currentUser.name });
      }
    });

    // Handle send button
    chatSend?.addEventListener("click", sendMessage);

    // Handle Enter key
    chatInput?.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  }

  // Connect to chat server
  function connectToChat() {
    try {
      // Load Socket.io from CDN (matching server version)
      const script = document.createElement("script");
      script.src = "https://cdn.socket.io/4.8.1/socket.io.min.js";
      script.onload = () => {
        console.log("ðŸ”” [CHAT] Socket.io loaded, connecting to server");
        connectSocket();
      };
      document.head.appendChild(script);
    } catch (error) {
      console.error("ðŸ”” [CHAT] Error loading Socket.io:", error);
    }
  }

  // Connect socket to server
  function connectSocket() {
    try {
      // Determine chat server URL based on environment
      const chatServerUrl =
        window.location.hostname === "localhost" ? "http://localhost:8080" : window.location.origin;

      console.log("ðŸ”” [CHAT] Attempting to connect to chat server at", chatServerUrl);

      socket = (window as any).io(chatServerUrl, {
        transports: ["websocket", "polling"],
        upgrade: true,
        rememberUpgrade: true,
        timeout: 20000,
        forceNew: true,
      });

      socket.on("connect", () => {
        console.log("ðŸ”” [CHAT] Connected to chat server");
        isConnected = true;

        // Join chat room
        console.log("ðŸ”” [CHAT] Joining chat room with user data:", {
          userId: currentUser.id,
          userName: currentUser.name,
          userRole: currentUser.role,
        });

        // Add current user to online users
        onlineUsers.set(currentUser.id, {
          id: currentUser.id,
          name: currentUser.name,
          role: currentUser.role,
        });

        console.log("ðŸ”” [CHAT] Added current user to online users:", currentUser);
        console.log("ðŸ”” [CHAT] Current online users:", Array.from(onlineUsers.values()));

        socket.emit("join", {
          userId: currentUser.id,
          userName: currentUser.name,
          userRole: currentUser.role,
        });

        // Update online count after joining
        updateOnlineCount();
      });

      socket.on("connect_error", (error: any) => {
        console.error("ðŸ”” [CHAT] Connection error:", error);
        console.error("ðŸ”” [CHAT] Error details:", {
          message: error.message,
          description: error.description,
          context: error.context,
        });

        // Try to reconnect after a delay
        setTimeout(() => {
          console.log("ðŸ”” [CHAT] Attempting to reconnect...");
          socket.connect();
        }, 5000);
      });

      socket.on("disconnect", () => {
        console.log("ðŸ”” [CHAT] Disconnected from chat server");
        isConnected = false;
      });

      socket.on("userJoined", (data: any) => {
        console.log("ðŸ”” [CHAT] User joined:", data);
        const userId = data.userId || data.user_id || "unknown";
        const userName = data.userName || data.user_name || "Unknown User";
        const userRole = data.userRole || data.user_role || "User";

        onlineUsers.set(userId, { id: userId, name: userName, role: userRole });
        console.log("ðŸ”” [CHAT] User joined, online users:", Array.from(onlineUsers.values()));
        updateOnlineCount();
        addSystemMessage(`${userName} joined the chat`);
      });

      socket.on("userLeft", (data: any) => {
        console.log("ðŸ”” [CHAT] User left:", data);
        const userId = data.userId || data.user_id || "unknown";
        const userName = data.userName || data.user_name || "Unknown User";

        onlineUsers.delete(userId);
        console.log("ðŸ”” [CHAT] User left, online users:", Array.from(onlineUsers.values()));
        updateOnlineCount();
        addSystemMessage(`${userName} left the chat`);
      });

      socket.on("message", (data: any) => {
        console.log("ðŸ”” [CHAT] New message:", data);
        addMessage(data);
      });

      socket.on("chatHistory", (messages: any[]) => {
        console.log("ðŸ”” [CHAT] Received chat history:", messages.length, "messages");
        console.log("ðŸ”” [CHAT] Messages data:", messages);

        // Clear existing messages first
        const messagesContainer = document.getElementById("chat-messages");
        if (messagesContainer) {
          messagesContainer.innerHTML = "";
        }

        // Add each message from history
        messages.forEach((msg, index) => {
          console.log(`ðŸ”” [CHAT] Adding message ${index + 1}:`, msg);
          addMessage(msg);
        });

        console.log("ðŸ”” [CHAT] Chat history loaded successfully");
      });

      socket.on("typing", (data: any) => {
        const userId = data.userId || data.user_id || "unknown";
        const userName = data.userName || data.user_name || "Unknown User";
        if (userId !== currentUser.id) {
          showTypingIndicator(userName);
        }
      });

      socket.on("stopTyping", (data: any) => {
        const userId = data.userId || data.user_id || "unknown";
        if (userId !== currentUser.id) {
          hideTypingIndicator();
        }
      });
    } catch (error) {
      console.error("ðŸ”” [CHAT] Error connecting socket:", error);
    }
  }

  // Send message
  function sendMessage() {
    const input = document.getElementById("chat-input") as HTMLInputElement;
    const message = input.value.trim();

    if (!message || !socket || !isConnected) return;

    const messageData = {
      userId: currentUser.id,
      userName: currentUser.name,
      userRole: currentUser.role,
      message: message,
      timestamp: new Date().toISOString(),
    };

    socket.emit("message", messageData);
    input.value = "";

    // Disable send button
    const sendBtn = document.getElementById("chat-send") as HTMLButtonElement;
    sendBtn.disabled = true;

    // Stop typing indicator
    if (typingTimeout) {
      clearTimeout(typingTimeout);
    }
    typingTimeout = setTimeout(() => {
      if (socket && isConnected) {
        socket.emit("stopTyping", { userId: currentUser.id });
      }
    }, 1000);
  }

  // Add message to chat
  function addMessage(data: any) {
    console.log("ðŸ”” [CHAT] addMessage called with:", data);

    const messagesContainer = document.getElementById("chat-messages");
    if (!messagesContainer) {
      console.error("ðŸ”” [CHAT] Messages container not found!");
      return;
    }

    console.log("ðŸ”” [CHAT] Messages container found, adding message");

    // Handle both camelCase and snake_case field names from database
    const userName = data.userName || data.user_name || "Unknown User";
    const userId = data.userId || data.user_id || "unknown";
    const message = data.message || "";
    const timestamp = data.timestamp || new Date().toISOString();

    const isOwnMessage = userId === currentUser.id;
    const messageElement = document.createElement("div");
    messageElement.className = `flex ${isOwnMessage ? "justify-end" : "justify-start"}`;

    messageElement.innerHTML = `
      <div class="max-w-xs ${isOwnMessage ? "bg-red-600 text-white" : "bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white"} rounded-lg px-3 py-2">
        <div class="flex items-center space-x-2 mb-1">
          <span class="text-xs font-medium">${userName}</span>
          <span class="text-xs opacity-75">${new Date(timestamp).toLocaleTimeString()}</span>
        </div>
        <p class="text-sm">${message}</p>
      </div>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Add system message
  function addSystemMessage(message: string) {
    const messagesContainer = document.getElementById("chat-messages");
    if (!messagesContainer) return;

    const messageElement = document.createElement("div");
    messageElement.className = "text-center";
    messageElement.innerHTML = `
      <span class="text-xs text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded-full">
        ${message}
      </span>
    `;

    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Show typing indicator
  function showTypingIndicator(userName: string) {
    const indicator = document.getElementById("typing-indicator");
    const typingText = document.querySelector(".typing-text");

    if (indicator && typingText) {
      typingText.textContent = `${userName} is typing...`;
      indicator.classList.remove("hidden");
    }
  }

  // Hide typing indicator
  function hideTypingIndicator() {
    const indicator = document.getElementById("typing-indicator");
    indicator?.classList.add("hidden");
  }

  // Update online count and show usernames
  function updateOnlineCount() {
    const countElement = document.getElementById("online-count");
    const usersListElement = document.getElementById("online-users-list");

    if (countElement) {
      if (onlineUsers.size === 0) {
        countElement.textContent = "0 online";
      } else if (onlineUsers.size === 1) {
        const user = Array.from(onlineUsers.values())[0];
        countElement.textContent = `${user.name} online`;
      } else if (onlineUsers.size === 2) {
        const users = Array.from(onlineUsers.values());
        countElement.textContent = `${users[0].name} and ${users[1].name} online`;
      } else {
        const users = Array.from(onlineUsers.values());
        const firstTwo = users
          .slice(0, 2)
          .map((u) => u.name)
          .join(", ");
        countElement.textContent = `${firstTwo} and ${onlineUsers.size - 2} more online`;
      }
    }

    // Update the online users list in the tooltip
    if (usersListElement) {
      if (onlineUsers.size === 0) {
        usersListElement.innerHTML = '<div class="text-gray-300">No users online</div>';
      } else {
        const users = Array.from(onlineUsers.values());
        usersListElement.innerHTML = users
          .map(
            (user) =>
              `<div class="flex items-center space-x-2">
            <div class="w-2 h-2 bg-green-400 rounded-full"></div>
            <span>${user.name}</span>
            <span class="text-gray-400 text-xs">(${user.role})</span>
          </div>`
          )
          .join("");
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    console.log("ðŸ”” [CHAT] DOM Content Loaded");
    // Wait a bit for other scripts to load
    setTimeout(initializeChat, 1000);
  });

  // Also initialize when window loads (fallback)
  window.addEventListener("load", () => {
    console.log("ðŸ”” [CHAT] Window Loaded");
    if (!isInitialized) {
      setTimeout(initializeChat, 500);
    }
  });
</script>
