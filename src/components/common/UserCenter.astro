---
// User center component for header
import BoxIcon from "./BoxIcon.astro";
import Button from "./Button.astro";

const {
  user,
  currentRole,
  currentUser,
  assignedProjects,
  assignedProjectsCount = 0,
  isAuth,
  desktopNavigationHTML,
  visibleNavItems,
} = Astro.props;

console.log("üîç [UserCenter] isAuth:", isAuth);
// Fetch projects assigned to current user
---

<div
  id="drawer-user-center"
  class="fixed right-0 top-0 z-50 h-screen w-80 translate-x-full overflow-y-auto bg-white p-4 transition-transform dark:bg-gray-800"
  tabindex="-1"
  aria-labelledby="drawer-right-label"
>
  <button
    type="button"
    data-drawer-hide="drawer-user-center"
    aria-controls="drawer-user-center"
    class="absolute end-2.5 top-2.5 inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white"
  >
    <svg
      class="h-3 w-3"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 14 14"
    >
      <path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
    </svg>
    <span class="sr-only">Close menu</span>
  </button>
  <!-- Header -->
  {
    isAuth && (
      <div class="mb-6">
        {/* <!-- User Info Section --> */}
        <div class="border-b border-gray-200 px-4 py-3 dark:border-gray-700">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <img
                id="dropdown-avatar"
                src=""
                alt="User avatar"
                class="h-10 w-10 rounded-full"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
              />
              <BoxIcon name="user" style="display:none;" class="bx-sm text-gray-400" />
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium text-gray-900 dark:text-white">
                {currentUser?.company_name || currentUser?.email?.split("@")[0] || "User"}
              </p>
              <p class="text-xs text-gray-500 dark:text-gray-400">{currentUser?.email}</p>
              <p class="text-xs font-medium text-blue-600 dark:text-blue-400">
                {currentRole || "User"}
              </p>
            </div>
          </div>
          <Button href="/profile" variant="anchor" size="sm">
            Edit Profile
          </Button>
        </div>
      </div>
    )
  }

  {
    isAuth && (
      <div class="mb-6">
        <div class="py-1">
          <Button
            href="/dashboard#new-project"
            variant="secondary"
            size="sm"
            icon="plus"
            iconPosition="left"
            fullWidth
            data-drawer-hide="drawer-user-center"
            aria-controls="drawer-user-center"
          >
            New Project
          </Button>
        </div>

        <div class="py-1">
          <Button
            href="/dashboard"
            variant="primary"
            size="sm"
            icon="dashboard"
            iconPosition="left"
            fullWidth
          >
            Dashboard
          </Button>
        </div>
      </div>
    )
  }

  {
    isAuth && (
      <div class="mb-6">
        <div class="my-6 text-black dark:text-white">
          {currentRole === "Client" ? "Your Projects: " : "Assigned Projects: "}(
          {assignedProjectsCount})
          {assignedProjectsCount > 0 ? (
            <div class="space-y-2 overflow-y-auto">
              {assignedProjects.slice(0, 5).map((project: any) => (
                <a
                  href={`/project/${project.id}`}
                  class="block rounded-lg border border-gray-200 p-3 transition-colors hover:bg-gray-50 dark:border-gray-700 dark:hover:bg-gray-700"
                >
                  <div class="flex items-start justify-between">
                    <div class="min-w-0 flex-1">
                      <p class="truncate text-sm font-medium text-gray-900 dark:text-white">
                        {project.title || "Untitled Project"}
                      </p>
                      <p class="truncate text-xs text-gray-500 dark:text-gray-400">
                        {project.address || "No address"}
                      </p>
                      <p class="text-xs text-gray-400 dark:text-gray-500">
                        Status: {project.status || "Unknown"}
                      </p>
                    </div>
                    <div class="ml-2 flex-shrink-0">
                      <span class="inline-flex items-center rounded-full bg-blue-100 px-2 py-1 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                        {project.comment_count || 0} comments
                      </span>
                    </div>
                  </div>
                </a>
              ))}
            </div>
          ) : (
            <div class="py-4 text-center">
              <p class="text-sm text-gray-500 dark:text-gray-400">No projects assigned to you</p>
            </div>
          )}
        </div>
      </div>
    )
  }

  <!-- <nav class="mb-6 space-y-2">
    {
      visibleNavigation &&
        visibleNavigation.map((item: any) =>
          item.isPrimary ? (
            <a
              href={item.href}
              class="block w-full px-4 py-3 text-center font-medium text-black dark:text-white"
            >
              {item.label}
            </a>
          ) : (
            <a
              href={item.href}
              class="block w-full px-4 py-3 text-center font-medium text-black dark:text-white"
            >
              {item.label}
            </a>
          )
        )
    }
  </nav> -->

  <!-- Alternative: Generated Navigation HTML (optional) -->
  {
    desktopNavigationHTML && (
      <div class="mb-6 block md:hidden">
        <div class="space-y-1" set:html={desktopNavigationHTML} />
      </div>
    )
  }

  {
    isAuth && (
      <div class="space-y-2">
        <Button
          id="logout-btn"
          variant="outline"
          size="sm"
          icon="log-out"
          iconPosition="left"
          fullWidth
          class="flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-200 dark:hover:bg-gray-700"
        >
          Logout
        </Button>
      </div>
    )
  }
</div>

<script>
  const logoutBtn = document.getElementById("logout-btn");

  // Logout functionality (only if logout button exists - when authenticated)
  if (logoutBtn) {
    logoutBtn.addEventListener("click", async () => {
      // console.log("üìã [HEADER] Logout button clicked");
      try {
        // console.log("üìã [HEADER] Sending logout request...");
        const response = await fetch("/api/auth/signout", {
          method: "POST",
        });
        // console.log("üìã [HEADER] Logout response status:", response.status);

        if (response.ok) {
          // console.log("üìã [HEADER] Logout successful, redirecting...");
          window.location.href = "/";
        } else {
          // console.error("üìã [HEADER] Logout failed with status:", response.status);
        }
      } catch (error) {
        console.error("üìã [HEADER] Logout error:", error);
      }
    });
  }
</script>
