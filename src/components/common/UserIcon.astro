---
import Tooltip from "./Tooltip.astro";
import { validateAvatarUrl, getSafeAvatarUrl } from "../../lib/avatar-utils";

export interface Props {
  user?: {
    id: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    avatarUrl?: string;
    companyName?: string;
  };
  users?: Array<
    | {
        id: string;
        firstName?: string;
        lastName?: string;
        email?: string;
        avatarUrl?: string;
        companyName?: string;
      }
    | null
    | undefined
  >;
  size?: "sm" | "md" | "lg";
  showTooltip?: boolean;
  maxDisplay?: number;
  tooltipPosition?: "top" | "bottom" | "left" | "right";
}

const {
  user,
  users,
  size = "md",
  showTooltip = true,
  maxDisplay = 3,
  tooltipPosition = "top",
} = Astro.props;

// Determine which users to display
const displayUsers = users || (user ? [user] : []);
// Filter out null/undefined users and get valid users
const validUsers = displayUsers.filter((userItem) => userItem && userItem.id) as Array<{
  id: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  avatarUrl?: string;
  companyName?: string;
}>;
const visibleUsers = validUsers.slice(0, maxDisplay);
const remainingCount = validUsers.length - maxDisplay;

// Size classes
const sizeClasses = {
  sm: "w-6 h-6 text-xs",
  md: "w-8 h-8 text-sm",
  lg: "w-12 h-12 text-base",
};
---

<div class="flex items-center -space-x-2">
  {
    validUsers.length === 0 ? (
      <div
        class={`${sizeClasses[size]} rounded-full border-2 border-white shadow-sm bg-gray-300 flex items-center justify-center text-gray-600 font-medium`}
      >
        ?
      </div>
    ) : (
      visibleUsers.map((userItem, index) => {
        const fullName =
          `${userItem.firstName || ""} ${userItem.lastName || ""}`.trim() ||
          userItem.companyName ||
          "User";
        const initials = fullName
          .split(" ")
          .map((name) => name.charAt(0))
          .join("")
          .toUpperCase()
          .slice(0, 2);

        const tooltipText = `${fullName}${userItem.email ? `\n${userItem.email}` : ""}`;

        return (
          <Tooltip
            text={tooltipText}
            position={tooltipPosition}
            disabled={!showTooltip}
            tooltipClass="whitespace-pre-line"
          >
            {(() => {
              const safeAvatarUrl = getSafeAvatarUrl(userItem.avatarUrl);
              const shouldShowAvatar =
                safeAvatarUrl && !validateAvatarUrl(safeAvatarUrl).shouldUseFallback;

              if (shouldShowAvatar) {
                return (
                  <div
                    class={`${sizeClasses[size]} rounded-full border-2 border-white shadow-sm cursor-pointer user-icon-avatar`}
                    data-avatar-url={safeAvatarUrl}
                    data-user-name={fullName}
                  >
                    <div
                      class={`${sizeClasses[size]} rounded-full border-2 border-white shadow-sm bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium user-icon-fallback`}
                    >
                      {initials}
                    </div>
                  </div>
                );
              } else {
                return (
                  <div
                    class={`${sizeClasses[size]} rounded-full border-2 border-white shadow-sm bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-medium cursor-pointer`}
                  >
                    {initials}
                  </div>
                );
              }
            })()}
          </Tooltip>
        );
      })
    )
  }

  {
    remainingCount > 0 && (
      <Tooltip
        text={`+${remainingCount} more user${remainingCount > 1 ? "s" : ""}`}
        position={tooltipPosition}
        disabled={!showTooltip}
      >
        <div
          class={`${sizeClasses[size]} rounded-full border-2 border-white shadow-sm bg-gray-500 flex items-center justify-center text-white font-medium cursor-pointer`}
        >
          +{remainingCount}
        </div>
      </Tooltip>
    )
  }
</div>

<script>
  // Handle avatar loading errors for UserIcon components
  document.addEventListener("DOMContentLoaded", () => {
    const avatarContainers = document.querySelectorAll(".user-icon-avatar");

    avatarContainers.forEach((container) => {
      const avatarUrl = container.getAttribute("data-avatar-url");
      const fallbackIcon = container.querySelector(".user-icon-fallback");

      if (avatarUrl && fallbackIcon) {
        // Test if the image can load BEFORE applying it
        const img = new Image();

        img.onload = () => {
          console.log("✅ [USER-ICON] Avatar loaded successfully:", avatarUrl);

          // Avatar loaded successfully - apply it as background and hide fallback
          (container as HTMLElement).style.backgroundImage = `url('${avatarUrl}')`;
          (container as HTMLElement).style.backgroundSize = "cover";
          (container as HTMLElement).style.backgroundPosition = "center";
          (container as HTMLElement).style.backgroundRepeat = "no-repeat";
          (fallbackIcon as HTMLElement).style.display = "none";
        };

        img.onerror = () => {
          console.warn("⚠️ [USER-ICON] Avatar failed to load, keeping fallback icon:", avatarUrl);
          // Do nothing - fallback icon is already visible
        };

        // Start loading the image
        img.src = avatarUrl;
      }
    });
  });
</script>
