---
import BoxIcon from "./BoxIcon.astro";
import Tooltip from "./Tooltip.astro";
---

<div id="theme-toggle-wrapper">
  <div>
    <input type="checkbox" class="theme-toggle-checkbox" id="chk" />
    <label id="theme-toggle-label" for="chk">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        class="icon-tabler icon-tabler-sun"
        width="15px"
        height="15px"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <circle cx="12" cy="12" r="4"></circle>
        <path
          d="M3 12h1m8 -9v1m8 8h1m-9 8v1m-6.4 -15.4l.7 .7m12.1 -.7l-.7 .7m0 11.4l.7 .7m-12.1 -.7l-.7 .7"
        ></path>
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
        class="icon-tabler icon-tabler-moon"
        width="15"
        height="15"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z"
        ></path>
      </svg>
      <div id="theme-toggle-ball">
        <span class="sr-only">Use dark theme</span>
      </div>
    </label>
  </div>
</div>

<Tooltip content="Toggle Theme" id="toggle-theme" class="text-black dark:text-white">
  <BoxIcon name="sun" id="moon-icon" class="hidden size-4 dark:block" />
  <BoxIcon name="moon" id="sun-icon" class="block size-4 dark:hidden" />
</Tooltip>

<!-- Theme initialization script - runs immediately to prevent flash -->
<script>
  // Global theme manager
  window.ThemeManager = (function () {
    const storageKey = "theme";
    const htmlElement = document.documentElement;

    console.log("ðŸŽ¨ [THEME] Theme manager initializing...");

    function applyTheme(theme: string) {
      if (theme === "dark") {
        htmlElement.classList.remove("light");
        htmlElement.classList.add("dark");
        localStorage.setItem(storageKey, "dark");
        console.log("ðŸŽ¨ [THEME] Applied dark theme");
      } else {
        htmlElement.classList.remove("dark");
        htmlElement.classList.add("light");
        localStorage.setItem(storageKey, "light");
        console.log("ðŸŽ¨ [THEME] Applied light theme");
      }
    }

    function getCurrentTheme() {
      return htmlElement.classList.contains("dark") ? "dark" : "light";
    }

    function initializeTheme() {
      const savedTheme = localStorage.getItem(storageKey);
      let currentTheme;

      if (savedTheme) {
        currentTheme = savedTheme;
        console.log("ðŸŽ¨ [THEME] Using saved theme:", currentTheme);
      } else {
        currentTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
        console.log("ðŸŽ¨ [THEME] Using system preference:", currentTheme);
      }

      applyTheme(currentTheme);
      console.log("ðŸŽ¨ [THEME] Initial theme applied:", currentTheme);
    }

    function toggle() {
      const newTheme = getCurrentTheme() === "dark" ? "light" : "dark";
      applyTheme(newTheme);
      console.log("ðŸŽ¨ [THEME] Theme toggled to:", newTheme);
    }

    // Initialize immediately
    initializeTheme();

    // Return public API
    return {
      toggle,
      applyTheme,
      getCurrentTheme,
    };
  })();

  // Theme toggle functionality using the global ThemeManager
  document.addEventListener("DOMContentLoaded", function () {
    const themeToggle = document.getElementById("toggle-theme");

    console.log("ðŸŽ¨ [THEME] Setting up theme toggle button");

    // Theme toggle button click handler
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        window.ThemeManager.toggle();
      });
      console.log("ðŸŽ¨ [THEME] Theme toggle button connected");
    } else {
      console.warn("ðŸŽ¨ [THEME] Theme toggle button not found");
    }

    // Listen for system color scheme changes
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (event) => {
      const currentSavedTheme = localStorage.getItem("theme");
      // Only apply system change if user hasn't set a manual preference
      if (!currentSavedTheme) {
        window.ThemeManager.applyTheme(event.matches ? "dark" : "light");
        console.log(
          "ðŸŽ¨ [THEME] Applied system preference change:",
          event.matches ? "dark" : "light"
        );
      }
    });
  });

  // TypeScript declaration for global ThemeManager
  declare global {
    interface Window {
      ThemeManager: {
        toggle: () => void;
        applyTheme: (theme: string) => void;
        getCurrentTheme: () => string;
      };
    }
  }
</script>
