---
import BoxIcon from "../BoxIcon.astro";
import HeroButton from "../HeroButton.astro";
import Tooltip from "../Tooltip.astro";
---

<Tooltip content="Toggle Theme">
  <HeroButton aria-label="btn-theme" id="toggle-theme" class="size-8">
    <BoxIcon name="sun" id="sun-icon" class="block size-5 dark:hidden" />
    <BoxIcon name="moon" id="moon-icon" class="hidden size-5 dark:block" />
  </HeroButton>
</Tooltip>

<!-- Theme initialization script - runs immediately to prevent flash -->
<script>
  // Global theme manager
  window.ThemeManager = (function () {
    const storageKey = "theme";
    const htmlElement = document.documentElement;

    console.log("ðŸŽ¨ [THEME] Theme manager initializing...");

    function applyTheme(theme: string) {
      if (theme === "dark") {
        htmlElement.classList.remove("light");
        htmlElement.classList.add("dark");
        localStorage.setItem(storageKey, "dark");
        console.log("ðŸŽ¨ [THEME] Applied dark theme");
      } else {
        htmlElement.classList.remove("dark");
        htmlElement.classList.add("light");
        localStorage.setItem(storageKey, "light");
        console.log("ðŸŽ¨ [THEME] Applied light theme");
      }
    }

    function getCurrentTheme() {
      return htmlElement.classList.contains("dark") ? "dark" : "light";
    }

    function initializeTheme() {
      const savedTheme = localStorage.getItem(storageKey);
      let currentTheme;

      if (savedTheme) {
        currentTheme = savedTheme;
        console.log("ðŸŽ¨ [THEME] Using saved theme:", currentTheme);
      } else {
        currentTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
        console.log("ðŸŽ¨ [THEME] Using system preference:", currentTheme);
      }

      applyTheme(currentTheme);
      console.log("ðŸŽ¨ [THEME] Initial theme applied:", currentTheme);
    }

    function toggle() {
      const newTheme = getCurrentTheme() === "dark" ? "light" : "dark";
      applyTheme(newTheme);
      console.log("ðŸŽ¨ [THEME] Theme toggled to:", newTheme);
    }

    // Initialize immediately
    initializeTheme();

    // Return public API
    return {
      toggle,
      applyTheme,
      getCurrentTheme,
    };
  })();

  // Theme toggle functionality using the global ThemeManager
  document.addEventListener("DOMContentLoaded", function () {
    const themeToggle = document.getElementById("toggle-theme");

    console.log("ðŸŽ¨ [THEME] Setting up theme toggle button");

    // Theme toggle button click handler
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        window.ThemeManager.toggle();
      });
      console.log("ðŸŽ¨ [THEME] Theme toggle button connected");
    } else {
      console.warn("ðŸŽ¨ [THEME] Theme toggle button not found");
    }

    // Listen for system color scheme changes
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (event) => {
      const currentSavedTheme = localStorage.getItem("theme");
      // Only apply system change if user hasn't set a manual preference
      if (!currentSavedTheme) {
        window.ThemeManager.applyTheme(event.matches ? "dark" : "light");
        console.log(
          "ðŸŽ¨ [THEME] Applied system preference change:",
          event.matches ? "dark" : "light"
        );
      }
    });
  });

  // TypeScript declaration for global ThemeManager
  declare global {
    interface Window {
      ThemeManager: {
        toggle: () => void;
        applyTheme: (theme: string) => void;
        getCurrentTheme: () => string;
      };
    }
  }
</script>
