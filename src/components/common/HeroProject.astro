---
interface Props {
  title: string;
  description: string;
  statusColor?: string;
  projectId?: string;
  currentStatusInt?: string;
  currentStatusName?: string;
  currentStatusTab?: string;
  currentRole?: string;
  project?: any;
  statuses?: any; // Accept statuses object for slot machine picker
  authorProfile?: any;
  staffOptions?: any;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
}

const {
  title,
  description,
  currentRole,
  statusColor = "blue",
  projectId,
  currentStatusInt = "",
  currentStatusName = "",
  currentStatusTab = "",
  authorProfile,
  project,
  statuses = {},
  staffOptions = [],
  globalSecondaryTextClasses = "",
  globalPrimaryTextClasses = "",
} = Astro.props;

import SlotMachineModal from "../form/SlotMachineModal.astro";
import BoxIcon from "./BoxIcon.astro";
import Button from "./Button.astro";
import SectionContainer from "./SectionContainer.astro";

// Get status options from the unified API if not provided
let statusOptions: any[] = [];
if (Object.keys(statuses).length > 0) {
  // Use provided statuses (legacy support)
  statusOptions = Object.values(statuses).map((status: any) => ({
    value: status.status_code?.toString() || "",
    label:
      status.admin_status_name +
        " / " +
        (status.est_time === null ? "No Est. Time Value" : status.est_time) || "",
  }));
} else {
  // Fetch from unified API
  try {
    const statusResponse = await fetch(`${Astro.url.origin}/api/project-statuses`, {
      method: "GET",
      headers: {
        Cookie: Astro.request.headers.get("Cookie") || "",
      },
    });

    if (statusResponse.ok) {
      const statusData = await statusResponse.json();
      if (statusData.success) {
        statusOptions = statusData.selectOptions;
      }
    }
  } catch (error) {
    console.error("Failed to fetch status options:", error);
  }
}

// Create array of 36 datetime options (9 days √ó 4 times per day)
const createDueDateOptions = () => {
  const options = [];
  const now = new Date();
  const times = [8, 12, 16, 20]; // 8am, 12pm, 4pm, 8pm

  for (let day = 0; day < 9; day++) {
    for (const hour of times) {
      const date = new Date(now);
      date.setDate(date.getDate() + day);
      date.setHours(hour, 0, 0, 0); // Set to exact hour, 0 minutes/seconds

      const dateStr = date.toISOString();
      const displayDate = date.toLocaleDateString();
      const displayTime = date.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });

      let label;
      if (day === 0) {
        label = `Today at ${displayTime}`;
      } else if (day === 1) {
        label = `Tomorrow at ${displayTime}`;
      } else {
        label = `${displayDate} at ${displayTime}`;
      }

      options.push({
        value: dateStr,
        label: label,
      });
    }
  }

  return options;
};

const dueDateOptions = createDueDateOptions();

// Debug logging for HeroProject component props
// console.log("üéØ [HERO-PROJECT] HeroProject component props:", {
//   currentStatusTab,
//   title,
//   currentStatusName,
//   projectId,
//   currentRole,
//   hasProject: !!project,
//   showStatusAndStaff: !!(currentStatusName && projectId),
//   isAdminOrStaff: currentRole === "Admin" || currentRole === "Staff",
// });
---

<SectionContainer>
  {
    project.featured_image_data?.public_url && (
      <div id="featured-image-background" class="absolute inset-0 -z-10">
        <img
          src={project.featured_image_data.public_url}
          alt={`Featured image for ${project.address}`}
          class="h-32 w-full rounded-lg rounded-b-none object-cover transition-transform duration-200 hover:scale-105"
          loading="lazy"
          referrerpolicy="strict-origin-when-cross-origin"
          crossorigin="anonymous"
          onerror="console.warn('Featured image failed to load:', this.src, 'Project ID:', this.closest('[data-project-id]')?.dataset.projectId); this.style.display='none'; const fallback = this.parentElement.querySelector('.featured-image-fallback'); if (fallback) fallback.style.display='flex';"
        />
        <div class="featured-image-fallback hidden text-center">
          <BoxIcon name="image-x" class="mx-auto mb-2 h-8 w-8" />
          <p class="text-xs">Image failed to load</p>
        </div>
      </div>
    )
  }
  <div id="map-background" class="absolute inset-0 -z-10 hidden">
    <!-- Google Map will be rendered here -->
  </div>

  <div class="relative mx-auto flex">
    <div class="mx-4 ml-0 flex flex-1 flex-col gap-2">
      <h1 class="text-2xl font-medium text-black dark:text-white" id="page-title" data-refresh>
        {title}
      </h1>
      <h2 id="page-subtitle" class="text-black dark:text-white" set:html={description} />
      {
        authorProfile?.email && (
          <p class="text-sm text-gray-500 dark:text-gray-400">{authorProfile.email}</p>
        )
      }
    </div>

    <div class="mx-4 mr-0 flex flex-shrink-0 flex-col gap-2">
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <>
            <div class="relative flex flex-row-reverse">
              <SlotMachineModal
                id="assign-staff"
                title="Assign Staff Member"
                options={staffOptions}
                selectedValue={project?.assigned_to_id || ""}
                placeholder="Assign staff..."
                buttonText={(() => {
                  if (!project?.assigned_to_id) return "Unassigned";
                  const assignedStaff = staffOptions.find(
                    (staff: any) => staff.value === project.assigned_to_id
                  );
                  return assignedStaff?.label || "Unknown Staff";
                })()}
                saveApiEndpoint="assign-staff"
                showCloseButton={true}
                showCancelButton={true}
                skipSaveToAPI={false}
                project={project}
                showNotification={true}
                icon="user"
                searchText="Search staff..."
                buttonVariant="outline"
              />
            </div>

            <div class="relative flex flex-row-reverse">
              <SlotMachineModal
                id="update-status"
                title="Select Status"
                options={statusOptions}
                selectedValue={currentStatusInt || ""}
                placeholder="Choose status"
                buttonText={currentStatusName}
                saveApiEndpoint="update-status"
                showCloseButton={true}
                showCancelButton={true}
                skipSaveToAPI={false}
                project={project}
                showNotification={true}
                icon="code"
                searchText="Search status..."
              />
            </div>

            <div class="relative flex flex-row-reverse">
              <SlotMachineModal
                id="due-date"
                title="Select Due Date"
                options={dueDateOptions}
                selectedValue={currentStatusInt || ""}
                placeholder="Choose due date"
                buttonText={
                  new Date(project?.due_date).toLocaleDateString(undefined, {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                  }) || "No due date"
                }
                saveApiEndpoint="update-project"
                showCloseButton={true}
                showCancelButton={true}
                skipSaveToAPI={false}
                project={project}
                showNotification={true}
                icon="clock"
                searchText="Choose due date..."
              />
            </div>
          </>
        ) : (
          <Button
            href={`/project/${projectId}?status=${currentStatusTab}`}
            title={`Go to ${currentStatusName} status`}
            variant="outline"
            icon="chevron-right"
            iconPosition="right"
            class="ml-4 flex-shrink-0 cursor-pointer transition-opacity hover:opacity-80"
          >
            {currentStatusName}
          </Button>
        )
      }
    </div>
  </div>
</SectionContainer>

<script>
  // Google Maps integration for project address
  let map: any = null;
  let marker: any = null;
  let mapInitializationAttempts = 0;
  const maxAttempts = 50; // Maximum 5 seconds of retries (50 * 100ms)

  // Get project data from the server-side script
  const projectData = (window as any).projectData || null;

  // Initialize map when Google Maps is loaded
  function initializeMap() {
    const mapContainer = document.getElementById("map-background");
    if (!mapContainer || !projectData?.address) {
      console.log("üîç [HERO-MAP] No map container or project address found");
      return;
    }

    // Check if Google Maps is fully loaded with all required properties
    if (
      !(window as any).google ||
      !(window as any).google.maps ||
      !(window as any).google.maps.MapTypeId ||
      !(window as any).google.maps.Geocoder
    ) {
      mapInitializationAttempts++;
      if (mapInitializationAttempts >= maxAttempts) {
        console.error("‚ùå [HERO-MAP] Google Maps failed to load after maximum attempts");
        return;
      }
      console.log(
        `üîç [HERO-MAP] Google Maps not fully loaded yet, retrying... (attempt ${mapInitializationAttempts}/${maxAttempts})`
      );
      setTimeout(initializeMap, 100);
      return;
    }

    console.log("üó∫Ô∏è [HERO-MAP] Initializing map for address:", projectData.address);

    // Create map options
    const mapOptions = {
      zoom: 15,
      center: { lat: 0, lng: 0 }, // Will be updated after geocoding
      mapTypeId: (window as any).google?.maps?.MapTypeId?.ROADMAP || "roadmap", // Fallback to string if constant not available
      disableDefaultUI: true,
      zoomControl: true,
      mapTypeControl: false,
      scaleControl: false,
      streetViewControl: false,
      rotateControl: false,
      fullscreenControl: false,
      styles: [
        {
          featureType: "all",
          elementType: "geometry.fill",
          stylers: [{ weight: "2.00" }],
        },
        {
          featureType: "all",
          elementType: "geometry.stroke",
          stylers: [{ color: "#9c9c9c" }],
        },
        {
          featureType: "all",
          elementType: "labels.text",
          stylers: [{ visibility: "on" }],
        },
        {
          featureType: "landscape",
          elementType: "all",
          stylers: [{ color: "#f2f2f2" }],
        },
        {
          featureType: "landscape",
          elementType: "geometry.fill",
          stylers: [{ color: "#ffffff" }],
        },
        {
          featureType: "landscape.man_made",
          elementType: "geometry.fill",
          stylers: [{ color: "#ffffff" }],
        },
        {
          featureType: "poi",
          elementType: "all",
          stylers: [{ visibility: "off" }],
        },
        {
          featureType: "road",
          elementType: "all",
          stylers: [{ saturation: -100 }, { lightness: 45 }],
        },
        {
          featureType: "road",
          elementType: "geometry.fill",
          stylers: [{ color: "#eeeeee" }],
        },
        {
          featureType: "road",
          elementType: "labels.text.fill",
          stylers: [{ color: "#7b7b7b" }],
        },
        {
          featureType: "road",
          elementType: "labels.text.stroke",
          stylers: [{ color: "#ffffff" }],
        },
        {
          featureType: "road.highway",
          elementType: "all",
          stylers: [{ visibility: "simplified" }],
        },
        {
          featureType: "road.arterial",
          elementType: "labels.icon",
          stylers: [{ visibility: "off" }],
        },
        {
          featureType: "transit",
          elementType: "all",
          stylers: [{ visibility: "off" }],
        },
        {
          featureType: "water",
          elementType: "all",
          stylers: [{ color: "#46bcec" }, { visibility: "on" }],
        },
        {
          featureType: "water",
          elementType: "geometry.fill",
          stylers: [{ color: "#c8d7d4" }],
        },
        {
          featureType: "water",
          elementType: "labels.text.fill",
          stylers: [{ color: "#070707" }],
        },
        {
          featureType: "water",
          elementType: "labels.text.stroke",
          stylers: [{ color: "#ffffff" }],
        },
      ],
    };

    // Create the map
    map = new (window as any).google.maps.Map(mapContainer, mapOptions);

    // Geocode the address to get coordinates
    const geocoder = new (window as any).google.maps.Geocoder();
    geocoder.geocode({ address: projectData.address }, (results: any, status: any) => {
      if (status === "OK" && results && results[0]) {
        const location = results[0].geometry.location;

        // Update map center
        map?.setCenter(location);

        // Add marker
        marker = new (window as any).google.maps.Marker({
          position: location,
          map: map,
          title: projectData.address,
          animation: (window as any).google.maps.Animation.DROP,
        });

        // Add info window
        const infoWindow = new (window as any).google.maps.InfoWindow({
          content: `
            <div class="p-2">
              <h3 class="font-semibold text-gray-900">${projectData.title || "Project Location"}</h3>
              <p class="text-sm text-gray-600">${projectData.address}</p>
            </div>
          `,
        });

        // Show info window on marker click
        marker.addListener("click", () => {
          infoWindow.open(map, marker);
        });

        console.log("‚úÖ [HERO-MAP] Map initialized successfully for:", projectData.address);
      } else {
        console.error("‚ùå [HERO-MAP] Geocoding failed:", status);
        // Fallback: show a default location (San Francisco)
        map?.setCenter({ lat: 37.7749, lng: -122.4194 });
        map?.setZoom(10);
      }
    });
  }

  // Check if Google Maps API key is available
  if (!(window as any).GOOGLE_MAPS_API_KEY || (window as any).GOOGLE_MAPS_API_KEY.trim() === "") {
    console.warn("‚ùå [HERO-MAP] Google Maps API key not configured. Map will not be displayed.");
  } else {
    // Wait for Google Maps to load
    if (typeof (window as any).google !== "undefined" && (window as any).google.maps) {
      // Google Maps is already loaded
      console.log("üó∫Ô∏è [HERO-MAP] Google Maps already loaded, initializing map");
      initializeMap();
    } else {
      console.log("üó∫Ô∏è [HERO-MAP] Waiting for Google Maps to load...");
      // Wait for Google Maps to load
      window.addEventListener("googleMapsLoaded", () => {
        console.log("üó∫Ô∏è [HERO-MAP] Google Maps loaded, initializing map");
        initializeMap();
      });
    }

    // Also try to initialize on DOM ready as fallback
    document.addEventListener("DOMContentLoaded", () => {
      if (typeof (window as any).google !== "undefined" && (window as any).google.maps && !map) {
        console.log("üó∫Ô∏è [HERO-MAP] DOM ready, initializing map");
        initializeMap();
      }
    });
  }
</script>
