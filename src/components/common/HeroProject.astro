---
import StaffSelect from "../project/StaffSelectDropdown.astro";
import SectionContainer from "./SectionContainer.astro";

interface Props {
  title: string;
  description: string;
  statusColor?: string;
  projectId?: string;
  currentStatusInt?: string;
  currentStatusName?: string;
  currentStatusTab?: string;
  currentRole?: string;
  project?: any;
  statuses?: any; // Accept statuses object to pass to ProjectStatusDropdown
  authorProfile?: any;
}

const {
  title,
  description,
  currentRole,
  statusColor = "blue",
  projectId,
  currentStatusInt = "",
  currentStatusName = "",
  currentStatusTab = "",
  authorProfile,
  project,
  statuses = {},
} = Astro.props;

// Debug logging for HeroProject component props
// console.log("ðŸŽ¯ [HERO-PROJECT] HeroProject component props:", {
  currentStatusTab,
  title,
  currentStatusName,
  projectId,
  currentRole,
  hasProject: !!project,
  showStatusAndStaff: !!(currentStatusName && projectId),
  isAdminOrStaff: currentRole === "Admin" || currentRole === "Staff",
});
---

<SectionContainer>
  <div class="relative mx-auto md:flex">
    <div class="flex-none md:flex-1">
      <h1
        class="text-2xl font-medium text-hub-title dark:text-hub-title-dark"
        id="page-title"
        data-refresh
      >
        {title}
      </h1>
      <h2
        id="page-subtitle"
        class="text-hub-subtitle dark:text-hub-subtitle-dark"
        set:html={description}
      />
      {
        authorProfile?.email && (
          <p class="text-sm text-gray-500 dark:text-gray-400">{authorProfile.email}</p>
        )
      }
    </div>

    <div class="my-4 ml-0 md:ml-4 flex flex-shrink-0 items-center gap-2 md:my-2">
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <div class="relative text-left flex flex-row gap-2">
            <button
              type="button"
              class={`inline-flex items-center rounded-full px-3 py-1 text-sm font-medium cursor-pointer transition-colors
                  bg-${statusColor}-100 text-${statusColor}-800 hover:bg-${statusColor}-200 
                  dark:bg-${statusColor}-900/30 dark:text-${statusColor}-400 dark:hover:bg-${statusColor}-900/50`}
              id="hero-status-dropdown-button"
              data-project-title={project?.title || project?.address}
              data-client-email={authorProfile?.email}
            >
              {currentStatusName}
              <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </button>

            <StaffSelect
              id="staff-select-picker"
              projectId={projectId?.toString() || ""}
              value={project?.assigned_to_id || ""}
              autoSave={true}
              currentRole={currentRole}
              placeholder="Assign staff..."
              address={project?.address || ""}
            />
          </div>
        ) : (
          <a
            href={`/project/${projectId}?tab=${currentStatusTab}`}
            title={`Go to ${currentStatusName} tab`}
            class="ml-4 flex-shrink-0 hover:opacity-80 transition-opacity cursor-pointer"
          >
            {currentStatusName}
          </a>
        )
      }
    </div>
  </div>
</SectionContainer>

<script
  define:vars={{
    projectId,
    currentStatusInt,
    currentRole,
    statuses,
    currentStatusName,
    authorProfile,
    currerntUserId: authorProfile?.id,
  }}
>
  function initializeHeroStatusDropdown() {
    // console.log("ðŸŽ¯ [HERO] Initializing hero status dropdown");
    // console.log("ðŸŽ¯ [HERO] Current role:", currentRole);
    // console.log("ðŸŽ¯ [HERO] Project ID:", projectId);
    // console.log("ðŸŽ¯ [HERO] Status label:", currentStatusName);

    const dropdownButton = document.getElementById("hero-status-dropdown-button");
    // console.log("ðŸŽ¯ [HERO] Button found:", !!dropdownButton);

    if (!dropdownButton) {
      // console.log("ðŸŽ¯ [HERO] No hero status dropdown button found - user may not have permission");
      return;
    }

    // Set up slot machine picker trigger
    dropdownButton.addEventListener("click", function (e) {
      e.stopPropagation();
      // console.log("ðŸŽ¯ [HERO] Hero status button clicked - opening slot machine picker");

      // Use props directly instead of button attributes
      const statusesData = Object.values(statuses || {});
      const currentStatus = currentStatusInt || "0";

      // Create and show the slot machine picker modal
      showStatusPickerModal(statusesData, currentStatus, dropdownButton);
    });

    async function changeProjectStatus(projectId, newStatus, statusName, buttonElement) {
      try {
        // Use the current status from props instead of DOM attributes

        const oldStatus = currentStatusInt; // Use the prop directly

        // Make API call to update status using update-status endpoint
        const requestBody = {
          projectId: parseInt(projectId),
          status: newStatus,
          currentUserId: currentUserId,
          oldStatus: oldStatus ? parseInt(oldStatus) : null,
        };

        // console.log("ðŸŽ¯ [HERO] Making API call to /api/update-status with body:", requestBody);

        const response = await fetch("/api/update-status", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify(requestBody),
        });

        if (response.ok) {
          const result = await response.json();

          // Note: Status is now managed by props, no need to update DOM attributes
          // console.log("ðŸŽ¯ [HERO] Status updated successfully to:", newStatus);

          // Show success notification using notificationData from API
          if (result.notificationData && window.showModal) {
            // Determine user role from the current user context
            const isAdminOrStaff =
              window.location.pathname.includes("/admin") ||
              document.querySelector('[data-user-role="Admin"]') ||
              document.querySelector('[data-user-role="Staff"]');

            const notification = isAdminOrStaff
              ? result.notificationData.admin
              : result.notificationData.client;

            if (notification) {
              window.showModal(
                notification.type,
                notification.title,
                notification.message,
                notification.duration,
                notification.redirect
              );
            }
          }

          // Update the button text to show new status
          if (buttonElement) {
            buttonElement.innerHTML = `
              <span class="flex items-center">
                <span class="mr-2">${statusName}</span>
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </span>
            `;
          }

          // console.log("ðŸŽ¯ [HERO] Status updated successfully to:", statusName);
        } else {
          const errorData = await response.json();
          console.error("ðŸŽ¯ [HERO] API error response:", errorData);
          throw new Error(errorData.error || "Failed to update status");
        }
      } catch (error) {
        console.error("ðŸŽ¯ [HERO] Error updating project status:", error);

        // Show error notification
        if (window.showModal) {
          window.showModal(
            "error",
            "Error",
            "Failed to update project status. Please try again.",
            5000
          );
        }
      }
    }

    // Slot machine style status picker modal
    function showStatusPickerModal(statuses, currentStatus, buttonElement) {
      // Create modal overlay
      const modal = document.createElement("div");
      modal.className =
        "fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50";

      // Create modal content
      const modalContent = document.createElement("div");
      modalContent.className = "bg-white dark:bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4";

      // Create title
      const title = document.createElement("h3");
      title.className = "text-lg font-semibold mb-4 text-gray-900 dark:text-white text-center";
      title.textContent = "Change Project Status";

      // Create slot machine container
      const slotContainer = document.createElement("div");
      slotContainer.className =
        "relative h-48 overflow-hidden border-2 border-gray-200 dark:border-gray-600 rounded-lg mb-4";

      // Create ul for status options with slot machine styling
      const statusList = document.createElement("ul");
      statusList.className = "absolute inset-0 transition-transform duration-300 ease-out";
      statusList.style.transform = "translateY(0px)";

      // Add status options as li elements with slot machine styling
      statuses.forEach((status, index) => {
        const li = document.createElement("li");
        li.className =
          "flex items-center justify-center h-12 border-b border-gray-100 dark:border-gray-700 cursor-pointer select-none";
        li.style.height = "48px"; // 48px per item (h-12)

        const span = document.createElement("span");
        span.className = `text-center font-medium transition-colors ${
          status.status_code.toString() === currentStatus
            ? "text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20"
            : "text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
        }`;
        span.textContent = status.admin_status_name;
        span.dataset.value = status.status_code;
        span.dataset.label = status.admin_status_name;
        span.dataset.index = index;

        li.appendChild(span);
        statusList.appendChild(li);
      });

      slotContainer.appendChild(statusList);

      // Create action buttons
      const buttonContainer = document.createElement("div");
      buttonContainer.className = "flex justify-center gap-2";

      const cancelButton = document.createElement("button");
      cancelButton.className =
        "px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200";
      cancelButton.textContent = "Cancel";
      cancelButton.onclick = () => modal.remove();

      const selectButton = document.createElement("button");
      selectButton.className =
        "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50";
      selectButton.textContent = "Select";
      selectButton.disabled = true;

      buttonContainer.appendChild(cancelButton);
      buttonContainer.appendChild(selectButton);

      // Assemble modal
      modalContent.appendChild(title);
      modalContent.appendChild(slotContainer);
      modalContent.appendChild(buttonContainer);
      modal.appendChild(modalContent);

      // Slot machine functionality
      let selectedIndex = statuses.findIndex((s) => s.status_code.toString() === currentStatus);
      let isScrolling = false;
      let scrollTimeout = null;
      let velocity = 0;
      let lastY = 0;
      let startY = 0;

      // Center the selected item initially
      function centerSelectedItem() {
        const itemHeight = 48;
        const containerHeight = 192; // h-48 = 192px
        const centerOffset = (containerHeight - itemHeight) / 2;
        const targetY = -(selectedIndex * itemHeight) + centerOffset;

        statusList.style.transform = `translateY(${targetY}px)`;

        // Update selection styling
        updateSelection();
      }

      // Update selection styling
      function updateSelection() {
        const items = statusList.querySelectorAll("li span");
        items.forEach((item, index) => {
          if (index === selectedIndex) {
            item.className =
              "text-center font-medium transition-colors text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20";
            selectButton.disabled = false;
          } else {
            item.className =
              "text-center font-medium transition-colors text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white";
          }
        });
      }

      // Snap to nearest item
      function snapToNearest() {
        const itemHeight = 48;
        const containerHeight = 192;
        const centerOffset = (containerHeight - itemHeight) / 2;
        const currentY = parseFloat(
          statusList.style.transform.match(/translateY\(([^)]+)px\)/)?.[1] || "0"
        );
        const adjustedY = currentY - centerOffset;
        const nearestIndex = Math.round(-adjustedY / itemHeight);

        selectedIndex = Math.max(0, Math.min(nearestIndex, statuses.length - 1));
        centerSelectedItem();
      }

      // Handle wheel events for scrolling
      statusList.addEventListener("wheel", (e) => {
        e.preventDefault();
        if (isScrolling) return;

        const itemHeight = 48;
        const containerHeight = 192;
        const centerOffset = (containerHeight - itemHeight) / 2;
        const currentY = parseFloat(
          statusList.style.transform.match(/translateY\(([^)]+)px\)/)?.[1] || "0"
        );

        const deltaY = e.deltaY;
        const newY = currentY + deltaY * 0.5;

        // Apply bounds
        const maxY = centerOffset;
        const minY = -(statuses.length - 1) * itemHeight + centerOffset;
        const boundedY = Math.max(minY, Math.min(maxY, newY));

        statusList.style.transform = `translateY(${boundedY}px)`;

        // Clear existing timeout
        if (scrollTimeout) clearTimeout(scrollTimeout);

        // Set new timeout for snapping
        scrollTimeout = setTimeout(() => {
          snapToNearest();
        }, 150);
      });

      // Handle touch events for mobile
      statusList.addEventListener("touchstart", (e) => {
        startY = e.touches[0].clientY;
        lastY = startY;
        isScrolling = true;
        if (scrollTimeout) clearTimeout(scrollTimeout);
      });

      statusList.addEventListener("touchmove", (e) => {
        if (!isScrolling) return;
        e.preventDefault();

        const currentY = e.touches[0].clientY;
        const deltaY = currentY - lastY;
        const itemHeight = 48;
        const containerHeight = 192;
        const centerOffset = (containerHeight - itemHeight) / 2;
        const currentTransformY = parseFloat(
          statusList.style.transform.match(/translateY\(([^)]+)px\)/)?.[1] || "0"
        );

        const newY = currentTransformY + deltaY;
        const maxY = centerOffset;
        const minY = -(statuses.length - 1) * itemHeight + centerOffset;
        const boundedY = Math.max(minY, Math.min(maxY, newY));

        statusList.style.transform = `translateY(${boundedY}px)`;
        lastY = currentY;
      });

      statusList.addEventListener("touchend", () => {
        isScrolling = false;
        snapToNearest();
      });

      // Handle click on items
      statusList.addEventListener("click", (e) => {
        const span = e.target.closest("span[data-index]");
        if (span) {
          selectedIndex = parseInt(span.dataset.index);
          centerSelectedItem();
        }
      });

      // Handle select button
      selectButton.addEventListener("click", async () => {
        const selectedStatus = statuses[selectedIndex];
        if (selectedStatus) {
          modal.remove();
          await changeProjectStatus(
            projectId,
            parseInt(selectedStatus.status_code),
            selectedStatus.admin_status_name,
            buttonElement
          );
        }
      });

      // Close modal when clicking outside
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          modal.remove();
        }
      });

      // Initialize
      centerSelectedItem();

      // Add to DOM
      document.body.appendChild(modal);
    }
  }

  // Try to initialize immediately if DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeHeroStatusDropdown);
  } else {
    // DOM is already ready
    initializeHeroStatusDropdown();
  }
</script>
