---
import Breadcrumb from "./Breadcrumb.astro";

interface Props {
  title: string;
  description: string;
  statusColor?: string;
  project?: any;
  currentStatusInt?: string;
  currentStatusName?: string;
  currentStatusTab?: string;
  currentUser?: any;
  statusesOptions?: any; // Accept statuses object for slot machine picker
  staffOptions?: any;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  globalInputClasses?: string;
  statusData?: any;
}

const {
  title,
  description,
  currentUser,
  statusColor = "blue",
  project,
  currentStatusInt = "",
  currentStatusName = "",
  currentStatusTab = "",
  statusesOptions,
  staffOptions = [],
  globalSecondaryTextClasses = "",
  globalPrimaryTextClasses = "",
  globalInputClasses = "",
  statusData = {},
} = Astro.props;

const projectId = project?.id;

const currentRole = currentUser?.profile?.role;

// console.log("🔍 [HERO-PROJECT] Project:", project);
// console.log("🔍 [HERO-PROJECT] Current user:", currentUser);
// console.log("🔍 [HERO-PROJECT] Current role:", currentRole);
// console.log("🔍 [HERO-PROJECT] Current status tab:", currentStatusTab);
// console.log("🔍 [HERO-PROJECT] Current status int:", currentStatusInt);
// console.log("🔍 [HERO-PROJECT] Current status name:", currentStatusName);
// console.log("🔍 [HERO-PROJECT] Project ID:", projectId);

import LucideIcon from "./LucideIcon.astro";
import Button from "./Button.astro";
// import SectionContainer from "./SectionContainer.astro";

// Create array of 36 datetime options (9 days × 4 times per day)
const createDueDateOptions = () => {
  const options = [];
  const now = new Date();
  const times = [8, 12, 16, 20]; // 8am, 12pm, 4pm, 8pm

  for (let day = 0; day < 9; day++) {
    for (const hour of times) {
      const date = new Date(now);
      date.setDate(date.getDate() + day);
      date.setHours(hour, 0, 0, 0); // Set to exact hour, 0 minutes/seconds

      const dateStr = date.toISOString();
      const displayDate = date.toLocaleDateString();
      const displayTime = date.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });

      let label;
      if (day === 0) {
        label = `Today at ${displayTime}`;
      } else if (day === 1) {
        label = `Tomorrow at ${displayTime}`;
      } else {
        label = `${displayDate} at ${displayTime}`;
      }

      options.push({
        value: dateStr,
        label: label,
      });
    }
  }

  return options;
};

const dueDateOptions = createDueDateOptions();

// Debug logging for HeroProject component props
// console.log("🎯 [HERO-PROJECT] HeroProject component props:", {
//   currentStatusTab,
//   title,
//   currentStatusName,
//   projectId,
//   currentRole,
//   hasProject: !!project,
//   showStatusAndStaff: !!(currentStatusName && projectId),
//   isAdminOrStaff: currentRole === "Admin" || currentRole === "Staff",
// });
---

<div class="align-center col-span-full justify-between p-4 md:flex hidden">
  {
    project.featuredImageData?.publicUrl && (
      <div id="featured-image-background" class="absolute inset-0 -z-10">
        <img
          src={project.featuredImageData.publicUrl}
          alt={`Featured image for ${project.address}`}
          class="h-32 w-full rounded-lg rounded-b-none object-cover transition-transform duration-200 hover:scale-105"
          loading="lazy"
          referrerpolicy="strict-origin-when-cross-origin"
          crossorigin="anonymous"
          onerror="console.warn('Featured image failed to load:', this.src, 'Project ID:', this.closest('[data-project-id]')?.dataset.projectId); this.style.display='none'; const fallback = this.parentElement.querySelector('.featured-image-fallback'); if (fallback) fallback.style.display='flex';"
        />
        <div class="featured-image-fallback hidden text-center">
          <LucideIcon name="image-x" class="mx-auto mb-2 h-8 w-8" />
          <p class="text-xs">Image failed to load</p>
        </div>
      </div>
    )
  }
  <Breadcrumb
    items={[
      {
        label: "",
        href: "/project/dashboard",
        icon: "home",
      },
      {
        label: project.title || "Untitled Project",
        current: false,
      },
      {
        label: currentStatusName,
        current: true,
      },
    ]}
  />
</div>

<div class="relative mx-auto flex p-4">
  <div class="mx-4 ml-0 flex flex-1 flex-col gap-2">
    <h1
      class="text-2xl font-medium text-black dark:text-white"
      id="page-project-title"
      data-refresh
    >
      {title}
    </h1>
    <h2 id="page-subtitle" class="text-black dark:text-white" set:html={description} />
    {
      project?.client_email && (
        <p class="text-sm text-gray-500 dark:text-gray-400">{project.client_email}</p>
      )
    }
  </div>

  <div class="flex-end hidden md:flex">
    {
      currentRole !== "Client" && (
        <Button
          href="#"
          variant="outline"
          size="sm"
          icon="plus"
          iconPosition="left"
          iconClasses="mr-0 md:mr-2"
          onclick="sendStatusEmailToClient()"
        >
          Send Email
        </Button>
      )
    }
    <Button
      href="/project/new"
      variant="primary"
      size="sm"
      icon="plus"
      iconPosition="left"
      iconClasses="mr-0 md:mr-2"
    >
      New Project
    </Button>
  </div>
</div>

<script type="module" define:vars={{ project, statusData }} is:inline>
  window.sendStatusEmailToClient = () => {
    debugger;
    window.updateStatus(project, project.status, statusData[project.status]).then((data) => {
      if (data.success) {
        window.handleNewStatusModalAndEmail(data, "HERO-PROJECT");
      } else {
        window.showModal("error", "Error", data.error || "Failed to update project status");
      }
    });
  };
</script>
