---
import SlotMachineModal from "../form/SlotMachineModal.astro";
import SectionContainer from "./SectionContainer.astro";

interface Props {
  title: string;
  description: string;
  statusColor?: string;
  projectId?: string;
  currentStatusInt?: string;
  currentStatusName?: string;
  currentStatusTab?: string;
  currentRole?: string;
  project?: any;
  statuses?: any; // Accept statuses object for slot machine picker
  authorProfile?: any;
}

const {
  title,
  description,
  currentRole,
  statusColor = "blue",
  projectId,
  currentStatusInt = "",
  currentStatusName = "",
  currentStatusTab = "",
  authorProfile,
  project,
  statuses = {},
} = Astro.props;

// Transform statuses object to array format for SlotMachineModal
const statusOptions = Object.values(statuses).map((status: any) => ({
  value: status.status_code?.toString() || "",
  label: status.admin_status_name || "",
}));

// Fetch staff data for staff selection
let staffOptions: any[] = [];
if (currentRole === "Admin" || currentRole === "Staff") {
  try {
    const staffResponse = await fetch(`${Astro.url.origin}/api/get-team-users`);
    if (staffResponse.ok) {
      const staffData = await staffResponse.json();
      if (staffData.success && staffData.staffUsers) {
        staffOptions = [
          { value: "", label: "Unassigned" },
          ...staffData.staffUsers.map((staff: any) => ({
            value: staff.id,
            label: staff.company_name || staff.name || "Unknown Staff",
          })),
        ];
      }
    }
  } catch (error) {
    console.error("Failed to fetch staff data:", error);
    staffOptions = [{ value: "", label: "Unassigned" }];
  }
}

// Debug logging for HeroProject component props
// console.log("ðŸŽ¯ [HERO-PROJECT] HeroProject component props:", {
//   currentStatusTab,
//   title,
//   currentStatusName,
//   projectId,
//   currentRole,
//   hasProject: !!project,
//   showStatusAndStaff: !!(currentStatusName && projectId),
//   isAdminOrStaff: currentRole === "Admin" || currentRole === "Staff",
// });
---

<SectionContainer>
  <div class="relative mx-auto md:flex">
    <div class="flex-none md:flex-1">
      <h1
        class="text-2xl font-medium text-hub-title dark:text-hub-title-dark"
        id="page-title"
        data-refresh
      >
        {title}
      </h1>
      <h2
        id="page-subtitle"
        class="text-hub-subtitle dark:text-hub-subtitle-dark"
        set:html={description}
      />
      {
        authorProfile?.email && (
          <p class="text-sm text-gray-500 dark:text-gray-400">{authorProfile.email}</p>
        )
      }
    </div>

    <div class="my-4 ml-0 md:ml-4 flex flex-shrink-0 items-center gap-2 md:my-2">
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <div class="relative text-left flex flex-row gap-2">
            <SlotMachineModal
              title={currentStatusName}
              id="update-status"
              title="Select Status"
              options={statusOptions}
              selectedValue={currentStatusInt || ""}
              theme="blue"
              placeholder="Choose status"
            />

            {(currentRole === "Admin" || currentRole === "Staff") && (
              <SlotMachineModal
                title={(() => {
                  if (!project?.assigned_to_id) return "Unassigned";
                  const assignedStaff = staffOptions.find(
                    (staff) => staff.value === project.assigned_to_id
                  );
                  return assignedStaff?.label || "Unknown Staff";
                })()}
                id="assign-staff"
                title="Assign Staff Member"
                options={staffOptions}
                selectedValue={project?.assigned_to_id || ""}
                theme="green"
                placeholder="Assign staff..."
              />
            )}

            {/* Projects Button */}
            <button
              onclick="window.openProjectDrawer && window.openProjectDrawer()"
              class="flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600"
              title="View all projects"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"
                />
              </svg>
              Projects
            </button>
          </div>
        ) : (
          <a
            href={`/project/${projectId}?tab=${currentStatusTab}`}
            title={`Go to ${currentStatusName} tab`}
            class="ml-4 flex-shrink-0 hover:opacity-80 transition-opacity cursor-pointer"
          >
            {currentStatusName}
          </a>
        )
      }
    </div>
  </div>
</SectionContainer>
