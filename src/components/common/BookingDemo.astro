---
import Button from "./Button.astro";

// BookingDemo component for demo scheduling
---

<section class="bg-background-light dark:bg-background-dark">
  <div class="py-8 px-4 mx-auto max-w-screen-xl lg:py-16 lg:px-6">
    <div class="mx-auto max-w-screen-md text-center mb-8 lg:mb-12">
      <h2 class="mb-4 text-4xl font-extrabold tracking-tight text-gray-900 dark:text-white">
        Book a Demo
      </h2>
      <p class="mb-5 font-light text-text-muted sm:text-xl dark:text-text-muted">
        Schedule a personalized demo of our fire protection system management platform. See how we
        can streamline your workflow.
      </p>
    </div>

    <div class="max-w-4xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Calendar/Time Selection -->
        <div
          class="bg-background-card dark:bg-background-card-dark rounded-lg border border-border-light dark:border-border-dark p-6"
        >
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Select a Time</h3>

          <!-- Date Picker -->
          <div class="mb-6">
            <label
              for="demo-date"
              class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-2"
            >
              Choose a date
            </label>
            <input
              type="date"
              id="demo-date"
              name="demo-date"
              min=""
              class="w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:bg-background-card-dark dark:text-text-primary-dark dark:focus:border-primary-400"
            />
          </div>

          <!-- Time Slots -->
          <div class="mb-6">
            <label
              class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-3"
            >
              Available times
            </label>
            <div id="time-slots" class="grid grid-cols-2 gap-2">
              <!-- Time slots will be populated by JavaScript -->
            </div>
          </div>

          <!-- Hidden Button Template for Time Slots -->
          <div class="hidden">
            <Button
              id="time-slot-template"
              type="button"
              variant="secondary"
              size="sm"
              class="rounded-full"
              selectedClasses="bg-blue-600 text-white dark:bg-blue-600 dark:border-blue-600"
            >
              Template
            </Button>
          </div>

          <!-- Selected Time Display -->
          <div class="hidden">
            <div
              id="selected-time"
              class="hidden p-3 bg-blue-50 dark:bg-blue-900/20 rounded-full border border-blue-200 dark:border-blue-800"
            >
              <p class="text-sm text-blue-800 dark:text-blue-200">
                <span class="font-medium">Selected:</span>
                <span id="selected-time-text"></span>
              </p>
            </div>
          </div>
        </div>

        <!-- Contact Form -->
        <div
          class="bg-background-card dark:bg-background-card-dark rounded-lg border border-border-light dark:border-border-dark p-6"
        >
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Your Information</h3>

          <form id="demo-booking-form" class="space-y-4">
            <div>
              <label
                for="demo-name"
                class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-1"
              >
                Full Name <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="demo-name"
                name="name"
                placeholder="Enter your full name"
                required
                class="w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:bg-background-card-dark dark:text-text-primary-dark dark:focus:border-primary-400"
              />
            </div>

            <div>
              <label
                for="demo-email"
                class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-1"
              >
                Email Address <span class="text-red-500">*</span>
              </label>
              <input
                type="email"
                id="demo-email"
                name="email"
                placeholder="Enter your email address"
                required
                class="w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:bg-background-card-dark dark:text-text-primary-dark dark:focus:border-primary-400"
              />
            </div>

            <div>
              <label
                for="demo-company"
                class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-1"
              >
                Company Name
              </label>
              <input
                type="text"
                id="demo-company"
                name="company"
                placeholder="Enter your company name"
                class="w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:bg-background-card-dark dark:text-text-primary-dark dark:focus:border-primary-400"
              />
            </div>

            <div>
              <label
                for="demo-phone"
                class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-1"
              >
                Phone Number
              </label>
              <input
                type="tel"
                id="demo-phone"
                name="phone"
                placeholder="Enter your phone number"
                class="w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:bg-background-card-dark dark:text-text-primary-dark dark:focus:border-primary-400"
              />
            </div>

            <div>
              <label
                for="demo-message"
                class="block text-sm font-medium text-text-secondary dark:text-text-secondary-dark mb-1"
              >
                Additional Notes
              </label>
              <textarea
                id="demo-message"
                name="message"
                rows="3"
                placeholder="Tell us about your specific needs or questions..."
                class="w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:bg-background-card-dark dark:text-text-primary-dark dark:focus:border-primary-400"
              ></textarea>
            </div>

            <Button
              type="submit"
              id="book-demo-btn"
              variant="primary"
              size="md"
              fullWidth
              disabled
              class="rounded-full"
            >
              Book Demo
            </Button>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const dateInput = document.getElementById("demo-date") as HTMLInputElement;
    const timeSlotsContainer = document.getElementById("time-slots") as HTMLDivElement;
    const selectedTimeDisplay = document.getElementById("selected-time") as HTMLDivElement;
    const selectedTimeText = document.getElementById("selected-time-text") as HTMLSpanElement;
    const bookDemoBtn = document.getElementById("book-demo-btn") as HTMLButtonElement;
    const bookingForm = document.getElementById("demo-booking-form") as HTMLFormElement;

    let selectedTimeSlot: string | null = null;

    // Check if all required elements exist
    if (
      !dateInput ||
      !timeSlotsContainer ||
      !selectedTimeDisplay ||
      !selectedTimeText ||
      !bookDemoBtn ||
      !bookingForm
    ) {
      console.error("Required demo booking elements not found");
      return;
    }

    // Set minimum date to today
    const today = new Date().toISOString().split("T")[0];
    dateInput.min = today;

    // Available time slots
    const timeSlots = [
      "9:00 AM",
      "9:30 AM",
      "10:00 AM",
      "10:30 AM",
      "11:00 AM",
      "11:30 AM",
      "1:00 PM",
      "1:30 PM",
      "2:00 PM",
      "2:30 PM",
      "3:00 PM",
      "3:30 PM",
      "4:00 PM",
      "4:30 PM",
      "5:00 PM",
    ];

    // Track booked time slots
    let bookedTimes: string[] = [];

    // Generate time slot buttons using Button component template
    function generateTimeSlots() {
      const template = document.getElementById("time-slot-template") as HTMLButtonElement;
      if (!template) {
        console.error("Time slot template not found");
        return;
      }

      timeSlotsContainer.innerHTML = "";
      timeSlots.forEach((time) => {
        // Clone the template button
        const button = template.cloneNode(true) as HTMLButtonElement;
        button.id = `time-slot-${time.replace(/[:\s]/g, "-")}`;
        button.removeAttribute("id"); // Remove template ID

        // Check if this time slot is booked
        const isBooked = bookedTimes.includes(time);

        if (isBooked) {
          // Booked time slot - disable and style
          button.disabled = true;
          button.textContent = `${time} (Booked)`;
          button.className = button.className.replace("secondary", "disabled");
        } else {
          // Available time slot - enable and add click handler
          button.disabled = false;
          button.textContent = time;
          button.addEventListener("click", () => selectTimeSlot(time, button));
        }

        timeSlotsContainer.appendChild(button);
      });
    }

    // Select time slot
    function selectTimeSlot(time: string, button: HTMLButtonElement) {
      // Remove previous selection - reset all buttons to their base classes
      timeSlotsContainer.querySelectorAll("button").forEach((btn) => {
        if (!btn.disabled) {
          const selectedClasses = btn.getAttribute("data-selected-classes");
          if (selectedClasses) {
            // Remove selected classes and restore base classes
            const baseClasses = btn.className.replace(selectedClasses, "").trim();
            btn.className = baseClasses;
          }
        }
      });

      // Highlight selected button - apply selected classes
      const selectedClasses = button.getAttribute("data-selected-classes");
      if (selectedClasses) {
        button.className = `${button.className} ${selectedClasses}`;
      }

      selectedTimeSlot = time;
      selectedTimeText.textContent = `${dateInput.value} at ${time}`;
      selectedTimeDisplay.classList.remove("hidden");

      // Enable book button
      bookDemoBtn.disabled = false;
    }

    // Function to fetch booked times for a specific date
    async function fetchBookedTimes(date: string) {
      try {
        const response = await fetch("/api/get-demo-bookings", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ date }),
        });

        if (response.ok) {
          const data = await response.json();
          bookedTimes = data.bookedTimes || [];
          console.log("Fetched booked times for", date, ":", bookedTimes);
        } else {
          console.error("Failed to fetch booked times");
          bookedTimes = [];
        }
      } catch (error) {
        console.error("Error fetching booked times:", error);
        bookedTimes = [];
      }
    }

    // Handle date change
    dateInput.addEventListener("change", async function () {
      const selectedDate = dateInput.value;
      if (selectedDate) {
        await fetchBookedTimes(selectedDate);
      }
      generateTimeSlots();
      selectedTimeSlot = null;
      selectedTimeDisplay.classList.add("hidden");
      bookDemoBtn.disabled = true;
    });

    // Handle form submission
    bookingForm.addEventListener("submit", async function (e) {
      e.preventDefault();

      if (!selectedTimeSlot) {
        alert("Please select a time slot");
        return;
      }

      const formData = new FormData(bookingForm);
      const bookingData = {
        name: formData.get("name"),
        email: formData.get("email"),
        company: formData.get("company"),
        phone: formData.get("phone"),
        message: formData.get("message"),
        date: dateInput.value,
        time: selectedTimeSlot,
      };

      // Show loading state
      const originalText = bookDemoBtn.textContent;
      bookDemoBtn.textContent = "Booking...";
      bookDemoBtn.disabled = true;
      bookDemoBtn.className = bookDemoBtn.className.replace("primary", "loading");

      try {
        // Send booking data to API
        const response = await fetch("/api/demo-booking", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(bookingData),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Success - show confirmation
          bookDemoBtn.textContent = "Booking Confirmed!";
          bookDemoBtn.className = bookDemoBtn.className.replace("loading", "success");

          // Show success message
          if (window.showModal) {
            window.showModal(
              "success",
              "Demo Booked Successfully!",
              `Your demo is scheduled for ${bookingData.date} at ${bookingData.time}. We'll send a confirmation email to ${bookingData.email} shortly.`,
              8000
            );
          } else {
            alert(`Demo booked successfully for ${bookingData.date} at ${bookingData.time}!`);
          }

          // Reset form after successful submission
          setTimeout(async () => {
            bookingForm.reset();
            selectedTimeSlot = null;
            selectedTimeDisplay.classList.add("hidden");

            // Refresh booked times for the current date
            const currentDate = dateInput.value;
            if (currentDate) {
              await fetchBookedTimes(currentDate);
            }

            generateTimeSlots();
            bookDemoBtn.textContent = originalText;
            bookDemoBtn.className = bookDemoBtn.className.replace("success", "primary");
            bookDemoBtn.disabled = true;
          }, 3000);
        } else {
          // Error - show error message
          bookDemoBtn.textContent = originalText;
          bookDemoBtn.disabled = false;
          bookDemoBtn.className = bookDemoBtn.className.replace("loading", "primary");

          const errorMessage = result.error || "Failed to book demo. Please try again.";

          if (window.showModal) {
            window.showModal("error", "Booking Failed", errorMessage, 5000);
          } else {
            alert(`Error: ${errorMessage}`);
          }
        }
      } catch (error) {
        console.error("Demo booking error:", error);

        // Reset button state
        bookDemoBtn.textContent = originalText;
        bookDemoBtn.disabled = false;
        bookDemoBtn.className = bookDemoBtn.className.replace("loading", "primary");

        const errorMessage = "Network error. Please check your connection and try again.";

        if (window.showModal) {
          window.showModal("error", "Booking Failed", errorMessage, 5000);
        } else {
          alert(`Error: ${errorMessage}`);
        }
      }
    });

    // Initialize time slots
    generateTimeSlots();
  });
</script>
