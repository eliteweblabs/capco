---
export interface Props {
  id?: string;
  type?: "button" | "submit" | "reset";
  variant?: "primary" | "secondary" | "success" | "danger" | "warning" | "info";
  size?: "sm" | "md" | "lg";
  disabled?: boolean;
  loading?: boolean;
  loadingText?: string;
  class?: string;
  onclick?: string;
}

const {
  id,
  type = "button",
  variant = "primary",
  size = "md",
  disabled = false,
  loading = false,
  loadingText = "Loading...",
  class: additionalClasses = "",
  onclick,
} = Astro.props;

// Base classes
const baseClasses = "inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed";

// Variant classes
const variantClasses = {
  primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
  secondary: "bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500",
  success: "bg-green-600 text-white hover:bg-green-700 focus:ring-green-500",
  danger: "bg-red-600 text-white hover:bg-red-700 focus:ring-red-500",
  warning: "bg-yellow-600 text-white hover:bg-yellow-700 focus:ring-yellow-500",
  info: "bg-cyan-600 text-white hover:bg-cyan-700 focus:ring-cyan-500",
};

// Size classes
const sizeClasses = {
  sm: "px-3 py-1.5 text-sm",
  md: "px-4 py-2 text-sm",
  lg: "px-6 py-3 text-base",
};

// Combine classes
const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${additionalClasses}`;
---

<button
  {id}
  type={type}
  class={buttonClasses}
  disabled={disabled || loading}
  onclick={onclick}
  data-loading={loading}
>
  {loading ? (
    <>
      <!-- Spinner SVG -->
      <svg class="animate-spin mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      {loadingText}
    </>
  ) : (
    <slot />
  )}
</button>

<script>
  // Helper function to set loading state
  function setButtonLoading(buttonId: string, isLoading: boolean, loadingText?: string) {
    const button = document.getElementById(buttonId) as HTMLButtonElement;
    if (!button) return;

    if (isLoading) {
      button.disabled = true;
      button.setAttribute('data-loading', 'true');
      button.innerHTML = `
        <svg class="animate-spin mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        ${loadingText || 'Loading...'}
      `;
    } else {
      button.disabled = false;
      button.setAttribute('data-loading', 'false');
      // Note: You'll need to restore original content manually or store it
    }
  }

  // Make function globally available
  (window as any).setButtonLoading = setButtonLoading;
</script>
