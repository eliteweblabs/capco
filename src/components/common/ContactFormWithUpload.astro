---
// Contact form with PDF upload component for non-authenticated users
import Button from "./Button.astro";
import BoxIcon from "./BoxIcon.astro";
import App from "./App.astro";
const { globalInputClasses } = Astro.props;
---

<div class="contact-form mx-auto max-w-4xl">
  <div class="mb-8 text-center">
    <h2 class="mb-4 text-3xl font-bold text-gray-900 dark:text-white">Get in Touch</h2>
    <p class="text-gray-600 dark:text-gray-400">
      Have questions about our fire protection services? Submit your project documents and we'll get
      back to you quickly.
    </p>
  </div>

  <form id="contact-form-with-upload" class="space-y-6" enctype="multipart/form-data">
    <!-- Contact Information -->
    <div class="rounded-lg bg-gray-50 p-6 dark:bg-gray-800">
      <h3 class="mb-4 text-xl font-semibold text-gray-900 dark:text-white">Contact Information</h3>

      <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
        <div>
          <label
            for="firstName"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            First Name *
          </label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            required
            class={`${globalInputClasses}`}
          />
        </div>

        <div>
          <label
            for="lastName"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Last Name *
          </label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            required
            class={`${globalInputClasses}`}
          />
        </div>
      </div>

      <div class="mt-6 grid grid-cols-1 gap-6 md:grid-cols-2">
        <div>
          <label
            for="email"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Email Address *
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          />
        </div>

        <div>
          <label
            for="phone"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Phone Number
          </label>
          <input
            type="tel"
            id="phone"
            name="phone"
            class="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          />
        </div>
      </div>

      <div class="mt-6">
        <label
          for="company"
          class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
        >
          Company Name
        </label>
        <input type="text" id="company" name="company" class={`${globalInputClasses}`} />
      </div>
    </div>

    <!-- Project Information -->
    <div class="rounded-lg bg-blue-50 p-6 dark:bg-blue-900/20">
      <h3 class="mb-4 text-xl font-semibold text-gray-900 dark:text-white">Project Information</h3>

      <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
        <div>
          <label
            for="projectAddress"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Project Address *
          </label>
          <input
            type="text"
            id="projectAddress"
            name="projectAddress"
            required
            placeholder="123 Main St, City, State 12345"
            class={`${globalInputClasses}`}
          />
        </div>

        <div>
          <label
            for="projectType"
            class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Project Type
          </label>
          <select
            id="projectType"
            name="projectType"
            class="w-full rounded-lg border border-gray-300 px-4 py-3 focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
          >
            <option value="">Select project type</option>
            <option value="new-construction">New Construction</option>
            <option value="renovation">Renovation</option>
            <option value="inspection">Inspection</option>
            <option value="maintenance">Maintenance</option>
            <option value="other">Other</option>
          </select>
        </div>
      </div>

      <div class="mt-6">
        <label
          for="message"
          class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
        >
          Project Description *
        </label>
        <textarea
          id="message"
          name="message"
          rows="4"
          required
          placeholder="Please describe your fire protection needs, timeline, and any specific requirements..."
          class="w-full resize-none rounded-lg border border-gray-300 px-4 py-3 focus:border-transparent focus:ring-2 focus:ring-red-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
        ></textarea>
      </div>
    </div>

    <!-- PDF Upload Section -->
    <div class="rounded-lg bg-green-50 p-6 dark:bg-green-900/20">
      <h3 class="mb-4 text-xl font-semibold text-gray-900 dark:text-white">Project Documents</h3>
      <p class="mb-4 text-sm text-gray-600 dark:text-gray-400">
        Upload any relevant documents, blueprints, photos, or specifications (PDF, images, or
        documents)
      </p>

      <div class="space-y-4">
        <!-- PDF Upload Dropzone -->
        <div
          id="upload-dropzone"
          class="cursor-pointer rounded-lg border-2 border-dashed border-gray-300 p-8 text-center transition-colors hover:border-red-400 dark:border-gray-600 dark:hover:border-red-400"
          style="min-height: 120px;"
        >
          <div class="space-y-4">
            <BoxIcon name="cloud-upload" class="bx-lg mx-auto" />
            <div>
              <p class="font-medium text-gray-600 dark:text-gray-300">
                Drop files here or click to browse
              </p>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Upload supports PDF, images, CAD files, and documents (max 10MB each)
              </p>
            </div>
            <Button
              id="browse-files-btn"
              variant="secondary"
              size="lg"
              icon="folder-open"
              iconPosition="left"
            >
              Browse Files
            </Button>
          </div>
        </div>

        <!-- Hidden file input -->
        <input
          type="file"
          id="file-input"
          multiple
          accept=".pdf,.png,.jpg,.jpeg,.gif,.webp,.dwg,.doc,.docx,.xls,.xlsx,.txt"
          class="hidden"
        />

        <!-- Upload Progress -->
        <div id="upload-progress" class="mt-4 hidden">
          <div class="h-2 rounded-lg bg-gray-200 dark:bg-gray-700">
            <div
              id="progress-bar"
              class="h-2 rounded-lg bg-red-600 transition-all duration-300"
              style="width: 0%"
            >
            </div>
          </div>
          <div class="mt-2 flex justify-between text-sm text-gray-600 dark:text-gray-400">
            <span id="upload-status">Uploading...</span>
            <span id="upload-percentage">0%</span>
          </div>
        </div>

        <!-- File List -->
        <div id="file-list" class="space-y-2"></div>
      </div>
    </div>

    <!-- Submit Button -->
    <div class="text-center">
      <Button type="submit" variant="primary" size="lg" icon="send" iconPosition="left">
        Submit Project Request
      </Button>
    </div>
  </form>

  <!-- Success/Error Messages -->
  <div id="form-messages" class="mt-6 hidden"></div>
</div>

<script>
  class ContactPDFUpload {
    // Property declarations
    uploadedFiles: any[];
    dropzone: HTMLElement | null;
    fileInput: HTMLInputElement | null;
    browseBtn: HTMLElement | null;
    uploadProgress: HTMLElement | null;
    progressBar: HTMLElement | null;
    uploadStatus: HTMLElement | null;
    uploadPercentage: HTMLElement | null;
    fileList: HTMLElement | null;
    form: HTMLFormElement | null;
    formMessages: HTMLElement | null;

    constructor() {
      this.uploadedFiles = [];
      this.dropzone = null;
      this.fileInput = null;
      this.browseBtn = null;
      this.uploadProgress = null;
      this.progressBar = null;
      this.uploadStatus = null;
      this.uploadPercentage = null;
      this.fileList = null;
      this.form = null;
      this.formMessages = null;
      this.init();
    }

    init() {
      this.setupElements();
      this.setupEventListeners();
    }

    setupElements(): void {
      this.dropzone = document.getElementById("upload-dropzone");
      this.fileInput = document.getElementById("file-input") as HTMLInputElement;
      this.browseBtn = document.getElementById("browse-files-btn");
      this.uploadProgress = document.getElementById("upload-progress");
      this.progressBar = document.getElementById("progress-bar");
      this.uploadStatus = document.getElementById("upload-status");
      this.uploadPercentage = document.getElementById("upload-percentage");
      this.fileList = document.getElementById("file-list");
      this.form = document.getElementById("contact-form-with-upload") as HTMLFormElement;
      this.formMessages = document.getElementById("form-messages");
    }

    setupEventListeners(): void {
      // Dropzone events
      this.dropzone?.addEventListener("click", () => this.openFileDialog());
      this.browseBtn?.addEventListener("click", (e) => {
        e.stopPropagation();
        this.openFileDialog();
      });

      // Drag and drop events
      this.dropzone?.addEventListener("dragover", (e) => {
        e.preventDefault();
        this.dropzone?.classList.add("border-red-400", "bg-red-50");
      });

      this.dropzone?.addEventListener("dragleave", (e) => {
        e.preventDefault();
        this.dropzone?.classList.remove("border-red-400", "bg-red-50");
      });

      this.dropzone?.addEventListener("drop", (e) => {
        e.preventDefault();
        this.dropzone?.classList.remove("border-red-400", "bg-red-50");
        if (e.dataTransfer) {
          this.handleFiles(Array.from(e.dataTransfer.files));
        }
      });

      // File input change
      this.fileInput?.addEventListener("change", (e) => {
        const target = e.target as HTMLInputElement;
        this.handleFiles(Array.from(target.files || []));
      });

      // Form submission
      this.form?.addEventListener("submit", (e) => {
        e.preventDefault();
        this.submitForm();
      });
    }

    openFileDialog(): void {
      this.fileInput?.click();
    }

    handleFiles(files: File[]): void {
      const validFiles = files.filter((file) => {
        const isValidType = this.isValidFileType(file);
        const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB limit

        if (!isValidType) {
          this.showMessage(`File ${file.name} is not a supported format`, "error");
        }
        if (!isValidSize) {
          this.showMessage(`File ${file.name} is too large (max 10MB)`, "error");
        }

        return isValidType && isValidSize;
      });

      this.uploadedFiles = [...this.uploadedFiles, ...validFiles];
      this.updateFileList();
    }

    isValidFileType(file: File): boolean {
      const allowedTypes = [
        "application/pdf",
        "image/jpeg",
        "image/jpg",
        "image/png",
        "image/gif",
        "image/webp",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "text/plain",
      ];
      return allowedTypes.includes(file.type);
    }

    updateFileList(): void {
      if (!this.fileList) return;
      this.fileList.innerHTML = "";

      this.uploadedFiles.forEach((file, index) => {
        const fileItem = document.createElement("div");
        fileItem.className =
          "flex items-center justify-between p-3 bg-white rounded-lg border dark:bg-gray-700 dark:border-gray-600";

        fileItem.innerHTML = `
          <div class="flex items-center space-x-3">
            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <div>
              <p class="text-sm font-medium text-gray-900 dark:text-white">${file.name}</p>
              <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
            </div>
          </div>
          <button type="button" onclick="window.contactUpload.removeFile(${index})" class="text-red-500 hover:text-red-700">
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        `;

        this.fileList?.appendChild(fileItem);
      });
    }

    removeFile(index: number): void {
      this.uploadedFiles.splice(index, 1);
      this.updateFileList();
    }

    async submitForm(): Promise<void> {
      if (!this.form) return;
      const formData = new FormData(this.form);

      // Add files to form data
      this.uploadedFiles.forEach((file) => {
        formData.append("files", file);
      });

      // Show progress
      this.uploadProgress?.classList.remove("hidden");
      this.progressBar?.style.setProperty("width", "0%");
      this.uploadPercentage && (this.uploadPercentage.textContent = "0%");
      this.uploadStatus && (this.uploadStatus.textContent = "Uploading...");

      try {
        const response = await fetch("/api/contact-submission", {
          method: "POST",
          body: formData,
        });

        const result = await response.json();

        if (response.ok) {
          this.showMessage(
            "Thank you! Your project request has been submitted successfully. We'll get back to you within 24 hours.",
            "success"
          );
          this.form?.reset();
          this.uploadedFiles = [];
          this.updateFileList();
        } else {
          this.showMessage(
            result.error || "There was an error submitting your request. Please try again.",
            "error"
          );
        }
      } catch (error) {
        console.error("Submission error:", error);
        this.showMessage("There was an error submitting your request. Please try again.", "error");
      } finally {
        this.uploadProgress?.classList.add("hidden");
      }
    }

    showMessage(message: string, type: string): void {
      if (!this.formMessages) return;
      this.formMessages.innerHTML = `
        <div class="p-4 rounded-lg ${type === "success" ? "bg-green-50 text-green-800 border border-green-200" : "bg-red-50 text-red-800 border border-red-200"}">
          <div class="flex">
            <div class="flex-shrink-0">
              ${
                type === "success"
                  ? '<svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>'
                  : '<svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path></svg>'
              }
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium">${message}</p>
            </div>
          </div>
        </div>
      `;
      this.formMessages?.classList.remove("hidden");

      // Auto-hide success messages after 5 seconds
      if (type === "success") {
        setTimeout(() => {
          this.formMessages?.classList.add("hidden");
        }, 5000);
      }
    }
  }

  // // Initialize when DOM is ready
  // document.addEventListener("DOMContentLoaded", () => {
  //   if (!window.contactUpload) {
  //     window.contactUpload = new ContactPDFUpload();
  //   }
  // });
</script>
