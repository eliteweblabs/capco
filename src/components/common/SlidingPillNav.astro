---
// Sliding pill navigation component
import Button from "./Button.astro";

export interface NavItem {
  id?: string;
  label: string;
  icon?: string;
  variant?: string;
  dataAttributes?: Record<string, string>;
  count?: number;
}

interface Props {
  items?: NavItem[];
  activeItem?: number;
  class?: string;
  navId?: string;
  navClass?: string;
}

const {
  items = [],
  activeItem = 0,
  class: className = "",
  navId,
  navClass = "",
} = Astro.props as Props;
---

<nav
  id={navId}
  class={`ml-6 h-12 scrollbar-hide relative flex gap-1 overflow-x-auto whitespace-nowrap ${navClass}`}
>
  <!-- Sliding pill background -->
  <div
    id="nav-pill-bg"
    class="mix-blend-mode-multiply bg-primary dark:bg-primary-dark absolute top-2 h-9 rounded-full transition-all duration-300 ease-out"
    style="width: 0px; left: 0px; opacity: 0;"
  >
  </div>

  {
    items.map((item: NavItem, index: number) => (
      <Button
        id={item.id}
        variant={(item.variant as any) || "ghost"}
        size="sm"
        icon={item.icon}
        iconPosition="left"
        class={`pill-nav-item relative z-10 rounded-full transition-colors duration-200 ${
          index === activeItem
            ? "text-white dark:text-white"
            : "text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
        }`}
        data-index={index}
        dataAttributes={item.dataAttributes || {}}
      >
        {item.label}
        {item.count !== undefined && item.count > 0 && (
          <span class="absolute -right-2 -top-2 inline-flex items-center rounded-full bg-gray-200 px-2 py-0.5 text-xs font-medium text-gray-800 dark:bg-gray-700 dark:text-gray-200">
            {item.count}
          </span>
        )}
      </Button>
    ))
  }
</nav>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const subNav = document.getElementById("project-nav");
    const projectList = document.getElementById("project-list");

    if (!subNav || !projectList) return;

    const projectItems = projectList.querySelectorAll("[data-project-status]");
    const filterButtons = subNav.querySelectorAll("[data-project-status-filter]");
    const allStatusesButton = subNav.querySelector("#all-statuses");
    const pillBg = document.getElementById("nav-pill-bg");

    // Simple filtering based on data attributes - project cards handle their own visibility
    function filterProjects(statusFilter: string) {
      const shouldShow = (projectStatusSlug: string) => {
        if (statusFilter === "all") {
          return true;
        }
        return projectStatusSlug === statusFilter;
      };

      let visibleCount = 0;
      projectItems.forEach((item) => {
        const projectStatusSlug = item.getAttribute("data-project-status");
        const shouldShowItem = shouldShow(projectStatusSlug || "");

        if (shouldShowItem && !item.classList.contains("hidden")) {
          (item as any).style.display = "block";
          (item as any).style.opacity = "1";
          visibleCount++;
        } else {
          (item as any).style.display = "none";
          (item as any).style.opacity = "0";
        }
      });

      // Show/hide no projects message
      const noProjectsMessage = document.getElementById("no-projects-message");
      const noProjectsText = document.getElementById("no-projects-text");
      if (noProjectsMessage && noProjectsText) {
        if (visibleCount === 0) {
          noProjectsText.textContent = `No projects currently at ${statusFilter}.`;
          noProjectsMessage.classList.remove("hidden");
        } else {
          noProjectsMessage.classList.add("hidden");
        }
      }
    }

    // Update active button - only change text color, no background
    function updateActiveButton(activeButton: Element | null) {
      if (!subNav) return;
      subNav.querySelectorAll("button").forEach((btn) => {
        btn.classList.remove(
          "bg-blue-500",
          "text-white",
          "border-blue-500",
          "bg-hub-primary",
          "text-blue-600",
          "dark:text-blue-400"
        );
        btn.classList.add("text-hub-inactive", "dark:text-hub-inactive-dark");
      });
      if (activeButton) {
        activeButton.classList.remove("text-hub-inactive", "dark:text-hub-inactive-dark");
        activeButton.classList.add("text-blue-600", "dark:text-blue-400");
      }
    }

    // Update URL
    function updateURL(statusFilter: string) {
      const url = new URL(window.location.href);
      if (statusFilter === "all") {
        url.searchParams.delete("status");
      } else {
        url.searchParams.set("status", statusFilter);
      }
      window.history.pushState({}, "", url.toString());
    }

    // Button click handlers
    filterButtons.forEach((button: Element) => {
      button.addEventListener("click", function (this: HTMLElement) {
        const filterValue = this.getAttribute("data-project-status-filter");
        if (filterValue) {
          filterProjects(filterValue);
          updateActiveButton(this);
          updateURL(filterValue);

          // Slide pill first, then center navigation
          updateSlidingPill(this);
          setTimeout(() => {
            this.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
            // Recalculate pill position after scroll completes
            setTimeout(() => {
              updateSlidingPill(this);
            }, 500); // Wait for scroll animation to complete
          }, 350); // Wait for pill animation to complete (300ms + buffer)
        }
      });
    });

    if (allStatusesButton) {
      allStatusesButton.addEventListener("click", function (this: HTMLElement) {
        console.log("ðŸ”˜ All statuses button clicked:", this);
        filterProjects("all");
        updateActiveButton(this);
        updateURL("all");

        // Slide pill first, then center navigation
        updateSlidingPill(this);
        setTimeout(() => {
          this.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
          // Recalculate pill position after scroll completes
          setTimeout(() => {
            updateSlidingPill(this);
          }, 500); // Wait for scroll animation to complete
        }, 350); // Wait for pill animation to complete (300ms + buffer)
      });
    }

    // Initial filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    const statusParam = urlParams.get("status");
    if (statusParam) {
      const targetButton = subNav.querySelector(`[data-project-status-filter="${statusParam}"]`);
      if (targetButton) {
        updateActiveButton(targetButton);
        filterProjects(statusParam);
        // Initialize pill position for URL-based active button and center it
        setTimeout(() => {
          updateSlidingPill(targetButton);
          targetButton.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
        }, 100);
        return;
      }
    }

    // Default to all
    if (allStatusesButton) {
      updateActiveButton(allStatusesButton);
      filterProjects("all");
      // Initialize pill position for default active button and center it
      setTimeout(() => {
        updateSlidingPill(allStatusesButton);
        allStatusesButton.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "center",
        });
      }, 100);
    }

    // Sliding pill functionality
    function updateSlidingPill(activeButton: Element | null) {
      if (!pillBg || !activeButton || !subNav) return;

      const navRect = subNav.getBoundingClientRect();
      const buttonRect = activeButton.getBoundingClientRect();

      // Calculate position relative to the nav container, accounting for scroll offset
      const left = buttonRect.left - navRect.left + subNav.scrollLeft;
      const width = buttonRect.width;

      // Update pill position and size
      pillBg.style.left = `${left}px`;
      pillBg.style.width = `${width}px`;
      pillBg.style.opacity = "1";
    }

    // Initialize pill position for the active button and center it
    setTimeout(() => {
      const activeButton = subNav.querySelector(".text-blue-600, .dark\\:text-blue-400");
      if (activeButton) {
        updateSlidingPill(activeButton);
        // Center the active button on page load
        activeButton.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
      }
    }, 200); // Slightly longer delay for initial load

    // Pill position is now handled in the main button click handlers above

    // Handle window resize to reposition pill
    let resizeTimeout: NodeJS.Timeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const activeButton = subNav.querySelector(".text-blue-600, .dark\\:text-blue-400");
        if (activeButton) {
          updateSlidingPill(activeButton);
        }
      }, 100);
    });
  });
</script>
