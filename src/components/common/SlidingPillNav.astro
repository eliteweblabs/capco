---
// Sliding pill navigation component
import Button from "./Button.astro";

export interface NavItem {
  id?: string;
  label: string;
  icon?: string;
  variant?: string;
  dataAttributes?: Record<string, string>;
  count?: number;
}

interface Props {
  items?: NavItem[];
  activeItem?: number;
  class?: string;
  navId?: string;
  navClass?: string;
}

const {
  items = [],
  activeItem = 0,
  class: className = "",
  navId,
  navClass = "",
} = Astro.props as Props;
---

<nav
  id={navId}
  class={`scrollbar-hide relative flex gap-1 overflow-x-auto whitespace-nowrap ${navClass}`}
>
  <!-- Sliding pill background -->
  <div
    id="nav-pill-bg"
    class="mix-blend-mode-multiply absolute top-2 h-9 rounded-full bg-blue-800 transition-all duration-300 ease-out dark:bg-blue-600"
    style="width: 0px; left: 0px; opacity: 0;"
  >
  </div>

  {
    items.map((item: NavItem, index: number) => (
      <Button
        id={item.id}
        variant={(item.variant as any) || "ghost"}
        size="sm"
        icon={item.icon}
        iconPosition="left"
        class={`pill-nav-item relative z-10 rounded-full transition-colors duration-200 ${
          index === activeItem
            ? "text-gray-900 dark:text-white"
            : "text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
        }`}
        data-index={index}
        {...(item.dataAttributes || {})}
      >
        <span class="flex items-center gap-2">
          {item.label}
          {item.count !== undefined && item.count > 0 && (
            <span class="inline-flex items-center rounded-full bg-gray-200 px-2 py-0.5 text-xs font-medium text-gray-800 dark:bg-gray-700 dark:text-gray-200">
              {item.count}
            </span>
          )}
        </span>
      </Button>
    ))
  }
</nav>
<script>
  // Enhanced sliding pill navigation functionality
  document.addEventListener("DOMContentLoaded", function () {
    const nav = document.getElementById("project-nav");
    if (!nav) return;

    const bg = nav.querySelector("#nav-pill-bg") as HTMLElement;
    const items = nav.querySelectorAll(".pill-nav-item");
    const projectList = document.getElementById("project-list");

    // Update sliding background
    function updateSlider(activeIndex: number) {
      const activeItem = items[activeIndex] as HTMLElement;
      if (activeItem && bg && nav) {
        const itemRect = activeItem.getBoundingClientRect();
        const navRect = nav.getBoundingClientRect();
        const left = itemRect.left - navRect.left;
        const width = itemRect.width;

        bg.style.transform = `translateX(${left}px)`;
        bg.style.width = `${width}px`;
        bg.style.opacity = "1";
      }
    }

    // Project filtering functionality
    function filterProjects(statusFilter: string) {
      if (!projectList) return;

      const projectItems = projectList.querySelectorAll("[data-project-status]");
      const filterButtons = nav?.querySelectorAll("[data-project-status-filter]");
      const allStatusesButton = nav?.querySelector("#all-statuses");

      const shouldShow = (projectStatusSlug: string) => {
        if (statusFilter === "all") {
          return true;
        }
        return projectStatusSlug === statusFilter;
      };

      let visibleCount = 0;
      projectItems.forEach((item) => {
        const projectStatusSlug = item.getAttribute("data-project-status");
        const shouldShowItem = shouldShow(projectStatusSlug || "");

        if (shouldShowItem && !item.classList.contains("hidden")) {
          (item as HTMLElement).style.display = "block";
          (item as HTMLElement).style.opacity = "1";
          visibleCount++;
        } else {
          (item as HTMLElement).style.display = "none";
          (item as HTMLElement).style.opacity = "0";
        }
      });

      // Show/hide no projects message
      const noProjectsMessage = document.getElementById("no-projects-message");
      const noProjectsText = document.getElementById("no-projects-text");
      if (noProjectsMessage && noProjectsText) {
        if (visibleCount === 0) {
          const statusName = document
            .querySelector(`[data-project-status-filter="${statusFilter}"]`)
            ?.getAttribute("data-project-status-label");
          noProjectsText.textContent = `No projects currently at ${statusName}.`;
          noProjectsMessage.classList.remove("hidden");
        } else {
          noProjectsMessage.classList.add("hidden");
        }
      }
    }

    // Update URL
    function updateURL(statusFilter: string) {
      const url = new URL(window.location.href);
      if (statusFilter === "all") {
        url.searchParams.delete("status");
      } else {
        url.searchParams.set("status", statusFilter);
      }
      window.history.pushState({}, "", url.toString());
    }

    // Button click handlers
    items.forEach((item, index) => {
      item.addEventListener("click", () => {
        updateSlider(index);

        // Handle project filtering
        const filterValue = item.getAttribute("data-project-status-filter");
        if (filterValue) {
          filterProjects(filterValue);
          updateURL(filterValue);
        } else if (item.id === "all-statuses") {
          filterProjects("all");
          updateURL("all");
        }

        // Add scroll into view functionality
        setTimeout(() => {
          item.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
        }, 100);
      });
    });

    // Initial filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    const statusParam = urlParams.get("status");
    if (statusParam && nav) {
      const targetButton = nav.querySelector(`[data-project-status-filter="${statusParam}"]`);
      if (targetButton) {
        const targetIndex = Array.from(items).indexOf(targetButton);
        updateSlider(targetIndex);
        filterProjects(statusParam);
        return;
      }
    }

    // Initialize with first item
    updateSlider(0);
    filterProjects("all");
  });
</script>
