---
// Sliding pill navigation component
import Button from "./Button.astro";

export interface NavItem {
  id?: string;
  label: string;
  icon?: string;
  variant?: string;
  dataAttributes?: Record<string, string>;
  count?: number;
  onclick?: string;
}

interface Props {
  items?: NavItem[];
  activeItem?: number;
  class?: string;
  navId?: string;
  navClass?: string;
}

const {
  items = [],
  activeItem = 0,
  class: className = "",
  navId,
  navClass = "",
} = Astro.props as Props;
---

<nav
  id={navId}
  class={`ml-6 h-12 scrollbar-hide relative flex gap-1 overflow-x-auto whitespace-nowrap ${navClass}`}
>
  <!-- Sliding pill background -->
  <div
    id="nav-pill-bg"
    class="mix-blend-mode-multiply bg-primary dark:bg-primary-dark absolute top-2 h-9 rounded-full transition-all duration-300 ease-out"
    style="width: 0px; left: 0px; opacity: 0;"
  >
  </div>

  {
    items.map((item: NavItem, index: number) => (
      <Button
        id={item.id}
        variant={(item.variant as any) || "ghost"}
        size="sm"
        icon={item.icon}
        iconPosition="left"
        class={`pill-nav-item relative z-10 rounded-full transition-colors duration-200 ${
          index === activeItem
            ? "text-white dark:text-white"
            : "text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white"
        }`}
        data-index={index}
        dataAttributes={item.dataAttributes || {}}
        onclick={item.onclick}
      >
        {item.label}
        {item.count !== undefined && item.count > 0 && (
          <span class="absolute -right-2 -top-2 inline-flex items-center rounded-full bg-gray-200 px-2 py-0.5 text-xs font-medium text-gray-800 dark:bg-gray-700 dark:text-gray-200">
            {item.count}
          </span>
        )}
      </Button>
    ))
  }
</nav>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Generic sliding pill navigation - works with any nav that has the right structure
    function initializeSlidingPillNav(navId: string) {
      const nav = document.getElementById(navId);
      if (!nav) return;

      const pillBg = nav.querySelector('[id$="-pill-bg"]') || nav.querySelector("#nav-pill-bg");
      const buttons = nav.querySelectorAll("button[data-index], button[id], a[data-index], a[id]");

      // Update active button styling
      function updateActiveButton(activeButton: Element | null) {
        if (!nav) return;

        nav.querySelectorAll("button, a").forEach((btn) => {
          btn.classList.remove(
            "bg-blue-500",
            "text-white",
            "border-blue-500",
            "bg-hub-primary",
            "text-blue-600",
            "dark:text-blue-400"
          );
          btn.classList.add("text-hub-inactive", "dark:text-hub-inactive-dark");
        });

        if (activeButton) {
          activeButton.classList.remove("text-hub-inactive", "dark:text-hub-inactive-dark");
          activeButton.classList.add("text-blue-600", "dark:text-blue-400");
        }
      }

      // Update sliding pill position
      function updateSlidingPill(activeButton: Element | null) {
        if (!pillBg || !activeButton || !nav) return;

        const navRect = nav.getBoundingClientRect();
        const buttonRect = activeButton.getBoundingClientRect();

        // Calculate position relative to the nav container, accounting for scroll offset
        const left = buttonRect.left - navRect.left + nav.scrollLeft;
        const width = buttonRect.width;

        // Update pill position and size
        (pillBg as HTMLElement).style.left = `${left}px`;
        (pillBg as HTMLElement).style.width = `${width}px`;
        (pillBg as HTMLElement).style.opacity = "1";
      }

      // Handle button clicks - only update UI, don't handle business logic
      buttons.forEach((button: Element) => {
        button.addEventListener("click", function (this: HTMLElement) {
          updateActiveButton(this);

          // Slide pill first, then center navigation
          updateSlidingPill(this);
          setTimeout(() => {
            this.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
            // Recalculate pill position after scroll completes
            setTimeout(() => {
              updateSlidingPill(this);
            }, 500); // Wait for scroll animation to complete
          }, 350); // Wait for pill animation to complete (300ms + buffer)
        });
      });

      // Initialize pill position
      setTimeout(() => {
        const activeButton =
          nav.querySelector(".text-blue-600, .dark\\:text-blue-400") ||
          nav.querySelector("button:first-child, a:first-child");
        if (activeButton) {
          updateActiveButton(activeButton);
          updateSlidingPill(activeButton);
          // Center the active button on page load
          activeButton.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
        }
      }, 200);

      // Handle window resize to reposition pill
      let resizeTimeout: NodeJS.Timeout;
      window.addEventListener("resize", () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          const activeButton = nav.querySelector(".text-blue-600, .dark\\:text-blue-400");
          if (activeButton) {
            updateSlidingPill(activeButton);
          }
        }, 100);
      });

      // Expose functions globally for external control
      (window as any)[`${navId}_updateActiveButton`] = updateActiveButton;
      (window as any)[`${navId}_updateSlidingPill`] = updateSlidingPill;
    }

    // Initialize any sliding pill navs found on the page
    const slidingNavs = document.querySelectorAll('[class*="sliding-pill-nav"], [id*="nav"]');
    slidingNavs.forEach((nav) => {
      if (nav.id) {
        initializeSlidingPillNav(nav.id);
      }
    });

    // Also initialize common nav IDs
    const commonNavIds = ["project-nav", "tab-nav", "pill-nav"];
    commonNavIds.forEach((navId) => {
      if (document.getElementById(navId)) {
        initializeSlidingPillNav(navId);
      }
    });
  });
</script>
