---
import { getIcon } from "../../lib/custom-icons";
import type { IconConfig } from "../../lib/custom-icons";

interface Props {
  name: string;
  class?: string;
  color?: string;
  variant?:
    | "primary"
    | "secondary"
    | "success"
    | "warning"
    | "danger"
    | "outline"
    | "ghost"
    | "link"
    | "loading"
    | "disabled"
    | "selected"
    | "anchor";
  size?: "xs" | "sm" | "md" | "lg" | "xl";
  backgroundColor?:
    | "primary"
    | "secondary"
    | "success"
    | "warning"
    | "danger"
    | "outline"
    | "ghost"
    | "link"
    | "loading"
    | "disabled"
    | "selected"
    | "anchor";
  shape?: "circle" | "rounded" | "square";
  id?: string;
  customStyle?: string;
  style?: string;
  dataAttributes?: Record<string, string>;
}

const {
  name,
  class: className = "block",
  color = "currentColor",
  variant,
  size = "sm",
  backgroundColor,
  shape,
  id,
  customStyle,
  style,
  dataAttributes = {},
  ...rest
} = Astro.props;

// Use custom icon system
const iconConfig: IconConfig = {
  size:
    size === "xs"
      ? 12
      : size === "sm"
        ? 16
        : size === "md"
          ? 20
          : size === "lg"
            ? 24
            : size === "xl"
              ? 32
              : 16,
  color: color !== "currentColor" ? color : undefined,
  className: className,
  strokeWidth: 2,
};

const iconHTML = getIcon(name, iconConfig);
const finalIconStyle = style || customStyle || (color !== "currentColor" ? `color: ${color};` : "");
---

<div
  style={finalIconStyle}
  class={className}
  {id}
  {...dataAttributes}
  {...rest}
  set:html={iconHTML}
/>

<!-- Lucide icons are initialized globally in App.astro -->
