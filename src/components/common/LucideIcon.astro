---
import { getIcon } from "../../lib/simple-icons";

interface Props {
  name: string;
  class?: string;
  color?: string;
  variant?:
    | "primary"
    | "secondary"
    | "success"
    | "warning"
    | "danger"
    | "outline"
    | "ghost"
    | "link"
    | "loading"
    | "disabled"
    | "selected"
    | "anchor";
  size?: "xs" | "sm" | "md" | "lg" | "xl";
  backgroundColor?:
    | "primary"
    | "secondary"
    | "success"
    | "warning"
    | "danger"
    | "outline"
    | "ghost"
    | "link"
    | "loading"
    | "disabled"
    | "selected"
    | "anchor";
  shape?: "circle" | "rounded" | "square";
  id?: string;
  customStyle?: string;
  style?: string;
  dataAttributes?: Record<string, string>;
}

const {
  name,
  class: className = "block",
  color = "currentColor",
  variant,
  size = "sm",
  backgroundColor,
  shape,
  id,
  customStyle,
  style,
  dataAttributes = {},
  ...rest
} = Astro.props;

// Use simple icon system
const iconSize =
  size === "xs"
    ? 12
    : size === "sm"
      ? 16
      : size === "md"
        ? 20
        : size === "lg"
          ? 24
          : size === "xl"
            ? 32
            : 16;

// Get base icon HTML
let iconHTML = getIcon(name, {
  size: iconSize,
  className: className,
});

// Build attribute string for additional props
const attrs = [];
if (id) attrs.push(`id="${id}"`);
if (style || customStyle || color !== "currentColor") {
  const styleValue = style || customStyle || `color: ${color};`;
  attrs.push(`style="${styleValue}"`);
}
// Add data attributes
Object.entries(dataAttributes).forEach(([key, value]) => {
  attrs.push(`${key}="${value}"`);
});
// Add any other props
Object.entries(rest).forEach(([key, value]) => {
  if (typeof value === "string") {
    attrs.push(`${key}="${value}"`);
  }
});

// Inject attributes into SVG tag
if (attrs.length > 0) {
  iconHTML = iconHTML.replace("<svg", `<svg ${attrs.join(" ")}`);
}
---

<Fragment set:html={iconHTML} />

<!-- Simple icons are rendered as inline SVG -->
