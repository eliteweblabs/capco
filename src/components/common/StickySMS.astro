---
import BoxIcon from "./BoxIcon.astro";
import Button from "../common/Button.astro";

// Get current URL and determine page type (same logic as Header component)
const currentUrl = Astro.url.pathname;
import { isBackendPage } from "../../pages/api/backend-page-check";
const isBackend = isBackendPage(currentUrl);

// Don't show on backend pages or SMS demo page
// const shouldShow = !currentUrl.startsWith("/sms-demo");
---

<!-- SMS Button (collapsed state) -->
<button
  id="sms-toggle-btn"
  aria-label="Contact CAPCo"
  class="inline-flex items-center justify-center rounded-full bg-primary-500 px-5 py-3 text-base font-medium text-white shadow-lg transition-all duration-200 hover:bg-primary-600 hover:shadow-xl disabled:cursor-not-allowed disabled:opacity-50 dark:bg-primary-500 dark:hover:bg-primary-600"
>
  <BoxIcon name="message-rounded" class="text-xl" />
</button>

<!-- SMS Form Panel (expanded state) -->
<div
  id="sms-form-panel"
  class="absolute bottom-16 left-0 hidden w-80 max-w-[calc(100vw-3rem)] transform rounded-lg border border-gray-200 bg-white shadow-2xl transition-all duration-300 dark:border-gray-700 dark:bg-gray-800"
>
  <!-- Panel Header -->
  <div class="flex items-center justify-between border-b border-gray-200 p-4 dark:border-gray-700">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">ðŸ’¬ Contact CAPCo</h3>
    <button
      id="sms-close-btn"
      aria-label="Close SMS panel"
      class="flex h-8 w-8 items-center justify-center rounded-full text-gray-400 hover:bg-gray-100 hover:text-gray-600 dark:hover:bg-gray-700 dark:hover:text-gray-300"
    >
      <BoxIcon name="x" class="text-lg" />
    </button>
  </div>

  <!-- Panel Content -->
  <div class="p-4">


<div class={compact ? "w-full" : "mx-auto w-full max-w-lg"}>
  {!compact && (
    <div class="mb-6">
      <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Contact CAPCo</h3>
      <p class="text-sm text-gray-600 dark:text-gray-400">
        Send a message directly to our team
      </p>
    </div>
  )}

  <form action="/api/send-email-sms" method="post" class="space-y-4">
    <!-- Hidden fields for hardcoded phone numbers and carriers -->
    <input type="hidden" name="phone1" value="5085799673" />
    <input type="hidden" name="carrier1" value="@vtext.com" />
    <input type="hidden" name="phone2" value="6176333533" />
    <input type="hidden" name="carrier2" value="@vtext.com" />
    
  
    
    <!-- Contact Information (Optional) -->
    <div>
      <label for="contact-info" class="mb-2 block text-sm font-medium text-gray-900 dark:text-gray-300">
        Your Contact Info (Optional)
      </label>
      <input
        type="text"
        id="contact-info"
        name="contact_info"
        maxlength="50"
        placeholder="Your name, email, or phone for response"
        class="w-full rounded-lg border border-gray-300 bg-gray-50 px-3 py-2 text-sm focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-60 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-300 dark:focus:bg-gray-900"
      />
      <div class="mt-1 flex justify-between">
        <!-- <p class="text-xs text-gray-500 dark:text-gray-400">
          How should we respond? (Keep short - SMS has character limits)
        </p> -->
        <span id="contact-char-count" class="text-xs text-gray-500 dark:text-gray-400">0/50</span>
      </div>
    </div>

    <!-- Message -->
    <div>
      <label for="message" class="mb-2 block text-sm font-medium text-gray-900 dark:text-gray-300">
        Message <span class="text-red-500">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        required
        rows="4"
        maxlength="160"
        placeholder="Your message here..."
        class="w-full rounded-lg border border-gray-300 bg-gray-50 px-3 py-2 text-sm focus:border-blue-500 focus:bg-white focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-60 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-300 dark:focus:bg-gray-900"
      ></textarea>
      <div class="mt-1 flex justify-between">
        <p class="text-xs text-gray-500 dark:text-gray-400">Keep it short for better delivery</p>
        <span id="char-count" class="text-xs text-gray-500 dark:text-gray-400">0/160</span>
      </div>
    </div>



    <!-- Submit Button -->
    <div class="pt-4">
      <Button
        type="submit"
        variant="primary"
        size="md"
      >
        Send Message to CAPCo
      </Button>
    </div>
  </form>

  {!compact && (
    <!-- Information Box -->
    <div
      class="mt-6 rounded-full border border-yellow-200 bg-yellow-50 p-4 dark:border-yellow-700 dark:bg-yellow-900/20"
    >
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
            <path
              fill-rule="evenodd"
              d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
              clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-yellow-800 dark:text-yellow-200">Important Notes</h3>
          <div class="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
            <ul class="list-disc space-y-1 pl-5">
              <li>Delivery depends on carrier support and may not be immediate</li>
              <li>Some carriers may block or delay these messages</li>
              <li>Keep messages under 160 characters for best results</li>
              <li>This method is free but less reliable than dedicated SMS services</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )}
</div>

  </div>
</div>

<!-- Backdrop for mobile -->
<div id="sms-backdrop" class="fixed inset-0 z-[-1] hidden bg-black bg-opacity-50 md:hidden"></div>

<script>
  // Global function to trigger SMS form
  (window as any).triggerSMSForm = function () {
    const smsToggleBtn = document.getElementById("sms-toggle-btn");
    if (smsToggleBtn) {
      smsToggleBtn.click();
      console.log("ðŸ“± [LOGIN] SMS form triggered from contact support link");
    } else {
      console.warn("ðŸ“± [LOGIN] SMS toggle button not found");
    }
  };
</script>
<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("sticky-container");
    const toggleBtn = document.getElementById("sms-toggle-btn");
    const formPanel = document.getElementById("sms-form-panel");
    const closeBtn = document.getElementById("sms-close-btn");
    const backdrop = document.getElementById("sms-backdrop");

    if (!container || !toggleBtn || !formPanel || !closeBtn || !backdrop) {
      return; // Component not rendered (backend page)
    }

    let isOpen = false;

    function openPanel() {
      isOpen = true;
      if (formPanel) {
        formPanel.classList.remove("hidden");
      }
      if (backdrop) {
        backdrop.classList.remove("hidden");
      }

      // Add animation classes
      requestAnimationFrame(() => {
        if (formPanel) {
          formPanel.classList.add("animate-fade-in-up");
        }
        if (backdrop) {
          backdrop.classList.add("animate-fade-in");
        }
      });

      // Hide button on mobile for better UX
      if (window.innerWidth < 768 && toggleBtn) {
        toggleBtn.style.opacity = "0.3";
      }
    }

    function closePanel() {
      isOpen = false;

      // Add closing animation
      if (formPanel) {
        formPanel.classList.add("animate-fade-out-down");
      }
      if (backdrop) {
        backdrop.classList.add("animate-fade-out");
      }

      setTimeout(() => {
        if (formPanel) {
          formPanel.classList.add("hidden");
          formPanel.classList.remove("animate-fade-in-up", "animate-fade-out-down");
        }
        if (backdrop) {
          backdrop.classList.add("hidden");
          backdrop.classList.remove("animate-fade-in", "animate-fade-out");
        }
        if (toggleBtn) {
          toggleBtn.style.opacity = "1";
        }
      }, 300);
    }

    function togglePanel() {
      if (isOpen) {
        closePanel();
      } else {
        openPanel();
      }
    }

    // Event listeners
    toggleBtn.addEventListener("click", togglePanel);
    closeBtn.addEventListener("click", closePanel);
    backdrop.addEventListener("click", closePanel);

    // Don't close panel on form submit - let the form handle it
    // (form as HTMLFormElement).addEventListener("submit", closePanel);

    // Close on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && isOpen) {
        closePanel();
      }
    });

    // Close panel when SMS form is successfully submitted
    document.addEventListener("smsFormSubmitted", () => {
      if (isOpen) {
        setTimeout(() => {
          closePanel();
        }, 1000); // Wait 1 second to show success message
      }
    });

    // Responsive behavior
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 768 && isOpen && toggleBtn) {
        toggleBtn.style.opacity = "1";
      }
    });

    // Close panel when SMS form is submitted successfully
    if (formPanel) {
      const smsForm = formPanel.querySelector('form[action="#"]');
      if (smsForm) {
        smsForm.addEventListener("submit", () => {
          // Close panel after form submission
          setTimeout(() => {
            closePanel();
          }, 500);
        });
      }
    }

    // Safari 18 beta fix - ensure proper positioning
    function fixSafariViewport() {
      const container = document.getElementById("sticky-container");
      if (container) {
        // Force re-apply positioning with !important
        container.style.setProperty("position", "fixed", "important");
        container.style.setProperty("bottom", "1.5rem", "important");
        container.style.setProperty("right", "1.5rem", "important");
        container.style.setProperty("z-index", "40", "important");

        // Also fix the panel if it exists
        const panel = document.getElementById("sms-form-panel");
        if (panel) {
          panel.style.setProperty("position", "fixed", "important");
          panel.style.setProperty("bottom", "6rem", "important");
          panel.style.setProperty("right", "1.5rem", "important");
          panel.style.setProperty("z-index", "50", "important");
        }
      }
    }

    // Apply fix on load and multiple events
    fixSafariViewport();

    // Add multiple event listeners to catch Safari 18 beta resets
    window.addEventListener("resize", fixSafariViewport);
    window.addEventListener("orientationchange", () => {
      setTimeout(fixSafariViewport, 100);
    });
    window.addEventListener("scroll", fixSafariViewport);
    window.addEventListener("focus", fixSafariViewport);
    window.addEventListener("blur", fixSafariViewport);

    // Periodic check to ensure positioning stays correct (every 2 seconds)
    setInterval(fixSafariViewport, 2000);

    // Also fix when the panel is toggled
    if (toggleBtn) {
      toggleBtn.addEventListener("click", () => {
        setTimeout(fixSafariViewport, 100);
      });
    }

    // Use MutationObserver to catch DOM changes that might reset positioning
    const observer = new MutationObserver((mutations) => {
      let shouldFix = false;
      mutations.forEach((mutation) => {
        if (
          mutation.type === "attributes" &&
          (mutation.attributeName === "style" || mutation.attributeName === "class")
        ) {
          const target = mutation.target;
          if (
            target instanceof HTMLElement &&
            (target.id === "sticky-container" || target.id === "sms-form-panel")
          ) {
            shouldFix = true;
          }
        }
      });
      if (shouldFix) {
        setTimeout(fixSafariViewport, 50);
      }
    });

    // Start observing
    if (container) {
      observer.observe(container, {
        attributes: true,
        attributeFilter: ["style", "class"],
      });
    }

    console.log("ðŸ“± [STICKY-SMS] Component initialized with Safari 18 beta fix");
  });
</script>

<style>
  /* Custom animations for smooth panel transitions */
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fade-out-down {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(20px);
    }
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fade-out {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.3s ease-out forwards;
  }

  .animate-fade-out-down {
    animation: fade-out-down 0.3s ease-out forwards;
  }

  .animate-fade-in {
    animation: fade-in 0.3s ease-out forwards;
  }

  .animate-fade-out {
    animation: fade-out 0.3s ease-out forwards;
  }

  /* Safari 18 beta fix - more aggressive */
  #sticky-sms-container {
    position: fixed !important;
    bottom: 1.5rem !important;
    right: 1.5rem !important;
    z-index: 40 !important;
    transform: translateZ(0) !important; /* Force hardware acceleration */
  }

  #sms-form-panel {
    position: fixed !important;
    bottom: 6rem !important;
    right: 1.5rem !important;
    z-index: 50 !important;
    transform: translateZ(0) !important; /* Force hardware acceleration */
  }

  /* Additional Safari 18 beta fixes */
  #sticky-sms-container * {
    position: relative !important;
  }

  #sms-form-panel * {
    position: relative !important;
  }

  /* Ensure the panel stays within viewport */
  @media (max-width: 768px) {
    #sms-form-panel {
      position: fixed;
      bottom: 6rem;
      right: 1.5rem;
      left: 1.5rem;
      width: auto;
      max-width: none;
    }
  }

  /* Smooth button hover effect */
  #sms-toggle-btn {
    transition: all 0.3s ease;
  }

  #sms-toggle-btn:hover {
    transform: scale(1.05);
  }

  #sms-toggle-btn:active {
    transform: scale(0.95);
  }
</style>
