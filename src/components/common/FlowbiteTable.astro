<!-- ---
// Flowbite Table Component
// Based on Flowbite dashboard design patterns

interface Props {
  title?: string;
  headers: string[];
  data: any[];
  showActions?: boolean;
  showPagination?: boolean;
  itemsPerPage?: number;
}

const {
  title = "Data Table",
  headers,
  data = [],
  showActions = true,
  showPagination = true,
  itemsPerPage = 10,
} = Astro.props;
---

<div
  class="rounded-lg border border-gray-200 bg-gray-100 p-6 shadow dark:border-gray-700 dark:bg-gray-800"
>
  {
    title && (
      <div class="mb-4 flex items-center justify-between">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{title}</h3>
        <div class="flex items-center space-x-2">
          <button
            type="button"
            class="inline-flex items-center rounded-lg border border-gray-300 bg-gray-100 px-3 py-2 text-sm font-medium text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
          >
            <i class="bx bx-download mr-2" />
            Export
          </button>
          <button
            type="button"
            class="inline-flex items-center rounded-lg border border-transparent bg-blue-700 px-3 py-2 text-sm font-medium text-white hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700"
          >
            <i class="bx bx-plus mr-2" />
            Add New
          </button>
        </div>
      </div>
    )
  }

  <div class="overflow-x-auto">
    <table class="w-full text-left text-sm text-gray-500 dark:text-gray-400">
      <thead class="bg-gray-50 text-xs uppercase text-gray-700 dark:bg-gray-700 dark:text-gray-400">
        <tr>
          {
            headers.map((header, index) => (
              <th scope="col" class="px-6 py-3">
                {header}
              </th>
            ))
          }
          {
            showActions && (
              <th scope="col" class="px-6 py-3">
                Actions
              </th>
            )
          }
        </tr>
      </thead>
      <tbody>
        {
          data.map((row, rowIndex) => (
            <tr
              key={rowIndex}
              class="border-b bg-gray-100 hover:bg-gray-50 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-600"
            >
              {Object.values(row).map((cell, cellIndex) => (
                <td key={cellIndex} class="px-6 py-4">
                  {cell}
                </td>
              ))}
              {showActions && (
                <td class="px-6 py-4">
                  <div class="flex items-center space-x-2">
                    <button
                      type="button"
                      class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                    >
                      <i class="bx bx-edit text-lg" />
                    </button>
                    <button
                      type="button"
                      class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                    >
                      <i class="bx bx-trash text-lg" />
                    </button>
                  </div>
                </td>
              )}
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  {
    showPagination && data.length > itemsPerPage && (
      <nav class="flex items-center justify-between pt-4" aria-label="Table navigation">
        <span class="text-sm font-normal text-gray-500 dark:text-gray-400">
          Showing{" "}
          <span class="font-semibold text-gray-900 dark:text-white">
            1-{Math.min(itemsPerPage, data.length)}
          </span>{" "}
          of <span class="font-semibold text-gray-900 dark:text-white">{data.length}</span>
        </span>
        <ul class="inline-flex -space-x-px text-sm">
          <li>
            <button
              type="button"
              class="ml-0 flex h-8 items-center justify-center rounded-l-lg border border-gray-300 bg-gray-100 px-3 leading-tight text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              <i class="bx bx-chevron-left" />
            </button>
          </li>
          <li>
            <button
              type="button"
              class="flex h-8 items-center justify-center border border-blue-300 bg-blue-600 px-3 leading-tight text-white hover:bg-blue-700 hover:text-white dark:border-gray-700 dark:bg-gray-700 dark:text-white"
            >
              1
            </button>
          </li>
          <li>
            <button
              type="button"
              class="flex h-8 items-center justify-center border border-gray-300 bg-gray-100 px-3 leading-tight text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              2
            </button>
          </li>
          <li>
            <button
              type="button"
              class="flex h-8 items-center justify-center rounded-r-lg border border-gray-300 bg-gray-100 px-3 leading-tight text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              <i class="bx bx-chevron-right" />
            </button>
          </li>
        </ul>
      </nav>
    )
  }
</div> -->
