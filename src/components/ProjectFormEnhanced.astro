---
import { generateEditFormHTML } from "../lib/project-form-config";
import { PROJECT_STATUS_LABELS } from "../lib/global-services";

interface Props {
  project: any;
  role?: string;
}

const { project, role = "Client" } = Astro.props as Props;
---

<section class="p-5 border rounded-b-xl border-t-0 border-gray-200 dark:border-gray-700 dark:bg-gray-900" data-project-form data-project-id={project.id}>
  <form class="space-y-4" data-project-id={project.id}>
    <div id="project-form-container" set:html={generateEditFormHTML(0, project)} />

    <div class="grid grid-cols-2 gap-4 pt-2 border-t border-gray-200 dark:border-gray-600">
      <div>
        <span class="text-xs text-gray-500 dark:text-gray-400">Project ID:</span>
        <div class="text-sm text-gray-800 dark:text-gray-200">{project.id}</div>
      </div>
      <div>
        <span class="text-xs text-gray-500 dark:text-gray-400">Project Status:</span>
        <div id={`project-status-${project.id}`} class="text-sm text-gray-800 dark:text-gray-200">{project.status || 10}</div>
      </div>
      <div>
        <span class="text-xs text-gray-500 dark:text-gray-400">Change Status:</span>
        <select id="project-status-select" class="text-sm bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
          <option value="">Select Status</option>
        </select>
      </div>
      <div>
        <span class="text-xs text-gray-500 dark:text-gray-400">Last Updated:</span>
        <div class="text-sm text-gray-800 dark:text-gray-200">{new Date(project.updated_at || project.created).toLocaleString()}</div>
      </div>
      {role === "Admin" && (
        <div>
          <span class="text-xs text-gray-500 dark:text-gray-400">Assigned to:</span>
          <select id={`staff-assignment-${project.id}`} class="text-sm bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
            <option value="">Unassigned</option>
          </select>
        </div>
      )}
      <div>
        <span class="text-xs text-gray-500 dark:text-gray-400">Created:</span>
        <div class="text-sm text-gray-800 dark:text-gray-200">{new Date(project.created || project.created_at).toLocaleDateString()}</div>
      </div>
    </div>

    <div class="pt-4 border-t border-gray-200 dark:border-gray-600">
      <div class="flex items-center justify-between mb-2">
        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Attached Media</span>
        <button type="button" id="refresh-media-btn" class="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors">
          <i class="bx bx-refresh mr-1"></i>Refresh
        </button>
      </div>
      <div id={`media-links-${project.id}`} class="space-y-2">
        <div class="text-xs text-gray-500 dark:text-gray-400 italic">Loading media...</div>
      </div>
    </div>

    <div class="pt-4 border-t border-gray-200 dark:border-gray-600">
      <div class="mb-2"><span class="text-sm font-medium text-gray-700 dark:text-gray-300">Add Media Files</span></div>
      <div id={`media-dropzone-${project.id}`} class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 text-center cursor-pointer hover:border-blue-400 dark:hover:border-blue-500 transition-colors">
        <input type="file" id={`media-file-input-${project.id}`} class="hidden" multiple accept="image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx,.txt,.dwg" />
        <div class="flex flex-col items-center space-y-2">
          <i class="bx bx-upload text-2xl text-gray-400 dark:text-gray-500"></i>
          <div class="text-sm text-gray-600 dark:text-gray-400"><span class="font-medium text-blue-600 dark:text-blue-400">Click to upload</span> or drag and drop</div>
          <div class="text-xs text-gray-500 dark:text-gray-400">Images, videos, documents, DWG files (max 10MB each)</div>
        </div>
      </div>
      <div id={`media-upload-progress-${project.id}`} class="mt-2 hidden">
        <div class="text-xs text-gray-600 dark:text-gray-400 mb-1">Uploading...</div>
        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2"><div id={`media-upload-bar-${project.id}`} class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div></div>
      </div>
    </div>
  </form>

  <div class="flex flex-wrap gap-2 pt-4 border-t border-gray-200 dark:border-gray-600">
    <button type="button" id="delete-project-btn" class="px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors"><i class="bx bx-trash mr-1"></i></button>
    <button type="button" class="px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors estimate-btn" data-project-id={project.id}><i class="bx bx-file-pdf mr-1"></i>Build Estimate</button>
    <button type="button" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors edit-estimate-btn" data-project-id={project.id}><i class="bx bx-edit mr-1"></i>Edit Estimate</button>
    <div id={`invoice-link-${project.id}`} class="hidden"></div>
  </div>
</section>

<script id={`project-json-${project.id}`} type="application/json" set:html={JSON.stringify(project || {}, null, 0)}></script>

<script>
  import { showNotification } from "../lib/global-services";
  import { generateEditFormHTML } from "../lib/project-form-config";

  // Enhanced Project Form Management
  class ProjectFormEnhanced {
    private projectId: string;
    private projectData: any;
    private staffUsers: any[] = [];
    private role: string;

    constructor(projectId: string, projectData: any, role: string) {
      this.projectId = projectId;
      this.projectData = projectData;
      this.role = role;
      this.initialize();
    }

    async initialize() {
      await this.loadStaffUsers();
      this.setupAutoSave();
      this.setupButtonGroups();
      this.setupEventListeners();
      this.loadProjectFiles();
      this.loadProjectInvoices();
      this.populateStatusSelect();
      this.populateStaffAssignment();
      this.setupUpload();
    }

    // Load staff users for assignment dropdown
    async loadStaffUsers() {
      try {
        const response = await fetch("/api/get-staff-users");
        const result = await response.json();

        if (result.success) {
          this.staffUsers = result.staffUsers || [];
          this.populateStaffAssignment();
        }
      } catch (error) {
        console.error("Error loading staff users:", error);
        this.staffUsers = [];
      }
    }

    // Populate staff assignment dropdown
    private populateStaffAssignment() {
      const selectElement = document.getElementById(`staff-assignment-${this.projectId}`) as HTMLSelectElement;
      if (!selectElement) return;

      selectElement.innerHTML = '<option value="">Unassigned</option>';

      this.staffUsers.forEach((staff) => {
        const option = document.createElement("option");
        option.value = staff.id;
        option.textContent = staff.name;

        if (this.projectData.assigned_to_id === staff.id) {
          option.selected = true;
        }

        selectElement.appendChild(option);
      });
    }

    // Setup auto-save functionality
    private setupAutoSave() {
      const debounce = (func: Function, wait: number) => {
        let timeout: NodeJS.Timeout;
        return function executedFunction(...args: any[]) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      };

      const autoSaveProject = debounce(async (projectId: string, form: HTMLFormElement) => {
        try {
          const formData = new FormData(form);
          const projectData: any = {};

          for (const [key, value] of formData.entries()) {
            if (key === "new_construction") {
              projectData[key] = true;
            } else if (key === "sq_ft" || key === "units" || key === "status") {
              projectData[key] = parseInt(value as string) || 0;
            } else {
              projectData[key] = value;
            }
          }

          if (!formData.has("new_construction")) {
            projectData.new_construction = false;
          }

          // Convert units slider to actual value
          const unitsSlider = form.querySelector('input[name="units"]') as HTMLInputElement;
          if (unitsSlider) {
            const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
            const sliderIndex = parseInt(unitsSlider.value);
            projectData.units = values[sliderIndex] || 1;
          }

          // Collect button group data
          const buttonGroups = ["building", "project", "service", "requested_docs"];
          buttonGroups.forEach((groupName) => {
            const groupButtons = form.querySelectorAll(`[data-group="${groupName}"]`);
            const groupType = groupButtons.length > 0 ? (groupButtons[0] as HTMLElement).dataset.type : null;

            if (groupType === "radio") {
              const selectedButton = Array.from(groupButtons).find((btn) => btn.classList.contains("bg-blue-500"));
              if (selectedButton) {
                projectData[groupName] = (selectedButton as HTMLElement).dataset.value;
              }
            } else if (groupType === "multi-select") {
              const selectedButtons = Array.from(groupButtons).filter((btn) => btn.classList.contains("bg-blue-500"));
              if (selectedButtons.length > 0) {
                projectData[groupName] = selectedButtons.map((btn) => (btn as HTMLElement).dataset.value);
              }
            }
          });

          const response = await fetch("/api/update-project-status", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ projectId, ...projectData }),
          });

          if (!response.ok) {
            throw new Error("Auto-save failed");
          }

          showNotification({
            type: "success",
            title: "Changes Saved",
            message: "Your project changes have been saved automatically",
            duration: 3000,
          });
        } catch (error) {
          console.error("Auto-save error:", error);
          showNotification({
            type: "error",
            title: "Save Failed",
            message: "Could not save changes. Please try again.",
            duration: 5000,
          });
        }
      }, 1000);

      // Listen for form changes
      document.addEventListener("input", (e) => {
        const target = e.target as HTMLElement;
        const form = target.closest("form[data-project-id]") as HTMLFormElement;
        if (!form) return;

        const projectId = form.dataset.projectId;
        if (!projectId) return;

        autoSaveProject(projectId, form);
      });

      // Listen for button group changes
      document.addEventListener("click", (e) => {
        const button = (e.target as HTMLElement).closest(".building-type-radio, .consulting-service-btn, .fire-service-radio, .fire-safety-service-btn");
        if (!button) return;

        const form = button.closest("form[data-project-id]") as HTMLFormElement;
        if (!form) return;

        const projectId = form.dataset.projectId;
        if (!projectId) return;

        autoSaveProject(projectId, form);
      });
    }

    // Setup button group functionality
    private setupButtonGroups() {
      document.addEventListener("click", (e) => {
        const button = (e.target as HTMLElement).closest(".building-type-radio, .consulting-service-btn, .fire-service-radio, .fire-safety-service-btn");
        if (!button) return;

        e.preventDefault();

        const value = (button as HTMLElement).dataset.value;
        const group = (button as HTMLElement).dataset.group;
        const type = (button as HTMLElement).dataset.type;

        if (!value || !group || !type) return;

        if (type === "radio") {
          const groupButtons = document.querySelectorAll(`[data-group="${group}"]`);
          groupButtons.forEach((btn) => {
            btn.classList.remove("bg-blue-500", "text-white", "border-blue-500");
            btn.classList.add("bg-white", "dark:bg-gray-700", "text-gray-700", "dark:text-gray-300", "border-gray-300", "dark:border-gray-600");
          });

          button.classList.add("bg-blue-500", "text-white", "border-blue-500");
          button.classList.remove("bg-white", "dark:bg-gray-700", "text-gray-700", "dark:text-gray-300", "border-gray-300", "dark:border-gray-600");
        } else if (type === "multi-select") {
          const isSelected = button.classList.contains("bg-blue-500");

          if (isSelected) {
            button.classList.remove("bg-blue-500", "text-white", "border-blue-500");
            button.classList.add("bg-white", "dark:bg-gray-700", "text-gray-700", "dark:text-gray-300", "border-gray-300", "dark:border-gray-600");
          } else {
            button.classList.add("bg-blue-500", "text-white", "border-blue-500");
            button.classList.remove("bg-white", "dark:bg-gray-700", "text-gray-700", "dark:text-gray-300", "border-gray-300", "dark:border-gray-600");
          }
        }
      });
    }

    // Setup all event listeners
    private setupEventListeners() {
      // Handle estimate button clicks
      document.addEventListener("click", (e) => {
        const buildTarget = (e.target as HTMLElement).closest(".estimate-btn");
        const editTarget = (e.target as HTMLElement).closest(".edit-estimate-btn");

        const target = buildTarget || editTarget;
        if (!target) return;

        e.preventDefault();
        e.stopPropagation();
        
        const projectId = (target as HTMLElement).dataset.projectId;
        const isEditMode = target.classList.contains("edit-estimate-btn");

        if (projectId) {
          this.handleEstimateClick(projectId, isEditMode);
        }
      });

      // Handle project status change
      document.addEventListener("change", async (e) => {
        const target = e.target as HTMLSelectElement;
        if (!target.classList.contains("project-status-select")) return;

        const projectId = target.dataset.projectId;
        const newStatus = parseInt(target.value, 10);
        if (!projectId || Number.isNaN(newStatus)) return;

        try {
          const res = await fetch("/api/update-project-status", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ projectId, status: newStatus }),
          });

          if (!res.ok) {
            throw new Error("Failed to update project status");
          }

          const numEl = document.getElementById(`project-status-${projectId}`);
          if (numEl) numEl.textContent = String(newStatus);

          showNotification({
            type: "success",
            title: "Status Updated",
            message: `Project moved to ${newStatus}`,
            duration: 2000,
          });
        } catch (err) {
          console.error("Status change error", err);
          showNotification({
            type: "error",
            title: "Update Failed",
            message: "Could not update project status.",
            duration: 2500,
          });
        }
      });

      // Handle staff assignment changes
      document.addEventListener("change", async (e) => {
        const target = e.target as HTMLSelectElement;
        if (!target.classList.contains("staff-assignment-select")) return;

        const projectId = target.dataset.projectId;
        const assignedToId = target.value || null;

        if (!projectId) return;

        try {
          const response = await fetch("/api/assign-project", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ projectId, assignedToId }),
          });

          const result = await response.json();

          if (result.success) {
            showNotification({
              type: "success",
              title: "Assignment Updated",
              message: result.message || "Project assignment updated",
              duration: 3000,
            });
          } else {
            showNotification({
              type: "error",
              title: "Assignment Failed",
              message: result.error || "Could not update assignment",
              duration: 5000,
            });
          }
        } catch (error) {
          console.error("Assignment error:", error);
          showNotification({
            type: "error",
            title: "Assignment Error",
            message: "Could not update assignment",
            duration: 5000,
          });
        }
      });

      // Handle delete project button
      document.addEventListener("click", async (e) => {
        const target = e.target as HTMLElement;
        if (target.id === "delete-project-btn" || target.closest("#delete-project-btn")) {
          e.preventDefault();
          await this.deleteProject();
        }
      });
    }

    // Handle estimate button clicks
    private async handleEstimateClick(projectId: string, isEditMode: boolean) {
      try {
        const invoicesResponse = await fetch("/api/list-invoices");
        const invoicesData = await invoicesResponse.json();
        const existingInvoice = invoicesData.invoices?.find(
          (invoice: any) => invoice.project_id.toString() === projectId.toString()
        );

        if (isEditMode || existingInvoice) {
          if (existingInvoice) {
            showNotification({
              type: "success",
              title: "Opening Invoice",
              message: `Opening invoice ${existingInvoice.invoice_number} for editing`,
              duration: 3000,
            });

            setTimeout(() => {
              window.location.href = `/invoice/${existingInvoice.id}`;
            }, 500);
            return;
          } else {
            showNotification({
              type: "error",
              title: "No Invoice Found",
              message: "No invoice exists for this project yet. Use 'Build Estimate' first.",
              duration: 5000,
            });
            return;
          }
        }

        const response = await fetch("/api/create-invoice", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ projectId, projectData: this.projectData }),
        });

        const result = await response.json();

        if (result.success) {
          try {
            await fetch("/api/update-project-status", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ projectId, status: 20 }),
            });
          } catch (statusError) {
            console.warn("Failed to update project status:", statusError);
          }

          showNotification({
            type: "success",
            title: "Invoice Created",
            message: `Invoice ${result.invoice?.invoice_number || ""} created successfully`,
            duration: 3000,
          });

          setTimeout(() => {
            window.location.href = `/invoice/${result.invoice.id}`;
          }, 800);
        } else {
          showNotification({
            type: "error",
            title: "Invoice Creation Failed",
            message: result.error || "Could not create invoice",
            duration: 5000,
          });
        }
      } catch (error) {
        console.error("Estimate click error:", error);
        showNotification({
          type: "error",
          title: "Invoice Error",
          message: "Could not process invoice request",
          duration: 5000,
        });
      }
    }

    // Delete project method
    async deleteProject() {
      if (!confirm("Are you sure you want to delete this project? This action cannot be undone.")) {
        return;
      }

      try {
        const response = await fetch(`/api/delete-project`, {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ projectId: this.projectId }),
        });

        if (!response.ok) {
          throw new Error(`Failed to delete project: ${response.statusText}`);
        }

        showNotification({
          type: "success",
          title: "Project Deleted",
          message: "Project has been successfully deleted.",
          duration: 3000,
        });

        setTimeout(() => {
          window.location.href = "/";
        }, 1000);
      } catch (error) {
        console.error("Error deleting project:", error);
        showNotification({
          type: "error",
          title: "Delete Failed",
          message: "Failed to delete project. Please try again.",
          duration: 5000,
        });
      }
    }

    // Load project files
    async loadProjectFiles() {
      const mediaContainer = document.getElementById(`media-links-${this.projectId}`);
      if (!mediaContainer) return;
      
      mediaContainer.innerHTML = '<div class="text-xs text-gray-500 dark:text-gray-400 italic">Loading media...</div>';
      
      try {
        const res = await fetch("/api/get-project-files", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ projectId: this.projectId }),
        });
        
        const data = await res.json();
        const files = data.files || [];
        
        if (files.length === 0) {
          mediaContainer.innerHTML = '<div class="text-xs text-gray-500 dark:text-gray-400 italic">No media files attached</div>';
          return;
        }
        
        mediaContainer.innerHTML = files.map((file: any) => {
          const fileName = file.file_name || file.name || "Unknown file";
          const fileSize = file.file_size ? this.formatFileSize(file.file_size) : "";
          const uploadDate = file.uploaded_at ? this.formatTimestamp(file.uploaded_at) : "";
          const iconClass = file.file_type?.includes("image") ? "bx bx-image text-green-500" : 
                           file.file_type?.includes("spreadsheet") || file.file_type?.includes("excel") ? "bx bx-file-spreadsheet text-green-600" : 
                           file.file_type?.includes("document") || file.file_type?.includes("word") ? "bx bx-file-doc text-blue-500" : 
                           "bx bx-file-pdf text-red-500";
          
          return `
            <div class="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded border">
              <div class="flex items-center flex-1 min-w-0">
                <i class="${iconClass} mr-2 flex-shrink-0"></i>
                <div class="flex-1 min-w-0">
                  <div class="text-sm font-medium text-gray-800 dark:text-gray-200 truncate" title="${fileName}">${fileName}</div>
                  <div class="text-xs text-gray-500 dark:text-gray-400">${fileSize}${uploadDate ? ` • ${uploadDate}` : ""}</div>
                </div>
              </div>
              <div class="flex items-center gap-2 ml-2">
                ${file.public_url ? `
                  <a href="${file.public_url}" target="_blank" rel="noopener noreferrer" class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors" title="View file"><i class="bx bx-external-link mr-1"></i>View</a>
                  <a href="${file.public_url}" download="${fileName}" class="text-xs px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 transition-colors" title="Download file"><i class="bx bx-download mr-1"></i>Download</a>
                ` : `<span class="text-xs text-gray-500 dark:text-gray-400 italic">File not accessible</span>`}
              </div>
            </div>`;
        }).join("");
      } catch (err) {
        console.error("Error loading project files:", err);
        mediaContainer.innerHTML = '<div class="text-xs text-red-500 dark:text-red-400 italic">Error loading media files</div>';
      }
    }

    // Load project invoices
    async loadProjectInvoices() {
      const invoiceContainer = document.getElementById(`invoice-link-${this.projectId}`);
      if (!invoiceContainer) return;
      
      try {
        const res = await fetch("/api/list-invoices");
        const data = await res.json();
        const projectInvoices = (data.invoices || []).filter((inv: any) => String(inv.project_id) === String(this.projectId));
        
        if (projectInvoices.length === 0) {
          invoiceContainer.classList.add("hidden");
          return;
        }
        
        invoiceContainer.innerHTML = projectInvoices.map((inv: any) => {
          const statusColor = inv.status === "paid" ? "bg-green-500" : inv.status === "sent" ? "bg-blue-500" : "bg-gray-500";
          return `<a href="/invoice/${inv.id}" target="_blank" class="inline-flex items-center px-3 py-1 text-xs font-medium text-white ${statusColor} rounded-lg hover:opacity-80 transition-opacity mr-2 mb-2" title="Invoice ${inv.invoice_number} - ${inv.status}"><i class="bx bx-receipt mr-1"></i>${inv.invoice_number}</a>`;
        }).join("");
        
        invoiceContainer.classList.remove("hidden");
      } catch (err) {
        console.error("Error loading invoices:", err);
      }
    }

    // Populate status select
    async populateStatusSelect() {
      const select = document.getElementById("project-status-select");
      if (!select) return;
      
      select.innerHTML = Object.entries(PROJECT_STATUS_LABELS)
        .sort(([a], [b]) => Number(a) - Number(b))
        .map(([code, label]) => `<option value="${code}">${code} - ${label}</option>`)
        .join("");
      
      if (this.projectData.status) {
        select.value = String(this.projectData.status);
      }
    }

    // Setup file upload
    setupUpload() {
      const dropzone = document.getElementById(`media-dropzone-${this.projectId}`);
      const input = document.getElementById(`media-file-input-${this.projectId}`);
      if (!dropzone || !input) return;
      
      dropzone.addEventListener("click", () => input.click());
      dropzone.addEventListener("dragover", (e) => {
        e.preventDefault();
        dropzone.classList.add("border-blue-500", "bg-blue-50", "dark:bg-blue-900/20");
      });
      dropzone.addEventListener("dragleave", (e) => {
        e.preventDefault();
        dropzone.classList.remove("border-blue-500", "bg-blue-50", "dark:bg-blue-900/20");
      });
      dropzone.addEventListener("drop", async (e) => {
        e.preventDefault();
        dropzone.classList.remove("border-blue-500", "bg-blue-50", "dark:bg-blue-900/20");
        const files = e.dataTransfer?.files;
        if (files?.length) {
          await this.uploadFiles(Array.from(files));
        }
      });
      input.addEventListener("change", async (e) => {
        const files = (e.target as HTMLInputElement).files;
        if (files?.length) {
          await this.uploadFiles(Array.from(files));
          (e.target as HTMLInputElement).value = "";
        }
      });
    }

    // Upload files
    async uploadFiles(files: File[]) {
      const progressContainer = document.getElementById(`media-upload-progress-${this.projectId}`);
      const progressBar = document.getElementById(`media-upload-bar-${this.projectId}`);
      
      if (progressContainer && progressBar) {
        progressContainer.classList.remove("hidden");
      }
      
      try {
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          if (progressBar) {
            progressBar.style.width = `${((i + 1) / files.length) * 100}%`;
          }
          
          if (file.size > 10 * 1024 * 1024) {
            console.warn(`File too large: ${file.name}`);
            continue;
          }
          
          const formData = new FormData();
          formData.append("file", file);
          formData.append("projectId", this.projectId);
          formData.append("fileType", "media");
          
          const res = await fetch("/api/upload", { method: "POST", body: formData });
          if (!res.ok) {
            throw new Error(`Upload failed for ${file.name}`);
          }
        }
        
        if (progressContainer && progressBar) {
          progressContainer.classList.add("hidden");
          progressBar.style.width = "0%";
        }
        
        await this.loadProjectFiles();
        showNotification({
          type: "success",
          title: "Upload Complete",
          message: `Successfully uploaded ${files.length} file(s)`,
        });
      } catch (err) {
        console.error("Upload error:", err);
        if (progressContainer && progressBar) {
          progressContainer.classList.add("hidden");
          progressBar.style.width = "0%";
        }
        showNotification({
          type: "error",
          title: "Upload Failed",
          message: "Failed to upload files",
        });
      }
    }

    // Utility functions
    formatFileSize(bytes: number) {
      if (!bytes) return "";
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    }

    formatTimestamp(ts: string) {
      try {
        return new Date(ts).toLocaleString();
      } catch {
        return "";
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    const projectId = document.querySelector("[data-project-form]")?.getAttribute("data-project-id");
    const jsonEl = document.querySelector(`script[id="project-json-${projectId}"]`);
    const projectData = jsonEl ? JSON.parse(jsonEl.textContent || "{}") : {};
    const role = (window as any).USER_ROLE || "Client";
    
    if (projectId) {
      new ProjectFormEnhanced(projectId, projectData, role);
    }
  });
</script>
