---
import ProjectNavButton from "./ProjectNavButton.astro";
import { getI18N } from "@/i18n";
import { checkAuth } from "../../lib/auth";

// Para cambiar idioma de textos
const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

// Get current user for authentication and role
const { isAuth, user, role } = await checkAuth(Astro.cookies);

// Fetch project_statuses from API
let project_statuses: any[] = [];
let projects: any[] = [];
let statusCounts: Record<string, number> = {};

try {
  // Fetch project statuses
  const statusResponse = await fetch(`${Astro.url.origin}/api/get-project-statuses`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (statusResponse.ok) {
    const result = await statusResponse.json();
    if (result.success) {
      project_statuses = Object.values(result.statuses || {});
    } else {
      console.error("API returned error:", result.error);
    }
  } else {
    console.error("Failed to fetch project_statuses:", statusResponse.status);
  }

  // Fetch projects to calculate counts (only if user is authenticated)
  if (isAuth && user) {
    const projectsResponse = await fetch(`${Astro.url.origin}/api/get-project`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        user_id: user.id,
        role: role || "Client",
      },
    });

    if (projectsResponse.ok) {
      const projectsResult = await projectsResponse.json();
      if (projectsResult.success) {
        projects = projectsResult.projects || [];

        // Calculate status counts
        statusCounts = {};
        projects.forEach((project) => {
          const status = project.status?.toString() || "10";
          statusCounts[status] = (statusCounts[status] || 0) + 1;
        });
      }
    }
  }
} catch (error) {
  console.error("Error fetching data:", error);
}
---

<nav
  id="sub-nav"
  class="scrollbar-hide relative flex gap-1 overflow-x-auto whitespace-nowrap text-hub-inactive dark:border-hub-border-dark"
>
  <ProjectNavButton
    id="all-statuses"
    label="All Statuses"
    icon="bx bx-list-ul"
    data-count={projects.length.toString()}
  >
    All Statuses
  </ProjectNavButton>

  {
    project_statuses.length > 0
      ? project_statuses
          .filter((status: any) => status.display_in_nav === true)
          .map((status: any) => (
            <ProjectNavButton
              label={status.status_name}
              data-project-status-filter={status.status_code}
              data-count={(statusCounts[status.status_code] || 0).toString()}
            >
              {status.status_name}
            </ProjectNavButton>
          ))
      : ""
  }
</nav>

<script>
  // Project status filtering functionality
  document.addEventListener("DOMContentLoaded", function () {
    const subNav = document.getElementById("sub-nav");
    const projectList = document.getElementById("project-list");

    if (!subNav || !projectList) return;

    // Get all filter buttons
    const filterButtons = subNav.querySelectorAll("[data-project-status-filter]");
    const allStatusesButton = subNav.querySelector("#all-statuses");

    // Get all project items
    const projectItems = projectList.querySelectorAll("[data-project-status]");

    // Add click event listeners to filter buttons
    filterButtons.forEach((button) => {
      button.addEventListener("click", function (this: HTMLButtonElement) {
        const filterValue = this.getAttribute("data-project-status-filter");
        filterProjectsByStatus(filterValue);
        updateActiveButton(this);
      });
    });

    // Add click event listener to "All Statuses" button
    if (allStatusesButton) {
      allStatusesButton.addEventListener("click", function (this: HTMLButtonElement) {
        filterProjectsByStatus("all");
        updateActiveButton(this);
        this.scrollIntoView({
          behavior: "smooth",
          block: "nearest",
          inline: "center",
        });
      });
    }

    // Filter projects based on status
    function filterProjectsByStatus(statusFilter: string | null) {
      projectItems.forEach((item) => {
        const projectStatus = item.getAttribute("data-project-status");

        if (statusFilter === "all" || statusFilter === projectStatus) {
          // Show project
          (item as HTMLElement).style.display = "block";
          (item as HTMLElement).style.opacity = "1";
        } else {
          // Hide project
          (item as HTMLElement).style.display = "none";
          (item as HTMLElement).style.opacity = "0";
        }
      });

      // Update URL hash for bookmarking
      if (statusFilter && statusFilter !== "all") {
        window.location.hash = `status=${statusFilter}`;
      } else {
        window.location.hash = "";
      }
    }

    // Update active button styling
    function updateActiveButton(activeButton: Element) {
      if (!subNav) return;

      // Remove active class from all buttons
      const allButtons = subNav.querySelectorAll("button");
      allButtons.forEach((btn) => {
        btn.classList.remove("bg-blue-500", "text-white", "border-blue-500");
        btn.classList.add("text-hub-inactive");
      });

      // Add active class to clicked button
      activeButton.classList.remove("text-hub-inactive");
      activeButton.classList.add("bg-blue-500", "text-white", "border-blue-500");
    }

    // Function to update count bubbles based on visible projects
    function updateCountBubbles() {
      const projectsList = document.getElementById("projects-list");
      if (!projectsList || !subNav) return;

      const allProjects = projectsList.querySelectorAll("[data-project-status]");
      const visibleProjects = projectsList.querySelectorAll(
        '[data-project-status]:not([style*="display: none"])'
      );
      const statusCounts: Record<string, number> = {};

      // Count visible projects by status
      visibleProjects.forEach((project) => {
        const htmlProject = project as HTMLElement;
        const status = htmlProject.dataset.projectStatus || "10";
        statusCounts[status] = (statusCounts[status] || 0) + 1;
      });

      // Update each nav button's count
      const navButtons = subNav.querySelectorAll("button");
      navButtons.forEach((button) => {
        const htmlButton = button as HTMLButtonElement;
        const statusFilter = htmlButton.dataset.projectStatusFilter;
        const isAllStatuses = htmlButton.id === "all-statuses";

        let count = 0;
        if (isAllStatuses) {
          count = visibleProjects.length;
        } else if (statusFilter) {
          count = statusCounts[statusFilter] || 0;
        }

        // Update the count display
        const countSpan = htmlButton.querySelector("span.absolute");
        if (countSpan) {
          countSpan.textContent = count.toString();
          // Hide if count is 0
          if (count === 0) {
            (countSpan as HTMLElement).style.display = "none";
          } else {
            (countSpan as HTMLElement).style.display = "flex";
          }
        }
      });
    }

    // Update counts when page loads
    updateCountBubbles();

    // Listen for project list changes to update counts
    const observer = new MutationObserver(() => {
      updateCountBubbles();
    });

    const projectsList = document.getElementById("projects-list");
    if (projectsList) {
      observer.observe(projectsList, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ["style"],
      });
    }

    // Handle URL hash on page load
    function handleInitialFilter() {
      if (!subNav) return;

      const hash = window.location.hash;
      if (hash && hash.includes("status=")) {
        const statusMatch = hash.match(/status=([^&]+)/);
        if (statusMatch) {
          const statusFilter = statusMatch[1];
          const targetButton = subNav.querySelector(
            `[data-project-status-filter="${statusFilter}"]`
          );
          if (targetButton) {
            filterProjectsByStatus(statusFilter);
            updateActiveButton(targetButton);
            return;
          }
        }
      }

      // Default to "All Statuses"
      if (allStatusesButton) {
        updateActiveButton(allStatusesButton);
      }
    }

    // Initialize filter on page load
    handleInitialFilter();
  });
</script>
