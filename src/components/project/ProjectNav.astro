---
import type { NavItem } from "../common/SlidingPillNav.astro";
import SlidingPillNav from "../common/SlidingPillNav.astro";

interface Project {
  status: number;
  authorId: string;
}

interface Status {
  statusCode: number;
  clientStatusName: string;
  adminStatusName: string;
  statusName: string;
  supabaseUrl?: string;
}

interface Props {
  currentRole?: string;
  projects?: Project[];
  statuses?: Status[];
  currentUser?: any;
  supabaseUrl?: string;
}

const { currentRole, projects = [], statuses = [], currentUser, supabaseUrl } = Astro.props;

// Use provided data instead of fetching
let projectStatuses: Status[] = statuses;
let statusCounts: Record<string, number> = {};
let roleBasedProjectsCount = 0;

// Calculate status counts from provided projects
if (projects && projects.length > 0) {
  statusCounts = {};

  if (currentRole === "Client") {
    // For clients, count by clientStatusName (deduplicated)
    projects.forEach((project: Project) => {
      const statusInfo = projectStatuses.find((s: Status) => s.statusCode === project.status);
      if (statusInfo && statusInfo.clientStatusName && project.authorId === currentUser?.id) {
        const clientStatusName = statusInfo.clientStatusName;
        statusCounts[clientStatusName] = (statusCounts[clientStatusName] || 0) + 1;
        roleBasedProjectsCount++;
      }
    });
  } else {
    // For admins/staff, count by status number
    projects.forEach((project: Project) => {
      const status = project.status?.toString() || "10";
      statusCounts[status] = (statusCounts[status] || 0) + 1;
      roleBasedProjectsCount++;
    });
  }
}

if (!projects || projects.length === 0) return;

// Build navigation items
const navItems: NavItem[] = [
  {
    id: "all-statuses",
    label: "All Projects",
    variant: "tab",
    dataAttributes: {
      "data-label": "All Projects",
      "data-project-status-filter": "all",
      "data-count": projects.length.toString(),
    },
  },
];

if (projectStatuses.length > 0) {
  if (currentRole === "Client") {
    // Client navigation: deduplicate by clientStatusName and use slugs
    const clientStatuses = projectStatuses
      .filter((status: Status) => status.clientStatusName && status.clientStatusName.trim() !== "")
      .reduce((acc: Status[], status: Status) => {
        // Check if this clientStatusName already exists
        const existing = acc.find((s) => s.clientStatusName === status.clientStatusName);
        if (!existing) {
          acc.push(status);
        }
        return acc;
      }, []);

    clientStatuses.forEach((status: Status) => {
      // Create slug from clientStatusName
      const slug = status.clientStatusName
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, "")
        .replace(/\s+/g, "-")
        .trim();

      navItems.push({
        id: `status-${slug}`,
        label: status.clientStatusName,
        variant: "tab",
        dataAttributes: {
          "data-project-status-label": status.clientStatusName,
          "data-project-status-filter": slug,
          "data-count": (statusCounts[status.clientStatusName] || 0).toString(),
        },
      });
    });
  } else {
    // Admin/Staff navigation: use status numbers
    projectStatuses.forEach((status: Status) => {
      navItems.push({
        id: `status-${status.statusCode}`,
        label: status.adminStatusName,
        variant: "tab",
        dataAttributes: {
          "data-label": status.adminStatusName,
          "data-project-status-filter": status.statusCode.toString(),
          "data-count": (statusCounts[status.statusCode] || 0).toString(),
        },
      });
    });
  }
}
---

<SlidingPillNav
  navId="project-nav"
  navClass="text-gray-600 dark:text-gray-400 dark:border-gray-700"
  {currentUser}
  items={navItems}
/>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Project-specific filtering logic
    const projectList = document.getElementById("project-list");
    const subNav = document.getElementById("project-nav");

    if (!subNav || !projectList) return;

    const projectItems = projectList.querySelectorAll("[data-project-status]");
    const filterButtons = subNav.querySelectorAll("[data-project-status-filter]");
    const allStatusesButton = subNav.querySelector("#all-statuses");

    // Project filtering logic
    function filterProjects(statusFilter: string) {
      const shouldShow = (projectStatusSlug: string) => {
        if (statusFilter === "all") {
          return true;
        }
        return projectStatusSlug === statusFilter;
      };

      let visibleCount = 0;
      projectItems.forEach((item) => {
        const projectStatusSlug = item.getAttribute("data-project-status");
        const shouldShowItem = shouldShow(projectStatusSlug || "");

        if (shouldShowItem && !item.classList.contains("hidden")) {
          (item as any).style.display = "block";
          (item as any).style.opacity = "1";
          visibleCount++;
        } else {
          (item as any).style.display = "none";
          (item as any).style.opacity = "0";
        }
      });

      // Show/hide no projects message
      const noProjectsMessage = document.getElementById("no-projects-message");
      const noProjectsText = document.getElementById("no-projects-text");
      if (noProjectsMessage && noProjectsText) {
        if (visibleCount === 0) {
          noProjectsText.textContent = `No projects currently at ${statusFilter}.`;
          noProjectsMessage.classList.remove("hidden");
        } else {
          noProjectsMessage.classList.add("hidden");
        }
      }
    }

    // Update URL for project filtering
    function updateURL(statusFilter: string) {
      const url = new URL(window.location.href);
      if (statusFilter === "all") {
        url.searchParams.delete("status");
      } else {
        url.searchParams.set("status", statusFilter);
      }
      window.history.pushState({}, "", url.toString());
    }

    // Add project filtering to button clicks
    filterButtons.forEach((button: Element) => {
      button.addEventListener("click", function (this: HTMLElement) {
        const filterValue = this.getAttribute("data-project-status-filter");
        if (filterValue) {
          filterProjects(filterValue);
          updateURL(filterValue);
        }
      });
    });

    if (allStatusesButton) {
      allStatusesButton.addEventListener("click", function (this: HTMLElement) {
        filterProjects("all");
        updateURL("all");
      });
    }
  });
</script>
