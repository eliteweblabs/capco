---
export interface Props {
  currentRole?: string;
  projects?: any[];
  statuses?: any[];
}

import ProjectNavButton from "./ProjectNavButton.astro";

// Get props
const { currentRole, projects = [], statuses = [] } = Astro.props;

// Use provided data instead of fetching
let project_statuses: any[] = statuses;
let statusCounts: Record<string, number> = {};

// Calculate status counts from provided projects
if (projects && projects.length > 0) {
  statusCounts = {};

  if (currentRole === "Client") {
    // For clients, count by client_status_name (deduplicated)
    projects.forEach((project) => {
      const statusInfo = project_statuses.find((s: any) => s.status_code === project.status);
      if (statusInfo && statusInfo.client_status_name) {
        const clientStatusName = statusInfo.client_status_name;
        statusCounts[clientStatusName] = (statusCounts[clientStatusName] || 0) + 1;
      }
    });
  } else {
    // For admins/staff, count by status number
    projects.forEach((project) => {
      const status = project.status?.toString() || "10";
      statusCounts[status] = (statusCounts[status] || 0) + 1;
    });
  }
}

if (!projects || projects.length === 0) return;
---

<nav
  id="project-nav"
  class="scrollbar-hide relative flex gap-1 overflow-x-auto whitespace-nowrap text-hub-inactive dark:border-hub-border-dark"
>
  <!-- Sliding pill background -->
  <div
    id="nav-pill-bg"
    class="absolute top-2 h-8 rounded-full bg-blue-100 dark:bg-blue-900/30 transition-all duration-300 ease-out"
    style="width: 0px; left: 0px; opacity: 0;"
  >
  </div>
  <ProjectNavButton
    id="all-statuses"
    label="All Projects"
    icon="bx bx-list-ul"
    data-count={projects.length.toString()}
  >
    All Projects
  </ProjectNavButton>

  {
    project_statuses.length > 0
      ? (() => {
          if (currentRole === "Client") {
            // Client navigation: deduplicate by client_status_name and use slugs
            const clientStatuses = project_statuses
              .filter(
                (status: any) =>
                  status.client_status_name && status.client_status_name.trim() !== ""
              )
              .reduce((acc: any[], status: any) => {
                // Check if this client_status_name already exists
                const existing = acc.find(
                  (s) => s.client_status_name === status.client_status_name
                );
                if (!existing) {
                  acc.push(status);
                }
                return acc;
              }, []);

            return clientStatuses.map((status: any) => {
              // Create slug from client_status_name
              const slug = status.client_status_name
                .toLowerCase()
                .replace(/[^a-z0-9\s-]/g, "")
                .replace(/\s+/g, "-")
                .trim();

              // Debug logging removed for performance

              return (
                <ProjectNavButton
                  label={status.client_status_name}
                  data-project-status-filter={slug}
                  data-count={(statusCounts[status.client_status_name] || 0).toString()}
                >
                  {status.client_status_name}
                </ProjectNavButton>
              );
            });
          } else {
            // Admin/Staff navigation: use status numbers
            return project_statuses.map((status: any) => {
              // Debug logging removed for performance

              return (
                <ProjectNavButton
                  label={status.admin_status_name}
                  data-project-status-filter={status.status_code}
                  data-count={(statusCounts[status.status_code] || 0).toString()}
                >
                  {status.admin_status_name}
                </ProjectNavButton>
              );
            });
          }
        })()
      : ""
  }
</nav>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const subNav = document.getElementById("project-nav");
    const projectList = document.getElementById("project-list");

    if (!subNav || !projectList) return;

    const projectItems = projectList.querySelectorAll("[data-project-status]");
    const filterButtons = subNav.querySelectorAll("[data-project-status-filter]");
    const allStatusesButton = subNav.querySelector("#all-statuses");
    const pillBg = document.getElementById("nav-pill-bg");

    // Simple filtering based on data attributes - project cards handle their own visibility
    function filterProjects(statusFilter: string) {
      const shouldShow = (projectStatusSlug: string) => {
        if (statusFilter === "all") {
          return true;
        }
        return projectStatusSlug === statusFilter;
      };

      let visibleCount = 0;
      projectItems.forEach((item) => {
        const projectStatusSlug = item.getAttribute("data-project-status");
        const shouldShowItem = shouldShow(projectStatusSlug || "");

        if (shouldShowItem && !item.classList.contains("hidden")) {
          (item as any).style.display = "block";
          (item as any).style.opacity = "1";
          visibleCount++;
        } else {
          (item as any).style.display = "none";
          (item as any).style.opacity = "0";
        }
      });

      // Show/hide no projects message
      const noProjectsMessage = document.getElementById("no-projects-message");
      const noProjectsText = document.getElementById("no-projects-text");
      if (noProjectsMessage && noProjectsText) {
        if (visibleCount === 0) {
          noProjectsText.textContent = `No projects currently at ${statusFilter}.`;
          noProjectsMessage.classList.remove("hidden");
        } else {
          noProjectsMessage.classList.add("hidden");
        }
      }
    }

    // Update active button - only change text color, no background
    function updateActiveButton(activeButton: Element | null) {
      if (!subNav) return;
      subNav.querySelectorAll("button").forEach((btn) => {
        btn.classList.remove("bg-blue-500", "text-white", "border-blue-500", "bg-hub-primary");
        btn.classList.add("text-hub-inactive", "dark:text-hub-inactive-dark");
      });
      if (activeButton) {
        activeButton.classList.remove("text-hub-inactive", "dark:text-hub-inactive-dark");
        activeButton.classList.add("text-blue-600", "dark:text-blue-400");
      }
    }

    // Update URL
    function updateURL(statusFilter: string) {
      const url = new URL(window.location.href);
      if (statusFilter === "all") {
        url.searchParams.delete("status");
      } else {
        url.searchParams.set("status", statusFilter);
      }
      window.history.pushState({}, "", url.toString());
    }

    // Button click handlers
    filterButtons.forEach((button: Element) => {
      button.addEventListener("click", function (this: HTMLElement) {
        const filterValue = this.getAttribute("data-project-status-filter");
        if (filterValue) {
          filterProjects(filterValue);
          updateActiveButton(this);
          updateURL(filterValue);

          // Slide pill first, then center navigation
          updateSlidingPill(this);
          setTimeout(() => {
            this.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
          }, 150); // Small delay to let pill animation start
        }
      });
    });

    if (allStatusesButton) {
      allStatusesButton.addEventListener("click", function (this: HTMLElement) {
        filterProjects("all");
        updateActiveButton(this);
        updateURL("all");

        // Slide pill first, then center navigation
        updateSlidingPill(this);
        setTimeout(() => {
          this.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
        }, 150); // Small delay to let pill animation start
      });
    }

    // Initial filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    const statusParam = urlParams.get("status");
    if (statusParam) {
      const targetButton = subNav.querySelector(`[data-project-status-filter="${statusParam}"]`);
      if (targetButton) {
        updateActiveButton(targetButton);
        filterProjects(statusParam);
        return;
      }
    }

    // Default to all
    if (allStatusesButton) {
      updateActiveButton(allStatusesButton);
      filterProjects("all");
    }

    // Trigger scroll into view for the active button after page load
    setTimeout(() => {
      const activeButton = subNav.querySelector(".bg-hub-primary, .bg-blue-600");
      if (activeButton) {
        activeButton.scrollIntoView({ behavior: "smooth", block: "nearest", inline: "center" });
      }
    }, 100);

    // Sliding pill functionality
    function updateSlidingPill(activeButton: Element | null) {
      if (!pillBg || !activeButton || !subNav) return;

      const navRect = subNav.getBoundingClientRect();
      const buttonRect = activeButton.getBoundingClientRect();

      // Calculate position relative to the nav container
      const left = buttonRect.left - navRect.left;
      const width = buttonRect.width;

      // Update pill position and size
      pillBg.style.left = `${left}px`;
      pillBg.style.width = `${width}px`;
      pillBg.style.opacity = "1";
    }

    // Initialize pill position for the active button
    setTimeout(() => {
      const activeButton = subNav.querySelector(".text-blue-600, .dark\\:text-blue-400");
      if (activeButton) {
        updateSlidingPill(activeButton);
      }
    }, 200); // Slightly longer delay for initial load

    // Pill position is now handled in the main button click handlers above

    // Handle window resize to reposition pill
    let resizeTimeout: NodeJS.Timeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const activeButton = subNav.querySelector(".text-blue-600, .dark\\:text-blue-400");
        if (activeButton) {
          updateSlidingPill(activeButton);
        }
      }, 100);
    });
  });
</script>
