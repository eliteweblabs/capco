---
import { supabase } from "../../lib/supabase";
import BoxIcon from "../common/BoxIcon.astro";
import PaymentForm from "./PaymentForm.astro";

interface Props {
  project?: any;
  projectStatus?: number;
  currentUser?: any;
  projectStatusLabel?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  globalInputClasses?: string;
  statusData?: any;
}

const {
  project,
  projectStatus = 0,
  currentUser,
  projectStatusLabel,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  globalInputClasses,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const authorProfile = currentUser?.profile;
const projectId = project?.id;

let invoiceId = null;
let totalAmount = 0;

// Query invoice directly using authenticated Supabase client (SSR)
if (projectId && supabase) {
  console.log("🔍 [TAB-DEPOSIT] Querying invoice for project_id:", projectId);

  // Set up session from cookies
  const accessToken = Astro.cookies.get("sb-access-token")?.value;
  const refreshToken = Astro.cookies.get("sb-refresh-token")?.value;

  if (accessToken && refreshToken) {
    await supabase.auth.setSession({
      access_token: accessToken,
      refresh_token: refreshToken,
    });
  }

  try {
    const { data: invoice, error } = await supabase
      .from("invoices")
      .select("id, total_amount, status, subject, catalog_line_items")
      .eq("project_id", projectId)
      .maybeSingle(); // Don't filter by status - get any invoice for this project

    if (error) {
      console.error("🔍 [TAB-DEPOSIT] ❌ Error fetching invoice:", {
        message: error.message,
        code: error.code,
        hint: error.hint,
      });
    } else if (invoice) {
      invoiceId = invoice.id;

      // Calculate total from catalog_line_items if total_amount is missing or zero
      if (!invoice.total_amount || invoice.total_amount === 0) {
        const lineItems = invoice.catalog_line_items || [];
        let calculatedTotal = 0;

        lineItems.forEach((item: any) => {
          const quantity = parseFloat(item.quantity) || 0;
          const unitPrice = parseFloat(item.unit_price) || 0;
          calculatedTotal += quantity * unitPrice;
        });

        totalAmount = Math.round(calculatedTotal * 100); // Convert to cents
        console.log("🔍 [TAB-DEPOSIT] 💰 Calculated total from line items:", {
          lineItemCount: lineItems.length,
          calculatedTotal,
          totalAmountCents: totalAmount,
        });
      } else {
        totalAmount = Math.round(invoice.total_amount * 100); // Convert to cents
      }

      console.log("🔍 [TAB-DEPOSIT] ✅ Found invoice:", {
        invoiceId,
        totalAmount,
        totalAmountDollars: totalAmount / 100,
        status: invoice.status,
        subject: invoice.subject,
      });
    } else {
      console.warn("🔍 [TAB-DEPOSIT] ⚠️ No invoice found for project_id:", projectId);
    }
  } catch (error) {
    console.error("🔍 [TAB-DEPOSIT] ❌ Exception:", error);
  }
}

// Debug logging
// console.log("🔍 [TAB-DEPOSIT] Debug values:", {
//   projectId,
//   authorProfile,
//   projectIdType: typeof projectId,
//   parsedProjectId: parseInt(projectId),
//   projectStatus,
//   projectStatusType: typeof projectStatus,
//   currentRole,
//   currentRoleType: typeof currentRole,
//   totalAmount,
//   totalAmountType: typeof totalAmount,
//   condition1: projectStatus >= 30,
//   condition2: currentRole === "Client",
//   condition3: projectStatus < 50,
//   fullCondition: projectStatus >= 30 && currentRole === "Client" && projectStatus < 50,
// });

// Log PaymentForm props
// console.log("🔍 [TAB-DEPOSIT] PaymentForm props:", {
//   invoiceId: parseInt(invoiceId ?? "0"),
//   amount: totalAmount,
//   currency: "usd",
//   paymentType: "deposit",
// });

function getStatusAlert() {
  return currentRole === "Client" && Number(projectStatus) < 55
    ? "Deposit payment will be available after proposal is signed off."
    : Number(projectStatus) >= 55 && currentRole === "Client"
      ? "Secure your project with a deposit payment. This ensures we can begin work on your fire protection system."
      : null;
}
const statusAlert = getStatusAlert();
---

<div id="content-deposit" class="tab-content hidden">
  <!-- <StatusAlert status={projectStatus} 
  currentRole={currentRole}
  statusAlert={
"< 55" : "Deposit payment will be available after proposal is signed off.",
">= 55" : "Secure your project with a deposit payment. This ensures we can begin work on your fire protection system."

  }
  /> -->

  <div
    class="mb-4 rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20"
  >
    <div class="flex items-start">
      <BoxIcon name="info-circle" class="mr-2 mt-0.5 text-lg text-blue-600 dark:text-blue-400" />
      <div class="text-blue-800 dark:text-blue-400">
        <h3 class="text-lg">{statusAlert}</h3>
      </div>
    </div>
  </div>

  {
    projectStatus >= 50 && currentRole === "Client" && (
      <PaymentForm
        invoiceId={invoiceId && invoiceId !== "0" ? parseInt(invoiceId) : null}
        amount={totalAmount / 2}
        currency="usd"
        paymentType="deposit"
        project={project}
        currentUser={currentUser}
        statusData={statusData}
      />
    )
  }
</div>
