---
import { supabase } from "../../lib/supabase";
import SimpleIcon from "../common/SimpleIcon.astro";
import PaymentForm from "./PaymentForm.astro";
import Alert from "../partials/Alert.astro";
import PaymentsManager from "./PaymentsManager.astro";

interface Props {
  project?: any;
  projectStatus?: number;
  currentUser?: any;
  projectStatusLabel?: string;
  secondaryTextClasses?: string;
  primaryTextClasses?: string;
  globalInputClasses?: string;
  statusData?: any;
}

const {
  project,
  projectStatus = 0,
  currentUser,
  projectStatusLabel,
  secondaryTextClasses,
  primaryTextClasses,
  globalInputClasses,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const authorProfile = currentUser?.profile;
const projectId = project?.id;

let invoiceId = null;
let totalAmount = 0;

// Query invoice directly using authenticated Supabase client (SSR)
if (projectId && supabase) {
  // Set up session from cookies
  const accessToken = Astro.cookies.get("sb-access-token")?.value;
  const refreshToken = Astro.cookies.get("sb-refresh-token")?.value;

  if (accessToken && refreshToken) {
    await supabase.auth.setSession({
      access_token: accessToken,
      refresh_token: refreshToken,
    });
  }

  try {
    const { data: invoice, error } = await supabase
      .from("invoices")
      .select("id, totalAmount, status, subject, catalogLineItems")
      .eq("projectId", projectId)
      .maybeSingle(); // Don't filter by status - get any invoice for this project

    if (error) {
      console.error("🔍 [TAB-DEPOSIT] ❌ Error fetching invoice:", {
        message: error.message,
        code: error.code,
        hint: error.hint,
      });
    } else if (invoice) {
      invoiceId = invoice.id;

      // Calculate total from catalogLineItems if totalAmount is missing or zero
      if (!invoice.totalAmount || invoice.totalAmount === 0) {
        const lineItems = invoice.catalogLineItems || [];
        let calculatedTotal = 0;

        lineItems.forEach((item: any) => {
          const quantity = parseFloat(item.quantity) || 0;
          const unitPrice = parseFloat(item.unitPrice) || 0;
          calculatedTotal += quantity * unitPrice;
        });

        totalAmount = Math.round(calculatedTotal * 100); // Convert to cents
      } else {
        totalAmount = Math.round(invoice.totalAmount * 100); // Convert to cents
      }
    } else {
      console.warn("🔍 [TAB-DEPOSIT] ⚠️ No invoice found for projectId:", projectId);
    }
  } catch (error) {
    console.error("🔍 [TAB-DEPOSIT] ❌ Exception:", error);
  }
}

// Debug logging
// console.log("🔍 [TAB-DEPOSIT] Debug values:", {
//   projectId,
//   authorProfile,
//   projectIdType: typeof projectId,
//   parsedProjectId: parseInt(projectId),
//   projectStatus,
//   projectStatusType: typeof projectStatus,
//   currentRole,
//   currentRoleType: typeof currentRole,
//   totalAmount,
//   totalAmountType: typeof totalAmount,
//   condition1: projectStatus >= 30,
//   condition2: currentRole === "Client",
//   condition3: projectStatus < 50,
//   fullCondition: projectStatus >= 30 && currentRole === "Client" && projectStatus < 50,
// });

// Log PaymentForm props
// console.log("🔍 [TAB-DEPOSIT] PaymentForm props:", {
//   invoiceId: parseInt(invoiceId ?? "0"),
//   amount: totalAmount,
//   currency: "usd",
//   paymentType: "deposit",
// });

function getStatusAlert() {
  // Client status messages
  if (currentRole === "Client") {
    if (Number(projectStatus) < 55) {
      return "Deposit payment will be available after proposal is signed off";
    }
    if (Number(projectStatus) >= 55 && Number(projectStatus) < 60) {
      return `Please secure your project with a deposit payment. This ensures we can begin work on your fire protection system.`;
    }
    if (Number(projectStatus) >= 50 && Number(projectStatus) < 60) {
      return "Please pay your deposit.";
    }
  }

  // Admin status messages
  // if (currentRole === "Admin" || currentRole === "Staff") {
  //   if (Number(projectStatus) < 20) {
  //     return `<b>${clientName}</b> has not submitted any documents`;
  //   }
  //   if (Number(projectStatus) >= 55 && Number(projectStatus) < 60) {
  //     return `Please secure your project with a deposit payment. This ensures we can begin work on your fire protection system.`;
  //   }
  //   if (Number(projectStatus) >= 30 && Number(projectStatus) < 40) {
  //     return `Proposal has been sent but <b>${clientName}</b> has not viewed it, you can make changes to it and resend.`;
  //   }
  //   if (Number(projectStatus) >= 40 && Number(projectStatus) < 50) {
  //     return `<b>${clientName}</b> has viewed the proposal, you can make changes to it and resend.`;
  //   }
  //   if (Number(projectStatus) >= 50 && Number(projectStatus) < 60) {
  //     return "Contract has been signed off, no changes can be made.";
  //   }
  // }

  return null;
}
// const statusAlert = getStatusAlert();

// function getStatusAlert() {
//   return currentRole === "Client" && Number(projectStatus) < 55
//     ? "Deposit payment will be available after proposal is signed off."
//     : Number(projectStatus) >= 55 && currentRole === "Client"
//       ? "Secure your project with a deposit payment. This ensures we can begin work on your fire protection system."
//       : null;
// }
const statusAlert = getStatusAlert();
---

<div id="content-deposit" class="tab-content p-4 color-background relative">
  {statusAlert && <Alert type="info" title={statusAlert} />}

  {
    currentRole !== "Client" && (
      <PaymentsManager
        invoiceId={invoiceId && invoiceId !== "0" ? parseInt(invoiceId) : null}
        amount={totalAmount / 2}
        currency="usd"
        paymentType="deposit"
        project={project}
        currentUser={currentUser}
        statusData={statusData}
      />
    )
  }

  {
    projectStatus >= 50 && currentRole === "Client" && (
      <PaymentForm
        invoiceId={invoiceId && invoiceId !== "0" ? parseInt(invoiceId) : null}
        amount={totalAmount / 2}
        currency="usd"
        paymentType="deposit"
        project={project}
        currentUser={currentUser}
        statusData={statusData}
      />
    )
  }
</div>
