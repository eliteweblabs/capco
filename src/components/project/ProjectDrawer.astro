---
import BoxIcon from "../common/BoxIcon.astro";
import Button from "../common/Button.astro";

interface Props {
  projects: any[];
  currentProjectId: string;
  currentUser: any;
  currentRole: string;
}

const { projects, currentProjectId, currentUser, currentRole } = Astro.props;
---

<!-- Project Drawer -->
<div
  id="project-drawer"
  class="fixed inset-0 z-50 hidden overflow-y-auto"
  aria-labelledby="project-drawer-title"
  role="dialog"
  aria-modal="true"
  data-drawer-target="project-drawer"
  data-drawer-backdrop="true"
  data-drawer-placement="right"
>
  {/* Backdrop */}
  <div
    class="fixed inset-0 bg-gray-900 bg-opacity-50 transition-opacity"
    id="project-drawer-backdrop"
  >
  </div>

  {/* Drawer */}
  <div class="fixed right-0 top-0 z-50 h-screen w-80 transform transition-transform">
    <div class="flex h-full flex-col bg-white shadow-xl dark:bg-gray-800">
      {/* Header */}
      <div
        class="flex items-center justify-between border-b border-gray-200 px-4 py-6 dark:border-gray-700"
      >
        <h2 id="project-drawer-title" class="text-lg font-semibold text-gray-900 dark:text-white">
          Projects
        </h2>
        <button
          type="button"
          id="project-drawer-close"
          class="rounded-lg bg-transparent p-1.5 text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white"
        >
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>

      {/* Projects List */}
      <div class="flex-1 overflow-y-auto px-4 py-6">
        <div class="space-y-2">
          {
            projects.map((project) => (
              <a
                href={`/project/${project.id}`}
                class={`flex items-center rounded-lg px-3 py-3 text-sm font-medium transition-colors ${
                  project.id.toString() === currentProjectId
                    ? "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200"
                    : "text-gray-900 hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
                }`}
              >
                <div class="flex-1 min-w-0">
                  <p class="truncate font-medium">{project.title}</p>
                  <p class="truncate text-xs text-gray-500 dark:text-gray-400">{project.address}</p>
                </div>
                {project.id.toString() === currentProjectId && (
                  <BoxIcon name="check" class="ml-2 bx-sm text-blue-600 dark:text-blue-400" />
                )}
              </a>
            ))
          }
        </div>
      </div>

      {/* Footer */}
      <div class="border-t border-gray-200 px-4 py-6 dark:border-gray-700">
        <Button href="/dashboard" variant="primary" size="sm" fullWidth class="rounded-full">
          <BoxIcon name="plus" class="mr-2 bx-sm" />
          New Project
        </Button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Flowbite will handle the drawer animations automatically
    // We just need to close the drawer when clicking on project links
    const projectDrawer = document.getElementById("project-drawer");
    const projectLinks = projectDrawer?.querySelectorAll("a");

    projectLinks?.forEach((link) => {
      link.addEventListener("click", () => {
        // Close drawer when navigating to a project
        const drawer = document.getElementById("project-drawer");
        if (drawer) {
          drawer.classList.add("hidden");
        }
      });
    });
  });
</script>
