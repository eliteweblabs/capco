---
import { supabase } from "../../lib/supabase";

interface Props {
  selectedUserId?: string;
  name?: string;
  required?: boolean;
  class?: string;
  label?: string;
  id?: string;
  role?: string; // Filter users by role (e.g., 'Client', 'Admin', 'Staff')
}

const {
  selectedUserId = "",
  name = "client_id",
  required = false,
  class: className = "",
  label = "Select Client",
  id = "client-select",
  role = undefined, // No role filter by default
} = Astro.props;

// Fetch all users from profiles table + emails from auth.users table
let users: any[] = [];
let error = null;

if (supabase) {
  try {
    // First, get profiles (name, role, id) with optional role filtering
    let profilesQuery = supabase.from("profiles").select("id, company_name, role");

    // Apply role filter if specified
    if (role) {
      profilesQuery = profilesQuery.eq("role", role);
      console.log(`üìã [ClientSelect] Filtering by role: ${role}`);
    }

    const { data: profiles, error: profilesError } = await profilesQuery.order("company_name");

    if (profilesError) {
      console.error("Error fetching profiles:", profilesError);
      error = profilesError.message;
    } else if (profiles) {
      console.log(
        `üìã [ClientSelect] Loaded ${profiles.length} profiles${role ? ` (filtered by role: ${role})` : ""}`
      );

      // Then get emails from auth.users using admin API
      const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();

      if (authError) {
        console.error("Error fetching auth users:", authError);
        // Still use profiles but without emails
        users = profiles.map((profile) => ({
          ...profile,
          email: null,
        }));
      } else if (authUsers?.users) {
        console.log(`üìã [ClientSelect] Loaded ${authUsers.users.length} auth users`);

        // Create email map from auth users
        const emailMap = new Map();
        authUsers.users.forEach((authUser) => {
          emailMap.set(authUser.id, authUser.email);
        });

        // Combine profiles with emails
        users = profiles.map((profile) => ({
          ...profile,
          email: emailMap.get(profile.id) || null,
        }));

        console.log(`üìã [ClientSelect] Combined ${users.length} users with emails`);
      } else {
        // Use profiles without emails
        users = profiles.map((profile) => ({
          ...profile,
          email: null,
        }));
      }
    } else {
      users = [];
    }
  } catch (err) {
    console.error("Exception fetching users:", err);
    error = err instanceof Error ? err.message : "Unknown error";
  }
} else {
  error = "Supabase not configured";
}
---

<div class="grid grid-cols-1 gap-2">
  {
    label && (
      <label for={id} class="text-sm font-medium text-zinc-900 dark:text-zinc-300">
        {label}
        {required && <span class="ml-1 text-red-500">*</span>}
      </label>
    )
  }

  {
    error ? (
      <div class="rounded border border-red-200 bg-red-50 p-2 text-sm text-red-600">
        ‚ùå Error loading users: {error}
      </div>
    ) : (
      <div class="ml-4 flex-shrink-0 relative">
        <div class="relative inline-block text-left">
          <button
            type="button"
            class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium cursor-pointer transition-colors
              bg-green-100 text-green-800 hover:bg-green-200 
              dark:bg-green-900/30 dark:text-green-400 dark:hover:bg-green-900/50"
            id={`${id}-button`}
            aria-expanded="false"
            aria-haspopup="true"
          >
            <span id={`${id}-selected-text`}>-- Choose a client --</span>
            <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>

          <div
            class="absolute right-0 z-50 mt-2 w-64 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-700 hidden"
            id={`${id}-menu`}
            role="menu"
            aria-orientation="vertical"
            aria-labelledby={`${id}-button`}
          >
            <div class="py-1" role="none">
              <div class="px-4 py-2 text-sm text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-700">
                <div class="font-medium">Select Client</div>
                <div class="text-xs text-gray-500 dark:text-gray-400">{users.length} clients available</div>
              </div>
              
              <div id={`${id}-options`}>
                {users.map((user) => (
                  <button
                    type="button"
                    class={`group flex w-full items-center px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors
                      ${user.id === selectedUserId ? 'bg-green-50 text-green-700 dark:bg-green-900/30 dark:text-green-400' : 'text-gray-700 dark:text-gray-300'}`}
                    data-user-id={user.id}
                    data-user-name={user.company_name || user.email}
                  >
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                      </svg>
                      {user.company_name || user.email}
                      {user.role && user.role !== "Client" && ` (${user.role})`}
                    </span>
                    {user.id === selectedUserId && (
                      <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        <!-- Hidden input to store the selected value -->
        <input type="hidden" id={id} name={name} value={selectedUserId || ""} required={required} />
      </div>
    )
  }

  {
    users.length === 0 && !error && (
      <div class="rounded border border-yellow-200 bg-yellow-50 p-2 text-sm text-yellow-600">
        ‚ö†Ô∏è {role ? `No users found with role: ${role}` : "No users found in the system"}
      </div>
    )
  }
</div>

<script define:vars={{ id, selectedUserId }}>
  document.addEventListener("DOMContentLoaded", () => {
    const buttonElement = document.getElementById(`${id}-button`);
    const menuElement = document.getElementById(`${id}-menu`);
    const selectedTextElement = document.getElementById(`${id}-selected-text`);
    const hiddenInput = document.getElementById(id);
    const optionsContainer = document.getElementById(`${id}-options`);

    if (!buttonElement || !menuElement || !selectedTextElement || !hiddenInput) return;

    // Set initial selected text if there's a selected user
    if (selectedUserId) {
      const selectedOption = optionsContainer.querySelector(`[data-user-id="${selectedUserId}"]`);
      if (selectedOption) {
        const userName = selectedOption.getAttribute("data-user-name");
        selectedTextElement.textContent = userName;
      }
    }

    // Toggle dropdown
    buttonElement.addEventListener("click", (e) => {
      e.stopPropagation();
      const isHidden = menuElement.classList.contains("hidden");
      if (isHidden) {
        menuElement.classList.remove("hidden");
        buttonElement.setAttribute("aria-expanded", "true");
      } else {
        menuElement.classList.add("hidden");
        buttonElement.setAttribute("aria-expanded", "false");
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", () => {
      menuElement.classList.add("hidden");
      buttonElement.setAttribute("aria-expanded", "false");
    });

    // Handle option selection
    optionsContainer.addEventListener("click", (e) => {
      const option = e.target.closest("button[data-user-id]");
      if (!option) return;

      const userId = option.getAttribute("data-user-id");
      const userName = option.getAttribute("data-user-name");

      // Update hidden input
      hiddenInput.value = userId;

      // Update button text
      selectedTextElement.textContent = userName;

      // Update highlighting
      optionsContainer.querySelectorAll("button").forEach(btn => {
        btn.classList.remove("bg-green-50", "text-green-700", "dark:bg-green-900/30", "dark:text-green-400");
        btn.classList.add("text-gray-700", "dark:text-gray-300");
        // Remove checkmarks
        const checkmark = btn.querySelector("svg:last-child");
        if (checkmark && checkmark.getAttribute("fill") === "currentColor") {
          checkmark.remove();
        }
      });

      // Highlight selected option
      option.classList.remove("text-gray-700", "dark:text-gray-300");
      option.classList.add("bg-green-50", "text-green-700", "dark:bg-green-900/30", "dark:text-green-400");
      
      // Add checkmark
      const checkmark = document.createElement("svg");
      checkmark.className = "w-4 h-4 text-green-600";
      checkmark.setAttribute("fill", "currentColor");
      checkmark.setAttribute("viewBox", "0 0 20 20");
      checkmark.innerHTML = '<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>';
      option.appendChild(checkmark);

      // Close dropdown
      menuElement.classList.add("hidden");
      buttonElement.setAttribute("aria-expanded", "false");
    });
  });
</script>

<!-- Debug information (remove in production) -->
{
  import.meta.env.DEV && (
    <details class="mt-2 text-xs text-gray-500">
      <summary class="cursor-pointer">üîç Debug Info</summary>
      <div class="mt-1 rounded bg-gray-100 p-2 text-xs">
        <div>Users loaded: {users.length}</div>
        <div>Role filter: {role || "None (all roles)"}</div>
        <div>Selected: {selectedUserId || "None"}</div>
        <div>Error: {error || "None"}</div>
        {users.length > 0 && (
          <div class="mt-1">
            <strong>Available users:</strong>
            <ul class="ml-2">
              {users.slice(0, 3).map((user) => (
                <li>
                  ‚Ä¢ {user.company_name || user.email} ({user.role})
                </li>
              ))}
              {users.length > 3 && <li>‚Ä¢ ... and {users.length - 3} more</li>}
            </ul>
          </div>
        )}
      </div>
    </details>
  )
}

<script define:vars={{ id }}>
  // Add client-side functionality for dynamic updates
  document.addEventListener("DOMContentLoaded", function () {
    const clientSelect = document.getElementById(id);

    if (clientSelect) {
      clientSelect.addEventListener("change", function (e) {
        const target = e.target;
        if (!target) return;

        const selectedOption = target.options[target.selectedIndex];
        console.log("üîî Client selected:", {
          id: target.value,
          name: selectedOption.text,
          element: target,
        });

        // Trigger a custom event for other components to listen to
        const event = new CustomEvent("clientSelected", {
          detail: {
            userId: target.value,
            userName: selectedOption.text.split(" (")[0], // Remove role suffix
            fullText: selectedOption.text,
          },
        });
        document.dispatchEvent(event);
      });
    }
  });
</script>

<style>
  /* Custom styling for the select dropdown */
  select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Dark mode arrow */
  .dark select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%239ca3af' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  }
</style>
