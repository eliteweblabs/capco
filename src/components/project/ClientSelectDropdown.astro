---
import { supabase } from "../../lib/supabase";

interface Props {
  selectedUserId?: string;
  name?: string;
  required?: boolean;
  class?: string;
  label?: string;
  id?: string;
  currentRole?: string; // Filter users by role (e.g., 'Client', 'Admin', 'Staff')
}

const {
  selectedUserId = "",
  name = "client_id",
  required = false,
  class: className = "",
  label = "Select Client",
  id = "client-select",
  currentRole = undefined, // No role filter by default
} = Astro.props;

// Fetch all users from profiles table + emails from auth.users table
let users: any[] = [];
let error = null;

if (supabase) {
  try {
    // First, get profiles (name, role, id) with optional role filtering
    let profilesQuery = supabase.from("profiles").select("id, company_name, role");

    // Apply role filter if specified
    if (currentRole) {
      profilesQuery = profilesQuery.eq("role", currentRole);
      console.log(`üìã [ClientSelect] Filtering by currentRole: ${currentRole}`);
    }

    const { data: profiles, error: profilesError } = await profilesQuery.order("company_name");

    if (profilesError) {
      console.error("Error fetching profiles:", profilesError);
      error = profilesError.message;
    } else if (profiles) {
      console.log(
        `üìã [ClientSelect] Loaded ${profiles.length} profiles${currentRole ? ` (filtered by currentRole: ${currentRole})` : ""}`
      );

      // Use profiles without emails (Admin API requires service currentRole key)
      users = profiles.map((profile) => ({
        ...profile,
        email: null,
      }));
      
      console.log(`üìã [ClientSelect] Using ${users.length} profiles without email lookup`);
    } else {
      users = [];
    }
  } catch (err) {
    console.error("Exception fetching users:", err);
    error = err instanceof Error ? err.message : "Unknown error";
  }
} else {
  error = "Supabase not configured";
}
---

<div class="grid grid-cols-1 gap-2">
  {
    label && (
      <label for={id} class="text-sm font-medium text-zinc-900 dark:text-zinc-300">
        {label}
        {required && <span class="ml-1 text-red-500">*</span>}
      </label>
    )
  }

  {
    error ? (
      <div class="rounded border border-red-200 bg-red-50 p-2 text-sm text-red-600">
        ‚ùå Error loading users: {error}
      </div>
    ) : (
      <div class="relative w-full">
        <!-- Always visible search input -->
        <div class="relative">
          <input
            type="text"
            id={`${id}-search`}
            placeholder="Search and select client..."
            class="w-full px-3 py-2 pl-8 pr-10 text-sm text-left border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400"
            autocomplete="off"
            value={selectedUserId ? users.find(u => u.id === selectedUserId)?.company_name || users.find(u => u.id === selectedUserId)?.email || "" : ""}
          />
          <svg class="absolute left-2.5 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <!-- Clear button when text is present -->
          <button
            type="button"
            id={`${id}-clear`}
            class="absolute right-2.5 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hidden"
          >
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <!-- Dropdown results (only shown on focus) -->
        <div
          class="absolute left-0 right-0 z-50 mt-1 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-700 hidden"
          id={`${id}-menu`}
          role="listbox"
        >
          <!-- Results header -->
          <div class="px-3 py-2 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50">
            <div class="text-xs text-gray-500 dark:text-gray-400">
              <span id={`${id}-results-count`}>{users.length}</span> clients available
            </div>
          </div>
          
          <!-- Scrollable options container -->
          <div class="max-h-64 overflow-y-auto">
            <div id={`${id}-options`}>
              {users.map((user) => (
                <button
                  type="button"
                  class={`group flex w-full items-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors client-option
                    ${user.id === selectedUserId ? 'bg-green-50 text-green-700 dark:bg-green-900/30 dark:text-green-400' : 'text-gray-700 dark:text-gray-300'}`}
                  data-user-id={user.id}
                  data-user-name={user.company_name || user.email}
                  data-search-text={`${user.company_name || user.email} ${user.email || ''} ${user.role || ''}`.toLowerCase()}
                >
                  <span class="flex items-center flex-1 min-w-0">
                    <svg class="w-4 h-4 mr-3 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    <div class="flex-1 min-w-0">
                      <div class="truncate font-medium">{user.company_name || user.email}</div>
                      {user.email && user.company_name && (
                        <div class="text-xs text-gray-500 dark:text-gray-400 truncate">{user.email}</div>
                      )}
                      {user.role && user.role !== "Client" && (
                        <div class="text-xs text-blue-600 dark:text-blue-400">{user.role}</div>
                      )}
                    </div>
                  </span>
                  {user.id === selectedUserId && (
                    <svg class="w-4 h-4 text-green-600 flex-shrink-0 ml-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                  )}
                </button>
              ))}
            </div>
            
            <!-- No results message -->
            <div id={`${id}-no-results`} class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
              <div class="mt-2">No clients found</div>
              <div class="text-xs">Try adjusting your search</div>
            </div>
          </div>
        </div>

        <!-- Hidden input to store the selected value -->
        <input type="hidden" id={id} name={name} value={selectedUserId || ""} required={required} />
      </div>
    )
  }

  {
    users.length === 0 && !error && (
      <div class="rounded border border-yellow-200 bg-yellow-50 p-2 text-sm text-yellow-600">
        ‚ö†Ô∏è {currentRole ? `No users found with role: ${currentRole}` : "No users found in the system"}
      </div>
    )
  }
</div>

<script define:vars={{ id, selectedUserId }}>
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById(`${id}-search`);
    const menuElement = document.getElementById(`${id}-menu`);
    const hiddenInput = document.getElementById(id);
    const optionsContainer = document.getElementById(`${id}-options`);
    const resultsCountElement = document.getElementById(`${id}-results-count`);
    const noResultsElement = document.getElementById(`${id}-no-results`);
    const clearButton = document.getElementById(`${id}-clear`);

    if (!searchInput || !menuElement || !hiddenInput || !optionsContainer) return;

    // Store all options for filtering
    const allOptions = Array.from(optionsContainer.querySelectorAll('.client-option'));
    let isDropdownVisible = false;
    
    // Search functionality
    function filterOptions(searchTerm) {
      const term = searchTerm.toLowerCase().trim();
      let visibleCount = 0;

      allOptions.forEach(option => {
        const searchText = option.getAttribute("data-search-text") || "";
        const matches = !term || searchText.includes(term);
        
        if (matches) {
          option.style.display = "block";
          visibleCount++;
        } else {
          option.style.display = "none";
        }
      });

      // Update results count
      if (resultsCountElement) {
        resultsCountElement.textContent = visibleCount;
      }

      // Show/hide no results message
      if (noResultsElement) {
        if (visibleCount === 0 && term) {
          noResultsElement.classList.remove("hidden");
        } else {
          noResultsElement.classList.add("hidden");
        }
      }

      return visibleCount;
    }

    // Show/hide clear button
    function toggleClearButton() {
      if (clearButton) {
        if (searchInput.value.trim()) {
          clearButton.classList.remove("hidden");
        } else {
          clearButton.classList.add("hidden");
        }
      }
    }

    // Show dropdown
    function showDropdown() {
      if (!isDropdownVisible) {
        menuElement.classList.remove("hidden");
        isDropdownVisible = true;
        filterOptions(searchInput.value); // Filter based on current input
      }
    }

    // Hide dropdown
    function hideDropdown() {
      if (isDropdownVisible) {
        menuElement.classList.add("hidden");
        isDropdownVisible = false;
      }
    }

    // Clear selection
    function clearSelection() {
      searchInput.value = "";
      hiddenInput.value = "";
      toggleClearButton();
      filterOptions("");
      searchInput.focus();
      
      // Remove highlighting from all options
      allOptions.forEach(option => {
        option.classList.remove("bg-green-50", "text-green-700", "dark:bg-green-900/30", "dark:text-green-400");
        option.classList.add("text-gray-700", "dark:text-gray-300");
        // Remove checkmarks
        const checkmark = option.querySelector("svg:last-child");
        if (checkmark && checkmark.getAttribute("fill") === "currentColor") {
          checkmark.remove();
        }
      });
    }

    // Search input event listeners
    searchInput.addEventListener("input", (e) => {
      filterOptions(e.target.value);
      toggleClearButton();
      if (e.target.value.trim() && !isDropdownVisible) {
        showDropdown();
      }
    });

    // Show dropdown on focus
    searchInput.addEventListener("focus", () => {
      showDropdown();
    });

    // Hide dropdown on blur (with delay to allow clicking on options)
    searchInput.addEventListener("blur", () => {
      setTimeout(() => {
        hideDropdown();
      }, 150);
    });

    // Clear button functionality
    if (clearButton) {
      clearButton.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        clearSelection();
      });
    }

    // Prevent dropdown from closing when clicking inside
    menuElement.addEventListener("mousedown", (e) => {
      e.preventDefault(); // Prevent blur on search input
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      if (!searchInput.contains(e.target) && !menuElement.contains(e.target)) {
        hideDropdown();
      }
    });

    // Keyboard navigation
    searchInput.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        hideDropdown();
        searchInput.blur();
      } else if (e.key === "ArrowDown") {
        e.preventDefault();
        if (!isDropdownVisible) {
          showDropdown();
        }
        const visibleOptions = allOptions.filter(opt => opt.style.display !== "none");
        if (visibleOptions.length > 0) {
          visibleOptions[0].focus();
        }
      } else if (e.key === "Enter") {
        e.preventDefault();
        // If there's exactly one visible option, select it
        const visibleOptions = allOptions.filter(opt => opt.style.display !== "none");
        if (visibleOptions.length === 1) {
          visibleOptions[0].click();
        }
      }
    });

    // Handle option selection
    optionsContainer.addEventListener("click", (e) => {
      const option = e.target.closest("button[data-user-id]");
      if (!option) return;

      const userId = option.getAttribute("data-user-id");
      const userName = option.getAttribute("data-user-name");

      // Update hidden input
      hiddenInput.value = userId;

      // Update search input with selected value
      searchInput.value = userName;

      // Update highlighting
      allOptions.forEach(btn => {
        btn.classList.remove("bg-green-50", "text-green-700", "dark:bg-green-900/30", "dark:text-green-400");
        btn.classList.add("text-gray-700", "dark:text-gray-300");
        // Remove checkmarks
        const checkmark = btn.querySelector("svg:last-child");
        if (checkmark && checkmark.getAttribute("fill") === "currentColor") {
          checkmark.remove();
        }
      });

      // Highlight selected option
      option.classList.remove("text-gray-700", "dark:text-gray-300");
      option.classList.add("bg-green-50", "text-green-700", "dark:bg-green-900/30", "dark:text-green-400");
      
      // Add checkmark
      const checkmark = document.createElement("svg");
      checkmark.className = "w-4 h-4 text-green-600 flex-shrink-0 ml-2";
      checkmark.setAttribute("fill", "currentColor");
      checkmark.setAttribute("viewBox", "0 0 20 20");
      checkmark.innerHTML = '<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>';
      option.appendChild(checkmark);

      // Show clear button
      toggleClearButton();

      // Close dropdown
      hideDropdown();

      // Trigger custom event
      const event = new CustomEvent("clientSelected", {
        detail: {
          userId: userId,
          userName: userName,
          fullText: userName,
        },
      });
      document.dispatchEvent(event);
    });

    // Keyboard navigation for options
    optionsContainer.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        hideDropdown();
        searchInput.focus();
      } else if (e.key === "ArrowUp") {
        e.preventDefault();
        const currentOption = e.target;
        const visibleOptions = allOptions.filter(opt => opt.style.display !== "none");
        const currentIndex = visibleOptions.indexOf(currentOption);
        if (currentIndex > 0) {
          visibleOptions[currentIndex - 1].focus();
        } else {
          searchInput.focus();
        }
      } else if (e.key === "ArrowDown") {
        e.preventDefault();
        const currentOption = e.target;
        const visibleOptions = allOptions.filter(opt => opt.style.display !== "none");
        const currentIndex = visibleOptions.indexOf(currentOption);
        if (currentIndex < visibleOptions.length - 1) {
          visibleOptions[currentIndex + 1].focus();
        }
      } else if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        e.target.click();
      }
    });

    // Make options focusable
    allOptions.forEach(option => {
      option.setAttribute("tabindex", "-1");
    });

    // Initialize clear button state
    toggleClearButton();

    // Initialize filtering
    filterOptions(searchInput.value);
  });
</script>

<!-- Debug information (remove in production) -->
<!-- {
  !import.meta.env.PROD && (
    <details class="mt-2 text-xs text-gray-500">
      <summary class="cursor-pointer">üîç Debug Info</summary>
      <div class="mt-1 rounded bg-gray-100 p-2 text-xs">
        <div>Users loaded: {users.length}</div>
        <div>Role filter: {currentRole || "None (all roles)"}</div>
        <div>Selected: {selectedUserId || "None"}</div>
        <div>Error: {error || "None"}</div>
        {users.length > 0 && (
          <div class="mt-1">
            <strong>Available users:</strong>
            <ul class="ml-2">
              {users.slice(0, 3).map((user) => (
                <li>
                  ‚Ä¢ {user.company_name || user.email} ({user.role})
                </li>
              ))}
              {users.length > 3 && <li>‚Ä¢ ... and {users.length - 3} more</li>}
            </ul>
          </div>
        )}
      </div>
    </details>
  )
} -->

<script define:vars={{ id }}>
  // Add client-side functionality for dynamic updates
  document.addEventListener("DOMContentLoaded", function () {
    const clientSelect = document.getElementById(id);

    if (clientSelect) {
      clientSelect.addEventListener("change", function (e) {
        const target = e.target;
        if (!target) return;

        const selectedOption = target.options[target.selectedIndex];
        console.log("üîî Client selected:", {
          id: target.value,
          name: selectedOption.text,
          element: target,
        });

        // Trigger a custom event for other components to listen to
        const event = new CustomEvent("clientSelected", {
          detail: {
            userId: target.value,
            userName: selectedOption.text.split(" (")[0], // Remove role suffix
            fullText: selectedOption.text,
          },
        });
        document.dispatchEvent(event);
      });
    }
  });
</script>

<style>
  /* Custom styling for the select dropdown */
  select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
  }

  /* Dark mode arrow */
  .dark select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%239ca3af' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  }
</style>
