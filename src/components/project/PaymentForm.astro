---
interface Props {
  invoiceId: number;
  amount: number;
  currency?: string;
  paymentType?: "deposit" | "balance";
  clientProfile?: any;
}

const { invoiceId, amount, currency = "usd", paymentType = "deposit", clientProfile } = Astro.props;

// Get Stripe publishable key from environment
const stripePublishableKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY || "";
---

<div class="payment-form-container">
  <div class="payment-methods">
    <h3 class="mb-4 text-lg font-semibold">Payment Methods</h3>

    <!-- Apple Pay Button -->
    <div id="apple-pay-container" class="mb-4">
      <button
        id="apple-pay-button"
        class="apple-pay-button hidden"
        style="width: 100%; height: 50px; border-radius: 8px; background: #000; color: #fff; border: none; font-size: 16px; font-weight: 600;"
      >
        <span class="apple-pay-text">Pay with Apple Pay</span>
      </button>
    </div>

    <!-- Google Pay Button -->
    <div id="google-pay-container" class="mb-4">
      <button
        id="google-pay-button"
        class="google-pay-button hidden"
        style="width: 100%; height: 50px; border-radius: 8px; background: #000; color: #fff; border: none; font-size: 16px; font-weight: 600;"
      >
        <span class="google-pay-text">Pay with Google Pay</span>
      </button>
    </div>

    <!-- Link Pay (Venmo-like) Button -->
    <div id="link-pay-container" class="mb-4">
      <button
        id="link-pay-button"
        class="link-pay-button hidden"
        style="width: 100%; height: 50px; border-radius: 8px; background: #000; color: #fff; border: none; font-size: 16px; font-weight: 600;"
      >
        <span class="link-pay-text">Pay with Link</span>
      </button>
    </div>

    <!-- Billing Information -->
    <div class="billing-info mb-6">
      <h4 class="mb-4 text-lg font-medium text-gray-900">Billing Information</h4>

      <div class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-2">
        <div>
          <label for="first-name" class="mb-2 block text-sm font-medium text-gray-700">
            First Name *
          </label>
          <input
            type="text"
            id="first-name"
            name="firstName"
            required
            value={clientProfile?.first_name || ""}
            class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
            placeholder="John"
          />
        </div>

        <div>
          <label for="last-name" class="mb-2 block text-sm font-medium text-gray-700">
            Last Name *
          </label>
          <input
            type="text"
            id="last-name"
            name="lastName"
            required
            value={clientProfile?.last_name || ""}
            class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
            placeholder="Smith"
          />
        </div>
      </div>

      <div class="mb-4">
        <label for="email" class="mb-2 block text-sm font-medium text-gray-700">
          Email Address *
        </label>
        <input
          type="email"
          id="email"
          name="email"
          required
          value={clientProfile?.email || ""}
          class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
          placeholder="john.smith@company.com"
        />
      </div>

      <div class="mb-4">
        <label for="company-name" class="mb-2 block text-sm font-medium text-gray-700">
          Company Name (Optional)
        </label>
        <input
          type="text"
          id="company-name"
          name="companyName"
          value={clientProfile?.company_name || ""}
          class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
          placeholder="ABC Fire Protection"
        />
      </div>
    </div>

    <!-- Billing Address -->
    <div class="billing-address mb-6">
      <h4 class="mb-4 text-lg font-medium text-gray-900">Billing Address</h4>

      <div class="mb-4">
        <label for="address" class="mb-2 block text-sm font-medium text-gray-700">
          Street Address *
        </label>
        <input
          type="text"
          id="address"
          name="address"
          required
          class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
          placeholder="123 Main Street"
        />
      </div>

      <div class="mb-4 grid grid-cols-1 gap-4 md:grid-cols-3">
        <div>
          <label for="city" class="mb-2 block text-sm font-medium text-gray-700"> City * </label>
          <input
            type="text"
            id="city"
            name="city"
            required
            class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
            placeholder="Boston"
          />
        </div>

        <div>
          <label for="state" class="mb-2 block text-sm font-medium text-gray-700"> State * </label>
          <select
            id="state"
            name="state"
            required
            class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
          >
            <option value="">Select State</option>
            <option value="MA">Massachusetts</option>
            <option value="NH">New Hampshire</option>
            <option value="CT">Connecticut</option>
            <option value="RI">Rhode Island</option>
            <option value="ME">Maine</option>
            <option value="VT">Vermont</option>
            <option value="NY">New York</option>
            <option value="NJ">New Jersey</option>
            <option value="PA">Pennsylvania</option>
            <!-- Add more states as needed -->
          </select>
        </div>

        <div>
          <label for="zip" class="mb-2 block text-sm font-medium text-gray-700"> ZIP Code * </label>
          <input
            type="text"
            id="zip"
            name="zip"
            required
            pattern="[0-9]{5}(-[0-9]{4})?"
            class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
            placeholder="02101"
          />
        </div>
      </div>
    </div>

    <!-- Credit Card Information -->
    <div class="card-info mb-6">
      <h4 class="mb-4 text-lg font-medium text-gray-900">Payment Information</h4>

      <div class="mb-4">
        <label for="cardholder-name" class="mb-2 block text-sm font-medium text-gray-700">
          Cardholder Name *
        </label>
        <input
          type="text"
          id="cardholder-name"
          name="cardholderName"
          required
          class="w-full rounded-md border border-gray-300 p-3 focus:border-blue-500 focus:ring-blue-500"
          placeholder="Name as it appears on card"
        />
      </div>

      <!-- Separate Card Elements for better UX -->
      <div class="mb-4">
        <label for="card-number-element" class="mb-2 block text-sm font-medium text-gray-700">
          Card Number *
        </label>
        <div id="card-number-element" class="rounded-md border border-gray-300 p-3"></div>
      </div>

      <div class="mb-4 grid grid-cols-2 gap-4">
        <div>
          <label for="card-expiry-element" class="mb-2 block text-sm font-medium text-gray-700">
            Expiration Date *
          </label>
          <div id="card-expiry-element" class="rounded-md border border-gray-300 p-3"></div>
        </div>

        <div>
          <label for="card-cvc-element" class="mb-2 block text-sm font-medium text-gray-700">
            CVC *
          </label>
          <div id="card-cvc-element" class="rounded-md border border-gray-300 p-3"></div>
        </div>
      </div>

      <div id="card-errors" class="mt-2 text-sm text-red-600" role="alert"></div>
    </div>

    <!-- Legal and Options -->
    <div class="legal-section mb-6">
      <div class="mb-4 flex items-start space-x-3">
        <input
          type="checkbox"
          id="save-payment-method"
          name="savePaymentMethod"
          class="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <label for="save-payment-method" class="text-sm text-gray-700">
          Save this payment method for future purchases
        </label>
      </div>

      <div class="mb-4 flex items-start space-x-3">
        <input
          type="checkbox"
          id="terms-agreement"
          name="termsAgreement"
          required
          class="mt-1 h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <label for="terms-agreement" class="text-sm text-gray-700">
          I agree to the <a href="/terms" class="text-blue-600 hover:underline" target="_blank"
            >Terms of Service</a
          >
          and <a href="/privacy" class="text-blue-600 hover:underline" target="_blank"
            >Privacy Policy</a
          > *
        </label>
      </div>
    </div>

    <!-- Payment Button -->
    <button
      id="submit-payment"
      class="w-full rounded-md bg-blue-600 px-4 py-3 font-bold text-white transition duration-200 hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50"
      disabled
    >
      <span id="button-text">Pay ${(amount / 100).toFixed(2)}</span>
      <div id="spinner" class="hidden">
        <div class="mx-auto h-4 w-4 animate-spin rounded-full border-b-2 border-white"></div>
      </div>
    </button>
  </div>

  <!-- Payment Status -->
  <div id="payment-status" class="mt-4 hidden">
    <div
      id="payment-success"
      class="hidden rounded border border-green-400 bg-green-100 p-4 text-green-700"
    >
      <p class="font-semibold">Payment Successful!</p>
      <p>Your invoice has been paid and updated.</p>
    </div>
    <div
      id="payment-error"
      class="hidden rounded border border-red-400 bg-red-100 p-4 text-red-700"
    >
      <p class="font-semibold">Payment Failed</p>
      <p id="error-message"></p>
    </div>
  </div>
</div>

<script
  define:vars={{ invoiceId, amount, currency, stripePublishableKey, paymentType, clientProfile }}
>
  (async () => {
    // Load Stripe from CDN if not already loaded
    if (!window.Stripe) {
      const script = document.createElement("script");
      script.src = "https://js.stripe.com/v3/";
      script.async = true;
      document.head.appendChild(script);

      // Wait for Stripe to load
      await new Promise((resolve, reject) => {
        script.onload = resolve;
        script.onerror = reject;
      });
    }

    // Initialize Stripe
    const stripe = window.Stripe(stripePublishableKey);
    if (!stripe) {
      console.error("Failed to load Stripe");
      return;
    }

    const elements = stripe.elements();

    // Create separate card elements for better UX
    const cardNumberElement = elements.create("cardNumber", {
      style: {
        base: {
          fontSize: "16px",
          color: "#424770",
          "::placeholder": {
            color: "#aab7c4",
          },
        },
        invalid: {
          color: "#9e2146",
        },
      },
    });

    const cardExpiryElement = elements.create("cardExpiry", {
      style: {
        base: {
          fontSize: "16px",
          color: "#424770",
          "::placeholder": {
            color: "#aab7c4",
          },
        },
        invalid: {
          color: "#9e2146",
        },
      },
    });

    const cardCvcElement = elements.create("cardCvc", {
      style: {
        base: {
          fontSize: "16px",
          color: "#424770",
          "::placeholder": {
            color: "#aab7c4",
          },
        },
        invalid: {
          color: "#9e2146",
        },
      },
    });

    // Mount the elements
    cardNumberElement.mount("#card-number-element");
    cardExpiryElement.mount("#card-expiry-element");
    cardCvcElement.mount("#card-cvc-element");

    // Handle card errors from any element
    const handleCardErrors = (error) => {
      const displayError = document.getElementById("card-errors");
      if (displayError) {
        if (error) {
          displayError.textContent = error.message;
        } else {
          displayError.textContent = "";
        }
      }
    };

    cardNumberElement.on("change", ({ error }) => {
      handleCardErrors(error);
      validateForm();
    });
    cardExpiryElement.on("change", ({ error }) => {
      handleCardErrors(error);
      validateForm();
    });
    cardCvcElement.on("change", ({ error }) => {
      handleCardErrors(error);
      validateForm();
    });

    // Form validation
    function validateForm() {
      const requiredFields = [
        "first-name",
        "last-name",
        "email",
        "address",
        "city",
        "state",
        "zip",
        "cardholder-name",
      ];

      const termsCheckbox = document.getElementById("terms-agreement");
      const submitButton = document.getElementById("submit-payment");

      let allFieldsValid = true;

      // Check required text fields
      for (const fieldId of requiredFields) {
        const field = document.getElementById(fieldId);
        if (!field || !field.value.trim()) {
          allFieldsValid = false;
          break;
        }
      }

      // Check terms checkbox
      if (!termsCheckbox || !termsCheckbox.checked) {
        allFieldsValid = false;
      }

      // Enable/disable submit button
      if (submitButton) {
        submitButton.disabled = !allFieldsValid;
      }
    }

    // Add event listeners to all form fields for real-time validation
    document.addEventListener("DOMContentLoaded", () => {
      const formFields = document.querySelectorAll("input[required], select[required]");
      formFields.forEach((field) => {
        field.addEventListener("input", validateForm);
        field.addEventListener("change", validateForm);
      });

      // Initial validation
      validateForm();
    });

    // Payment form handling
    const submitButton = document.getElementById("submit-payment");
    const buttonText = document.getElementById("button-text");
    const spinner = document.getElementById("spinner");
    const paymentStatus = document.getElementById("payment-status");
    const paymentSuccess = document.getElementById("payment-success");
    const paymentError = document.getElementById("payment-error");
    const errorMessage = document.getElementById("error-message");

    let clientSecret = null;
    let paymentIntentId = null;

    // Create payment intent when form loads
    async function createPaymentIntent(paymentMethod = null) {
      try {
        // Collect billing details if form is filled
        const billingDetails = {
          name: document.getElementById("cardholder-name")?.value || "",
          email: document.getElementById("email")?.value || "",
          address: {
            line1: document.getElementById("address")?.value || "",
            city: document.getElementById("city")?.value || "",
            state: document.getElementById("state")?.value || "",
            postal_code: document.getElementById("zip")?.value || "",
            country: "US",
          },
        };

        const response = await fetch("/api/create-payment-intent", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            projectId: invoiceId, // Using invoiceId as projectId for now
            paymentType: paymentType,
            paymentMethod: paymentMethod,
            billingDetails: billingDetails.email ? billingDetails : null,
          }),
        });

        // Check if response is OK and contains JSON
        if (!response.ok) {
          const errorText = await response.text();
          console.error("API Error Response:", errorText);
          throw new Error(`Server error: ${response.status}`);
        }

        // Try to parse JSON, catch any parsing errors
        let data;
        try {
          data = await response.json();
        } catch (parseError) {
          console.error("JSON Parse Error:", parseError);
          const responseText = await response.text();
          console.error("Response text:", responseText);
          throw new Error("Invalid response from server");
        }

        if (data.success) {
          clientSecret = data.clientSecret;
          paymentIntentId = data.paymentIntentId;
          if (submitButton) {
            submitButton.disabled = false;
          }
          return data;
        } else {
          throw new Error(data.error);
        }
      } catch (error) {
        console.error("Error creating payment intent:", error);
        showError("Failed to initialize payment. Please try again.");
      }
    }

    // Handle payment submission
    async function handlePayment(paymentMethod = null) {
      if (!clientSecret) {
        await createPaymentIntent(paymentMethod);
      }

      setLoading(true);

      try {
        let result;

        if (paymentMethod) {
          // For Apple Pay, Google Pay, Link
          result = await stripe.confirmPayment({
            clientSecret,
            confirmParams: {
              payment_method: paymentMethod,
              return_url: window.location.href,
            },
          });
        } else {
          // Get billing information from form
          const billingDetails = {
            name: document.getElementById("cardholder-name").value,
            email: document.getElementById("email").value,
            address: {
              line1: document.getElementById("address").value,
              city: document.getElementById("city").value,
              state: document.getElementById("state").value,
              postal_code: document.getElementById("zip").value,
              country: "US",
            },
          };

          // For card payments with billing details
          result = await stripe.confirmCardPayment(clientSecret, {
            payment_method: {
              card: cardNumberElement,
              billing_details: billingDetails,
            },
          });
        }

        if (result.error) {
          showError(result.error.message);
        } else if (result.paymentIntent && result.paymentIntent.status === "succeeded") {
          await confirmPayment();
        }
      } catch (error) {
        console.error("Payment error:", error);
        showError("Payment failed. Please try again.");
      } finally {
        setLoading(false);
      }
    }

    // Confirm payment with backend
    async function confirmPayment() {
      try {
        const response = await fetch("/api/confirm-payment", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            paymentIntentId,
            invoiceId,
          }),
        });

        const data = await response.json();

        if (data.success) {
          showSuccess();
        } else {
          showError(data.error || "Failed to confirm payment");
        }
      } catch (error) {
        console.error("Error confirming payment:", error);
        showError("Failed to confirm payment");
      }
    }

    // UI helpers
    function setLoading(loading) {
      if (submitButton) {
        // submitButton is the payment button element
        submitButton.toggleAttribute("disabled", !!loading);
      }
      if (loading) {
        buttonText?.classList.add("hidden");
        spinner?.classList.remove("hidden");
      } else {
        buttonText?.classList.remove("hidden");
        spinner?.classList.add("hidden");
      }
    }

    function showSuccess() {
      paymentStatus?.classList.remove("hidden");
      paymentSuccess?.classList.remove("hidden");
      paymentError?.classList.add("hidden");
      submitButton?.classList.add("hidden");
    }

    function showError(message) {
      paymentStatus?.classList.remove("hidden");
      paymentError?.classList.remove("hidden");
      paymentSuccess?.classList.add("hidden");
      if (errorMessage) {
        errorMessage.textContent = message;
      }
    }

    // Initialize payment intent
    createPaymentIntent();

    // Handle form submission
    submitButton?.addEventListener("click", (e) => {
      e.preventDefault();
      handlePayment();
    });

    // Apple Pay setup - Debug and improved checks
    console.log("🍎 [APPLE PAY] Checking Apple Pay availability...");
    console.log("🍎 [APPLE PAY] ApplePaySession available:", !!window.ApplePaySession);
    console.log("🍎 [APPLE PAY] Protocol:", window.location.protocol);
    console.log("🍎 [APPLE PAY] Hostname:", window.location.hostname);

    // Allow localhost for testing (Apple Pay works on localhost in development)
    const isSecure =
      window.location.protocol === "https:" || window.location.hostname === "localhost";

    // Apple Pay requires HTTPS even for localhost - only show on actual HTTPS
    if (window.ApplePaySession && window.location.protocol === "https:") {
      console.log("🍎 [APPLE PAY] Checking canMakePayments...");

      try {
        const canMakePayments = window.ApplePaySession.canMakePayments();
        console.log("🍎 [APPLE PAY] Can make payments:", canMakePayments);

        if (canMakePayments) {
          const applePayButton = document.getElementById("apple-pay-button");
          console.log("🍎 [APPLE PAY] Apple Pay button element:", applePayButton);

          if (applePayButton) {
            applePayButton.classList.remove("hidden");
            console.log("🍎 [APPLE PAY] Apple Pay button shown!");

            applePayButton.addEventListener("click", async () => {
              const paymentRequest = {
                countryCode: "US",
                currencyCode: "USD",
                supportedNetworks: ["visa", "masterCard", "amex"],
                merchantCapabilities: ["supports3DS"],
                total: {
                  label: "CAPCo Fire Protection",
                  amount: (amount / 100).toFixed(2),
                },
              };

              const session = new window.ApplePaySession(3, paymentRequest);

              session.onvalidatemerchant = async (event) => {
                // You'll need to implement merchant validation
                session.completeMerchantValidation({});
              };

              session.onpaymentauthorized = async (event) => {
                await handlePayment(event.payment.token);
                session.completePayment(window.ApplePaySession.STATUS_SUCCESS);
              };

              session.oncancel = () => {
                console.log("Apple Pay cancelled");
              };

              session.begin();
            });
          } else {
            console.log("🍎 [APPLE PAY] Apple Pay button element not found in DOM");
          }
        } else {
          console.log("🍎 [APPLE PAY] Device cannot make Apple Pay payments");
        }
      } catch (error) {
        console.error("🍎 [APPLE PAY] Error checking Apple Pay availability:", error);
      }
    } else {
      if (!window.ApplePaySession) {
        console.log(
          "🍎 [APPLE PAY] ApplePaySession not available (not Safari or not supported device)"
        );
      } else if (window.location.protocol !== "https:") {
        console.log(
          "🍎 [APPLE PAY] Apple Pay requires HTTPS. Current protocol:",
          window.location.protocol
        );
        console.log(
          "🍎 [APPLE PAY] To test Apple Pay, deploy to HTTPS or use a tunneling service like ngrok"
        );
      }
    }

    // Google Pay setup
    if (window.google && window.google.payments) {
      const googlePayButton = document.getElementById("google-pay-button");
      if (googlePayButton) {
        googlePayButton.classList.remove("hidden");

        googlePayButton.addEventListener("click", async () => {
          // Google Pay implementation
          // This would require additional Google Pay setup
          console.log("Google Pay clicked");
        });
      }
    }

    // Link Pay setup (Venmo-like)
    const linkPayButton = document.getElementById("link-pay-button");
    if (linkPayButton) {
      linkPayButton.classList.remove("hidden");

      linkPayButton.addEventListener("click", async () => {
        await handlePayment("link");
      });
    }
  })();
</script>

<style>
  .apple-pay-button {
    -webkit-appearance: -apple-pay-button;
    -apple-pay-button-type: plain;
    -apple-pay-button-style: black;
  }

  .google-pay-button {
    background: #000 !important;
  }

  .link-pay-button {
    background: #000 !important;
  }
</style>
