---
interface Props {
  project?: any;
  projectId?: string | null;
  userRole?: string | null;
  isNewProject?: boolean;
}

const {
  project = {},
  projectId = "",
  userRole,
  isNewProject = false,
} = Astro.props;

// Generate a temporary ID for new projects
const formId = isNewProject ? `new-project-${Date.now()}` : projectId || "";
---

<form
  class="space-y-4"
  data-project-id={formId}
  data-project-data={JSON.stringify(project || {})}
  data-is-new-project={isNewProject}
>
  <!-- Title Field -->
  <div class="relative">
    <label
      for={`title-${formId}`}
      class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
    >
      Title *
    </label>
    <input
      type="text"
      id={`title-${formId}`}
      name="title"
      value={project?.title || ""}
      class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
      placeholder="Project title"
      required
    />
  </div>

  <!-- Address Field -->
  <div class="relative">
    <label
      for={`address-${formId}`}
      class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
    >
      Address *
    </label>
    <input
      type="text"
      id={`address-${formId}`}
      name="address"
      value={project?.address || ""}
      class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
      placeholder="Project address"
      required
    />
  </div>

  <!-- Description Field -->
  <div class="relative">
    <label
      for={`description-${formId}`}
      class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
    >
      Description
    </label>
    <textarea
      id={`description-${formId}`}
      name="description"
      rows="3"
      class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
      placeholder="Project description"
    >{project?.description || ""}</textarea>
  </div>

  <!-- Square Footage Field -->
  <div class="relative">
    <label
      for={`sq_ft-${formId}`}
      class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
    >
      Square Footage
    </label>
    <input
      type="number"
      id={`sq_ft-${formId}`}
      name="sq_ft"
      value={project?.sq_ft || ""}
      class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
      placeholder="Square footage"
    />
  </div>

  <!-- New Construction Toggle -->
  <div class="relative">
    <label class="inline-flex items-center cursor-pointer">
      <input
        type="checkbox"
        name="new_construction"
        checked={project?.new_construction}
        class="sr-only peer"
      />
      <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 dark:peer-checked:bg-blue-600" />
      <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300">
        New Construction
      </span>
    </label>
  </div>

  <!-- Form Actions -->
  <div class="flex gap-2 pt-4 border-t border-gray-200 dark:border-gray-600">
    <!-- Save/Update Button -->
    <button
      type="submit"
      class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md text-sm font-medium transition-colors"
    >
      <i class="bx bx-save mr-1"></i>
      {isNewProject ? "Create Project" : "Update Project"}
    </button>

    <!-- Delete Button (only for existing projects) -->
    {!isNewProject && (
      <button
        type="button"
        id="delete-project-btn"
        class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md text-sm font-medium transition-colors"
        data-project-id={formId}
      >
        <i class="bx bx-trash mr-1"></i>
        Delete Project
      </button>
    )}
  </div>
</form>

<script>
  // Extend Window interface for toast manager
  declare global {
    interface Window {
      toastAlertManager?: any;
    }
  }

  // Add event listeners when DOM is loaded
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.querySelector("form[data-project-id]");
    if (form) {
      const projectId = form.getAttribute("data-project-id");
      const isNewProject = form.getAttribute("data-is-new-project") === "true";

      // Add form submission handler
      form.addEventListener("submit", handleFormSubmit);

      // Handle delete button (only for existing projects)
      if (!isNewProject) {
        const deleteBtn = document.getElementById("delete-project-btn");
        if (deleteBtn && projectId) {
          deleteBtn.addEventListener("click", function () {
            deleteProject(projectId);
          });
        }
      }
    }
  });

  // Delete project function
  function deleteProject(projectId: string) {
    // Show confirmation toast with action buttons
    if ((window as any).toastAlertManager) {
      (window as any).toastAlertManager.show({
        type: "warning",
        title: "Delete Project",
        message: "Are you sure you want to delete this project? This action cannot be undone.",
        duration: 0, // Don't auto-dismiss
        actions: [
          {
            label: "Cancel",
            action: () => {
              // Just close the toast, do nothing
            },
          },
          {
            label: "Delete",
            action: () => {
              // Show loading state
              const deleteBtn = document.getElementById("delete-project-btn") as HTMLButtonElement;
              if (deleteBtn) {
                deleteBtn.disabled = true;
                deleteBtn.innerHTML = '<i class="bx bx-loader-alt bx-spin mr-1"></i>Deleting...';
              }

              // Make API call to delete project
              fetch(`/api/delete-project`, {
                method: "DELETE",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ projectId }),
              })
                .then((response) => {
                  if (!response.ok) {
                    throw new Error("Failed to delete project");
                  }
                  return response.json();
                })
                .then((data) => {
                  // Show success toast
                  if ((window as any).toastAlertManager) {
                    (window as any).toastAlertManager.show({
                      type: "success",
                      title: "Project Deleted!",
                      message: "Project has been deleted successfully.",
                      duration: 3000,
                    });
                  }

                  // Redirect to dashboard after a short delay
                  setTimeout(() => {
                    window.location.href = "/dashboard";
                  }, 1500);
                })
                .catch((error) => {
                  console.error("Error deleting project:", error);

                  // Show error toast
                  if ((window as any).toastAlertManager) {
                    (window as any).toastAlertManager.show({
                      type: "error",
                      title: "Delete Failed",
                      message: "Failed to delete project. Please try again.",
                      duration: 5000,
                    });
                  }

                  // Reset button state
                  if (deleteBtn) {
                    deleteBtn.disabled = false;
                    deleteBtn.innerHTML = '<i class="bx bx-trash mr-1"></i>Delete Project';
                  }
                });
            },
          },
        ],
      });
    } else {
      // Fallback confirmation if toast manager is not available
      if (confirm("Are you sure you want to delete this project? This action cannot be undone.")) {
        // Proceed with deletion using the same API call logic
        // (Implementation would be similar to the above)
      }
    }
  }

  // Form submission handler
  function handleFormSubmit(event: Event) {
    event.preventDefault();
    console.log("Form submission started");

    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    const projectId = form.getAttribute("data-project-id");
    const isNewProject = form.getAttribute("data-is-new-project") === "true";

    // Collect form data
    const formValues: any = {};
    for (const [key, value] of formData.entries()) {
      formValues[key] = value;
    }

    // Convert checkbox values
    formValues.new_construction = formData.has("new_construction");

    console.log("Form data:", formValues);

    // Determine API endpoint based on new/existing project
    const endpoint = isNewProject ? "/api/create-project" : `/api/update-project`;
    const method = isNewProject ? "POST" : "PUT";

    // Add project ID to form data for updates
    if (!isNewProject) {
      formValues.projectId = projectId;
    }

    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;

    if (!submitBtn) {
      console.error("Submit button not found");
      return;
    }

    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="bx bx-loader-alt bx-spin mr-1"></i>Saving...';

    // Submit form data
    fetch(endpoint, {
      method: method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formValues),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to save project");
        }
        return response.json();
      })
      .then((data) => {
        console.log("Project saved successfully:", data);

        // Show success toast
        if ((window as any).toastAlertManager) {
          (window as any).toastAlertManager.show({
            type: "success",
            title: isNewProject ? "Project Created!" : "Project Updated!",
            message: isNewProject
              ? "Your new project has been created successfully."
              : "Your project has been updated successfully.",
            duration: 4000,
          });
        }

        // Redirect to project page if it's a new project
        if (isNewProject && data.id) {
          setTimeout(() => {
            window.location.href = `/project/${data.id}`;
          }, 1500); // Small delay to show the toast
        }
      })
      .catch((error) => {
        console.error("Error saving project:", error);

        // Show error toast
        if ((window as any).toastAlertManager) {
          (window as any).toastAlertManager.show({
            type: "error",
            title: "Save Failed",
            message: "Failed to save project. Please try again.",
            duration: 5000,
          });
        }
      })
      .finally(() => {
        // Reset button state
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      });
  }

  // Helper function to show toast (fallback)
  function showToast(type: string, title: string, message: string) {
    if ((window as any).toastAlertManager) {
      (window as any).toastAlertManager.show({
        type,
        title,
        message,
        duration: 4000,
      });
    } else {
      // Fallback to console log if toast manager is not available
      console.log(`${type.toUpperCase()}: ${title} - ${message}`);
    }
  }
</script>