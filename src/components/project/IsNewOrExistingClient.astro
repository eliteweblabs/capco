---
// This component handles the toggle between new client and existing client
// All toggle logic is contained here, and form data is handled by the parent component

import ClientSelect from "../project/ClientSelectDropdown.astro";

interface Props {
  userRole?: string;
}

const { userRole = "client" } = Astro.props;
---

<div class="space-y-4">
  <!-- Modern New Client Toggle -->
  <div
    class="flex items-center justify-between rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-800"
  >
    <div class="flex flex-col">
      <label
        for="new-client-toggle"
        class="cursor-pointer text-sm font-medium text-gray-900 dark:text-gray-100"
      >
        New Client
      </label>
      <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
        Toggle to create a new client or select an existing one
      </p>
    </div>

    <!-- Modern Toggle Switch -->
    <div class="relative">
      <input type="checkbox" id="new-client-toggle" name="new_client" class="peer sr-only" />
      <label
        for="new-client-toggle"
        class="relative flex h-6 w-11 cursor-pointer items-center rounded-full bg-gray-300 px-0.5 transition-colors duration-200 ease-in-out peer-checked:bg-green-500 peer-focus:ring-2 peer-focus:ring-green-500 peer-focus:ring-offset-2 dark:bg-gray-600 dark:peer-checked:bg-green-600"
      >
      </label>
      <span
        class="pointer-events-none absolute left-0.5 top-0.5 inline-block h-5 w-5 transform rounded-full bg-white shadow-lg transition-transform duration-200 ease-in-out peer-checked:translate-x-5"
        aria-hidden="true"></span>
    </div>
  </div>

  <!-- New Client Fields (hidden by default) -->
  <div id="new-client-fields" class="hidden space-y-4">
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
      <!-- First Name -->
      <div>
        <label for="first-name-input" class="mb-1 block text-sm font-medium text-gray-700">
          First Name *
        </label>
        <input
          type="text"
          id="first-name-input"
          name="first_name"
          placeholder="First Name"
          class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
        />
      </div>

      <!-- Last Name -->
      <div>
        <label for="last-name-input" class="mb-1 block text-sm font-medium text-gray-700">
          Last Name *
        </label>
        <input
          type="text"
          id="last-name-input"
          name="last_name"
          placeholder="Last Name"
          class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
        />
      </div>
    </div>

    <!-- Company Name -->
    <div>
      <label for="company-name-input" class="mb-1 block text-sm font-medium text-gray-700">
        Company Name
      </label>
      <input
        type="text"
        id="company-name-input"
        name="company_name"
        placeholder="Company Name"
        class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
      />
    </div>

    <!-- Email -->
    <div>
      <label for="email-input" class="mb-1 block text-sm font-medium text-gray-700">
        Email *
      </label>
      <input
        type="email"
        id="email-input"
        name="email"
        placeholder="email@example.com"
        class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
      />
    </div>
  </div>

  <!-- Existing Client Select (shown by default) -->
  <div id="existing-client-select-container">
    <ClientSelect
      id="existing-client-select"
      name="author_id"
      label="Select Existing Client"
      role="Client"
      required={true}
      class="w-full"
    />
  </div>
</div>

<script>
  // Toggle logic for new/existing client
  document.addEventListener("DOMContentLoaded", function () {
    console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Initializing toggle logic...");

    const toggle = document.getElementById("new-client-toggle") as HTMLInputElement;
    const newClientFields = document.getElementById("new-client-fields") as HTMLDivElement;
    const existingClientSelect = document.getElementById(
      "existing-client-select-container"
    ) as HTMLDivElement;

    console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Elements found:", {
      toggle: !!toggle,
      newClientFields: !!newClientFields,
      existingClientSelect: !!existingClientSelect,
    });

    if (!toggle || !newClientFields || !existingClientSelect) {
      console.error("ðŸ”„ [NEW-CLIENT-TOGGLE] Missing required elements!");
      return;
    }

    function updateVisibility() {
      console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Toggle state:", toggle.checked);

      if (toggle.checked) {
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Switching to NEW CLIENT mode");

        // Show new client fields, hide existing client select
        newClientFields.classList.remove("hidden");
        existingClientSelect.classList.add("hidden");

        // Remove required from existing client select and disable it
        const select = document.getElementById("existing-client-select") as HTMLSelectElement;
        if (select) {
          select.disabled = true;
          select.removeAttribute("required");
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Disabled existing client select");
        }

        // Enable new client fields and add required to first_name, last_name, email
        const newFields = newClientFields.querySelectorAll("input");
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Found new client fields:", newFields.length);

        newFields.forEach((field) => {
          field.disabled = false;
          if (field.name === "first_name" || field.name === "last_name" || field.name === "email") {
            field.setAttribute("required", "required");
            console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Made field required:", field.name);
          }
        });
      } else {
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Switching to EXISTING CLIENT mode");

        // Hide new client fields, show existing client select
        newClientFields.classList.add("hidden");
        existingClientSelect.classList.remove("hidden");

        // Add required to existing client select and enable it
        const select = document.getElementById("existing-client-select") as HTMLSelectElement;
        if (select) {
          select.disabled = false;
          select.setAttribute("required", "required");
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Enabled existing client select");
        }

        // Disable new client fields and remove required from first_name, last_name, company_name, email
        const newFields = newClientFields.querySelectorAll("input");
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Removing required from fields:", newFields.length);

        newFields.forEach((field) => {
          field.disabled = true;
          field.removeAttribute("required");
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Removed required from:", field.name);
        });
      }
    }

    // Initial state
    console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Setting initial state...");
    updateVisibility();

    // Listen for toggle changes
    console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Adding event listener...");
    toggle.addEventListener("change", function () {
      console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Toggle changed!");
      updateVisibility();
    });
  });
</script>
