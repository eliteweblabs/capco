---
// This component handles the toggle between new client and existing client
// All toggle logic is contained here, and form data is handled by the parent component
import SlotMachineModal from "../form/SlotMachineModal.astro";
import { supabase } from "../../lib/supabase";

interface Props {
  userRole?: string;
}

// const { currentRole = "Client" } = Astro.props;

// Fetch existing clients for the slot machine - try global data first, fallback to database
let existingClients: any[] = [];
let clientError = null;

// Try to get client profiles from global data first (loaded at dashboard level)
if (typeof window !== "undefined" && (window as any).globalClientProfiles) {
  const globalProfiles = (window as any).globalClientProfiles;
  // console.log(`ðŸ“‹ [IsNewOrExistingClient] Using global client profiles: ${globalProfiles.length}`);

  existingClients = globalProfiles.map((profile: any) => ({
    value: profile.id,
    label: profile.company_name || `Client ${profile.id}`,
  }));
} else {
  // Fallback to database call if global data not available
  // console.log(
  //   "ðŸ“‹ [IsNewOrExistingClient] Global client profiles not available, falling back to database call"
  // );

  if (supabase) {
    try {
      // Get all client profiles
      const { data: profiles, error: profilesError } = await supabase
        .from("profiles")
        .select("id, company_name, role")
        .eq("role", "Client")
        .order("company_name");

      if (profilesError) {
        console.error("Error fetching client profiles:", profilesError);
        clientError = profilesError.message;
      } else if (profiles) {
        // console.log(
        //   `ðŸ“‹ [IsNewOrExistingClient] Loaded ${profiles.length} client profiles from database`
        // );

        // Format clients for slot machine
        existingClients = profiles.map((profile) => ({
          value: profile.id,
          label: profile.company_name || `Client ${profile.id}`,
        }));
      }
    } catch (err) {
      console.error("Exception fetching clients:", err);
      clientError = err instanceof Error ? err.message : "Unknown error";
    }
  } else {
    clientError = "Supabase not configured";
  }
}
---

<div class="space-y-4">
  <!-- Modern New Client Toggle -->
  <div
    class="flex items-center justify-between rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-700 dark:bg-gray-800"
  >
    <div class="flex flex-col">
      <label
        for="new-client-toggle"
        class="cursor-pointer text-sm font-medium text-gray-900 dark:text-gray-100"
      >
        New Client
      </label>
      <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
        Toggle to create a new client or select an existing one
      </p>
    </div>

    <!-- Modern Toggle Switch -->
    <div class="relative">
      <input type="checkbox" id="new-client-toggle" class="peer sr-only" />
      <input type="hidden" id="new-client-toggle-value" name="new_client" value="on" />
      <label
        for="new-client-toggle"
        class="relative flex h-6 w-11 cursor-pointer items-center rounded-full bg-gray-300 px-0.5 transition-colors duration-200 ease-in-out peer-checked:bg-green-500 peer-focus:ring-2 peer-focus:ring-green-500 peer-focus:ring-offset-2 dark:bg-gray-600 dark:peer-checked:bg-green-600"
      >
      </label>
      <span
        class="pointer-events-none absolute left-0.5 top-0.5 inline-block h-5 w-5 transform rounded-full bg-white shadow-lg transition-transform duration-200 ease-in-out peer-checked:translate-x-5"
        aria-hidden="true"></span>
    </div>
  </div>

  <!-- New Client Fields (hidden by default) -->
  <div id="new-client-fields" class="space-y-4 hidden">
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
      <!-- First Name -->
      <div>
        <label for="first-name-input" class="mb-1 block text-sm font-medium text-gray-700">
          First Name *
        </label>
        <input
          type="text"
          id="first-name-input"
          name="first_name"
          placeholder="First Name"
          required
          class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
        />
      </div>

      <!-- Last Name -->
      <div>
        <label for="last-name-input" class="mb-1 block text-sm font-medium text-gray-700">
          Last Name *
        </label>
        <input
          type="text"
          id="last-name-input"
          name="last_name"
          placeholder="Last Name"
          required
          class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
        />
      </div>
    </div>

    <!-- Company Name -->
    <div>
      <label for="company-name-input" class="mb-1 block text-sm font-medium text-gray-700">
        Company Name
      </label>
      <input
        type="text"
        id="company-name-input"
        name="company_name"
        placeholder="Company Name"
        class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
      />
    </div>

    <!-- Email -->
    <div>
      <label for="email-input" class="mb-1 block text-sm font-medium text-gray-700">
        Email *
      </label>
      <input
        type="email"
        id="email-input"
        name="email"
        placeholder="email@example.com"
        required
        class="w-full rounded-md border border-gray-300 px-3 py-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400 dark:focus:ring-blue-400"
      />
    </div>
  </div>

  <!-- Existing Client Select (hidden by default) -->
  <div id="existing-client-select-container" class="">
    <SlotMachineModal
      id="existing-client-select"
      name="author_id"
      title="Select Existing Client"
      options={existingClients}
      selectedValue=""
      placeholder={clientError ? "Error loading clients..." : "Choose an existing client..."}
      theme="blue"
      showCloseButton={true}
      showCancelButton={true}
      buttonText="Select Client"
      skipSaveToAPI={true}
    />
  </div>
</div>

<!-- Using proper Flowbite toggle structure - no custom CSS needed -->

<script>
  // Toggle logic for new/existing client
  document.addEventListener("DOMContentLoaded", function () {
    // console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Initializing toggle logic...");

    const toggle = document.getElementById("new-client-toggle") as HTMLInputElement;
    const newClientFields = document.getElementById("new-client-fields") as HTMLDivElement;
    const existingClientSelect = document.getElementById(
      "existing-client-select-container"
    ) as HTMLDivElement;

    // console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Elements found:", {
    //   toggle: !!toggle,
    //   newClientFields: !!newClientFields,
    //   existingClientSelect: !!existingClientSelect,
    // });

    if (!toggle || !newClientFields || !existingClientSelect) {
      console.error("ðŸ”„ [NEW-CLIENT-TOGGLE] Missing required elements!");
      return;
    }

    function updateVisibility() {
      // console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Toggle state:", toggle.checked);

      // Update the hidden input value based on toggle state
      const hiddenInput = document.getElementById("new-client-toggle-value") as HTMLInputElement;
      if (hiddenInput) {
        hiddenInput.value = toggle.checked ? "on" : "off";
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Updated hidden input value:", hiddenInput.value);
      }

      if (toggle.checked) {
        // console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Switching to NEW CLIENT mode");

        // Show new client fields, hide existing client select
        newClientFields.classList.remove("hidden");
        existingClientSelect.classList.add("hidden");

        // Clear existing client selection to prevent stale data
        const selectInput = document.getElementById("existing-client-select") as HTMLInputElement;
        if (selectInput) {
          selectInput.removeAttribute("required");
          selectInput.value = ""; // Clear the selected client value
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Cleared existing client selection");
        }

        // Also clear the slot machine modal value if it exists
        const slotMachineValue = document.getElementById(
          "existing-client-select-value"
        ) as HTMLInputElement;
        if (slotMachineValue) {
          slotMachineValue.value = "";
        }

        // Enable new client fields and add required attributes back
        const newFields = newClientFields.querySelectorAll("input");
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Found new client fields:", newFields.length);

        newFields.forEach((field) => {
          field.disabled = false;
          // Add required attribute back when enabling
          if (field.name === "first_name" || field.name === "last_name" || field.name === "email") {
            field.setAttribute("required", "required");
          }
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Enabled field and added required:", field.name);
        });
      } else {
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Switching to EXISTING CLIENT mode");

        // Hide new client fields, show existing client select
        newClientFields.classList.add("hidden");
        existingClientSelect.classList.remove("hidden");

        // Clear new client fields to prevent stale data
        const newFields = newClientFields.querySelectorAll("input");
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Clearing new client fields:", newFields.length);

        newFields.forEach((field) => {
          field.disabled = true;
          field.removeAttribute("required"); // Remove required when disabled
          field.value = ""; // Clear the field values
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Cleared and disabled field:", field.name);
        });

        // Add required to existing client select hidden input
        const selectInput = document.getElementById("existing-client-select") as HTMLInputElement;
        if (selectInput) {
          selectInput.setAttribute("required", "required");
          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Added required to existing client select");
        }
      }

      // Update the toggle state in the form data
      console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Toggle state updated:", toggle.checked);
    }

    // Initial state - start with new client mode (toggle ON)
    console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Setting initial state...");

    // Set toggle to checked (ON) by default for new client mode
    toggle.checked = true;

    // New client fields are shown by default, so they should have required attributes
    const initialNewFields = newClientFields.querySelectorAll("input");
    initialNewFields.forEach((field) => {
      if (field.name === "first_name" || field.name === "last_name" || field.name === "email") {
        field.setAttribute("required", "required");
      }
    });

    updateVisibility();

    // Listen for toggle changes
    console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Adding event listener...");
    toggle.addEventListener("change", function () {
      console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Toggle changed!");
      updateVisibility();
    });

    // Add form validation debugging and manual validation
    const form = toggle.closest("form");
    if (form) {
      form.addEventListener("submit", function (event) {
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Form submission intercepted for validation check");

        // Check current toggle state BEFORE updating visibility
        console.log(
          "ðŸ”„ [NEW-CLIENT-TOGGLE] Current toggle state BEFORE updateVisibility:",
          toggle.checked
        );

        // Ensure visibility is properly set before validation
        updateVisibility();

        // Check current toggle state AFTER updating visibility
        console.log(
          "ðŸ”„ [NEW-CLIENT-TOGGLE] Current toggle state AFTER updateVisibility:",
          toggle.checked
        );

        // Check required fields
        const requiredFields = form.querySelectorAll("[required]");
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Required fields found:", requiredFields.length);

        requiredFields.forEach((field, index) => {
          const input = field as HTMLInputElement;
          console.log(`ðŸ”„ [NEW-CLIENT-TOGGLE] Required field ${index + 1}:`, {
            name: input.name,
            value: input.value,
            disabled: input.disabled,
            hidden: input.closest(".hidden") !== null,
          });
        });

        // Manual validation: ensure only appropriate fields are required
        let isValid = true;

        if (toggle.checked) {
          // New client mode: new client fields should be required, existing client select should not
          const newClientRequired = form.querySelectorAll(
            "#new-client-fields input[required]"
          ).length;
          const existingClientRequired = form.querySelectorAll(
            "#existing-client-select[required]"
          ).length;

          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Validation - New client mode:", {
            newClientRequired,
            existingClientRequired,
          });

          if (existingClientRequired > 0) {
            console.error(
              "ðŸ”„ [NEW-CLIENT-TOGGLE] Validation failed: existing client select still required in new client mode"
            );
            isValid = false;
          }
        } else {
          // Existing client mode: existing client select should be required, new client fields should not
          const newClientRequired = form.querySelectorAll(
            "#new-client-fields input[required]"
          ).length;
          const existingClientRequired = form.querySelectorAll(
            "#existing-client-select[required]"
          ).length;

          console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Validation - Existing client mode:", {
            newClientRequired,
            existingClientRequired,
          });

          if (newClientRequired > 0) {
            console.error(
              "ðŸ”„ [NEW-CLIENT-TOGGLE] Validation failed: new client fields still required in existing client mode"
            );
            isValid = false;
          }
        }

        if (!isValid) {
          console.error(
            "ðŸ”„ [NEW-CLIENT-TOGGLE] Form validation failed - required attributes are incorrect"
          );
        }

        // Debug: Log form data that will be submitted
        const formData = new FormData(form);
        const formDataObj: Record<string, any> = {};
        for (let [key, value] of formData.entries()) {
          formDataObj[key] = value;
        }
        console.log("ðŸ”„ [NEW-CLIENT-TOGGLE] Form data being submitted:", formDataObj);
      });
    }
  });
</script>
