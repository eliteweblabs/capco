---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  id?: string;
  width?: number;
  height?: number;
  placeholder?: string;
  required?: boolean;
}

const {
  id = "signature-canvas",
  width = 400,
  height = 200,
  placeholder = "Sign here...",
  required = false,
} = Astro.props;
---

<div class="digital-signature-container">
  <label class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
    Digital Signature {required && <span class="text-red-500">*</span>}
  </label>

  <div
    class="signature-container relative rounded-lg border-2 border-dashed border-gray-300 bg-white dark:border-gray-600 dark:bg-gray-800"
    data-max-width={width}
    data-max-height={height}
  >
    <!-- Canvas for signature -->
    <canvas
      id={id}
      class="signature-canvas block w-full cursor-crosshair"
      data-max-width={width}
      data-max-height={height}
      data-aspect-ratio={width / height}
    >
      <!-- Placeholder text (shows when empty) -->
      <div
        class="signature-placeholder pointer-events-none absolute inset-0 flex items-center justify-center"
      >
        <span class="text-sm font-medium text-gray-400 dark:text-gray-500">
          {placeholder}
        </span>
      </div>

      <!-- Signature controls -->
      <div class="absolute bottom-2 right-2 flex gap-2">
        <button
          type="button"
          class="signature-clear rounded bg-red-500 px-3 py-1 text-xs text-white transition-colors hover:bg-red-600"
          data-signature-id={id}
        >
          <BoxIcon name="trash" class="mr-1" />
          Clear
        </button>
        <button
          type="button"
          class="signature-save rounded bg-green-500 px-3 py-1 text-xs text-white transition-colors hover:bg-green-600"
          data-signature-id={id}
        >
          <BoxIcon name="save" class="mr-1" />
          Save
        </button>
      </div>
    </canvas>

    <!-- Hidden input to store signature data -->
    <input type="hidden" id={`${id}-data`} name={`${id}-data`} class="signature-data" />

    <!-- Signature status -->
    <div class="signature-status mt-2 text-sm">
      <span class="signature-empty text-gray-500">No signature captured</span>
      <span class="signature-saved hidden text-green-600">‚úì Signature saved</span>
    </div>
  </div>

  <script>
    // Load SignaturePad from CDN
    let SignaturePad: any = null;

    async function loadSignaturePad() {
      if (SignaturePad) return SignaturePad;

      try {
        const script = document.createElement("script");
        script.src =
          "https://cdn.jsdelivr.net/npm/signature_pad@4.1.7/dist/signature_pad.umd.min.js";
        script.onload = () => {
          SignaturePad = (window as any).SignaturePad;
          console.log("‚úÖ SignaturePad loaded successfully");
        };
        document.head.appendChild(script);

        // Wait for script to load
        return new Promise((resolve) => {
          script.onload = () => {
            SignaturePad = (window as any).SignaturePad;
            resolve(SignaturePad);
          };
        });
      } catch (error) {
        console.error("‚ùå Failed to load SignaturePad:", error);
        return null;
      }
    }

    class DigitalSignatureManager {
      private signaturePads: Map<string, any> = new Map();

      constructor() {
        this.initializeSignatures();
      }

      async initializeSignatures() {
        // Wait for SignaturePad to load
        await loadSignaturePad();

        if (!SignaturePad) {
          console.error("‚ùå SignaturePad not available");
          return;
        }

        const canvases = document.querySelectorAll(".signature-canvas");

        canvases.forEach((canvas) => {
          this.setupSignaturePad(canvas as HTMLCanvasElement);
        });
      }

      setupSignaturePad(canvas: HTMLCanvasElement) {
        const maxWidth = canvas.getAttribute("data-max-width") || "400";
        const maxHeight = canvas.getAttribute("data-max-height") || "200";
        const aspectRatio = canvas.getAttribute("data-aspect-ratio") || "2";

        console.log(
          "üé® [DigitalSignature] Setting up responsive canvas:",
          canvas.id,
          "Max dimensions:",
          maxWidth,
          "x",
          maxHeight,
          "Aspect ratio:",
          aspectRatio
        );

        const signaturePad = new SignaturePad(canvas, {
          backgroundColor: "rgba(255, 255, 255, 0)",
          penColor: "rgb(0, 0, 0)",
          velocityFilterWeight: 0.7,
          minWidth: 0.5,
          maxWidth: 2.5,
          throttle: 16,
          minDistance: 5,
        });

        console.log("‚úÖ [DigitalSignature] SignaturePad created for canvas:", canvas.id);

        const canvasId = canvas.id;
        this.signaturePads.set(canvasId, signaturePad);

        // Get related elements
        const container = canvas.closest(".digital-signature-container");
        const placeholder = container?.querySelector(
          ".signature-placeholder"
        ) as HTMLElement | null;
        const hiddenInput = container?.querySelector(".signature-data") as HTMLInputElement | null;
        const clearBtn = container?.querySelector(".signature-clear") as HTMLElement | null;
        const saveBtn = container?.querySelector(".signature-save") as HTMLElement | null;
        const statusEmpty = container?.querySelector(".signature-empty") as HTMLElement | null;
        const statusSaved = container?.querySelector(".signature-saved") as HTMLElement | null;

        // Handle signature events
        signaturePad.addEventListener("beginStroke", () => {
          this.hideSignatureStatus(statusEmpty, statusSaved);
          if (placeholder) placeholder.style.display = "none";
        });

        signaturePad.addEventListener("endStroke", () => {
          this.updateSignatureData(signaturePad, hiddenInput, statusEmpty, statusSaved);
        });

        // Handle clear button
        clearBtn?.addEventListener("click", () => {
          this.clearSignature(signaturePad, hiddenInput, placeholder, statusEmpty, statusSaved);
        });

        // Handle save button
        saveBtn?.addEventListener("click", () => {
          this.saveSignature(signaturePad, hiddenInput, statusEmpty, statusSaved);
        });

        // Handle canvas resize
        window.addEventListener("resize", () => {
          this.resizeCanvas(canvas, signaturePad);
        });

        // Use ResizeObserver for more responsive resizing
        if (window.ResizeObserver && container) {
          let resizeTimeout: number | null = null;
          const resizeObserver = new ResizeObserver(() => {
            // Debounce resize events to prevent loops
            if (resizeTimeout) {
              clearTimeout(resizeTimeout);
            }
            resizeTimeout = window.setTimeout(() => {
              try {
                this.resizeCanvas(canvas, signaturePad);
              } catch (error) {
                console.warn("ResizeObserver resize error:", error);
              }
            }, 16); // ~60fps
          });
          resizeObserver.observe(container);
        }

        // Initial resize
        this.resizeCanvas(canvas, signaturePad);
      }

      updateSignatureData(
        signaturePad: any,
        hiddenInput: HTMLInputElement | null,
        statusEmpty: HTMLElement | null,
        statusSaved: HTMLElement | null
      ) {
        if (!signaturePad.isEmpty()) {
          const signatureData = signaturePad.toDataURL("image/png");
          if (hiddenInput) {
            hiddenInput.value = signatureData;
          }
          this.showSignatureStatus(statusSaved, statusEmpty);

          // Emit custom event for form validation
          const event = new CustomEvent("signatureUpdated", {
            detail: { data: signatureData, isEmpty: false },
          });
          document.dispatchEvent(event);
        } else {
          if (hiddenInput) {
            hiddenInput.value = "";
          }
          this.showSignatureStatus(statusEmpty, statusSaved);

          // Emit custom event for form validation
          const event = new CustomEvent("signatureUpdated", {
            detail: { data: null, isEmpty: true },
          });
          document.dispatchEvent(event);
        }
      }

      clearSignature(
        signaturePad: any,
        hiddenInput: HTMLInputElement | null,
        placeholder: HTMLElement | null,
        statusEmpty: HTMLElement | null,
        statusSaved: HTMLElement | null
      ) {
        signaturePad.clear();
        if (hiddenInput) {
          hiddenInput.value = "";
        }
        if (placeholder) {
          placeholder.style.display = "flex";
        }
        this.showSignatureStatus(statusEmpty, statusSaved);

        // Emit custom event
        const event = new CustomEvent("signatureCleared");
        document.dispatchEvent(event);
      }

      saveSignature(
        signaturePad: any,
        hiddenInput: HTMLInputElement | null,
        statusEmpty: HTMLElement | null,
        statusSaved: HTMLElement | null
      ) {
        if (!signaturePad.isEmpty()) {
          const signatureData = signaturePad.toDataURL("image/png");
          if (hiddenInput) {
            hiddenInput.value = signatureData;
          }
          this.showSignatureStatus(statusSaved, statusEmpty);

          // Emit custom event
          const event = new CustomEvent("signatureSaved", {
            detail: { data: signatureData },
          });
          document.dispatchEvent(event);

          // Show success notification
          if (window.showSuccess) {
            window.showSuccess(
              "Signature Saved",
              "Digital signature has been captured successfully.",
              3000
            );
          } else {
            console.log("üîî [Signature Saved] Digital signature has been captured successfully.");
          }
        } else {
          // Show error notification
          if (window.showError) {
            window.showError("No Signature", "Please provide a signature before saving.", 0);
          } else {
            console.error("üîî [No Signature] Please provide a signature before saving.");
          }
        }
      }

      resizeCanvas(canvas: HTMLCanvasElement, signaturePad: any) {
        const container = canvas.parentElement;
        if (!container) return;

        const containerWidth = container.clientWidth;
        const ratio = Math.max(window.devicePixelRatio || 1, 1);

        // Get the maximum dimensions and aspect ratio from data attributes
        const maxWidth = parseInt(canvas.getAttribute("data-max-width") || "400");
        const maxHeight = parseInt(canvas.getAttribute("data-max-height") || "200");
        const aspectRatio = parseFloat(canvas.getAttribute("data-aspect-ratio") || "2");

        // Calculate responsive dimensions
        // Use container width but respect max dimensions and aspect ratio
        const availableWidth = Math.min(containerWidth - 4, maxWidth); // -4 for border
        const calculatedHeight = availableWidth / aspectRatio;
        const availableHeight = Math.min(calculatedHeight, maxHeight);

        // Final dimensions
        const displayWidth = availableWidth;
        const displayHeight = availableHeight;

        console.log("üìê [DigitalSignature] Responsive canvas resize:", {
          containerWidth,
          maxWidth,
          maxHeight,
          aspectRatio,
          availableWidth,
          availableHeight,
          displayWidth,
          displayHeight,
          ratio,
        });

        // Set canvas internal dimensions (for drawing resolution)
        canvas.width = displayWidth * ratio;
        canvas.height = displayHeight * ratio;

        // Set canvas display dimensions (for CSS)
        canvas.style.width = displayWidth + "px";
        canvas.style.height = displayHeight + "px";

        const context = canvas.getContext("2d");
        if (context) {
          context.scale(ratio, ratio);
        }

        // Clear and redraw if there was content
        if (signaturePad && !signaturePad.isEmpty()) {
          const data = signaturePad.toDataURL();
          signaturePad.clear();
          signaturePad.fromDataURL(data);
        }
      }

      showSignatureStatus(show: HTMLElement | null, hide: HTMLElement | null) {
        if (show) show.classList.remove("hidden");
        if (hide) hide.classList.add("hidden");
      }

      hideSignatureStatus(statusEmpty: HTMLElement | null, statusSaved: HTMLElement | null) {
        if (statusEmpty) statusEmpty.classList.add("hidden");
        if (statusSaved) statusSaved.classList.add("hidden");
      }

      // Public methods for external access
      getSignatureData(canvasId: string) {
        const signaturePad = this.signaturePads.get(canvasId);
        return signaturePad && !signaturePad.isEmpty() ? signaturePad.toDataURL("image/png") : null;
      }

      isSignatureEmpty(canvasId: string) {
        const signaturePad = this.signaturePads.get(canvasId);
        return !signaturePad || signaturePad.isEmpty();
      }

      clearSignatureById(canvasId: string) {
        const signaturePad = this.signaturePads.get(canvasId);
        if (signaturePad) {
          signaturePad.clear();
        }
      }

      getAllSignatures() {
        const signatures: { [key: string]: string | null } = {};
        this.signaturePads.forEach((pad, canvasId) => {
          signatures[canvasId] = pad.isEmpty() ? null : pad.toDataURL("image/png");
        });
        return signatures;
      }
    }

    // Initialize when DOM is ready
    document.addEventListener("DOMContentLoaded", async () => {
      if (!window.digitalSignatureManager) {
        window.digitalSignatureManager = new DigitalSignatureManager();
        // Wait for initialization to complete
        await window.digitalSignatureManager.initializeSignatures();
      }
    });

    // Make manager globally accessible
    declare global {
      interface Window {
        digitalSignatureManager: DigitalSignatureManager;
      }
    }
  </script>

  <style>
    .signature-canvas {
      touch-action: none;
      display: block;
      border-radius: 0.5rem;
    }

    .signature-placeholder {
      transition: opacity 0.2s ease;
    }

    .digital-signature-container:hover .signature-placeholder {
      opacity: 0.7;
    }

    /* Responsive signature container */
    .signature-container {
      width: 100%;
      max-width: 100%;
      position: relative;
    }

    /* Responsive canvas sizing */
    .signature-canvas {
      width: 100% !important;
      height: auto !important;
      min-height: 150px;
      max-height: 400px;
    }

    /* Maintain aspect ratio on larger screens */
    @media (min-width: 640px) {
      .signature-canvas {
        min-height: 200px;
        max-height: 500px;
      }
    }

    /* Mobile optimizations */
    @media (max-width: 640px) {
      .signature-canvas {
        min-height: 120px;
        max-height: 250px;
      }
    }

    /* Very small screens */
    @media (max-width: 480px) {
      .signature-canvas {
        min-height: 100px;
        max-height: 200px;
      }
    }
  </style>
</div>
