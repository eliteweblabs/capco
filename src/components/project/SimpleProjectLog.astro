---
import BoxIcon from "../common/BoxIcon.astro";

export interface Props {
  projectId: string;
  globalInputClasses?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
}

const { projectId, globalInputClasses, globalSecondaryTextClasses, globalPrimaryTextClasses } =
  Astro.props;
---

<div class="rounded-lg border bg-gray-100 shadow-sm dark:border-gray-700 dark:bg-gray-800">
  <!-- Header -->
  <div class="border-b border-gray-200 p-6 dark:border-gray-700">
    <div class="flex items-center justify-between">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
        <BoxIcon name="pulse" class="mr-2 inline text-blue-600 dark:text-blue-400" />
        Project Activity
      </h2>
      <button
        id="refresh-log"
        class="rounded-full border border-gray-300 bg-gray-100 px-3 py-1 text-sm text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
      >
        <BoxIcon name="refresh" class="text-sm" />
      </button>
    </div>
  </div>

  <!-- Loading State -->
  <div id="log-loading" class="flex items-center justify-center py-8">
    <div class="flex items-center space-x-3 text-gray-500 dark:text-gray-400">
      <div class="h-5 w-5 animate-spin rounded-full border-2 border-gray-300 border-t-blue-600">
      </div>
      <span>Loading activity...</span>
    </div>
  </div>

  <!-- Error State -->
  <div
    id="log-error"
    class="hidden rounded-full bg-red-50 p-4 text-red-800 dark:bg-red-900/20 dark:text-red-400"
  >
    <div class="flex items-center space-x-2">
      <BoxIcon name="error-circle" class="text-lg" />
      <span
        >Failed to load activity. <button id="retry-log" class="underline hover:no-underline"
          >Try again</button
        ></span
      >
    </div>
  </div>

  <!-- Empty State -->
  <div id="log-empty" class="hidden py-8 text-center">
    <BoxIcon name="info-circle" class="mx-auto mb-3 text-4xl text-gray-400 dark:text-gray-600" />
    <h4 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">No Activity Yet</h4>
    <p class="text-gray-500 dark:text-gray-400">
      Project activity will appear here as changes are made.
    </p>
  </div>

  <!-- Log Content -->
  <div id="log-content" class="hidden">
    <div class="p-6">
      <!-- Activity Timeline -->
      <div id="activity-timeline" class="space-y-4">
        <!-- Log entries will be populated here -->
      </div>
    </div>
  </div>
</div>

<script type="module" define:vars={{ projectId }} is:inline>
  class SimpleLogViewer {
    constructor(projectId) {
      this.projectId = projectId;
      this.loadingEl = document.getElementById("log-loading");
      this.errorEl = document.getElementById("log-error");
      this.emptyEl = document.getElementById("log-empty");
      this.contentEl = document.getElementById("log-content");
      this.timelineEl = document.getElementById("activity-timeline");

      this.attachEventListeners();
      this.loadLog();
    }

    attachEventListeners() {
      document.getElementById("refresh-log")?.addEventListener("click", () => {
        this.loadLog();
      });

      document.getElementById("retry-log")?.addEventListener("click", () => {
        this.loadLog();
      });
    }

    async loadLog() {
      try {
        this.showLoading();

        const response = await fetch(
          `/api/get-simple-project-log?projectId=${parseInt(this.projectId)}`
        );
        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || "Failed to load log");
        }

        this.renderLog(data.log || []);
      } catch (error) {
        console.error("Error loading log:", error);
        window.showModal("error", "Log Error", "Failed to load project log");
      }
    }

    renderLog(logEntries) {
      if (logEntries.length === 0) {
        this.showEmpty();
        return;
      }

      this.timelineEl.innerHTML = "";

      // Sort by timestamp (newest first)
      const sortedEntries = logEntries.sort(
        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
      );

      sortedEntries.forEach((entry) => {
        const logItem = this.createLogItem(entry);
        this.timelineEl.appendChild(logItem);
      });

      this.showContent();
    }

    createLogItem(entry) {
      const item = document.createElement("div");
      item.className =
        "flex items-start space-x-3 rounded-lg border border-gray-200 p-4 dark:border-gray-700";

      const icon = this.getActionIcon(entry.action);
      const color = this.getActionColor(entry.action);
      const actionLabel = this.formatActionType(entry.action);
      const timestamp = this.formatTimestamp(entry.timestamp);

      item.innerHTML = `
        <div class="flex-shrink-0">
          <div class="flex h-8 w-8 items-center justify-center rounded-full ${color}">
            <i class='bx ${icon} text-sm'></i>
          </div>
        </div>
        <div class="min-w-0 flex-1">
          <div class="flex items-center justify-between">
            <p class="text-sm font-medium text-gray-900 dark:text-white">
              ${actionLabel}
            </p>
            <p class="text-xs text-gray-500 dark:text-gray-400">${timestamp}</p>
          </div>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-300 truncate" title="${entry.message || entry.details}">${entry.message || entry.details}</p>
          <div class="mt-2 flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
            <span>
              <i class='bx bx-user mr-1'></i>
              ${this.formatUser(entry.user)}
            </span>
          </div>
          ${this.renderValueChanges(entry)}
        </div>
      `;

      return item;
    }

    getActionIcon(action) {
      const iconMap = {
        projectCreated: "bx-plus-circle",
        projectUpdated: "bx-edit",
        statusChange: "bx-transfer",
        assignmentChanged: "bx-user-check",
        metadataUpdated: "bx-edit-alt",
        configurationUpdated: "bx-cog",
        fileUploaded: "bx-upload",
        commentAdded: "bx-message",
        invoiceGenerated: "bx-receipt",
        paymentReceived: "bx-dollar-circle",
      };
      return iconMap[action] || "bx-info-circle";
    }

    getActionColor(action) {
      const colorMap = {
        projectCreated: "bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400",
        projectUpdated: "bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400",
        statusChange: "bg-purple-100 text-purple-600 dark:bg-purple-900/20 dark:text-purple-400",
        assignmentChanged: "bg-cyan-100 text-cyan-600 dark:bg-cyan-900/20 dark:text-cyan-400",
        metadataUpdated: "bg-blue-50 text-blue-500 dark:bg-blue-900/10 dark:text-blue-300",
        configurationUpdated:
          "bg-indigo-50 text-indigo-500 dark:bg-indigo-900/10 dark:text-indigo-300",
        fileUploaded: "bg-yellow-100 text-yellow-600 dark:bg-yellow-900/20 dark:text-yellow-400",
        commentAdded: "bg-indigo-100 text-indigo-600 dark:bg-indigo-900/20 dark:text-indigo-400",
        invoiceGenerated:
          "bg-orange-100 text-orange-600 dark:bg-orange-900/20 dark:text-orange-400",
        paymentReceived:
          "bg-emerald-100 text-emerald-600 dark:bg-emerald-900/20 dark:text-emerald-400",
      };
      return colorMap[action] || "bg-gray-100 text-gray-600 dark:bg-gray-900/20 dark:text-gray-400";
    }

    renderValueChanges(entry) {
      if (entry.oldValue !== undefined && entry.newValue !== undefined) {
        return `
          <div class="mt-2 rounded bg-gray-100 p-2 text-xs dark:bg-gray-600">
            <div class="grid grid-cols-2 gap-2">
              <div>
                <span class="font-medium text-red-600 dark:text-red-400">Before:</span>
                <div class="mt-1 text-gray-600 dark:text-gray-400">${this.formatValue(entry.oldValue)}</div>
              </div>
              <div>
                <span class="font-medium text-green-600 dark:text-green-400">After:</span>
                <div class="mt-1 text-gray-600 dark:text-gray-400">${this.formatValue(entry.newValue)}</div>
              </div>
            </div>
          </div>
        `;
      }
      return "";
    }

    formatValue(value) {
      if (value === null || value === undefined) return "N/A";
      if (typeof value === "object") return JSON.stringify(value, null, 2);
      return String(value);
    }

    formatUser(user) {
      if (typeof user === "string") return user;
      if (typeof user === "object" && user !== null) {
        // Handle user object with name or companyName
        if (user.name) return user.name;
        if (user.companyName) return user.companyName;
        if (user.email) return user.email;
        // Fallback to string representation
        return JSON.stringify(user);
      }
      return String(user);
    }

    formatActionType(action) {
      if (!action) return "Unknown Action";

      // Use the global camelToProper function for consistent formatting
      if (window.camelToProper) {
        return window.camelToProper(action);
      }

      // Fallback for older browsers or if function not available
      return action.replace(/_/g, " ").replace(/\b\w/g, (l) => l.toUpperCase());
    }

    formatTimestamp(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));

      if (diffInMinutes < 1) return "Just now";
      if (diffInMinutes < 60) return `${diffInMinutes}m ago`;

      const diffInHours = Math.floor(diffInMinutes / 60);
      if (diffInHours < 24) return `${diffInHours}h ago`;

      const diffInDays = Math.floor(diffInHours / 24);
      if (diffInDays < 7) return `${diffInDays}d ago`;

      return date.toLocaleDateString();
    }

    formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleString();
    }

    showLoading() {
      this.loadingEl?.classList.remove("hidden");
      this.errorEl?.classList.add("hidden");
      this.emptyEl?.classList.add("hidden");
      this.contentEl?.classList.add("hidden");
    }

    showEmpty() {
      this.loadingEl?.classList.add("hidden");
      this.errorEl?.classList.add("hidden");
      this.emptyEl?.classList.remove("hidden");
      this.contentEl?.classList.add("hidden");
    }

    showContent() {
      this.loadingEl?.classList.add("hidden");
      this.errorEl?.classList.add("hidden");
      this.emptyEl?.classList.add("hidden");
      this.contentEl?.classList.remove("hidden");
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new SimpleLogViewer(projectId);
  });
</script>
