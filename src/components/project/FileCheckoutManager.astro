---
// File Checkout Manager Component
// Allows staff/admin to check out files and assign them to people

interface Props {
  fileId: number;
  currentUser: any;
  currentRole: string;
}

const { fileId, currentUser, currentRole } = Astro.props;

// Only show for Admin/Staff
if (currentRole !== "Admin" && currentRole !== "Staff") {
  return null;
}
---

<div id="file-checkout-manager" class="mt-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800">
  <h3 class="mb-3 text-lg font-semibold text-gray-900 dark:text-white">File Management</h3>

  <!-- Checkout Status -->
  <div id="checkout-status" class="mb-4">
    <div class="flex items-center space-x-2">
      <div id="status-indicator" class="h-3 w-3 rounded-full bg-gray-400"></div>
      <span id="status-text" class="text-sm text-gray-600 dark:text-gray-300">
        Loading status...
      </span>
    </div>
  </div>

  <!-- Checkout Controls -->
  <div id="checkout-controls" class="space-y-3">
    <!-- Checkout/Checkin Button -->
    <div class="flex space-x-2">
      <button
        id="checkout-btn"
        class="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50"
        disabled
      >
        <span id="checkout-text">Check Out File</span>
      </button>

      <button
        id="checkin-btn"
        class="hidden rounded-lg bg-green-600 px-4 py-2 text-white hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-50"
        disabled
      >
        Check In File
      </button>
    </div>

    <!-- Assignment Controls -->
    <div class="border-t pt-3">
      <label class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
        Assign to:
      </label>
      <div class="flex space-x-2">
        <select
          id="assign-to-select"
          class="flex-1 rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
        >
          <option value="">Select user...</option>
        </select>
        <button
          id="assign-btn"
          class="rounded-lg bg-purple-600 px-4 py-2 text-white hover:bg-purple-700 disabled:cursor-not-allowed disabled:opacity-50"
          disabled
        >
          Assign
        </button>
      </div>
    </div>

    <!-- Notes -->
    <div>
      <label class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300">
        Notes:
      </label>
      <textarea
        id="checkout-notes"
        class="w-full rounded-lg border border-gray-300 px-3 py-2 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
        rows="2"
        placeholder="Add notes about this checkout/assignment..."></textarea>
    </div>
  </div>

  <!-- Checkout History -->
  <div id="checkout-history" class="mt-4 border-t pt-3">
    <h4 class="mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">Recent Activity</h4>
    <div id="history-list" class="space-y-2 text-sm text-gray-600 dark:text-gray-400">
      Loading history...
    </div>
  </div>
</div>

<script define:vars={{ fileId, currentUser, currentRole }} type="module">
  // File Checkout Manager JavaScript
  let currentFileId = fileId;
  let currentUserId = currentUser?.id;
  let checkoutStatus = null;
  let staffUsers = [];

  // Initialize the component
  async function initializeFileCheckout() {
    // console.log("ðŸ”§ [FILE-CHECKOUT] Initializing file checkout manager");

    // Load checkout status
    await loadCheckoutStatus();

    // Load staff users for assignment
    await loadStaffUsers();

    // Setup event listeners
    setupEventListeners();
  }

  // Load current checkout status
  async function loadCheckoutStatus() {
    try {
      const response = await fetch(`/api/file-checkout?file_id=${currentFileId}`);
      const data = await response.json();

      if (data.success) {
        checkoutStatus = data;
        updateStatusDisplay();
        updateButtonStates();
      } else {
        console.error("Failed to load checkout status:", data.error);
        showError("Failed to load file status");
      }
    } catch (error) {
      console.error("Error loading checkout status:", error);
      showError("Error loading file status");
    }
  }

  // Load staff users for assignment dropdown
  async function loadStaffUsers() {
    try {
      const response = await fetch("/api/get-user-emails-by-role", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ roles: ["Staff"] }),
      });
      const data = await response.json();

      if (data.success) {
        staffUsers = data.staffUsers || [];
        populateAssignmentDropdown();
      }
    } catch (error) {
      console.error("Error loading staff users:", error);
    }
  }

  // Populate assignment dropdown
  function populateAssignmentDropdown() {
    const select = document.getElementById("assign-to-select");
    if (!select) return;

    // Clear existing options except first
    select.innerHTML = '<option value="">Select user...</option>';

    staffUsers.forEach((user) => {
      const option = document.createElement("option");
      option.value = user.id;
      option.textContent = `${user.company_name || user.email} (${user.role})`;
      select.appendChild(option);
    });
  }

  // Update status display
  function updateStatusDisplay() {
    const indicator = document.getElementById("status-indicator");
    const text = document.getElementById("status-text");

    if (!indicator || !text) return;

    if (checkoutStatus.checked_out) {
      indicator.className = "w-3 h-3 rounded-full bg-red-500";
      text.textContent = `Checked out by ${checkoutStatus.checked_out_by_name} at ${new Date(checkoutStatus.checked_out_at).toLocaleString()}`;
    } else if (checkoutStatus.assigned_to) {
      indicator.className = "w-3 h-3 rounded-full bg-yellow-500";
      text.textContent = `Assigned to ${checkoutStatus.assigned_to_name}`;
    } else {
      indicator.className = "w-3 h-3 rounded-full bg-green-500";
      text.textContent = "Available";
    }
  }

  // Update button states
  function updateButtonStates() {
    const checkoutBtn = document.getElementById("checkout-btn");
    const checkinBtn = document.getElementById("checkin-btn");
    const assignBtn = document.getElementById("assign-btn");

    if (!checkoutBtn || !checkinBtn || !assignBtn) return;

    if (checkoutStatus.checked_out) {
      // File is checked out
      checkoutBtn.disabled = true;
      checkoutBtn.textContent = "File Checked Out";

      if (checkoutStatus.checked_out_by === currentUserId) {
        // Current user has it checked out
        checkinBtn.classList.remove("hidden");
        checkinBtn.disabled = false;
      } else {
        checkinBtn.classList.add("hidden");
        checkinBtn.disabled = true;
      }

      assignBtn.disabled = true;
    } else {
      // File is available
      checkoutBtn.disabled = false;
      checkoutBtn.textContent = "Check Out File";
      checkinBtn.classList.add("hidden");
      assignBtn.disabled = false;
    }
  }

  // Setup event listeners
  function setupEventListeners() {
    const checkoutBtn = document.getElementById("checkout-btn");
    const checkinBtn = document.getElementById("checkin-btn");
    const assignBtn = document.getElementById("assign-btn");

    checkoutBtn?.addEventListener("click", handleCheckout);
    checkinBtn?.addEventListener("click", handleCheckin);
    assignBtn?.addEventListener("click", handleAssign);
  }

  // Handle checkout
  async function handleCheckout() {
    const notes = document.getElementById("checkout-notes")?.value || "";

    try {
      const response = await fetch("/api/file-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "checkout",
          file_id: currentFileId,
          user_id: currentUserId,
          notes: notes,
        }),
      });

      const data = await response.json();

      if (data.success) {
        showSuccess("File checked out successfully");
        await loadCheckoutStatus();
        document.getElementById("checkout-notes").value = "";
      } else {
        showError(data.error || "Failed to check out file");
      }
    } catch (error) {
      console.error("Checkout error:", error);
      showError("Error checking out file");
    }
  }

  // Handle checkin
  async function handleCheckin() {
    const notes = document.getElementById("checkout-notes")?.value || "";

    try {
      const response = await fetch("/api/file-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "checkin",
          file_id: currentFileId,
          user_id: currentUserId,
          notes: notes,
        }),
      });

      const data = await response.json();

      if (data.success) {
        showSuccess("File checked in successfully");
        await loadCheckoutStatus();
        document.getElementById("checkout-notes").value = "";
      } else {
        showError(data.error || "Failed to check in file");
      }
    } catch (error) {
      console.error("Checkin error:", error);
      showError("Error checking in file");
    }
  }

  // Handle assignment
  async function handleAssign() {
    const assignedTo = document.getElementById("assign-to-select")?.value;
    const notes = document.getElementById("checkout-notes")?.value || "";

    if (!assignedTo) {
      showError("Please select a user to assign to");
      return;
    }

    try {
      const response = await fetch("/api/file-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "assign",
          file_id: currentFileId,
          assigned_to: assignedTo,
          user_id: currentUserId,
          notes: notes,
        }),
      });

      const data = await response.json();

      if (data.success) {
        showSuccess("File assigned successfully");
        await loadCheckoutStatus();
        document.getElementById("checkout-notes").value = "";
        document.getElementById("assign-to-select").value = "";
      } else {
        showError(data.error || "Failed to assign file");
      }
    } catch (error) {
      console.error("Assignment error:", error);
      showError("Error assigning file");
    }
  }

  // Show success message
  function showSuccess(message) {
    if (window.showModal) {
      window.showModal("Success", message, "success", 3000);
    } else {
      alert(message);
    }
  }

  // Show error message
  function showError(message) {
    if (window.showModal) {
      window.showModal("Error", message, "error", 5000);
    } else {
      alert(message);
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", initializeFileCheckout);
</script>
