---
import Alert from "../partials/Alert.astro";
import ProposalManager from "./ProposalManager.astro";

interface Props {
  project: any;
  projectStatus?: number;
  currentUser?: any;
  globalInputClasses?: string;
  secondaryTextClasses?: string;
  primaryTextClasses?: string;
  statusData?: any;
  existingInvoice?: any;
  invoiceId?: any;
}

const {
  project,
  projectStatus = 0,
  currentUser,
  globalInputClasses,
  secondaryTextClasses,
  primaryTextClasses,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const projectId = project?.id;
const clientName = project?.authorProfile?.companyName;

// Upsert invoice from API (single source of truth) during SSR
let existingInvoice: any = null;
let invoiceId: any = null;

try {
  const baseUrl = Astro.url.origin;
  const response = await fetch(`${baseUrl}/api/proposal/upsert`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      projectId: projectId,
    }),
  });

  const data = await response.json();

  if (data.success && data.invoice) {
    existingInvoice = data.invoice;
    invoiceId = data.invoice.id;
    console.log("✅ [ProposalManager SSR] Upserted invoice via API:", invoiceId);
  } else {
    console.error("❌ [ProposalManager SSR] Failed to upsert invoice:", data.error);
  }
} catch (error) {
  console.error("❌ [ProposalManager SSR] Error upserting invoice via API:", error);
}

function getStatusAlert() {
  // Client status messages
  if (currentRole === "Client") {
    if (Number(projectStatus) < 20) {
      return `Submit your project documents first <a href='/project/${projectId}?status=documents'>here</a>.`;
    }
    if (Number(projectStatus) >= 20 && Number(projectStatus) < 30) {
      return "Proposal is being generated. You will be notified when it is ready.";
    }
    if (Number(projectStatus) >= 30 && Number(projectStatus) < 50 && invoiceId) {
      return "Please review your proposal & submit a 50% deposit to approve this proposal and begin work.";
    }
    if (Number(projectStatus) >= 40 && Number(projectStatus) < 50 && invoiceId) {
      return "Please sign contact for work to begin.";
    }
    if (Number(projectStatus) >= 50 && Number(projectStatus) < 60) {
      return "Please pay your deposit.";
    }
  }

  // Admin status messages
  if (currentRole === "Admin" || currentRole === "Staff") {
    if (Number(projectStatus) < 20) {
      return `<b>${clientName}</b> has not submit any documents. Press the "Finished" button to unlock proposal or wait for the client to submit their documents.`;
    }
    if (Number(projectStatus) >= 20 && Number(projectStatus) < 30) {
      return `Please build proposal for <b>${clientName}</b> and review the contract.`;
    }
    if (Number(projectStatus) >= 30 && Number(projectStatus) < 40) {
      return `Proposal has been sent but <b>${clientName}</b> has not viewed it, you can make changes to it and resend.`;
    }
    if (Number(projectStatus) >= 40 && Number(projectStatus) < 50) {
      return `<b>${clientName}</b> has viewed the proposal, you can make changes to it and resend.`;
    }
    if (Number(projectStatus) >= 50 && Number(projectStatus) < 60) {
      return "Contract has been signed off, no changes can be made.";
    }
  }

  return null;
}
const statusAlert = getStatusAlert();
---

<div
  id="content-proposal"
  class="tab-content p-4 color-background relative min-h-[calc(100dvh-24rem)]"
>
  {statusAlert && <Alert type="info" title={statusAlert} />}

  {
    currentRole === "Client" ? (
      <ProposalManager
        projectId={projectId}
        project={project}
        projectStatus={projectStatus}
        currentUser={currentUser}
        globalInputClasses={globalInputClasses || ""}
        secondaryTextClasses={secondaryTextClasses || ""}
        primaryTextClasses={primaryTextClasses || ""}
        statusData={statusData}
        existingInvoice={existingInvoice}
        invoiceId={invoiceId}
      />
    ) : (
      <ProposalManager
        projectId={projectId}
        project={project}
        projectStatus={projectStatus}
        currentUser={currentUser}
        globalInputClasses={globalInputClasses || ""}
        secondaryTextClasses={secondaryTextClasses || ""}
        primaryTextClasses={primaryTextClasses || ""}
        statusData={statusData}
        existingInvoice={existingInvoice}
        invoiceId={invoiceId}
      />
    )
  }
</div>
