---
import Alert from "../partials/Alert.astro";
import ProposalManager from "./ProposalManager.astro";

interface Props {
  project: any;
  projectStatus?: number;
  currentUser?: any;
  globalInputClasses?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  statusData?: any;
  existingInvoice?: any;
  invoiceId?: any;
}

const {
  project,
  projectStatus = 0,
  currentUser,
  globalInputClasses,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const projectId = project?.id;
const clientName = project?.authorProfile?.companyName;

// Fetch invoice from API (single source of truth) during SSR
let existingInvoice: any = null;
let invoiceId: any = null;

try {
  const baseUrl = Astro.url.origin;
  const response = await fetch(`${baseUrl}/api/get-project-invoice?projectId=${projectId}`);
  const data = await response.json();

  if (data.success && data.invoice) {
    existingInvoice = data.invoice;
    invoiceId = data.invoice.id;
    console.log("✅ [ProposalManager SSR] Found existing invoice via API:", invoiceId);
  } else {
    console.log("ℹ️ [ProposalManager SSR] No existing invoice found");
  }
} catch (error) {
  console.error("❌ [ProposalManager SSR] Error fetching invoice via API:", error);
}

function getStatusAlert() {
  // Client status messages
  if (currentRole === "Client") {
    if (Number(projectStatus) < 20) {
      return "Submit your project documents first.";
    }
    if (Number(projectStatus) >= 20 && Number(projectStatus) < 30) {
      return "Proposal is being generated.";
    }
    if (Number(projectStatus) >= 30 && Number(projectStatus) < 40 && invoiceId && existingInvoice) {
      return "Please review your proposal.";
    }
    if (Number(projectStatus) >= 40 && Number(projectStatus) < 50 && invoiceId && existingInvoice) {
      return "Please sign off on your proposal.";
    }
    if (Number(projectStatus) >= 50 && Number(projectStatus) < 60) {
      return "Please pay your deposit.";
    }
  }

  // Admin status messages
  if (currentRole === "Admin" || currentRole === "Staff") {
    if (Number(projectStatus) < 20) {
      return `<b>${clientName}</b> has not submit any documents. Press the "Finished" button to unlock proposal or wait for the client to submit their documents.`;
    }
    if (Number(projectStatus) >= 20 && Number(projectStatus) < 30) {
      return `Please build proposal for <b>${clientName}</b>.`;
    }
    if (Number(projectStatus) >= 30 && Number(projectStatus) < 40) {
      return `Proposal has been sent but <b>${clientName}</b> has not viewed it, you can make changes to it and resend.`;
    }
    if (Number(projectStatus) >= 40 && Number(projectStatus) < 50) {
      return `<b>${clientName}</b> has viewed the proposal, you can make changes to it and resend.`;
    }
    if (Number(projectStatus) >= 50 && Number(projectStatus) < 60) {
      return "Contract has been signed off, no changes can be made.";
    }
  }

  return null;
}
const statusAlert = getStatusAlert();
---

<div id="content-proposal" class="tab-content p-4 bg-white dark:bg-gray-800">
  {statusAlert && <Alert type="info" title={statusAlert} />}

  {
    currentRole === "Client" ? (
      <ProposalManager
        projectId={projectId}
        project={project}
        projectStatus={projectStatus}
        currentUser={currentUser}
        globalInputClasses={globalInputClasses || ""}
        globalSecondaryTextClasses={globalSecondaryTextClasses || ""}
        globalPrimaryTextClasses={globalPrimaryTextClasses || ""}
        statusData={statusData}
        existingInvoice={existingInvoice}
        invoiceId={invoiceId}
      />
    ) : (
      <ProposalManager
        projectId={projectId}
        project={project}
        projectStatus={projectStatus}
        currentUser={currentUser}
        globalInputClasses={globalInputClasses || ""}
        globalSecondaryTextClasses={globalSecondaryTextClasses || ""}
        globalPrimaryTextClasses={globalPrimaryTextClasses || ""}
        statusData={statusData}
        existingInvoice={existingInvoice}
        invoiceId={invoiceId}
      />
    )
  }
</div>
