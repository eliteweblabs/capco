---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  projectId: string;
  fileType?: string;
}

const { projectId, fileType = "media" } = Astro.props;
---

<div class="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
  <!-- Upload Header -->
  <div class="mb-6">
    <h3 class="mb-2 flex items-center text-lg font-semibold text-gray-900 dark:text-white">
      <BoxIcon name="cloud-upload" class="mr-2" />
      Document Upload
    </h3>
    <p class="text-sm text-gray-600 dark:text-gray-400">
      Upload PDFs and any other project documents you have
    </p>
  </div>

  <!-- Upload Area -->
  <div
    id="upload-dropzone"
    class="cursor-pointer rounded-lg border-2 border-dashed border-gray-300 p-8 text-center transition-colors hover:border-blue-400 dark:border-gray-600 dark:hover:border-blue-500"
  >
    <div class="space-y-4">
      <BoxIcon name="cloud-upload" class="mx-auto h-12 w-12 text-gray-400" />
      <div>
        <p class="font-medium text-gray-600 dark:text-gray-300">
          Drop files here or click to browse
        </p>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
          Supports PDF, images, CAD files, and documents (max 10MB each)
        </p>
      </div>
      <button
        id="browse-files-btn"
        class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-blue-700"
      >
        <BoxIcon name="folder-open" class="mr-2 h-4 w-4" />
        Browse Files
      </button>
    </div>
  </div>

  <!-- Hidden file input -->
  <input
    type="file"
    id="file-input"
    multiple
    accept=".pdf,.png,.jpg,.jpeg,.gif,.webp,.dwg,.doc,.docx,.xls,.xlsx,.txt"
    class="hidden"
  />

  <!-- Upload Progress -->
  <div id="upload-progress" class="mt-4 hidden">
    <div class="h-2 rounded-full bg-gray-200 dark:bg-gray-700">
      <div
        id="progress-bar"
        class="h-2 rounded-full bg-blue-600 transition-all duration-300"
        style="width: 0%"
      >
      </div>
    </div>
    <p id="upload-status" class="mt-2 text-sm text-gray-600 dark:text-gray-400">Uploading...</p>
  </div>

  <!-- File List -->
  <div id="uploaded-files" class="mt-6 hidden">
    <div class="mb-3 flex items-center justify-between">
      <h4 class="text-md flex items-center font-medium text-gray-900 dark:text-white">
        <BoxIcon name="file" class="mr-2" />
        Uploaded Files
      </h4>
      <div class="flex items-center space-x-3">
        <button
          id="download-all-btn"
          class="flex items-center text-sm font-medium text-green-600 hover:text-green-800"
        >
          <BoxIcon name="download" class="mr-1 h-4 w-4" />
          Download All
        </button>
        <button
          id="refresh-files-btn"
          class="flex items-center text-sm font-medium text-blue-600 hover:text-blue-800"
        >
          <BoxIcon name="refresh" class="mr-1 h-4 w-4" />
          Refresh
        </button>
      </div>
    </div>
    <div id="file-list" class="space-y-2"></div>
  </div>

  <!-- OCR Results -->
  <div id="ocr-results" class="mt-6 hidden">
    <h4 class="text-md mb-3 flex items-center font-medium text-gray-900 dark:text-white">
      <BoxIcon name="text" class="mr-2" />
      Extracted Text
    </h4>
    <div id="extracted-text" class="rounded-lg bg-gray-50 p-4 text-sm dark:bg-gray-700">
      <p class="text-gray-600 dark:text-gray-400">Text extraction results will appear here...</p>
    </div>
  </div>
</div>

<script define:vars={{ projectId, fileType }}>
  class PDFUpload {
    constructor() {
      this.projectId = projectId;
      this.fileType = fileType;
      this.uploadedFiles = [];
      this.init();
    }

    init() {
      this.setupElements();
      this.setupEventListeners();
      this.setupAccordionListeners();
      this.loadExistingFiles();
    }

    setupElements() {
      this.dropzone = document.getElementById("upload-dropzone");
      this.fileInput = document.getElementById("file-input");
      this.browseBtn = document.getElementById("browse-files-btn");
      this.progressContainer = document.getElementById("upload-progress");
      this.progressBar = document.getElementById("progress-bar");
      this.uploadStatus = document.getElementById("upload-status");
      this.filesContainer = document.getElementById("uploaded-files");
      this.fileList = document.getElementById("file-list");
      this.refreshBtn = document.getElementById("refresh-files-btn");
      this.downloadAllBtn = document.getElementById("download-all-btn");
      this.ocrResults = document.getElementById("ocr-results");
      this.extractedText = document.getElementById("extracted-text");
    }

    setupEventListeners() {
      // File input change
      this.fileInput.addEventListener("change", (e) => {
        this.handleFiles(e.target.files);
      });

      // Browse button click
      this.browseBtn.addEventListener("click", () => {
        this.fileInput.click();
      });

      // Dropzone events
      this.dropzone.addEventListener("click", () => {
        this.fileInput.click();
      });

      this.dropzone.addEventListener("dragover", (e) => {
        e.preventDefault();
        this.dropzone.classList.add("border-blue-400", "bg-blue-50", "dark:bg-blue-900/20");
      });

      this.dropzone.addEventListener("dragleave", (e) => {
        e.preventDefault();
        this.dropzone.classList.remove("border-blue-400", "bg-blue-50", "dark:bg-blue-900/20");
      });

      this.dropzone.addEventListener("drop", (e) => {
        e.preventDefault();
        this.dropzone.classList.remove("border-blue-400", "bg-blue-50", "dark:bg-blue-900/20");
        this.handleFiles(e.dataTransfer.files);
      });

      // Refresh button click
      this.refreshBtn.addEventListener("click", () => {
        this.refreshFileList();
      });

      // Download all button click
      this.downloadAllBtn.addEventListener("click", () => {
        this.downloadAllFiles();
      });

      // Event delegation for download buttons
      this.fileList.addEventListener("click", (e) => {
        if (e.target.classList.contains("download-btn")) {
          const filePath = e.target.getAttribute("data-file-path");
          const fileName = e.target.getAttribute("data-file-name");
          if (filePath && fileName) {
            this.downloadFile(filePath, fileName);
          }
        }
      });
    }

    setupAccordionListeners() {
      // Event delegation for accordion functionality
      this.fileList.addEventListener("click", (e) => {
        // Handle accordion header clicks
        if (e.target.closest(".accordion-header")) {
          const header = e.target.closest(".accordion-header");
          const fileItem = header.closest(".file-item");
          const content = fileItem.querySelector(".accordion-content");
          const chevron = header.querySelector("svg");

          // Toggle accordion
          if (content.classList.contains("hidden")) {
            content.classList.remove("hidden");
            chevron.style.transform = "rotate(90deg)";
            fileItem.classList.add("accordion-open");
          } else {
            content.classList.add("hidden");
            chevron.style.transform = "rotate(0deg)";
            fileItem.classList.remove("accordion-open");
          }
        }

        // Handle save metadata button clicks
        if (e.target.closest(".save-metadata-btn")) {
          const saveBtn = e.target.closest(".save-metadata-btn");
          const fileItem = saveBtn.closest(".file-item");
          const fileId = saveBtn.getAttribute("data-file-id");
          const titleInput = fileItem.querySelector(".file-title-input");
          const commentsInput = fileItem.querySelector(".file-comments-input");

          this.saveFileMetadata(fileId, titleInput.value, commentsInput.value, fileItem);
        }
      });
    }

    async handleFiles(files) {
      if (!files || files.length === 0) return;

      const fileArray = Array.from(files);
      this.showProgress();

      for (let i = 0; i < fileArray.length; i++) {
        const file = fileArray[i];
        try {
          await this.uploadFile(file, i + 1, fileArray.length);
        } catch (error) {
          console.error(`Error uploading ${file.name}:`, error);
          this.showError(`Failed to upload ${file.name}: ${error.message}`);
        }
      }

      this.hideProgress();
    }

    async uploadFile(file, index, total) {
      const formData = new FormData();
      formData.append("file", file);
      formData.append("projectId", this.projectId);
      formData.append("fileType", this.fileType);

      // Add metadata if available
      const titleInput = document.getElementById("file-title");
      const commentsInput = document.getElementById("file-comments");

      if (titleInput && titleInput.value.trim()) {
        formData.append("fileTitle", titleInput.value.trim());
      }
      if (commentsInput && commentsInput.value.trim()) {
        formData.append("fileComments", commentsInput.value.trim());
      }

      this.updateProgress((index / total) * 100, `Uploading ${file.name}...`);

      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Upload failed");
      }

      const result = await response.json();
      const uploadedFile = result.files[0];

      this.addFileToList(uploadedFile);
      this.uploadedFiles.push(uploadedFile);

      // Refresh the file list to show all files
      this.refreshFileList();

      // Process for OCR if it's a PDF
      if (file.type === "application/pdf") {
        // this.extractTextFromPDF(file, uploadedFile);
      }
    }

    addFileToList(file) {
      this.filesContainer.classList.remove("hidden");

      const fileItem = document.createElement("div");
      fileItem.className =
        "file-item bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 accordion-open";

      // Use file_name from database or fallback to name
      const fileName = file.file_name || file.name;
      const fileTitle = file.title || fileName;
      const fileSize = file.file_size || file.size;
      const fileType = file.file_type || file.type;
      const uploadedAt = file.uploaded_at ? new Date(file.uploaded_at).toLocaleDateString() : "";
      const fileComments = file.comments;

      fileItem.innerHTML = `
        <!-- Accordion Header -->
        <div class="accordion-header flex items-center justify-between p-3 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" data-file-id="${file.id}">
          <div class="flex items-center space-x-3 flex-1 min-w-0">
            <div class="flex-shrink-0 hidden md:block">
              ${this.getFileIcon(fileType)}
            </div>
            <div class="flex-shrink-0 hidden md:block">
              <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20" style="transform: rotate(90deg);">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
              </svg>
            </div>
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900 dark:text-white break-words">
                ${fileTitle}
              </p>
              <p class="text-sm text-gray-500 dark:text-gray-400">
                ${this.formatFileSize(fileSize)} • ${fileType}${uploadedAt ? " • " + uploadedAt : ""}
              </p>
            </div>
          </div>
          <div class="flex flex-col items-center space-y-1 flex-shrink-0 ml-3">
            ${
              file.public_url
                ? `
              <a href="${file.public_url}" target="_blank" class="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors" title="View file">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                </svg>
              </a>
              <button class="download-btn p-2 text-green-600 hover:text-green-800 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-colors" data-file-path="${file.file_path}" data-file-name="${fileName}" title="Download file">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                </svg>
              </button>
            `
                : `
              <button class="p-2 text-gray-400 cursor-not-allowed rounded-lg" disabled title="View not available">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                </svg>
              </button>
              <button class="p-2 text-gray-400 cursor-not-allowed rounded-lg" disabled title="Download not available">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                </svg>
              </button>
            `
            }
            <button class="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors" onclick="this.closest('.file-item').remove()" title="Delete file">
              <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Accordion Content -->
        <div class="accordion-content border-t border-gray-200 dark:border-gray-600">
          <div class="p-4 space-y-4">
            <!-- File Metadata Form -->
            <div class="space-y-3">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Title
                </label>
                <input
                  type="text"
                  class="file-title-input mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                  placeholder="Enter a descriptive title for this file"
                  value="${fileTitle !== fileName ? fileTitle : ""}"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Comments
                </label>
                <textarea
                  class="file-comments-input mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                  rows="3"
                  placeholder="Add any notes or comments about this file"
                >${fileComments || ""}</textarea>
              </div>
              <div class="flex justify-end space-x-2">
                <button class="save-metadata-btn inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors" data-file-id="${file.id}">
                  <svg class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>
      `;

      this.fileList.appendChild(fileItem);
    }

    async saveFileMetadata(fileId, title, comments, fileItem) {
      try {
        const response = await fetch("/api/update-file-metadata", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            fileId: fileId,
            title: title.trim(),
            comments: comments.trim(),
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to save metadata");
        }

        const result = await response.json();

        if (result.success) {
          // Update the display title in the accordion header
          const headerTitle = fileItem.querySelector(".accordion-header p");
          if (headerTitle) {
            headerTitle.textContent = title.trim() || "Untitled";
          }

          // Show success feedback
          const saveBtn = fileItem.querySelector(".save-metadata-btn");
          const originalText = saveBtn.innerHTML;
          saveBtn.innerHTML = `
            <svg class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
            Saved!
          `;
          saveBtn.classList.remove("bg-blue-600", "hover:bg-blue-700");
          saveBtn.classList.add("bg-green-600", "hover:bg-green-700");

          // Reset button after 2 seconds
          setTimeout(() => {
            saveBtn.innerHTML = originalText;
            saveBtn.classList.remove("bg-green-600", "hover:bg-green-700");
            saveBtn.classList.add("bg-blue-600", "hover:bg-blue-700");
          }, 2000);
        }
      } catch (error) {
        console.error("Error saving file metadata:", error);
        this.showError(`Failed to save metadata: ${error.message}`);
      }
    }

    async extractTextFromPDF(file, uploadedFile) {
      try {
        // Simulate OCR processing - in real implementation, this would call an OCR service
        this.ocrResults.classList.remove("hidden");
        this.extractedText.innerHTML = `
          <div class="space-y-2">
            <div class="flex items-center text-sm text-gray-600 dark:text-gray-400">
              <svg class="animate-spin h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Processing ${file.name} for text extraction...
            </div>
          </div>
        `;

        // Simulate processing delay
        setTimeout(() => {
          this.extractedText.innerHTML = `
            <div class="space-y-3">
              <div class="text-sm font-medium text-gray-900 dark:text-white">
                Extracted from: ${file.name}
              </div>
              <div class="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                Sample extracted text would appear here. In a real implementation, this would show:
                <br/>• Project details and specifications
                <br/>• Address and property information  
                <br/>• Relevant fire protection system data
                <br/>• Contact information and dates
              </div>
              <div class="flex gap-2 pt-2">
                <button class="text-xs px-3 py-1 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors">
                  Auto-fill Form
                </button>
                <button class="text-xs px-3 py-1 bg-green-100 text-green-700 rounded-full hover:bg-green-200 transition-colors">
                  Copy Text
                </button>
              </div>
            </div>
          `;
        }, 2000);
      } catch (error) {
        console.error("OCR processing error:", error);
        this.extractedText.innerHTML = `
          <div class="text-sm text-red-600 dark:text-red-400">
            Error processing file for text extraction: ${error.message}
          </div>
        `;
      }
    }

    async loadExistingFiles() {
      await this.refreshFileList();
    }

    async refreshFileList() {
      // Clear existing file list
      this.fileList.innerHTML = "";

      try {
        const response = await fetch("/api/get-project-files", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ projectId: this.projectId }),
        });

        if (response.ok) {
          const result = await response.json();
          if (result.files && result.files.length > 0) {
            result.files.forEach((file) => this.addFileToList(file));
            this.filesContainer.classList.remove("hidden");
          } else {
            this.filesContainer.classList.add("hidden");
          }
        }
      } catch (error) {
        console.error("Error loading existing files:", error);
      }
    }

    async downloadFile(filePath, fileName) {
      try {
        const response = await fetch("/api/download-file", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ filePath, fileName, projectId: this.projectId }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Download failed");
        }

        // Create blob from response and download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
      } catch (error) {
        console.error("Error downloading file:", error);
        this.showError(`Failed to download ${fileName}: ${error.message}`);
      }
    }

    async downloadAllFiles() {
      try {
        const response = await fetch("/api/get-project-files", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ projectId: this.projectId }),
        });

        if (response.ok) {
          const result = await response.json();
          if (result.files && result.files.length > 0) {
            // Download each file with a slight delay to avoid browser blocking
            for (let i = 0; i < result.files.length; i++) {
              const file = result.files[i];
              if (file.file_path) {
                setTimeout(() => {
                  this.downloadFile(file.file_path, file.file_name || file.name || `file-${i + 1}`);
                }, i * 500); // 500ms delay between downloads
              }
            }
          } else {
            this.showError("No files available to download");
          }
        }
      } catch (error) {
        console.error("Error downloading files:", error);
        this.showError("Failed to download files");
      }
    }

    showProgress() {
      this.progressContainer.classList.remove("hidden");
    }

    hideProgress() {
      setTimeout(() => {
        this.progressContainer.classList.add("hidden");
        this.progressBar.style.width = "0%";
      }, 1000);
    }

    updateProgress(percent, status) {
      this.progressBar.style.width = `${percent}%`;
      this.uploadStatus.textContent = status;
    }

    showError(message) {
      // Create a simple error notification
      const errorDiv = document.createElement("div");
      errorDiv.className = "mt-4 p-3 bg-red-50 border border-red-200 rounded-lg";
      errorDiv.innerHTML = `
        <div class="flex">
          <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
          </svg>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Upload Error</h3>
            <p class="text-sm text-red-700 mt-1">${message}</p>
          </div>
        </div>
      `;

      this.dropzone.parentNode.insertBefore(errorDiv, this.dropzone.nextSibling);

      // Remove error after 5 seconds
      setTimeout(() => {
        errorDiv.remove();
      }, 5000);
    }

    formatFileSize(bytes) {
      if (bytes === 0) return "0 Bytes";
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    }

    getFileIcon(fileType) {
      const type = fileType.toLowerCase();

      // PDF files
      if (type.includes("pdf")) {
        return `<svg class="h-6 w-6 text-red-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
      }

      // Image files
      if (
        type.includes("image") ||
        type.includes("png") ||
        type.includes("jpg") ||
        type.includes("jpeg") ||
        type.includes("gif") ||
        type.includes("webp")
      ) {
        return `<svg class="h-6 w-6 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
        </svg>`;
      }

      // CAD files
      if (type.includes("dwg") || type.includes("dxf") || type.includes("cad")) {
        return `<svg class="h-6 w-6 text-green-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
        </svg>`;
      }

      // Document files
      if (
        type.includes("doc") ||
        type.includes("docx") ||
        type.includes("txt") ||
        type.includes("rtf")
      ) {
        return `<svg class="h-6 w-6 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
      }

      // Spreadsheet files
      if (type.includes("xls") || type.includes("xlsx") || type.includes("csv")) {
        return `<svg class="h-6 w-6 text-green-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M8 12h8v2H8zm0 4h8v2H8z"/>
        </svg>`;
      }

      // Archive files
      if (
        type.includes("zip") ||
        type.includes("rar") ||
        type.includes("7z") ||
        type.includes("tar") ||
        type.includes("gz")
      ) {
        return `<svg class="h-6 w-6 text-orange-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z"/>
          <path d="M12 10l-2 2 2 2 2-2-2-2z"/>
        </svg>`;
      }

      // Default file icon
      return `<svg class="h-6 w-6 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
      </svg>`;
    }
  }

  // Initialize the PDF upload component
  document.addEventListener("DOMContentLoaded", () => {
    new PDFUpload();
  });
</script>
