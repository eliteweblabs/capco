---
interface Props {
  currentUser?: any;
  project: any;
  supabaseUrl?: string;
}

const { currentUser, project, supabaseUrl } = Astro.props;
const id = Astro.params.id;

const currentRole = currentUser?.profile?.role;

if (!project || !project.id || currentRole === "Client") {
  return null;
}

const projectId = project.id;
import BoxIcon from "../common/BoxIcon.astro";

// console.log("üîç [TabPunchlist] props:", Astro.props);

---

{projectId && (
  <>
    <button
      type="button"
      data-dropdown-toggle="checklist-dropdown"
      class="relative"
    >
      <span class="_DVAfiyo21kM68EUVzEQ">View Checklist</span>

      <BoxIcon
        name="list-check"
        variant="secondary"
        size="md"
        dataAttributes={{ "data-count": "1" }}
      />
    </button>

    <div
  class="Jq3rRDG6Hsr3eAZ0KJeH aJF41JQLhtfw_MCGt5Th _SmdlCf6eUKB_V9S5IDj ZhzOGpbwY0R4TKKYr5pG xdunzYpzbwcYs_0Tjgcz wBVMFkIGfrKshbvi2gS1 mveJTCIb2WII7J4sY22F _Ybd3WwuTVljUT4vEaM3 d3C8uAdJKNl1jzfE9ynq mfNtySJCsKVaP2xnoGBY jqg6J89cvxmDiFpnV56r"
  id="checklist-dropdown"
      data-popper-placement="bottom left"
    >
      <div class="YRrCJSr_j5nopfm4duUc Q_jg_EPdNf9eDMn1mLI2 sJNGKHxFYdN5Nzml5J2j EpUSgjHdM6oyMXUiK_8_ qUWbS_LTZujDB4XCd11V _9dH7mrOkzM4RTmidHTs RZmKBZs1E1eXw8vkE6jY b9aD6g2qw84oyZNsMO8j ijrOHNoSVGATsWYKl4Id ezMFUVl744lvw6ht0lFe __9sbu0yrzdhGIkLWNXl Mmx5lX7HVdrWCgh3EpTP jqg6J89cvxmDiFpnV56r OyABRrnTV_kvHV7dJ0uE">
        <h3>Project Checklist</h3>
      </div>

      <div class="xCPtuxM4_gihvpPwv9bX sbr_wTGs60B3xicVVLBT iHPddplqYvrN6qWgvntn _wYiJGbRZyFZeCc8y7Sf _1jTZ8KXRZul60S6czNi max-h-[80dvh] overflow-y-scroll">
        <div id="content-punchlist">
          <div>
            <div id="punchlist-container" data-project-id={projectId}>
              <div class="mb-6 flex items-center justify-between overflow-y-scroll">
                <!-- Punchlist Items List -->
                <div id="punchlist-items-list" class="space-y-4">
                  <!-- Punchlist items will be dynamically loaded here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </>
)}



<script
  define:vars={{
    projectId,
    currentRole,
    currentUser,
    supabaseUrl,
  }}
  type="module"
>
  // Punchlist functionality
  let punchlistItems = [];
  let currentProjectId = projectId;
  let currentUserId = currentUser?.id;

  async function loadPunchlistItems(projectId) {
    try {
      // Import the utility function dynamically
      const { fetchPunchlistData, updatePunchlistCount } = await import("../src/lib/punchlist-utils");
      
      const data = await fetchPunchlistData(projectId);

      console.log("üîç [TabPunchlist] data:", data);
      if (data.success) {
        punchlistItems = data.punchlist;
        renderPunchlistItems();
        updateIncompletePunchlistItemsCount(); // Update count after loading punchlist items
      } else {
        console.error("Failed to load punchlist items:", data.error);

        // Show specific error message if table doesn't exist
        if (data.migration_needed || data.error?.includes("does not exist")) {
          showModal("error", "Punchlist Setup Required",
            `Punchlist feature setup required<br><br>
                    <strong>Admin Action Needed:</strong><br>
                    Please run the SQL script:<br>
                    <code>sql-queriers/create-punchlist-table.sql</code><br>
                    in your Supabase SQL Editor to enable punchlist functionality.`
          );
        } else {
          showModal("error", "Punchlist Error", "Failed to load punchlist items: " + (data.details || data.error));
        }
      }
    } catch (error) {
      console.error("Error loading punchlist items:", error);
      showPunchlistError("Failed to load punchlist items");
    }
  }

  // Update incomplete punchlist items count in the punchlist tab
  async function updateIncompletePunchlistItemsCount() {
    const incompleteCount = punchlistItems.filter((item) => !item.mark_completed).length;
    
    // Use the utility function for consistent behavior
    const { updatePunchlistCount } = await import("../src/lib/punchlist-utils");
    updatePunchlistCount(incompleteCount);
    
    // console.log("üîç [PUNCHLIST] Incomplete punchlist items count updated:", incompleteCount);
  }

  async function renderPunchlistItems() {
    const punchlistItemsList = document.getElementById("punchlist-items-list");
    if (!punchlistItemsList) return;

    // Separate top-level items and replies
    const topLevelItems = punchlistItems.filter((d) => !d.parent_id);
    let html = "";

    // Process items asynchronously
    for (const item of topLevelItems) {
      // Check if user can see this item

      html += await renderPunchlistItem(item, 0);

      // Find and render replies for this item
    }

    punchlistItemsList.innerHTML = html;

    // Load toggles for all items that can be toggled
    punchlistItems.forEach((item) => {
      const canToggleCompleted =
        currentRole === "Admin" ||
        currentRole === "Staff";

      if (canToggleCompleted) {
        loadToggleForPunchlistItem(item.id, item.mark_completed, true);
      }
    });
  }

  async function renderPunchlistItem(item, depth = 0) {
    try {
      // Compute all values in the parent component
      const isInternal = item.internal;
      const isAuthor = item.author_id === currentUserId;
      const canToggleCompleted =
        currentRole === "Admin" || currentRole === "Staff";

      const marginLeft = depth > 0 ? `ml-${Math.min(depth * 8, 32)}` : "";
      const borderLeft = depth > 0 ? "border-l-2 border-gray-200 dark:border-gray-600 pl-4" : "";

      // Ensure item data is properly encoded to handle Unicode characters
      const itemData = encodeURIComponent(JSON.stringify(item));

      const headers = new Headers({
        "x-comment-data": itemData,
        "x-current-user-role": currentRole,
        "x-current-user-id": currentUserId,
        "x-supabase-url": supabaseUrl,
        "x-comment-depth": depth.toString(),
        "x-is-internal": isInternal.toString(),
        "x-is-author": isAuthor.toString(),
        "x-can-toggle-completed": canToggleCompleted.toString(),
        "x-margin-left": marginLeft,
        "x-border-left": borderLeft,
      });

      const response = await fetch("/partials/punchlist", {
        headers: headers,
      });

      if (response.ok) {
        return await response.text();
      } else {
        console.error("Failed to load punchlist item partial:", response.status);
        return `<div class="text-red-500">Failed to load punchlist item</div>`;
      }
    } catch (error) {
      console.error("Error loading punchlist item partial:", error);
      return `<div class="text-red-500">Error loading punchlist item</div>`;
    }
  }

  // Load toggle using SlideToggle partial
  async function loadToggleForPunchlistItem(itemId, isCompleted, canToggle) {
    if (!canToggle) return;

    try {
      // Handle null/undefined isCompleted values
      const completed = isCompleted === true || isCompleted === "true" || isCompleted === 1;

      const headers = new Headers({
        "x-toggle-id": `punchlist-completed-toggle-${itemId}`,
        // "x-toggle-label": completed ? "Completed" : "Incomplete",
        "x-toggle-label": "",
        // "x-toggle-icon": completed ? "bx-check-circle" : "",
        "x-toggle-color": "primary",
        "x-toggle-checked": completed.toString(),
        "x-toggle-class": "punchlist-completed-toggle",
        "x-toggle-data-discussion-id": itemId.toString(),
      });

      const response = await fetch("/partials/slide-toggle", {
        headers: headers,
      });

      if (response.ok) {
        const toggleHTML = await response.text();
        const container = document.getElementById(`toggle-container-${itemId}`);
        if (container) {
          container.innerHTML = toggleHTML;
        }
      }
    } catch (error) {
      console.error("‚ùå [PUNCHLIST] Error loading toggle:", error);
    }
  }

  function showPunchlistError(message) {
    const punchlistItemsList = document.getElementById("punchlist-items-list");
    if (punchlistItemsList) {
      punchlistItemsList.innerHTML = `
        <div class="text-center py-8 text-red-500">
          <i class="bx bx-error-circle mx-auto mb-4 text-4xl"></i>
          <p>${message}</p>
        </div>
      `;
    }
  }

  // Initialize punchlist functionality when punchlist tab is shown
  function initializePunchlist() {
    // Set user role from server-side data (already set via define:vars)
    // User role is already available from component props

    const punchlistContainer = document.getElementById("punchlist-container");
    if (punchlistContainer) {
      currentProjectId = punchlistContainer.dataset.projectId || "";
      if (currentProjectId) {
        loadPunchlistItems(currentProjectId);
      }
    }

    // Add event delegation for completed toggles
    document.addEventListener("change", (e) => {
      const target = e.target;
      if (target.classList.contains("punchlist-completed-toggle")) {
        const punchlistId = parseInt(target.getAttribute("data-discussion-id") || "0");
        const isCompleted = target.checked;
        if (punchlistId) {
          togglePunchlistCompleted(punchlistId, isCompleted);
        }
      }
    });

    console.log("üîî [PUNCHLIST] Event listeners attached");
  }

  // Toggle punchlist item completed status
  async function togglePunchlistCompleted(punchlistId, isCompleted) {
    try {
      console.log("üîî [PUNCHLIST] Toggling completed status:", {
        punchlistId,
        isCompleted,
      });

      const response = await fetch("/api/update-punchlist-completed", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          punchlistId: punchlistId,
          mark_completed: isCompleted,
        }),
      });

      const data = await response.json();

      if (data.success) {
        console.log("‚úÖ [PUNCHLIST] Punchlist item completed status updated successfully");
        // Update the local punchlist data
        const punchlistItem = punchlistItems.find((d) => d.id === punchlistId);
        if (punchlistItem) {
          punchlistItem.mark_completed = isCompleted;
        }

        // Update the incomplete punchlist items count
        updateIncompletePunchlistItemsCount();
        // Show success notification
        if (window.showModal) {
          window.showModal(
            "success",
            "Punchlist status updated",
            `Marked as ${isCompleted ? "completed" : "incomplete"}`,
            1500
          );
        }

        // Reload the toggle with the updated state
        loadToggleForPunchlistItem(punchlistId, isCompleted, true);
      } else {
        console.error("‚ùå [PUNCHLIST] Failed to update punchlist status:", data.error);
        // Revert the toggle to previous state
        loadToggleForPunchlistItem(punchlistId, !isCompleted, true);
        // Show error notification
        if (window.showModal) {
          window.showModal("error", "Update Failed", "Failed to update punchlist status");
        }
      }
    } catch (error) {
      console.error("‚ùå [PUNCHLIST] Error updating punchlist status:", error);
      // Revert the toggle to previous state
      loadToggleForPunchlistItem(punchlistId, !isCompleted, true);
      // Show error notification
      if (window.showModal) {
        window.showModal("error", "Update Failed", "Error updating punchlist status");
      }
    }
  }

  // Initialize punchlist functionality when component loads
  document.addEventListener("DOMContentLoaded", function () {
    console.log("üîî [PUNCHLIST] Punchlist component loaded, initializing...");
    setTimeout(initializePunchlist, 100);
  });

  // Make initializePunchlist globally available for tab switching
  window.initializePunchlist = initializePunchlist;
</script>
