---
import BoxIcon from "../common/BoxIcon.astro";
import ProjectItem from "./ProjectItem.astro";

interface Props {
  projects: any[];
  currentUser: any;
  statusData: any;
  globalInputClasses: string;
}

// // const { currentLocale } = Astro;
// // const i18n = getI18N({ currentLocale });
const { projects, statusData, currentUser, globalInputClasses } = Astro.props;
const currentRole = currentUser?.profile?.role;

// console.log("üîç [DEBUG] ProjectList statusData:", statusData);
// console.log("üîç [DEBUG] ProjectList currentUser:", currentUser);
// console.log("üîç [DEBUG] ProjectList currentRole:", currentRole);
// console.log("üîç [DEBUG] ProjectList projects:", projects);

// Fetch staff data for staff selection
let staffOptions: any[] = [];
if (currentRole === "Admin" || currentRole === "Staff") {
  try {
    const staffResponse = await fetch(`${Astro.url.origin}/api/get-user-emails-by-role`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        roles: ["Admin", "Staff"],
      }),
    });
    if (staffResponse.ok) {
      const staffData = await staffResponse.json();
      if (staffData.success && staffData.staffUsers) {
        staffOptions = [
          { value: "", label: "Unassigned" },
          ...staffData.staffUsers.map((staff: any) => ({
            value: staff.id || "",
            label:
              staff.companyName ||
              `${staff.firstName || ""} ${staff.lastName || ""}`.trim() ||
              "Unknown Staff",
          })),
        ];
      }
    }
  } catch (error) {
    console.error("Failed to fetch staff data:", error);
    staffOptions = [{ value: "", label: "Unassigned" }];
  }
}

// Process each project's status in the frontmatter
const processedProjects = projects.map((project: any) => {
  const currentStatusInt = project.status || 0;
  const currentStatusObj = statusData[currentStatusInt] || {
    statusName: "Unknown Status",
    statusTab: null,
    statusSlug: null,
    statusCode: project.status,
  };
  return {
    ...project,
    currentStatusObj,
    currentStatusName: currentStatusObj?.current?.statusName,
    currentStatusTab: currentStatusObj?.current?.statusTab,
    currentStatusInt: currentStatusObj?.current?.statusCode,
    currentStatusColor: currentStatusObj?.current?.statusColor,
  };
});

// Create array of 36 datetime options (9 days √ó 4 times per day)
const createDueDateOptions = () => {
  const options = [];
  const now = new Date();
  const times = [8, 12, 16, 20]; // 8am, 12pm, 4pm, 8pm

  for (let day = 0; day < 9; day++) {
    for (const hour of times) {
      const date = new Date(now);
      date.setDate(date.getDate() + day);
      date.setHours(hour, 0, 0, 0); // Set to exact hour, 0 minutes/seconds

      const dateStr = date.toISOString();
      const displayDate = date.toLocaleDateString();
      const displayTime = date.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });

      let label;
      if (day === 0) {
        label = `Today at ${displayTime}`;
      } else if (day === 1) {
        label = `Tomorrow at ${displayTime}`;
      } else {
        label = `${displayDate} at ${displayTime}`;
      }

      options.push({
        value: dateStr,
        label: label,
      });
    }
  }

  return options;
};

const dueDateOptions = createDueDateOptions();
---

<!-- Project List-->
<table id="project-list" class="w-full text-left text-sm dark:text-gray-400">
  <thead class="text-uppercase bg-gray-50 text-xs dark:bg-gray-800">
    <tr>
      {
        currentRole !== "Client" && (
          <th scope="col" class="px-4 py-3 font-semibold">
            <div class="align-center flex">
              del
              {/* <!-- <input
            id="checkbox-all"
            type="checkbox"
            class="_o2IXcpM0qnG3JPReKus E9GV5sZJIbfO_GEQ_moc rounded-sm border-gray-300 bg-gray-100 _6MyV8SXoSWq_PQ6KWI6 _q0p_O8QLU1paqtuqmI2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 _GL8_lXmAgroY9ZBWGLH BO8JrKgx4qkHG27c4wVR"
          />
          <label for="checkbox-all" class="sr-only">checkbox</label> --> */}
            </div>
          </th>
        )
      }
      <th scope="col" class="px-4 py-3 font-semibold">Address</th>

      {
        currentRole !== "Client" && (
          <th scope="col" class="px-4 py-3 font-semibold">
            Company
          </th>
        )
      }

      <th scope="col" class="px-4 py-3 font-semibold">Status</th>
      <th scope="col" class="px-4 py-3 font-semibold">Files</th>

      {
        currentRole !== "Client" && (
          <th scope="col" class="px-4 py-3 font-semibold">
            Assigned To
          </th>
        )
      }

      <th scope="col" class="px-4 py-3 font-semibold">Progress</th>
      <th scope="col" class="px-4 py-3 font-semibold">Checklist</th>
      <th scope="col" class="px-4 py-3 font-semibold"
        ><span class="button-text">Elapsed Time</span><BoxIcon name="time" size="xs" class="" />
      </th>
      <th scope="col" class="px-4 py-3 font-semibold">Updated</th>
      <th scope="col" class="px-4 py-3 font-semibold">Due Date</th>
      <th scope="col" class="px-4 py-3 font-semibold">
        <span class="sr-only">Actions</span>
      </th>
    </tr>
  </thead>
  <tbody>
    {
      projects.length > 0 &&
        processedProjects.map((project: any) => {
          // console.log("üîç [DEBUG] ProjectList passing project to ProjectListItem:", {
          //   id: project.id,
          //   title: project.title,
          //   featuredImage: project.featuredImage,
          //   featuredImageData: project.featuredImageData,
          // });
          return (
            <ProjectItem
              currentUser={currentUser}
              project={project}
              statusData={statusData}
              currentStatusName={project.currentStatusName}
              currentStatusInt={project.currentStatusInt}
              currentStatusTab={project.currentStatusTab}
              currentStatusColor={project.currentStatusColor}
              staffOptions={staffOptions}
              dueDateOptions={dueDateOptions}
              globalInputClasses={globalInputClasses}
            />
          );
        })
    }
  </tbody>
</table>
