---
import LucideIcon from "../common/LucideIcon.astro";
import ProjectItem from "./ProjectItem.astro";
import Tooltip from "../common/Tooltip.astro";

interface Props {
  projects: any[];
  currentUser: any;
  statusData: any;
  globalInputClasses: string;
}

// // const { currentLocale } = Astro;
// // const i18n = getI18N({ currentLocale });
const { projects, statusData, currentUser, globalInputClasses } = Astro.props;
const currentRole = currentUser?.profile?.role;

// console.log("üîç [DEBUG] ProjectList statusData:", statusData);
// console.log("üîç [DEBUG] ProjectList currentUser:", currentUser);
// console.log("üîç [DEBUG] ProjectList currentRole:", currentRole);
// console.log("üîç [DEBUG] ProjectList projects:", projects);

// Fetch staff data for staff selection
let staffOptions: any[] = [];
if (currentRole === "Admin" || currentRole === "Staff") {
  try {
    const staffResponse = await fetch(`${Astro.url.origin}/api/users?role=Admin&role=Staff`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });
    if (staffResponse.ok) {
      const staffData = await staffResponse.json();
      if (staffData.data) {
        staffOptions = [
          { value: "", label: "Unassigned" },
          ...staffData.data.map((staff: any) => ({
            value: staff.id || "",
            label:
              staff.companyName ||
              `${staff.firstName || ""} ${staff.lastName || ""}`.trim() ||
              "Unknown Staff",
          })),
        ];
      }
    }
  } catch (error) {
    console.error("Failed to fetch staff data:", error);
    staffOptions = [{ value: "", label: "Unassigned" }];
  }
}

// Process each project's status in the frontmatter
const processedProjects = projects.map((project: any) => {
  const currentStatusInt = project.status || 0;
  const currentStatusObj = statusData[currentStatusInt] || {
    statusName: "Unknown Status",
    statusTab: null,
    statusSlug: null,
    statusCode: project.status,
  };
  return {
    ...project,
    currentStatusObj,
    currentStatusName: currentStatusObj?.current?.statusName,
    currentStatusTab: currentStatusObj?.current?.statusTab,
    currentStatusInt: currentStatusObj?.current?.statusCode,
    currentStatusColor: currentStatusObj?.current?.statusColor,
  };
});

// Create array of 36 datetime options (9 days √ó 4 times per day)
const createDueDateOptions = () => {
  const options = [];
  const now = new Date();
  const times = [8, 12, 16, 20]; // 8am, 12pm, 4pm, 8pm

  for (let day = 0; day < 9; day++) {
    for (const hour of times) {
      const date = new Date(now);
      date.setDate(date.getDate() + day);
      date.setHours(hour, 0, 0, 0); // Set to exact hour, 0 minutes/seconds

      const dateStr = date.toISOString();
      const displayDate = date.toLocaleDateString();
      const displayTime = date.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });

      let label;
      if (day === 0) {
        label = `Today at ${displayTime}`;
      } else if (day === 1) {
        label = `Tomorrow at ${displayTime}`;
      } else {
        label = `${displayDate} at ${displayTime}`;
      }

      options.push({
        value: dateStr,
        label: label,
      });
    }
  }

  return options;
};

const dueDateOptions = createDueDateOptions();
---

<!-- Project List-->
<table id="project-list" class="w-full text-left text-sm dark:text-gray-400">
  <thead class="text-uppercase bg-gray-200 text-xs dark:bg-gray-800">
    <tr>
      {
        currentRole !== "Client" && (
          <th scope="col" class="px-4 py-3 font-semibold">
            <div class="align-center flex">
              del
              {/* <!-- <input
            id="checkbox-all"
            type="checkbox"
            class=" rounded-sm border-gray-300 bg-gray-100 _6MyV8SXoSWq_PQ6KWI6 _q0p_O8QLU1paqtuqmI2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 _GL8_lXmAgroY9ZBWGLH BO8JrKgx4qkHG27c4wVR"
          />
          <label for="checkbox-all" class="sr-only">checkbox</label> --> */}
            </div>
          </th>
        )
      }
      <th scope="col" class="px-4 py-3 font-semibold">Address</th>

      {
        currentRole !== "Client" && (
          <th scope="col" class="px-4 py-3 font-semibold">
            Company
          </th>
        )
      }

      <th scope="col" class="px-4 py-3 font-semibold">Status</th>
      <th scope="col" class="px-4 py-3 font-semibold">Files</th>

      {
        currentRole !== "Client" && (
          <th scope="col" class="px-4 py-3 font-semibold">
            Assigned To
          </th>
        )
      }

      <th scope="col" class="px-4 py-3 font-semibold">Progress</th>
      <th scope="col" class="px-4 py-3 font-semibold overflow-visible">
        <Tooltip text="Checklist">
          <svg
            class="h-4 w-4 flex-shrink-0 text-gray-900 dark:text-gray-400"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            fill="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              d="M3 6C3 4.89688 3.89688 4 5 4H13C14.1031 4 15 4.89688 15 6V10.2063C12.6906 10.8594 11 12.9812 11 15.5C11 17.3469 11.9094 18.9781 13.3031 19.9781C13.2031 19.9937 13.1031 20 13 20H5C3.89688 20 3 19.1031 3 18V6ZM5 8.5C5 8.775 5.225 9 5.5 9H12.5C12.775 9 13 8.775 13 8.5C13 8.225 12.775 8 12.5 8H5.5C5.225 8 5 8.225 5 8.5ZM5.5 11C5.225 11 5 11.225 5 11.5C5 11.775 5.225 12 5.5 12H10.5C10.775 12 11 11.775 11 11.5C11 11.225 10.775 11 10.5 11H5.5ZM5.5 14C5.225 14 5 14.225 5 14.5C5 14.775 5.225 15 5.5 15H8.5C8.775 15 9 14.775 9 14.5C9 14.225 8.775 14 8.5 14H5.5ZM12 15.5C12 14.3065 12.4741 13.1619 13.318 12.318C14.1619 11.4741 15.3065 11 16.5 11C17.6935 11 18.8381 11.4741 19.682 12.318C20.5259 13.1619 21 14.3065 21 15.5C21 16.6935 20.5259 17.8381 19.682 18.682C18.8381 19.5259 17.6935 20 16.5 20C15.3065 20 14.1619 19.5259 13.318 18.682C12.4741 17.8381 12 16.6935 12 15.5ZM17.8969 14.1469L16 16.0437L15.1031 15.1469C14.9094 14.9531 14.5906 14.9531 14.3969 15.1469C14.2031 15.3406 14.2031 15.6594 14.3969 15.8531L15.6469 17.1031C15.8406 17.2969 16.1594 17.2969 16.3531 17.1031L18.6031 14.8531C18.7969 14.6594 18.7969 14.3406 18.6031 14.1469C18.4094 13.9531 18.0906 13.9531 17.8969 14.1469Z"
              fill="currentColor"
              data-astro-cid-3nvww4em=""></path>
          </svg>
        </Tooltip>
      </th>
      <th scope="col" class="px-4 py-3 font-semibold"><LucideIcon name="clock" class="" /> </th>
      <th scope="col" class="px-4 py-3 font-semibold">Updated</th>
      <th scope="col" class="px-4 py-3 font-semibold">Due Date</th>
    </tr>
  </thead>
  <tbody>
    {
      projects.length > 0 &&
        processedProjects.map((project: any) => {
          // console.log("üîç [DEBUG] ProjectList passing project to ProjectListItem:", {
          //   id: project.id,
          //   title: project.title,
          //   featuredImage: project.featuredImage,
          //   featuredImageData: project.featuredImageData,
          // });
          return (
            <ProjectItem
              currentUser={currentUser}
              project={project}
              statusData={statusData}
              currentStatusName={project.currentStatusName}
              currentStatusInt={project.currentStatusInt}
              currentStatusTab={project.currentStatusTab}
              currentStatusColor={project.currentStatusColor}
              staffOptions={staffOptions}
              dueDateOptions={dueDateOptions}
              globalInputClasses={globalInputClasses}
            />
          );
        })
    }
  </tbody>
</table>
