---
import { readFileSync } from "fs";
import { join } from "path";
import { replacePlaceholders } from "../../lib/placeholder-utils";

interface Props {
  projectId: string;
  projectTitle: string;
  currentUser: any;
  project: any;
}

const { projectId, projectTitle, currentUser, project } = Astro.props;

// Fetch contract from database during SSR
let contractHtml: string | null = null;
let hasCustomContract = false;

try {
  const baseUrl = Astro.url.origin;
  const response = await fetch(`${baseUrl}/api/get-project-contract?projectId=${projectId}`);
  const data = await response.json();

  if (data.success && data.contractHtml) {
    contractHtml = data.contractHtml;
    hasCustomContract = data.hasCustomContract;
    console.log("✅ [CONTRACT-DISPLAY] Found custom contract for project:", projectId);
  } else {
    console.log("ℹ️ [CONTRACT-DISPLAY] No custom contract found, will use default template");
  }
} catch (error) {
  console.error("❌ [CONTRACT-DISPLAY] Error fetching contract:", error);
}

// Load default contract template from file
let defaultTemplate = "";
try {
  const templatePath = join(process.cwd(), "src/templates/pdf/contract.html");
  const templateContent = readFileSync(templatePath, "utf-8");

  // Extract just the body content (remove <!DOCTYPE>, <html>, <head>, etc)
  const bodyMatch = templateContent.match(/<body>([\s\S]*)<\/body>/i);
  if (bodyMatch) {
    defaultTemplate = bodyMatch[1];
  } else {
    defaultTemplate = templateContent;
  }
} catch (error) {
  console.error("❌ [CONTRACT-DISPLAY] Failed to load contract template:", error);
  throw new Error("Contract template not found");
}

// Use custom contract if available, otherwise use default template
const rawContract = contractHtml || defaultTemplate;

// Process contract through placeholder utility
const displayContract = replacePlaceholders(rawContract, { project: project });
---

<div id="contract-display" class="prose max-w-none">
  <div class="contract-header mb-6">
    <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Service Contract</h2>
    {
      hasCustomContract && (
        <p class="text-sm text-blue-600 dark:text-blue-400">Custom contract for this project</p>
      )
    }
  </div>

  <div
    id="contract-content"
    class="contract-content rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800"
    set:html={displayContract}
  />

  <!-- Print button -->
  <!-- <div class="mt-6 flex justify-end">
    <button
      id="print-contract-btn"
      type="button"
      class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700"
    >
      <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"
        ></path>
      </svg>
      Print Contract
    </button>
  </div> -->
</div>

<script>
  // Clean up contract HTML after it loads
  function cleanupContractHTML() {
    const contractContent = document.getElementById("contract-content");
    if (!contractContent) return;

    // Remove inline styles that might cause white-on-white text
    const elements = contractContent.querySelectorAll("*");
    elements.forEach((el: any) => {
      // Remove problematic inline styles
      if (el.style.color === "white" || el.style.color === "#ffffff") {
        el.style.color = "";
      }
      if (el.style.backgroundColor === "white" || el.style.backgroundColor === "#ffffff") {
        el.style.backgroundColor = "";
      }
      // Remove excessive line breaks
      if (el.tagName === "BR" && el.nextElementSibling?.tagName === "BR") {
        el.remove();
      }
    });

    // Clean up excessive whitespace and line breaks
    contractContent.innerHTML = contractContent.innerHTML
      .replace(/\n\s*\n\s*\n+/g, "\n\n") // Replace 3+ newlines with 2
      .replace(/\s+$/gm, "") // Remove trailing whitespace
      .replace(/^\s+/gm, "") // Remove leading whitespace
      .replace(/\n\s*\n/g, "\n") // Replace double newlines with single
      .replace(/\s{3,}/g, " ") // Replace 3+ spaces with single space
      .replace(/<br\s*\/?>\s*<br\s*\/?>/gi, "<br>") // Replace multiple BR tags with single
      .trim();
  }

  // Clean up when DOM is ready
  document.addEventListener("DOMContentLoaded", cleanupContractHTML);

  // Print functionality
  // document.getElementById("print-contract-btn")?.addEventListener("click", () => {
  //   const printWindow = window.open("", "_blank");
  //   const contractContent = document.getElementById("contract-content")?.innerHTML;

  //   if (printWindow && contractContent) {
  //     printWindow.document.write(`
  //       <!DOCTYPE html>
  //       <html>
  //       <head>
  //         <title>Service Contract - ${projectTitle}</title>
  //         <style>
  //           body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
  //           h1, h2, h3 { color: #333; }
  //           ul { margin: 10px 0; }
  //           li { margin: 5px 0; }
  //           p { margin: 10px 0; }
  //         </style>
  //       </head>
  //       <body>
  //         ${contractContent}
  //       </body>
  //       </html>
  //     `);
  //     printWindow.document.close();
  //     printWindow.print();
  //   }
  // });
</script>

<style>
  .contract-content {
    line-height: 1.6;
    color: #374151 !important; /* Force dark text */
  }

  .contract-content * {
    color: inherit !important; /* Override any inline styles */
  }

  .contract-content h1 {
    @apply mb-4 text-3xl font-bold text-gray-900 dark:text-white;
    color: #111827 !important;
  }

  .contract-content h2 {
    @apply mb-3 mt-6 text-2xl font-semibold text-gray-800 dark:text-gray-200;
    color: #1f2937 !important;
  }

  .contract-content h3 {
    @apply mb-2 mt-4 text-xl font-medium text-gray-700 dark:text-gray-300;
    color: #374151 !important;
  }

  .contract-content p {
    @apply mb-3 text-gray-600 dark:text-gray-400;
    color: #4b5563 !important;
    margin-bottom: 0.75rem;
  }

  .contract-content ul {
    @apply mb-4 text-gray-600 dark:text-gray-400;
    color: #4b5563 !important;
  }

  .contract-content li {
    @apply mb-1;
    color: #4b5563 !important;
  }

  /* Remove excessive line breaks */
  .contract-content br + br {
    display: none;
  }

  /* Clean up whitespace */
  .contract-content {
    white-space: normal;
    line-height: 1.4;
  }

  /* Remove excessive spacing between elements */
  .contract-content p + p {
    margin-top: 0.5rem;
  }

  .contract-content h1 + h2,
  .contract-content h2 + h3,
  .contract-content h3 + p {
    margin-top: 0.5rem;
  }

  /* Remove empty paragraphs */
  .contract-content p:empty {
    display: none;
  }
</style>
