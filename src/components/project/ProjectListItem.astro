---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  project: {
    id: any;
    author_id?: any;
    title?: any;
    address: any;
    description: any;
    sq_ft: any;
    new_construction: any;
    status: any;
    created_at: any;
    updated_at: any;
    assigned_to_name?: any;
    assigned_to_id?: any;
    company_name?: any;
    comment_count?: any;
    profiles?: any;
    assigned_profiles?: any;
  };
  role?: string;
  user?: any;
  statuses?: any;
}

const { project, role, user, statuses } = Astro.props;

// return if user is staff and project is not assigned to them
// if (role === "Staff" && project.assigned_to_id !== user?.id) {
//   return;
// }

// Function to limit description to 200 words
function limitDescription(text: string, wordLimit: number = 50): string {
  if (!text) return "";
  const words = text.trim().split(/\s+/);
  if (words.length <= wordLimit) return text;
  return words.slice(0, wordLimit).join(" ") + "...";
}

// Get project status info from passed statuses or fallback to default
let statusName = `Status ${project.status}`;
let statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";

// Use passed statuses data if available, otherwise fall back to API call
if (statuses && statuses.length > 0) {
  const statusInfo = statuses.find((status: any) => status.status_code === project.status);
  if (statusInfo) {
    statusName = statusInfo.status_name;

    // Set status color based on status code ranges
    if (project.status <= 30) {
      statusColor = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"; // Early stages
    } else if (project.status <= 100) {
      statusColor = "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"; // In progress
    } else if (project.status <= 200) {
      statusColor = "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300"; // Completing
    } else if (project.status === 220) {
      statusColor = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"; // Complete
    } else {
      statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"; // Default
    }
  }
} else {
  console.warn("🔄 [PROJECT-LIST-ITEM] No statuses provided for project:", project.id);
  // Fallback to default status display
  statusName = `Status ${project.status}`;
  statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
}

// Use author profile data from the project query (no additional DB call needed)
let projectAuthorProfile: any = null;
if (project.profiles) {
  projectAuthorProfile = project.profiles;
  console.log("🌐 [PROJECT] Using pre-loaded author profile:", projectAuthorProfile?.company_name);
} else {
  console.warn("🌐 [PROJECT] No author profile data available for project:", project.id);
}
---

<a
  href={`/project/${project.id}`}
  data-project-status={project.status}
  data-project-id={project.id}
  class="text-sky-600 hover:text-sky-500 dark:text-sky-400 dark:hover:text-sky-300"
>
  <div
    class="mb-4 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800"
  >
    <div class="items-start justify-between md:flex">
      <div class="flex-none md:flex-1">
        {
          role !== "Client" &&
            (projectAuthorProfile?.company_name || projectAuthorProfile?.email) && (
              <>
                <h3
                  class="inline-block text-lg font-semibold text-gray-900 dark:text-white"
                  data-searchable
                >
                  {projectAuthorProfile?.company_name ||
                    projectAuthorProfile?.name ||
                    "Unknown Author"}
                </h3>
                <span class="text-gray-500 dark:text-gray-400">|</span>
              </>
            )
        }
        <h3
          class="inline-flex text-lg font-semibold text-gray-900 dark:text-white"
          data-project-address
          data-searchable
        >
          {project.address}
        </h3>
        <p
          class="mt-2 text-sm text-gray-600 dark:text-gray-300"
          data-project-description
          title={project.description}
        >
          {limitDescription(project.description)}
        </p>
        <div class="mt-4 flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400"></div>
      </div>
      <div class="md:ml-4">
        <span
          class={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${statusColor}`}
        >
          {statusName}
        </span>
        {
          project.comment_count > 0 && (
            <div
              class="relative inline-flex items-center justify-center"
              title={`${project.comment_count || 0} comments`}
            >
              <BoxIcon name="message-rounded" class="text-blue-500 dark:text-blue-400" />
              <span class="absolute -right-1 -top-1 inline-flex h-5 w-5 min-w-[1.25rem] items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white">
                {project.comment_count > 99 ? "99+" : project.comment_count}
              </span>
            </div>
          )
        }

        {
          role !== "Client" &&
            (project.assigned_profiles ? (
              <span class="flex items-center gap-1">
                <BoxIcon name="user" />
                <span data-searchable>
                  {project.assigned_profiles.company_name ||
                    project.assigned_profiles.name ||
                    "Assigned User"}
                </span>
              </span>
            ) : (
              <span class="flex items-center gap-1">
                <BoxIcon name="user" />
                <span data-searchable>Unassigned</span>
              </span>
            ))
        }

        <span class="flex items-center gap-1">
          <BoxIcon name="area" />
          {project.sq_ft ? project.sq_ft.toLocaleString() : 0} sq ft
        </span>
        <span class="flex items-center gap-1">
          <BoxIcon name="building" />
          {project.new_construction ? "New Construction" : "Existing"}
        </span>

        <span class="flex items-center gap-1">
          Updated: {new Date(project.updated_at).toLocaleDateString()}
          {
            new Date(project.updated_at).toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
              hour12: true,
            })
          }</span
        >
        <span class="flex items-center gap-1">
          Created: {new Date(project.created_at).toLocaleDateString()}
          {
            new Date(project.created_at).toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
              hour12: true,
            })
          }</span
        >
      </div>
    </div>
    <!-- <div class="mt-4 flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
     
      <div class="flex items-center gap-4">
      
       
      </div>
    </div> -->
  </div>
</a>
