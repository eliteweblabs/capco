---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  project: {
    id: any;
    author_id?: any;
    title?: any;
    address: any;
    description: any;
    sq_ft: any;
    new_construction: any;
    status: any;
    created_at: any;
    updated_at: any;
    assigned_to_name?: any;
    assigned_to_id?: any;
    company_name?: any;
    comment_count?: any;
    profiles?: any;
    assigned_profiles?: any;
  };
  projectStatusesObject?: any;
  currentRole?: string;
  user?: any;
  statuses?: any;
  currentStatusName?: string;
  currentStatusInt?: string;
  currentStatusSlug?: string;
  currentStatusTab?: string;
}

const {
  project,
  projectStatusesObject,
  currentRole = "Client",
  user,
  currentStatusName,
  currentStatusInt,
  currentStatusSlug,
  currentStatusTab,
} = Astro.props;

// return if user is staff and project is not assigned to them
if (currentRole === "Staff" && project.assigned_to_id !== user?.id) {
  return null;
}

// console.log("üîç [PROJECT-LIST-ITEM] Status URL:", projectStatusesObject[project.status]);

const statusSlugOrId = currentRole && currentRole === "Client" ? currentStatusSlug : project.status;
// Debug logging removed for performance

// Function to limit description to 200 words
function limitDescription(text: string, wordLimit: number = 50): string {
  if (!text) return "";
  const words = text.trim().split(/\s+/);
  if (words.length <= wordLimit) return text;
  return words.slice(0, wordLimit).join(" ") + "...";
}

// Get project status info from passed statuses or fallback to default
// Status color is now provided by the get-project-statuses API

// Use author profile data from the project query (no additional DB call needed)
let authorProfile: any = null;
if (project.profiles) {
  authorProfile = project.profiles;
  // Debug: Log the profile data to see what's available
  console.log("üîç [PROJECT-LIST-ITEM] Author profile data:", {
    company_name: authorProfile?.company_name,
    first_name: authorProfile?.first_name,
    last_name: authorProfile?.last_name,
    email: authorProfile?.email,
    fullProfile: authorProfile,
  });
}
---

<div
  class="relative my-4 rounded-lg border border-gray-200 bg-white p-3 shadow-sm dark:border-gray-700 dark:bg-gray-800 min-h-[200px]"
  data-project-status={statusSlugOrId}
  data-project-id={project.id}
>
  <a
    href={`/project/${project.id}`}
    class="flex flex-col md:flex-row md:items-center gap-2 md:gap-4 hover:opacity-80 transition-opacity"
  >
    <div class="flex items-center gap-2 min-w-0 flex-shrink-0">
      <h3
        class="text-lg font-semibold text-gray-900 dark:text-white truncate max-w-xs"
        data-searchable
      >
        {
          currentRole !== "Client" &&
            (authorProfile?.company_name || authorProfile?.email) &&
            (authorProfile?.company_name ||
              `${authorProfile?.first_name || ""} ${authorProfile?.last_name || ""}`.trim() ||
              authorProfile?.email ||
              "Unknown Author")
        }

        <span class="text-gray-500 dark:text-gray-400 hidden md:inline"> ‚Üí </span>
        {project.address}

        )
      </h3>
    </div>
  </a>

  <a
  href={`/project/${project.id}`}
  class="flex-none md:flex-1 hover:opacity-80 transition-opacity"
>
  <p
    class="mt-2 text-sm text-gray-600 dark:text-gray-300 mb-2"
    data-project-description
    title={project.description}
  >
    {limitDescription(project.description)}
  </p>
</a>

  <div class="items-start justify-between md:flex gap-4">
  
    {
      (() => {
        const tabUrl = `/project/${project.id}?tab=${currentStatusTab}`;
        // For clients, make status label clickable if client_status_tab exists
        // if (currentRole === "Client" && currentStatusTab) {
        // Get status color from API data
        const statusColor = projectStatusesObject?.[project.status]?.status_color || "gray";
        const statusColorClasses = `bg-${statusColor}-100 text-${statusColor}-800 dark:bg-${statusColor}-700 dark:text-${statusColor}-300`;

        return (
          <a
            href={tabUrl}
            class={`absolute -right-4 -top-4 rounded-full px-2.5 py-0.5 text-md mb-4 font-large ${statusColorClasses} hover:opacity-80 transition-opacity cursor-pointer`}
            data-refresh="status_name"
            data-project-id={project.id}
            title={`Go to ${currentStatusName} tab`}
          >
            {currentStatusName}
          </a>
        );
        // } else {
        //   // For admins or when no client_status_tab, keep as regular span
        //   // Get status color from API data
        //   const statusColor = projectStatusesObject?.[project.status]?.status_color || "gray";
        //   const statusColorClasses = `bg-${statusColor}-100 text-${statusColor}-800 dark:bg-${statusColor}-700 dark:text-${statusColor}-300`;

        //   return (
        //     <a
        //       href={tabUrl}
        //       class={`inline-flex items-center rounded-full px-2.5 py-0.5 text-md mb-4 font-large ${statusColorClasses} hover:opacity-80 transition-opacity cursor-pointer`}
        //       data-refresh="status_name"
        //       data-project-id={project.id}
        //       title={`Go to ${currentStatusName} tab`}
        //       data-refresh="status_name"
        //       data-project-id={project.id}
        //     >
        //       {currentStatusName}
        //     </a>
        //   );
        // }
      })()
    }

    <a
      href={`/project/${project.id}`}
      class="hover:opacity-80 transition-opacity cursor-pointer mb-4 text-sm"
    >
      <span class="flex items-center gap-1">
        <BoxIcon name="area" />
        {project.sq_ft ? project.sq_ft.toLocaleString() : 0}ft¬≤
      </span>
      <span class="flex items-center gap-1">
        <BoxIcon name="building" />
        {project.new_construction ? "New" : "Existing"}
      </span>
    </a>
    <span class="text-sm">
      <b>Updated:</b>
      {new Date(project.updated_at).toLocaleDateString()}
      {
        new Date(project.updated_at).toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
        })
      }
      <br><b>Created:</b>
      {new Date(project.created_at).toLocaleDateString()}
      {
        new Date(project.created_at).toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
        })
      }</span
    >
  </div>

  <span class="absolute left-4 bottom-4 flex items-center gap-1">

  {currentRole !== "Client" &&
      project.assigned_profiles ? (
          <BoxIcon name="user" />
          <span data-searchable>
            {project.assigned_profiles.company_name ||
              project.assigned_profiles.name ||
              "Assigned User"}
        </span>
      ) : (
          <BoxIcon name="user" />
          <span data-searchable>Unassigned</span>
      )
  }
  </span>

  <a
    href={`/project/${project.id}?tab=discussion`}
    class="absolute right-4 bottom-4 hover:opacity-80 transition-opacity cursor-pointer"
    title={`${project.comment_count || 0} comments - Go to discussions`}
  >
    <BoxIcon name="message-rounded-dots" class="bx-md text-blue-500 dark:text-blue-400" />
    {
      project.comment_count > 0 && (
        <span class="absolute -right-1 -top-1 inline-flex h-5 w-5 min-w-[1.25rem] items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white">
          {project.comment_count > 99 ? "99+" : project.comment_count}
        </span>
      )
    }
  </a>
</div>
