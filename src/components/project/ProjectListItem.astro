---
import BoxIcon from "../common/BoxIcon.astro";
import Tooltip from "../common/Tooltip.astro";
interface Props {
  project: {
    incomplete_discussions: any;
    id: any;
    author_id?: any;
    title?: any;
    address: any;
    description: any;
    sq_ft: any;
    new_construction: any;
    status: any;
    created_at: any;
    company_name: any;
    updated_at: any;
    elapsed_time?: any;
    assigned_to_name?: any;
    assigned_to_id?: any;
    comment_count?: any;
    profiles?: any;
    assigned_profiles?: any;
    featured_image_data?: {
      id: any;
      file_path: string;
      file_name: string;
      file_type: string;
      public_url: string;
    };
  };
  projectStatusesObject?: any;
  currentRole?: string;
  statuses?: any;
  currentStatusName?: string;
  currentStatusInt?: string;
  currentStatusSlug?: string;
  currentStatusTab?: string;
  currentStatusEstTime?: string;
}

const {
  project,
  projectStatusesObject,
  currentRole = "Client",
  currentStatusName,
  currentStatusInt,
  currentStatusSlug,
  currentStatusTab,
  currentStatusEstTime,
} = Astro.props;

const description = project?.description || "No description";

// console.log("üîç [PROJECT-feater] Project:", project.featured_image_data);
// console.log("üîç [PROJECT-featured=imaage] Project:", project.featured_image);
// return if user is staff and project is not assigned to them
// if (currentRole === "Staff" && project.assigned_to_id !== user?.id) {
//   return null;
// }

// if (currentRole === "Client" && project.author_id !== user?.id) {
//   return null;
// }

// console.log("üîç [PROJECT-LIST-ITEM] Status URL:", projectStatusesObject[project.status]);

const statusSlugOrId =
  currentRole && currentRole === "Client" ? currentStatusSlug : currentStatusInt;
// Debug logging removed for performance

// Function to limit description to 200 words
function limitDescription(text: string, wordLimit: number = 50): string {
  if (!text) return "";
  const words = text.trim().split(/\s+/);
  if (words.length <= wordLimit) return text;
  return words.slice(0, wordLimit).join(" ") + "...";
}

// Get project status info from passed statuses or fallback to default
// Status color is now provided by the get-project-statuses API

// Use author profile data from the project query (no additional DB call needed)
let authorProfile: any = null;
if (project.profiles) {
  authorProfile = project.profiles;
}

// Use the pre-calculated elapsed_time from the database
const elapsedTime = project.elapsed_time;
let projectAgeColor = "rgb(209, 213, 219)"; // Default gray
let projectAlertIconCount = 0;
let elapsedHours = 0; // Initialize outside the if block

// Calculate time since last update
function getTimeSinceUpdate(updatedAt: string): string {
  const now = new Date();
  const updated = new Date(updatedAt);
  const diffMs = now.getTime() - updated.getTime();

  const seconds = Math.floor(diffMs / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  if (years > 0) {
    return `${years} year${years > 1 ? "s" : ""} ago`;
  } else if (months > 0) {
    return `${months} month${months > 1 ? "s" : ""} ago`;
  } else if (weeks > 0) {
    return `${weeks} week${weeks > 1 ? "s" : ""} ago`;
  } else if (days > 0) {
    return `${days} day${days > 1 ? "s" : ""} ago`;
  } else if (hours > 0) {
    return `${hours} hour${hours > 1 ? "s" : ""} ago`;
  } else if (minutes > 0) {
    return `${minutes} minute${minutes > 1 ? "s" : ""} ago`;
  } else {
    return "Just now";
  }
}

const timeSinceUpdate = getTimeSinceUpdate(project.updated_at);

if (elapsedTime) {
  // Convert PostgreSQL interval to hours
  // elapsedTime is a string like "2 days 5:30:45" or an object with properties

  if (typeof elapsedTime === "string") {
    // Parse interval string (e.g., "2 days 5:30:45")
    const match = elapsedTime.match(/(\d+) days? (\d+):(\d+):(\d+)/);
    if (match) {
      const days = parseInt(match[1]);
      const hours = parseInt(match[2]);
      elapsedHours = days * 24 + hours;
    }
  } else if (elapsedTime.total_seconds) {
    // If it's an object with total_seconds
    elapsedHours = elapsedTime.total_seconds / 3600;
  } else if (elapsedTime.days !== undefined) {
    // If it's an object with days, hours, minutes, seconds
    elapsedHours =
      (elapsedTime.days || 0) * 24 + (elapsedTime.hours || 0) + (elapsedTime.minutes || 0) / 60;
  }

  const isOver48Hours = elapsedHours > 48;

  if (isOver48Hours) {
    // Calculate how many 12-hour periods have passed since 48 hours
    const hoursPast48 = elapsedHours - 48;
    const colorLevel = Math.floor(hoursPast48 / 12); // Every 12 hours = new color level

    // Progressive red color scale (using standard red colors)
    switch (colorLevel) {
      case 0:
        projectAgeColor = "rgb(254, 242, 242)";
        projectAlertIconCount = 1;
        break; // 48-60 hours
      case 1:
        projectAgeColor = "rgb(254, 226, 226)";
        projectAlertIconCount = 2;
        break; // 60-72 hours
      case 2:
        projectAgeColor = "rgb(252, 202, 202)";
        projectAlertIconCount = 3;
        break; // 72-84 hours
      case 3:
        projectAgeColor = "rgb(251, 173, 173)";
        projectAlertIconCount = 4;
        break; // 84-96 hours
      case 4:
        projectAgeColor = "rgb(239, 68, 68)";
        projectAlertIconCount = 5;
        break; // 96-108 hours
      default:
        projectAgeColor = "rgb(220, 38, 38)";
        projectAlertIconCount = 6;
        break; // 108+ hours
    }
  }
}

// Simple function to render alert icons as HTML
function renderAlertIcons(count: number) {
  let html = "";
  for (let i = 0; i < count; i++) {
    html +=
      '<span class="rounded-full bg-white inline-block"><i class="bx bx-error-circle text-red-500 bx-sm rounded-full bg-white dark:bg-gray-800 block"></i></span>';
  }
  return html;
}

const statusColor = projectStatusesObject?.[project.status]?.status_color || "gray";
const tabUrl = `/project/${project.id}?status=${currentStatusTab}`;

// // Convert to days, hours, and minutes
// const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
// const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
// const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));

// Format the duration
// const createdAt = `${days}d ${hours}h ${minutes}m`;
---

<div
  class={`relative mt-2 min-h-[200px] w-full max-w-full rounded-lg text-black dark:text-white bg-white shadow-sm dark:bg-gray-800`}
  data-project-status={statusSlugOrId}
  data-project-id={project.id}
>
  <!-- Featured Image Display -->

  {
    (() => {
      // For clients, make status label clickable if client_status_tab exists
      // if (currentRole === "Client" && currentStatusTab) {
      // Get status color from API data
      // const statusColorClasses = `bg-${statusColor}-100 text-${statusColor}-800 dark:bg-${statusColor}-700 dark:text-${statusColor}-300`;

      return (
        <a
          href={tabUrl}
          class={`font-large z-1 absolute -right-4 -top-3.5 mb-4 cursor-pointer`}
          data-refresh="status_name"
          data-project-id={project.id}
          title={`Go to ${currentStatusName} tab`}
        >
          {/* Debug: Show alert count */}

          <span class="relative top-1.5" set:html={renderAlertIcons(projectAlertIconCount)} />

          <span data-time-since-update data-updated-at={project.updated_at}>
            {timeSinceUpdate}
          </span>
        </a>
      );
    })()
  }

  <a
    href={`/project/${project.id}`}
    data-refresh="featured_image_data:public_url"
    data-project-id={project.id}
    class="flex h-32 items-center justify-center overflow-hidden rounded-t-lg bg-gray-100 dark:bg-gray-700"
  >
    <!-- <a href={`/project/${project.id}`} class="transition-opacity hover:opacity-80"> -->
    {
      project.featured_image_data?.public_url ? (
        <>
          <img
            src={project.featured_image_data.public_url}
            alt={`Featured image for ${project.address}`}
            class="h-32 w-full rounded-lg rounded-b-none object-cover transition-transform duration-200 hover:scale-105"
            loading="lazy"
            referrerpolicy="strict-origin-when-cross-origin"
            crossorigin="anonymous"
            onerror="console.warn('Featured image failed to load:', this.src, 'Project ID:', this.closest('[data-project-id]')?.dataset.projectId); this.style.display='none'; const fallback = this.parentElement.querySelector('.featured-image-fallback'); if (fallback) fallback.style.display='flex';"
          />
          <div class="featured-image-fallback hidden text-center">
            <BoxIcon name="image-x" class="mx-auto mb-2 h-8 w-8" />
            <p class="text-xs">Image failed to load</p>
          </div>
        </>
      ) : (
        <div class="text-center">
          <BoxIcon name="image" class="mx-auto mb-2 h-8 w-8" />
          <p class="text-xs">No featured image</p>
        </div>
      )
    }
    <!-- </a> -->
  </a>

  <div class="p-3">
    <a href={`/project/${project.id}`} class="transition-opacity hover:opacity-80">
      <div class="flex items-center gap-2">
        <h3 class="truncate text-lg font-semibold" data-searchable>
          {currentRole !== "Client" && (project.company_name + " ‚Üí " || "Unknown Author")}
          {project.address}
        </h3>
      </div>
      <span
        class="rounded-full px-2.5 py-1 text-sm transition-opacity hover:opacity-80"
        style={`background-color: ${statusColor};`}
      >
        {currentStatusName} / {currentStatusEstTime}
      </span>
      <div class="min-w-full flex-none md:flex-1">
        <p class="mb-2 mt-2 text-sm" data-project-description title={description}>
          {limitDescription(description)}
        </p>
      </div>
    </a>

    <div class="items-start justify-between gap-4">
      <a
        href={`/project/${project.id}`}
        class="mb-4 cursor-pointer text-sm transition-opacity hover:opacity-80"
      >
        <span class="flex items-center gap-1">
          <BoxIcon name="area" class="" />
          {project.sq_ft ? project.sq_ft.toLocaleString() : 0}ft¬≤
        </span>
        <span class="flex items-center gap-1">
          <BoxIcon name="building" class="" />
          {project.new_construction ? "New" : "Existing"}
        </span>
      </a>

      <!-- <div class="justify-end text-xs">
        <div>
          <b>Project Age:</b>
          {createdAt}
        </div>
      </div> -->
    </div>

    <div
      class="flex flex-col gap-2 transition-opacity hover:opacity-80 md:flex-row md:items-center md:gap-4"
    >
      {
        currentRole !== "Client" && (
          <div class="flex items-center gap-1">
            <BoxIcon name="user" size="sm" class="" />
            <span data-searchable>
              {project.assigned_to_name ? (
                <span data-searchable>{project.assigned_to_name}</span>
              ) : (
                <span class="text-danger-500">UNASSIGNED</span>
              )}
            </span>
          </div>
        )
      }

      <Tooltip content={elapsedTime.toLocaleString()} id="project-created-at">
        <BoxIcon name="time" size="md" class="" />
      </Tooltip>

      <a
        href={`/project/${project.id}?status=discussion`}
        class="relative ml-auto cursor-pointer transition-opacity hover:opacity-80"
        title={`${project.comment_count || 0} comments - Go to discussions`}
      >
        <BoxIcon name="message-rounded" size="md" class="" />
        <!-- {
          project.incomplete_discussions > 0 && ( -->
        <span
          class="absolute right-1.5 top-1.5 inline-flex h-4 min-w-[1.25rem] items-center justify-center rounded-full text-xs"
        >
          {project.incomplete_discussions > 99 ? "99+" : project.incomplete_discussions}/{
            project.comment_count > 99 ? "99+" : project.comment_count
          }
        </span>
        <!-- )
        } -->
      </a>
    </div>
  </div>
</div>

<script>
  // Update time display every minute
  function updateTimeDisplay() {
    const timeElements = document.querySelectorAll("[data-time-since-update]");

    timeElements.forEach((element) => {
      const updatedAt = element.getAttribute("data-updated-at");
      if (updatedAt) {
        const now = new Date();
        const updated = new Date(updatedAt);
        const diffMs = now.getTime() - updated.getTime();

        const seconds = Math.floor(diffMs / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        const weeks = Math.floor(days / 7);
        const months = Math.floor(days / 30);
        const years = Math.floor(days / 365);

        let timeText;
        if (years > 0) {
          timeText = `${years} year${years > 1 ? "s" : ""} ago`;
        } else if (months > 0) {
          timeText = `${months} month${months > 1 ? "s" : ""} ago`;
        } else if (weeks > 0) {
          timeText = `${weeks} week${weeks > 1 ? "s" : ""} ago`;
        } else if (days > 0) {
          timeText = `${days} day${days > 1 ? "s" : ""} ago`;
        } else if (hours > 0) {
          timeText = `${hours} hour${hours > 1 ? "s" : ""} ago`;
        } else if (minutes > 0) {
          timeText = `${minutes} minute${minutes > 1 ? "s" : ""} ago`;
        } else {
          timeText = "Just now";
        }

        element.textContent = timeText;
      }
    });
  }

  // Update immediately and then every minute
  updateTimeDisplay();
  setInterval(updateTimeDisplay, 60000); // 60000ms = 1 minute
</script>
