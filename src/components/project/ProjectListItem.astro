---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  project: {
    id: any;
    title?: any;
    address: any;
    description: any;
    sq_ft: any;
    new_construction: any;
    status: any;
    created_at: any;
    updated_at: any;
    author_name?: any;
    assigned_to_name?: any;
  };
  role?: string;
}

const { project, role } = Astro.props;

// Function to limit description to 200 words
function limitDescription(text: string, wordLimit: number = 200): string {
  if (!text) return "";
  const words = text.trim().split(/\s+/);
  if (words.length <= wordLimit) return text;
  return words.slice(0, wordLimit).join(" ") + "...";
}

// Fetch project statuses to get the status name
let statusName = `Status ${project.status}`;
let statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";

try {
  const response = await fetch(`${Astro.url.origin}/api/get-project-statuses`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "role": role || "Client", // Pass user role for proper filtering
    },
  });
  if (response.ok) {
    const result = await response.json();
    if (result.success && result.statuses) {
      const statusInfo = result.statuses[project.status];
      if (statusInfo) {
        statusName = statusInfo.status_name;

        // Set status color based on status code ranges
        if (project.status <= 30) {
          statusColor = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"; // Early stages
        } else if (project.status <= 100) {
          statusColor = "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"; // In progress
        } else if (project.status <= 200) {
          statusColor = "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300"; // Completing
        } else if (project.status === 220) {
          statusColor = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"; // Complete
        } else {
          statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"; // Default
        }
      }
    }
  }
} catch (error) {
  console.error("Failed to fetch project statuses:", error);
}
---

<a
  href={`/project/${project.id}`}
  data-project-status={project.status}
  data-project-id={project.id}
  class="text-sky-600 hover:text-sky-500 dark:text-sky-400 dark:hover:text-sky-300"
>
  <div
    class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800 mb-4"
  >
    <div class="flex items-start justify-between">
      <div class="flex-1">
        {
          project.author_name && (
            <h3
              class="inline-block text-lg font-semibold text-gray-900 dark:text-white"
              data-searchable
            >
              {project.author_name}
            </h3>
            <span class="text-gray-500 dark:text-gray-400">|</span>
          )
        }
        <h3
          class="inline-block text-lg font-semibold text-gray-900 dark:text-white"
          data-project-address
          data-searchable
        >
          {project.address}
        </h3>
        <p
          class="mt-2 text-sm text-gray-600 dark:text-gray-300"
          data-project-description
          data-searchable
          title={project.description}
        >
          {limitDescription(project.description)}
        </p>
        <div class="mt-4 flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
          <span class="flex items-center gap-1">
            <BoxIcon name="area" size="1rem" />
            {project.sq_ft.toLocaleString()} sq ft
          </span>
          <span class="flex items-center gap-1">
            <BoxIcon name="building" size="1rem" />
            {project.new_construction ? "New Construction" : "Existing"}
          </span>
          <span class="flex items-center gap-1">
            {
              project.assigned_to_name && (
                <span class="flex items-center gap-1">
                  <BoxIcon name="user" size="1rem" />
                  <span data-searchable>{project.assigned_to_name}</span>
                </span>
              )
            }
          </span>
        </div>
      </div>
      <div class="ml-4">
        <span
          class={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${statusColor}`}
        >
          {statusName}
        </span>
      </div>
    </div>
    <div class="mt-4 flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
      <span
        >Created: {new Date(project.created_at).toLocaleDateString()}
        {
          new Date(project.created_at).toLocaleTimeString([], {
            hour: "2-digit",
            minute: "2-digit",
            hour12: true,
          })
        }</span
      >
      <div class="flex items-center gap-4">
        <span
          >Last Updated: {new Date(project.updated_at).toLocaleDateString()}
          {
            new Date(project.updated_at).toLocaleTimeString([], {
              hour: "2-digit",
              minute: "2-digit",
              hour12: true,
            })
          }</span
        >
       
      </div>
    </div>
  </div>
</a>
