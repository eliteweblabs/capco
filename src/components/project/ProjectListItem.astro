---
import BoxIcon from "../common/BoxIcon.astro";
import Tooltip from "../common/Tooltip.astro";
interface Props {
  project: {
    incomplete_discussions: any;
    id: any;
    author_id?: any;
    title?: any;
    address: any;
    description: any;
    sq_ft: any;
    new_construction: any;
    status: any;
    created_at: any;
    updated_at: any;
    assigned_to_name?: any;
    assigned_to_id?: any;
    company_name?: any;
    comment_count?: any;
    profiles?: any;
    assigned_profiles?: any;
    featured_image?: any;
    featured_image_data?: {
      id: any;
      file_path: string;
      file_name: string;
      file_type: string;
      public_url: string;
    };
  };
  projectStatusesObject?: any;
  currentRole?: string;
  user?: any;
  statuses?: any;
  currentStatusName?: string;
  currentStatusInt?: string;
  currentStatusSlug?: string;
  currentStatusTab?: string;
}

const {
  project,
  projectStatusesObject,
  currentRole = "Client",
  user,
  currentStatusName,
  currentStatusInt,
  currentStatusSlug,
  currentStatusTab,
} = Astro.props;

const description = project?.description || "No description";

// console.log("üîç [PROJECT-feater] Project:", project.featured_image_data);
// console.log("üîç [PROJECT-featured=imaage] Project:", project.featured_image);
// return if user is staff and project is not assigned to them
if (currentRole === "Staff" && project.assigned_to_id !== user?.id) {
  return null;
}

if (currentRole === "Client" && project.author_id !== user?.id) {
  return null;
}

// console.log("üîç [PROJECT-LIST-ITEM] Status URL:", projectStatusesObject[project.status]);

const statusSlugOrId =
  currentRole && currentRole === "Client" ? currentStatusSlug : currentStatusInt;
// Debug logging removed for performance

// Function to limit description to 200 words
function limitDescription(text: string, wordLimit: number = 50): string {
  if (!text) return "";
  const words = text.trim().split(/\s+/);
  if (words.length <= wordLimit) return text;
  return words.slice(0, wordLimit).join(" ") + "...";
}

// Get project status info from passed statuses or fallback to default
// Status color is now provided by the get-project-statuses API

// Use author profile data from the project query (no additional DB call needed)
let authorProfile: any = null;
if (project.profiles) {
  authorProfile = project.profiles;
  // Debug: Log the profile data to see what's available
  // console.log("üîç [PROJECT-LIST-ITEM] Author profile data:", {
  //   company_name: authorProfile?.company_name,
  //   first_name: authorProfile?.first_name,
  //   last_name: authorProfile?.last_name,
  //   email: authorProfile?.email,
  //   fullProfile: authorProfile,
  // });
}

// Calculate the duration since project creation
const projectCreatedDate = new Date(project.created_at);
const currentDate = new Date();
const timeDifference = currentDate.getTime() - projectCreatedDate.getTime();

// Debug logging for project age color calculation
console.log(`üîç [PROJECT-AGE-COLOR] Project ${project.id}:`, {
  created_at: project.created_at,
  projectCreatedDate: projectCreatedDate.toISOString(),
  currentDate: currentDate.toISOString(),
  timeDifferenceMs: timeDifference,
  timeDifferenceHours: timeDifference / (1000 * 60 * 60),
  timeDifferenceDays: timeDifference / (1000 * 60 * 60 * 24),
  isOver48Hours: timeDifference > 48 * 60 * 60 * 1000,
});

// Color scale system for projects older than 48 hours
let projectAgeColor = "rgb(209, 213, 219)"; // Default gray color
if (timeDifference > 48 * 60 * 60 * 1000) {
  // More than 48 hours
  const hoursPast48 = (timeDifference - 48 * 60 * 60 * 1000) / (1000 * 60 * 60);
  const colorLevel = Math.floor(hoursPast48 / 12); // Every 12 hours = new color level

  console.log(`üîç [PROJECT-AGE-COLOR] Project ${project.id} is over 48 hours:`, {
    hoursPast48,
    colorLevel,
    originalTimeDifference: timeDifference,
  });

  // Progressive red color scale (using standard red colors)
  switch (colorLevel) {
    case 0:
      projectAgeColor = "rgb(254, 242, 242)";
      break; // 48-60 hours
    case 1:
      projectAgeColor = "rgb(254, 226, 226)";
      break; // 60-72 hours
    case 2:
      projectAgeColor = "rgb(252, 202, 202)";
      break; // 72-84 hours
    case 3:
      projectAgeColor = "rgb(251, 173, 173)";
      break; // 84-96 hours
    case 4:
      projectAgeColor = "rgb(239, 68, 68)";
      break; // 96-108 hours
    default:
      projectAgeColor = "rgb(220, 38, 38)";
      break; // 108+ hours
  }

  console.log(`üîç [PROJECT-AGE-COLOR] Project ${project.id} final color:`, projectAgeColor);
} else {
  console.log(`üîç [PROJECT-AGE-COLOR] Project ${project.id} is under 48 hours, using default gray`);
}

// Convert to days, hours, and minutes
const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));

// Format the duration
const createdAt = `${days}d ${hours}h ${minutes}m`;
---

<div
  class={`relative mt-2 min-h-[200px] rounded-lg bg-white shadow-sm dark:bg-gray-800`}
  data-project-status={statusSlugOrId}
  data-project-id={project.id}
  style={`border: 4px solid ${projectAgeColor};`}
>
  <!-- Featured Image Display -->

  {
    (() => {
      const tabUrl = `/project/${project.id}?status=${currentStatusTab}`;
      // For clients, make status label clickable if client_status_tab exists
      // if (currentRole === "Client" && currentStatusTab) {
      // Get status color from API data
      const statusColor = projectStatusesObject?.[project.status]?.status_color || "gray";
      // const statusColorClasses = `bg-${statusColor}-100 text-${statusColor}-800 dark:bg-${statusColor}-700 dark:text-${statusColor}-300`;

      return (
        <a
          href={tabUrl}
          class={`font-large absolute -right-4 -top-4 z-10 mb-4 cursor-pointer rounded-full px-2.5 py-0.5 text-sm transition-opacity hover:opacity-80`}
          data-refresh="status_name"
          data-project-id={project.id}
          title={`Go to ${currentStatusName} tab`}
          style={`background-color: ${statusColor};`}
        >
          <span class="text-black">{currentStatusName}</span>
        </a>
      );
    })()
  }
  <div
    class="flex h-32 items-center justify-center overflow-hidden rounded-t-lg bg-gray-100 dark:bg-gray-700"
  >
    <!-- <a href={`/project/${project.id}`} class="transition-opacity hover:opacity-80"> -->
    {
      project.featured_image_data ? (
        <img
          src={project.featured_image_data.public_url}
          alt={`Featured image for ${project.address}`}
          class="h-32 w-full rounded-lg rounded-b-none object-cover transition-transform duration-200 hover:scale-105"
          loading="lazy"
          referrerpolicy="strict-origin-when-cross-origin"
          crossorigin="anonymous"
          onerror="console.warn('Featured image failed to load:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';"
        />
      ) : (
        <div class="text-center text-gray-400 dark:text-gray-500">
          <BoxIcon name="image" class="mx-auto mb-2 h-8 w-8" />
          <p class="text-xs">No featured image</p>
        </div>
      )
    }
    <!-- </a> -->
  </div>

  <div class="p-3">
    <a href={`/project/${project.id}`} class="transition-opacity hover:opacity-80">
      <div class="flex min-w-full items-center gap-2">
        <h3
          class="max-w-xs truncate text-lg font-semibold text-gray-900 dark:text-white"
          data-searchable
        >
          {
            currentRole !== "Client" && (
              <span>
                {project?.company_name || "Unknown Author"}
                <span class="hidden text-gray-500 dark:text-gray-400 md:inline"> ‚Üí </span>
              </span>
            )
          }
          {project.address}
        </h3>
      </div>
      <div class="min-w-full flex-none md:flex-1">
        <p
          class="mb-2 mt-2 text-sm text-gray-600 dark:text-gray-300"
          data-project-description
          title={description}
        >
          {limitDescription(description)}
        </p>
      </div>
    </a>

    <div class="items-start justify-between gap-4 md:flex">
      <a
        href={`/project/${project.id}`}
        class="mb-4 cursor-pointer text-sm transition-opacity hover:opacity-80"
      >
        <span class="flex items-center gap-1">
          <BoxIcon name="area" />
          {project.sq_ft ? project.sq_ft.toLocaleString() : 0}ft¬≤
        </span>
        <span class="flex items-center gap-1">
          <BoxIcon name="building" />
          {project.new_construction ? "New" : "Existing"}
        </span>
      </a>

      <!-- <div class="justify-end text-xs">
        <div>
          <b>Project Age:</b>
          {createdAt}
        </div>
      </div> -->
    </div>

    <div
      class="flex flex-col gap-2 transition-opacity hover:opacity-80 md:flex-row md:items-center md:gap-4"
    >
      {
        currentRole !== "Client" && (
          <div class="flex items-center gap-1">
            <BoxIcon name="user" size="sm" />
            <span data-searchable>{project.assigned_to_name || "Unassigned"}</span>
          </div>
        )
      }

      <Tooltip content={createdAt} id="project-created-at">
        <BoxIcon name="time" size="lg" class="fill-current" />
      </Tooltip>

      <a
        href={`/project/${project.id}?status=discussion`}
        class="relative ml-auto cursor-pointer transition-opacity hover:opacity-80"
        title={`${project.comment_count || 0} comments - Go to discussions`}
      >
        <BoxIcon name="message-rounded" size="lg" class="fill-current" />
        <!-- {
          project.incomplete_discussions > 0 && ( -->
        <span
          class="absolute right-2.5 top-2.5 inline-flex h-5 w-7 min-w-[1.25rem] items-center justify-center rounded-full text-xs"
        >
          {project.incomplete_discussions > 99 ? "99+" : project.incomplete_discussions}/{
            project.comment_count > 99 ? "99+" : project.comment_count
          }
        </span>
        <!-- )
        } -->
      </a>
    </div>
  </div>
</div>
