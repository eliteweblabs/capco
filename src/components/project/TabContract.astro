---
import { readFileSync } from "fs";
import { join } from "path";
import { replacePlaceholders } from "../../lib/placeholder-utils";
import BoxIcon from "../common/BoxIcon.astro";
import DigitalSignature from "./DigitalSignature.astro";

interface Props {
  project: any;
  projectStatus?: number;
  projectStatusLabel?: string;
  invoiceId?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  globalInputClasses?: string;
  currentUser?: any;
  statusData?: any;
}

const {
  project,
  projectStatus = 0,
  projectStatusLabel,
  invoiceId,
  currentUser,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  globalInputClasses,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;

// Load and process contract template
let contractHtml = "";
try {
  const templatePath = join(process.cwd(), "src/templates/pdf/contract.html");
  const templateContent = readFileSync(templatePath, "utf-8");

  // Replace placeholders using project data
  contractHtml = replacePlaceholders(templateContent, { project: project });

  // Remove the [SIGNATURE COMPONENT] placeholder for web view
  contractHtml = contractHtml.replace(/\[SIGNATURE COMPONENT\]/g, "");

  // Extract just the body content (remove <!DOCTYPE>, <html>, <head>, etc)
  const bodyMatch = contractHtml.match(/<body>([\s\S]*)<\/body>/i);
  if (bodyMatch) {
    contractHtml = bodyMatch[1];
  }
} catch (error) {
  console.error("‚ùå [TAB-CONTRACT] Failed to load contract template:", error);
  contractHtml = "<p class='text-red-500'>Failed to load contract template</p>";
}

// Debug logging
// console.log("üîç [TAB-CONTRACT] Props received:", {
//   currentRole,
//   projectStatus,
//   projectStatusType: typeof projectStatus,
//   projectStatusLabel,
//   projectId,
// });

// console.log("üîç [TAB-CONTRACT] Debug values:", {
//   projectId,
//   projectStatus,
//   projectStatusLabel,
//   invoiceId,
//   currentRole,
// });

function getStatusAlert() {
  if (currentRole === "Client") {
    return Number(projectStatus) < 45
      ? "Contract will be available after proposal is accepted."
      : Number(projectStatus) === 45
        ? "Please sign the contract to begin work."
        : Number(projectStatus) > 45
          ? "Contract has been signed."
          : null;
  } else {
    return Number(projectStatus) < 45
      ? "Client has not been sent the contract, they need to accept the proposal first."
      : Number(projectStatus) === 45
        ? "Contract sent, not signed yet."
        : Number(projectStatus) > 45
          ? "Contract has been signed and is ready to begin work."
          : null;
  }
}

const statusAlert = getStatusAlert();
---

<div id="content-contract" class="tab-content hidden">
  <div
    class="mb-4 rounded-lg border border-blue-200 bg-blue-50 p-4 dark:border-blue-800 dark:bg-blue-900/20"
  >
    <div class="flex items-start">
      <BoxIcon name="info-circle" class="mr-2 mt-0.5 text-lg text-blue-600 dark:text-blue-400" />
      <div class="text-blue-800 dark:text-blue-400">
        <h3 class="text-lg">{statusAlert}</h3>
      </div>
    </div>
  </div>

  {
    ((Number(projectStatus) > 44 && currentRole === "Client") || currentRole === "Admin") && (
      <div
        class="contract-preview mb-6 rounded-lg border border-gray-200 bg-white p-6 text-gray-900 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100"
        set:html={contractHtml}
      />
    )
  }

  {
    projectStatus >= 45 && currentRole === "Client" && projectStatus < 50 && (
      <DigitalSignature
        id="proposal-signature"
        required={true}
        width={2400}
        height={580}
        placeholder="Proposal Signature"
        project={project}
        projectStatus={projectStatus}
        projectStatusLabel={projectStatusLabel}
        statusData={statusData}
        currentUser={currentUser}
      />
    )
  }
</div>
