---
import { supabase } from "../../lib/supabase";
import LucideIcon from "../common/LucideIcon.astro";
import Button from "../common/Button.astro";

interface Props {
  invoiceId: number | null;
  amount: number;
  currency?: string;
  paymentType?: "deposit" | "balance";
  project: any;
  currentUser: any;
  statusData?: any;
}

const {
  invoiceId,
  amount,
  currency = "usd",
  paymentType = "deposit",
  project,
  currentUser,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const projectId = project?.id;

let payments: any[] = [];
let totalPaid = 0;
let invoiceData: any = null;

// Fetch payments and invoice data
if (invoiceId && projectId && supabase) {
  // Set up session from cookies
  const accessToken = Astro.cookies.get("sb-access-token")?.value;
  const refreshToken = Astro.cookies.get("sb-refresh-token")?.value;

  if (accessToken && refreshToken) {
    await supabase.auth.setSession({
      access_token: accessToken,
      refresh_token: refreshToken,
    });
  }

  try {
    // Fetch invoice data
    const { data: invoice, error: invoiceError } = await supabase
      .from("invoices")
      .select("id, totalAmount, status, subject, paymentTerms")
      .eq("id", invoiceId)
      .single();

    if (invoiceError) {
      console.error("🔍 [PAYMENTS-MANAGER] ❌ Error fetching invoice:", invoiceError);
    } else {
      invoiceData = invoice;
    }

    // Fetch payments for this invoice
    const { data: paymentsData, error: paymentsError } = await supabase
      .from("payments")
      .select("id, paymentDate, amount, paymentMethod, paymentReference, notes, createdAt")
      .eq("invoiceId", invoiceId)
      .order("paymentDate", { ascending: false });

    if (paymentsError) {
      console.error("🔍 [PAYMENTS-MANAGER] ❌ Error fetching payments:", paymentsError);
    } else {
      payments = paymentsData || [];
      totalPaid = payments.reduce((sum, payment) => sum + parseFloat(payment.amount || 0), 0);
    }
  } catch (error) {
    console.error("🔍 [PAYMENTS-MANAGER] ❌ Exception:", error);
  }
}

// Calculate remaining balance
const totalAmount = invoiceData?.totalAmount || 0;
const remainingBalance = totalAmount - totalPaid;

// Format currency
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(amount);
};

// Format date
const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
};

// Get payment method icon
const getPaymentMethodIcon = (method: string) => {
  switch (method?.toLowerCase()) {
    case "card":
    case "credit_card":
      return "credit-card";
    case "bank_transfer":
    case "ach":
      return "bank";
    case "check":
      return "file-text";
    case "cash":
      return "money";
    case "stripe":
      return "credit-card";
    default:
      return "credit-card";
  }
};

// Get payment status color
const getPaymentStatusColor = (amount: number, totalAmount: number) => {
  if (amount >= totalAmount) return "text-green-600 dark:text-green-400";
  if (amount > 0) return "text-yellow-600 dark:text-yellow-400";
  return "text-gray-600 dark:text-gray-400";
};
---

<div class="payments-manager">
  <!-- Header -->
  <div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Payment History</h3>
    {
      invoiceData && (
        <p class="text-sm text-gray-600 dark:text-gray-400">
          Invoice: {invoiceData.subject || `#${invoiceData.id}`}
        </p>
      )
    }
  </div>

  <!-- Payment Summary -->
  <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <div class="text-center">
        <div class="text-2xl font-bold text-gray-900 dark:text-white">
          {formatCurrency(totalAmount)}
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400">Total Amount</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-green-600 dark:text-green-400">
          {formatCurrency(totalPaid)}
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400">Amount Paid</div>
      </div>
      <div class="text-center">
        <div class={`text-2xl font-bold ${getPaymentStatusColor(totalPaid, totalAmount)}`}>
          {formatCurrency(remainingBalance)}
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400">Remaining Balance</div>
      </div>
    </div>
  </div>

  <!-- Payments List -->
  {
    payments.length > 0 ? (
      <div class="space-y-4">
        <h4 class="text-md font-medium text-gray-900 dark:text-white">
          Payment Records ({payments.length})
        </h4>

        <div class="space-y-3">
          {payments.map((payment) => (
            <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg p-4 hover:shadow-md transition-shadow">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                  <div class="flex-shrink-0">
                    <LucideIcon
                      name={getPaymentMethodIcon(payment.paymentMethod)}
                      variant="secondary"
                      size="sm"
                    />
                  </div>
                  <div>
                    <div class="font-medium text-gray-900 dark:text-white">
                      {formatCurrency(parseFloat(payment.amount))}
                    </div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">
                      {payment.paymentMethod} • {formatDate(payment.paymentDate)}
                    </div>
                    {payment.paymentReference && (
                      <div class="text-xs text-gray-500 dark:text-gray-500">
                        Ref: {payment.paymentReference}
                      </div>
                    )}
                  </div>
                </div>

                <div class="text-right">
                  <div class="text-sm font-medium text-green-600 dark:text-green-400">Paid</div>
                  <div class="text-xs text-gray-500 dark:text-gray-500">
                    {formatDate(payment.createdAt)}
                  </div>
                </div>
              </div>

              {payment.notes && (
                <div class="mt-2 text-sm text-gray-600 dark:text-gray-400">
                  <strong>Notes:</strong> {payment.notes}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    ) : (
      <div class="text-center py-8">
        <LucideIcon name="credit-card" class="mx-auto mb-4 opacity-50" />
        <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No Payments Yet</h4>
        <p class="text-gray-600 dark:text-gray-400">
          Payment records will appear here once the client makes a payment.
        </p>
      </div>
    )
  }

  <!-- Test Data Button (for development) -->
  {
    currentRole === "Admin" && (
      <div class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-600">
        <Button variant="secondary" size="sm" onclick="addTestPayment()" class="w-full">
          <LucideIcon name="plus" class="mr-2" />
          Add Test Payment
        </Button>
      </div>
    )
  }
</div>

<script define:vars={{ invoiceId }}>
  // Add test payment functionality (for development/testing)
  async function addTestPayment() {
    const currentInvoiceId = invoiceId;
    if (!currentInvoiceId) {
      alert("No invoice ID available");
      return;
    }

    const testPayment = {
      invoiceId: currentInvoiceId,
      amount: Math.floor(Math.random() * 1000) + 100, // Random amount between $100-$1100
      paymentMethod: ["card", "bank_transfer", "check"][Math.floor(Math.random() * 3)],
      paymentReference: `TEST-${Date.now()}`,
      notes: "Test payment for development",
      paymentDate: new Date().toISOString().split("T")[0],
    };

    try {
      const response = await fetch("/api/payments/upsert", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(testPayment),
      });

      if (response.ok) {
        alert("Test payment added successfully!");
        location.reload();
      } else {
        const error = await response.json();
        alert(`Error: ${error.error || "Failed to add test payment"}`);
      }
    } catch (error) {
      console.error("Error adding test payment:", error);
      alert("Error adding test payment");
    }
  }

  // Make function globally available
  window.addTestPayment = addTestPayment;
</script>
