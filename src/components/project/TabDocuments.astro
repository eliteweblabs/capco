---
import BoxIcon from "../common/BoxIcon.astro";

interface Props {
  authorProfile?: any;
  currentRole?: string;
  project: any;
  projectId: string;
  projectStatus?: number;
  projectStatusLabel?: string;

  fileType?: string;
}

const {
  project,
  currentRole,
  projectId,
  authorProfile,
  projectStatus,
  fileType = "media",
  projectStatusLabel,
} = Astro.props;
---

<div
  id="content-documents"
  class="tab-content hidden rounded-lg bg-white p-6 shadow-md dark:bg-gray-800 text-gray-800 dark:text-gray-200"
>
  {
    projectStatus === 10 ||
    projectStatus === 20 ||
    projectStatus === 30 ||
    projectStatus === 40 ||
    projectStatus === 50 ? (
      <>
        <div
          id="upload-dropzone"
          class="hidden cursor-pointer touch-manipulation rounded-lg border-2 border-dashed border-gray-300 p-8 text-center transition-colors hover:border-blue-400 dark:border-gray-600 dark:hover:border-blue-500 md:block"
          style="min-height: 120px; -webkit-tap-highlight-color: transparent;"
        >
          <div class="space-y-4">
            <BoxIcon name="cloud-upload" class="mx-auto bx-lg" />
            <div>
              <p class="font-medium text-gray-600 dark:text-gray-300">
                Drop files here or click to browse
              </p>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Upload supports PDF, images, CAD files, and documents (max 10MB each)
              </p>
            </div>
            <button
              id="browse-files-btn"
              class="hidden md:inline-flex touch-manipulation items-center rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-blue-700"
              style="-webkit-tap-highlight-color: transparent; min-height: 44px;"
            >
              <BoxIcon name="folder-open" class="mr-2 h-4 w-4" />
              Browse Files
            </button>
          </div>
        </div>

        <div class="hidden">
          <button
            id="mobile-browse-files-btn"
            class="w-full touch-manipulation items-center rounded-lg bg-blue-600 px-4 py-3 text-sm font-medium text-white transition-colors hover:bg-blue-700"
            style="-webkit-tap-highlight-color: transparent; min-height: 44px;"
          >
            <BoxIcon name="folder-open" class="mr-2 h-4 w-4" />
            Browse Files
          </button>
        </div>
      </>
    ) : null
  }

  <!-- Hidden file input -->
  <input
    type="file"
    id="file-input"
    multiple
    accept=".pdf,.png,.jpg,.jpeg,.gif,.webp,.dwg,.doc,.docx,.xls,.xlsx,.txt"
    class="hidden"
    capture="environment"
  />

  <!-- Upload Progress -->
  <div id="upload-progress" class="mt-4 hidden">
    <div class="h-2 rounded-full bg-gray-200 dark:bg-gray-700">
      <div
        id="progress-bar"
        class="h-2 rounded-full bg-blue-600 transition-all duration-300"
        style="width: 0%"
      >
      </div>
    </div>
    <p id="upload-status" class="mt-2 max-w-full truncate text-sm text-gray-600 dark:text-gray-400">
      Uploading...
    </p>
  </div>

  <!-- File List -->
  <div id="uploaded-files" class="mt-6 hidden">
    <div class="mb-3 hidden md:flex items-center justify-between">
      <h4 class="text-md flex items-center font-medium text-gray-900 dark:text-white">
        <BoxIcon name="file" class="mr-2" />
        Uploaded Files
      </h4>
      <div class="flex items-center space-x-3">
        <button
          id="download-all-btn"
          class="flex items-center text-sm font-medium text-green-600 hover:text-green-800"
        >
          <BoxIcon name="download" class="mr-1 h-4 w-4" />
          Download All
        </button>
        <button
          id="refresh-files-btn"
          class="flex items-center text-sm font-medium text-blue-600 hover:text-blue-800"
        >
          <BoxIcon name="refresh" class="mr-1 h-4 w-4" />
          Refresh
        </button>
      </div>
    </div>
    <div id="file-list" class="space-y-2"></div>
    <div id="no-files-message" class="hidden">
      <div class="text-center py-8">
        <BoxIcon name="file" class="bx-lg mx-auto h-12 w-12 text-gray-400 mb-4" />
        <p class="text-gray-500 dark:text-gray-400 text-sm">No files have been uploaded yet.</p>
        <p class="text-gray-400 dark:text-gray-500 text-xs mt-1">
          Upload your project documents to get started.
        </p>
      </div>
    </div>
  </div>

  <!-- All Documents Uploaded Button (Clients Only) -->
  {
    projectStatus === 10 ? (
      <div class="mt-6 border-t border-gray-200 pt-6 dark:border-gray-700">
        <div class="text-center">
          <button
            id="all-documents-uploaded-btn"
            class="inline-flex items-center rounded-lg bg-green-600 px-6 py-3 text-sm font-medium text-white transition-colors hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
          >
            Finished Uploading Documents
            <BoxIcon name="check" class="ml-2 bx-sm" />
          </button>
        </div>
      </div>
    ) : null
  }
</div>

<script define:vars={{ projectId, fileType, authorProfile, currentRole, projectStatus }}>
  class PDFUpload {
    constructor() {
      this.projectId = projectId;
      this.fileType = fileType;
      this.projectStatus = projectStatus;
      this.currentRole = currentRole;
      this.isMobile = window.innerWidth <= 768;
      this.initialized = false;
      this.isFileDialogOpen = false; // Flag to prevent multiple file dialogs
      // console.log("📱 [PDF-UPLOAD] Mobile detection:", this.isMobile);
      this.status = projectStatus;
      this.uploadedFiles = [];
      this.init();
    }

    openFileDialog() {
      // Prevent multiple file dialogs from opening
      if (this.isFileDialogOpen) {
        // console.log("📁 [PDF-UPLOAD] File dialog already open, ignoring click");
        return;
      }

      this.isFileDialogOpen = true;
      // console.log("📁 [PDF-UPLOAD] Opening file dialog");

      // Use setTimeout to ensure the flag is set before opening the dialog
      setTimeout(() => {
        if (this.fileInput) {
          this.fileInput.click();
        } else {
          console.error("📁 [PDF-UPLOAD] File input not found");
          this.isFileDialogOpen = false;
        }
      }, 10);
    }

    init() {
      if (this.initialized) {
        // console.log("📱 [PDF-UPLOAD] Already initialized, skipping...");
        return;
      }

      // console.log(
      //   "📁 [PDF-UPLOAD] Initializing with projectId:",
      //   this.projectId,
      //   "status:",
      //   this.status
      // );
      this.setupElements();
      this.setupEventListeners();
      this.setupAccordionListeners();
      this.loadExistingFiles();
      this.handleStatusBasedVisibility();
      this.initialized = true;
      // console.log("📱 [PDF-UPLOAD] Initialization complete");
    }

    setupElements() {
      this.dropzone = document.getElementById("upload-dropzone");
      this.fileInput = document.getElementById("file-input");
      this.browseBtn = document.getElementById("browse-files-btn");
      this.mobileBrowseBtn = document.getElementById("mobile-browse-files-btn");
      this.progressContainer = document.getElementById("upload-progress");
      this.progressBar = document.getElementById("progress-bar");
      this.uploadStatus = document.getElementById("upload-status");
      this.filesContainer = document.getElementById("uploaded-files");
      this.fileList = document.getElementById("file-list");
      this.noFilesMessage = document.getElementById("no-files-message");
      this.refreshBtn = document.getElementById("refresh-files-btn");
      this.downloadAllBtn = document.getElementById("download-all-btn");
      this.extractedText = document.getElementById("extracted-text");
      this.allDocumentsUploadedBtn = document.getElementById("all-documents-uploaded-btn");
    }

    createMobileFileInput() {
      // Remove any existing mobile file input first
      const existingMobileInput = document.getElementById("mobile-file-input");
      if (existingMobileInput) {
        existingMobileInput.remove();
      }

      // Create a visible file input for mobile devices
      const mobileFileInput = document.createElement("input");
      mobileFileInput.id = "mobile-file-input";
      mobileFileInput.type = "file";
      mobileFileInput.multiple = true;
      mobileFileInput.accept = ".pdf,.png,.jpg,.jpeg,.gif,.webp,.dwg,.doc,.docx,.xls,.xlsx,.txt";
      mobileFileInput.className =
        "block w-full text-sm text-transparent file:mr-4 file:py-3 file:px-6 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-blue-600 file:text-white hover:file:bg-blue-700 file:transition-colors file:cursor-pointer";
      mobileFileInput.style.marginTop = "1rem";
      // Make the "No file chosen" text transparent
      mobileFileInput.style.color = "transparent";

      mobileFileInput.addEventListener("change", (e) => {
        console.log("📱 [PDF-UPLOAD] Mobile file input change event triggered");
        this.handleFiles(e.target.files);
      });

      // Insert after the dropzone
      this.dropzone.parentNode.insertBefore(mobileFileInput, this.dropzone.nextSibling);
    }

    setupEventListeners() {
      // Check if event listeners are already attached
      if (this.fileInput._hasEventListeners) {
        console.log("📱 [PDF-UPLOAD] Event listeners already attached, skipping...");
        return;
      }

      // File input change
      this.fileInput.addEventListener("change", (e) => {
        // console.log("📁 [PDF-UPLOAD] File input change event triggered:", e.target.files);
        this.isFileDialogOpen = false; // Reset flag when files are selected
        this.handleFiles(e.target.files);
      });

      // File input cancel (when user cancels the file dialog)
      this.fileInput.addEventListener("cancel", () => {
        // console.log("📁 [PDF-UPLOAD] File dialog cancelled");
        this.isFileDialogOpen = false;
      });

      // Mobile-specific file input handling
      if (this.isMobile) {
        // Add additional mobile-specific event listeners
        this.fileInput.addEventListener("input", (e) => {
          // console.log("📱 [PDF-UPLOAD] File input input event triggered (mobile)");
          this.handleFiles(e.target.files);
        });

        // Create a visible file input for mobile as fallback (only if it doesn't exist)
        if (!document.getElementById("mobile-file-input")) {
          this.createMobileFileInput();
        }
      }

      // Mark that event listeners have been attached
      this.fileInput._hasEventListeners = true;

      // Add cleanup method to window for debugging
      window.cleanupPDFUpload = () => {
        this.initialized = false;
        this.fileInput._hasEventListeners = false;
        const mobileInput = document.getElementById("mobile-file-input");
        if (mobileInput) {
          mobileInput.remove();
        }
        console.log("📱 [PDF-UPLOAD] Cleanup completed");
      };

      // Browse button click (only if it exists)
      if (this.browseBtn) {
        this.browseBtn.addEventListener("click", (e) => {
          e.preventDefault();
          this.openFileDialog();
        });

        // Mobile touch events for browse button
        this.browseBtn.addEventListener("touchstart", (e) => {
          e.preventDefault();
          this.openFileDialog();
        });
      }

      // Mobile browse button click (only if it exists)
      if (this.mobileBrowseBtn) {
        this.mobileBrowseBtn.addEventListener("click", (e) => {
          e.preventDefault();
          this.openFileDialog();
        });

        // Mobile touch events for mobile browse button
        this.mobileBrowseBtn.addEventListener("touchstart", (e) => {
          e.preventDefault();
          this.openFileDialog();
        });
      }

      // Dropzone events (only if it exists)
      if (this.dropzone) {
        this.dropzone.addEventListener("click", (e) => {
          e.preventDefault();
          this.openFileDialog();
        });

        // Mobile touch events for dropzone
        this.dropzone.addEventListener("touchstart", (e) => {
          e.preventDefault();
          this.openFileDialog();
        });
      }

      if (this.dropzone) {
        this.dropzone.addEventListener("dragover", (e) => {
          e.preventDefault();
          this.dropzone.classList.add("border-blue-400", "bg-blue-50", "dark:bg-blue-900/20");
        });

        this.dropzone.addEventListener("dragleave", (e) => {
          e.preventDefault();
          this.dropzone.classList.remove("border-blue-400", "bg-blue-50", "dark:bg-blue-900/20");
        });

        this.dropzone.addEventListener("drop", (e) => {
          e.preventDefault();
          this.dropzone.classList.remove("border-blue-400", "bg-blue-50", "dark:bg-blue-900/20");
          this.handleFiles(e.dataTransfer.files);
        });
      }

      // Refresh button click (only if it exists)
      if (this.refreshBtn) {
        this.refreshBtn.addEventListener("click", () => {
          this.refreshFileList();
        });
      }

      // Download all button click (only if it exists)
      if (this.downloadAllBtn) {
        this.downloadAllBtn.addEventListener("click", () => {
          this.downloadAllFiles();
        });
      }

      // All documents uploaded button click
      if (this.allDocumentsUploadedBtn) {
        this.allDocumentsUploadedBtn.addEventListener("click", () => {
          this.markAllDocumentsUploaded();
        });
      }

      // Event delegation for download buttons and view links
      this.fileList.addEventListener("click", (e) => {
        if (e.target.closest(".download-btn")) {
          e.stopPropagation(); // Prevent accordion from opening/closing
          const downloadBtn = e.target.closest(".download-btn");
          const filePath = downloadBtn.getAttribute("data-file-path");
          const fileName = downloadBtn.getAttribute("data-file-name");
          if (filePath && fileName) {
            this.downloadFile(filePath, fileName);
          }
        }

        // Also prevent accordion triggering for view links
        if (e.target.closest("a[href]")) {
          e.stopPropagation(); // Prevent accordion from opening/closing
        }
      });

      // Event delegation for featured image toggles
      this.fileList.addEventListener("change", (e) => {
        if (e.target.classList.contains("featured-image-toggle")) {
          e.stopPropagation(); // Prevent accordion from opening/closing
          const toggle = e.target;
          const fileId = toggle.getAttribute("data-file-id");
          const isChecked = toggle.checked;

          if (fileId) {
            this.updateFeaturedImage(fileId, isChecked);
          }
        }
      });
    }

    setupAccordionListeners() {
      // Event delegation for accordion functionality
      this.fileList.addEventListener("click", (e) => {
        // Handle accordion header clicks - but exclude download buttons and view links
        if (
          e.target.closest(".accordion-header") &&
          !e.target.closest(".download-btn") &&
          !e.target.closest("a[href]")
        ) {
          const header = e.target.closest(".accordion-header");
          const fileItem = header.closest(".file-item");
          const content = fileItem.querySelector(".accordion-content");
          const chevron = header.querySelector("svg");

          // Toggle accordion
          if (content.classList.contains("hidden")) {
            content.classList.remove("hidden");
            chevron.style.transform = "rotate(0deg)";
            fileItem.classList.add("accordion-open");
          } else {
            content.classList.add("hidden");
            chevron.style.transform = "rotate(90deg)";
            fileItem.classList.remove("accordion-open");
          }
        }

        // Handle save metadata button clicks
        if (e.target.closest(".save-metadata-btn")) {
          const saveBtn = e.target.closest(".save-metadata-btn");
          const fileItem = saveBtn.closest(".file-item");
          const fileId = saveBtn.getAttribute("data-file-id");
          const titleInput = fileItem.querySelector(".file-title-input");
          const commentsInput = fileItem.querySelector(".file-comments-input");

          this.saveFileMetadata(fileId, titleInput.value, commentsInput.value, fileItem);
        }
      });
    }

    async handleFiles(files) {
      // console.log("📁 [PDF-UPLOAD] handleFiles called with:", files);
      // console.log("📱 [PDF-UPLOAD] Mobile device:", this.isMobile);
      // console.log("📱 [PDF-UPLOAD] User agent:", navigator.userAgent);

      if (!files || files.length === 0) {
        console.log("📁 [PDF-UPLOAD] No files provided");
        return;
      }

      const fileArray = Array.from(files);
      // console.log(
      //   "📁 [PDF-UPLOAD] File array:",
      //   fileArray.map((f) => ({ name: f.name, size: f.size, type: f.type }))
      // );
      this.showProgress();

      for (let i = 0; i < fileArray.length; i++) {
        const file = fileArray[i];
        try {
          await this.uploadFile(file, i + 1, fileArray.length);
        } catch (error) {
          console.error(`📁 [PDF-UPLOAD] Error uploading ${file.name}:`, error);
          this.showError(`Failed to upload ${file.name}: ${error.message}`);
        }
      }

      this.hideProgress();
    }

    async uploadFile(file, index, total) {
      console.log("📁 [PDF-UPLOAD] uploadFile called:", {
        file: file.name,
        index,
        total,
        projectId: this.projectId,
      });

      const formData = new FormData();
      formData.append("file", file);
      formData.append("projectId", this.projectId);
      formData.append("fileType", this.fileType);

      // Add metadata if available
      const titleInput = document.getElementById("file-title");
      const commentsInput = document.getElementById("file-comments");

      if (titleInput && titleInput.value.trim()) {
        formData.append("fileTitle", titleInput.value.trim());
      }
      if (commentsInput && commentsInput.value.trim()) {
        formData.append("fileComments", commentsInput.value.trim());
      }

      this.updateProgress((index / total) * 100, `Uploading ${file.name}...`);

      console.log("📁 [PDF-UPLOAD] Sending upload request to /api/upload");
      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      console.log("📁 [PDF-UPLOAD] Upload response status:", response.status);

      if (!response.ok) {
        const error = await response.json();
        console.error("📁 [PDF-UPLOAD] Upload failed:", error);
        throw new Error(error.error || "Upload failed");
      }

      const result = await response.json();
      console.log("📁 [PDF-UPLOAD] Upload successful:", result);
      const uploadedFile = result.files[0];

      // Don't add to list immediately - refreshFileList() will show all files
      this.uploadedFiles.push(uploadedFile);

      // Refresh the file list to show all files
      this.refreshFileList();
    }

    addFileToList(file) {
      this.filesContainer.classList.remove("hidden");

      const fileItem = document.createElement("div");
      fileItem.className =
        "file-item bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 accordion-open";

      // Use file_name from database or fallback to name
      const fileName = file.file_name || file.name;
      const fileTitle = file.title || fileName;
      const fileSize = file.file_size || file.size;
      const fileType = file.file_type || file.type;
      const uploadedAt = file.uploaded_at ? new Date(file.uploaded_at).toLocaleDateString() : "";
      const fileComments = file.comments;

      fileItem.innerHTML = `
        <!-- Accordion Header -->
        <div class="accordion-header flex items-center justify-between p-3 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors" data-file-id="${file.id}">
          <div class="flex items-center space-x-3 flex-1 min-w-0">
           
            <div class="flex-shrink-0 hidden md:block">
              <svg class="h-5 w-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20" style="transform: rotate(90deg);">
                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
              </svg>
            </div>
            <div class="flex-shrink-0 hidden md:block">
              ${this.getFileIcon(fileType)}
            </div>
             <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900 dark:text-white truncate" title="${fileTitle}">
                ${fileTitle}
              </p>
              <p class="text-sm text-gray-500 dark:text-gray-400">
                ${this.formatFileSize(fileSize)} • ${fileType}${uploadedAt ? " • " + uploadedAt : ""}
              </p>
            </div>
          </div>
          <div class="flex flex-col md:flex-row items-center space-y-1 flex-shrink-0 ml-3">
            ${
              file.public_url
                ? `
              <a href="${file.public_url}" target="_blank" class="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors" title="View file">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                </svg>
              </a>
              <button class="download-btn p-2 text-green-600 hover:text-green-800 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-colors" data-file-path="${file.file_path}" data-file-name="${fileName}" title="Download file">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                </svg>
              </button>
            `
                : `
              <button class="p-2 text-gray-400 cursor-not-allowed rounded-lg" disabled title="View not available">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                </svg>
              </button>
              <button class="p-2 text-gray-400 cursor-not-allowed rounded-lg" disabled title="Download not available">
                <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                </svg>
              </button>
            `
            }
            <button class="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors" onclick="window.pdfUploadDocuments.deleteFile('${file.id}', this.closest('.file-item'))" title="Delete file">
              <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Accordion Content -->
        <div class="accordion-content border-t border-gray-200 dark:border-gray-600 ${fileTitle !== fileName ? "hidden" : ""}">
          <div class="p-4 space-y-4">
            <!-- File Metadata Form -->
            <div class="space-y-3">
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Title
                </label>
                <input
                  type="text"
                  class="file-title-input mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                  placeholder="Enter a descriptive title for this file"
                  value="${fileTitle !== fileName ? fileTitle : ""}"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Comments
                </label>
                <textarea
                  class="file-comments-input mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 text-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:border-blue-400"
                  rows="3"
                  placeholder="Add any notes or comments about this file"
                >${fileComments || ""}</textarea>
              </div>
              ${
                currentRole === "Admin" || currentRole === "Staff"
                  ? `
              <div>
                <label class="flex items-center gap-3 cursor-pointer">
                  <div class="relative">
                    <input 
                      type="checkbox" 
                      class="featured-image-toggle sr-only peer" 
                      data-file-id="${file.id}"
                      ${file.is_featured ? "checked" : ""}
                    />
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600" />
                  </div>
                  <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
                    <BoxIcon name="star" class="mr-1" />
                    Featured Image
                  </span>
                </label>
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  Set this image as the featured image for the project
                </p>
              </div>
              `
                  : ""
              }
              <div class="flex justify-end space-x-2">
                <button class="save-metadata-btn inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors" data-file-id="${file.id}">
                  <svg class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        </div>
      `;

      this.fileList.appendChild(fileItem);
    }

    async saveFileMetadata(fileId, title, comments, fileItem) {
      try {
        const response = await fetch("/api/update-file-metadata", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            fileId: fileId,
            title: title.trim(),
            comments: comments.trim(),
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to save metadata");
        }

        const result = await response.json();

        if (result.success) {
          // Update the display title in the accordion header
          const headerTitle = fileItem.querySelector(".accordion-header p");
          if (headerTitle) {
            headerTitle.textContent = title.trim() || "Untitled";
          }

          // Show success feedback
          const saveBtn = fileItem.querySelector(".save-metadata-btn");
          const originalText = saveBtn.innerHTML;
          saveBtn.innerHTML = `
            <svg class="h-4 w-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
            Saved!
          `;
          saveBtn.classList.remove("bg-blue-600", "hover:bg-blue-700");
          saveBtn.classList.add("bg-green-600", "hover:bg-green-700");

          // Reset button after 2 seconds and close accordion
          setTimeout(() => {
            saveBtn.innerHTML = originalText;
            saveBtn.classList.remove("bg-green-600", "hover:bg-green-700");
            saveBtn.classList.add("bg-blue-600", "hover:bg-blue-700");

            // Close the accordion
            const accordionContent = fileItem.querySelector(".accordion-content");
            const chevron = fileItem.querySelector(".accordion-header svg");
            if (accordionContent && chevron) {
              accordionContent.classList.add("hidden");
              chevron.style.transform = "rotate(0deg)";
              fileItem.classList.remove("accordion-open");
            }
          }, 2000);
        }
      } catch (error) {
        console.error("Error saving file metadata:", error);
        this.showError(`Failed to save metadata: ${error.message}`);
      }
    }

    async updateFeaturedImage(fileId, isFeatured) {
      try {
        console.log("⭐ [FEATURED-IMAGE] Updating featured image:", { fileId, isFeatured });

        const response = await fetch("/api/update-featured-image", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            projectId: this.projectId,
            fileId: fileId,
            isFeatured: isFeatured,
          }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to update featured image");
        }

        const result = await response.json();

        if (result.success) {
          console.log("⭐ [FEATURED-IMAGE] Successfully updated featured image");

          // Update all other featured image toggles to be unchecked
          if (isFeatured) {
            const allToggles = document.querySelectorAll(".featured-image-toggle");
            allToggles.forEach((toggle) => {
              if (toggle.getAttribute("data-file-id") !== fileId) {
                toggle.checked = false;
              }
            });
          }

          // Show success feedback
          this.showSuccess(`Featured image ${isFeatured ? "set" : "removed"} successfully`);
        }
      } catch (error) {
        console.error("⭐ [FEATURED-IMAGE] Error updating featured image:", error);
        this.showError(`Failed to update featured image: ${error.message}`);

        // Revert the toggle state
        const toggle = document.querySelector(`.featured-image-toggle[data-file-id="${fileId}"]`);
        if (toggle) {
          toggle.checked = !isFeatured;
        }
      }
    }

    async loadExistingFiles() {
      await this.refreshFileList();
    }

    async refreshFileList() {
      // Clear existing file list
      this.fileList.innerHTML = "";

      try {
        console.log("📁 [PDF-UPLOAD] Fetching files for project:", this.projectId);
        const requestBody = { projectId: this.projectId };
        console.log("📁 [PDF-UPLOAD] Request body:", requestBody);

        const response = await fetch("/api/get-project-files", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(requestBody),
        });

        console.log("📁 [PDF-UPLOAD] API response status:", response.status);

        if (response.ok) {
          const result = await response.json();
          console.log("📁 [PDF-UPLOAD] Files result:", result);
          console.log("📁 [PDF-UPLOAD] Files count:", result.files?.length || 0);

          if (result.files && result.files.length > 0) {
            result.files.forEach((file) => this.addFileToList(file));
            this.filesContainer.classList.remove("hidden");
            this.noFilesMessage.classList.add("hidden");
            console.log("📁 [PDF-UPLOAD] Showing file list, hiding no-files message");
          } else {
            this.filesContainer.classList.remove("hidden");
            this.noFilesMessage.classList.remove("hidden");
            console.log("📁 [PDF-UPLOAD] Showing no-files message, hiding file list");
          }
        } else {
          // Handle error responses
          const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
          console.error("📁 [PDF-UPLOAD] API error:", {
            status: response.status,
            statusText: response.statusText,
            error: errorData,
            projectId: this.projectId,
          });

          if (response.status === 403) {
            console.error("📁 [PDF-UPLOAD] Access denied - check user permissions");
          }
        }
      } catch (error) {
        console.error("Error loading existing files:", error);
      }
    }

    async downloadFile(filePath, fileName) {
      try {
        const response = await fetch("/api/download-file", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ filePath, fileName, projectId: this.projectId }),
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Download failed");
        }

        // Create blob from response and download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement("a");
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
      } catch (error) {
        console.error("Error downloading file:", error);
        this.showError(`Failed to download ${fileName}: ${error.message}`);
      }
    }

    async downloadAllFiles() {
      try {
        const response = await fetch("/api/get-project-files", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ projectId: this.projectId }),
        });

        if (response.ok) {
          const result = await response.json();
          if (result.files && result.files.length > 0) {
            // Download each file with a slight delay to avoid browser blocking
            for (let i = 0; i < result.files.length; i++) {
              const file = result.files[i];
              if (file.file_path) {
                setTimeout(() => {
                  this.downloadFile(file.file_path, file.file_name || file.name || `file-${i + 1}`);
                }, i * 500); // 500ms delay between downloads
              }
            }
          } else {
            this.showError("No files available to download");
          }
        }
      } catch (error) {
        console.error("Error downloading files:", error);
        this.showError("Failed to download files");
      }
    }

    showProgress() {
      this.progressContainer.classList.remove("hidden");
    }

    hideProgress() {
      setTimeout(() => {
        this.progressContainer.classList.add("hidden");
        this.progressBar.style.width = "0%";
      }, 1000);
    }

    updateProgress(percent, status) {
      this.progressBar.style.width = `${percent}%`;

      // Truncate long filenames to prevent screen jumping on mobile
      let displayStatus = status;
      if (status.includes("Uploading") && status.length > 50) {
        // Extract filename from "Uploading filename.ext..."
        const match = status.match(/Uploading (.+?)\.\.\./);
        if (match) {
          const filename = match[1];
          const extension = filename.split(".").pop();
          const nameWithoutExt = filename.substring(0, filename.lastIndexOf("."));

          // Truncate to 30 characters + extension
          if (nameWithoutExt.length > 30) {
            const truncatedName = nameWithoutExt.substring(0, 30) + "...";
            displayStatus = `Uploading ${truncatedName}.${extension}...`;
          }
        }
      }

      this.uploadStatus.textContent = displayStatus;

      // Add title attribute for full filename on hover
      if (status !== displayStatus) {
        this.uploadStatus.title = status;
      } else {
        this.uploadStatus.title = "";
      }
    }

    showError(message) {
      // Use centralized notification system
      if (typeof window !== "undefined" && window.showModal) {
        window.showModal("error", "Upload Error", message);
      } else {
        console.error("❌ Error:", message);
      }
    }

    showSuccess(message) {
      console.log("🔔 [PDF-UPLOAD] showModal called with:", message);
      console.log(
        "🔔 [PDF-UPLOAD] window.showModal available:",
        typeof window !== "undefined" && window.showModal
      );

      // Use centralized notification system
      if (typeof window !== "undefined" && window.showModal) {
        console.log("🔔 [PDF-UPLOAD] Calling window.showModal");
        window.showModal("success", "Success", message, 5000);
      } else {
        console.log("✅ Success:", message);
      }
    }

    formatFileSize(bytes) {
      if (bytes === 0) return "0 Bytes";
      const k = 1024;
      const sizes = ["Bytes", "KB", "MB", "GB"];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
    }

    handleStatusBasedVisibility() {
      console.log(
        "📁 [PDF-UPLOAD] Handling status-based visibility. Status:",
        this.status,
        "Role:",
        currentRole
      );

      // Hide "All Documents Uploaded" button for clients if status is > 10
      if (this.allDocumentsUploadedBtn && currentRole === "Client" && this.status > 10) {
        console.log("📁 [PDF-UPLOAD] Hiding 'All Documents Uploaded' button - status > 10");
        this.allDocumentsUploadedBtn.style.display = "none";
      }

      // You can add more status-based visibility logic here
      // For example:
      // - Hide upload area if status is completed
      // - Show different messages based on status
      // - Disable certain features based on project stage
    }

    async markAllDocumentsUploaded() {
      try {
        // Disable button and show loading state
        this.allDocumentsUploadedBtn.disabled = true;
        this.allDocumentsUploadedBtn.innerHTML = `
          <svg class="animate-spin mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Updating Status...
        `;

        // Call the update-status API to change status
        console.log("🔔 [PDF-UPLOAD] Debug projectId:", {
          projectIdProp: projectId,
          thisProjectId: this.projectId,
          typeof: typeof this.projectId,
          stringified: JSON.stringify(this.projectId),
        });

        console.log("🔔 [PDF-UPLOAD] Calling /api/update-status with:", {
          projectId: this.projectId,
          status: 20,
          currentUserId: this.currentUser?.id,
          oldStatus: this.projectStatus,
        });

        const response = await fetch("/api/update-status", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          credentials: "include", // Include cookies for authentication
          body: JSON.stringify({
            projectId: this.projectId,
            status: 20, // Status 20 - All Documents Uploaded
            currentUserId: this.currentUser?.id, // Add current user ID for logging
            oldStatus: this.projectStatus, // Add old status for logging
          }),
        });

        console.log("🔔 [PDF-UPLOAD] API response status:", response.status);

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error || "Failed to update project status");
        }

        const result = await response.json();

        if (result.success) {
          console.log("📊 [PDF-UPLOAD] Status updated successfully:", result);

          // Show success notification using notificationData from API
          window.handleUpdateStatusNotification(result, "PDF-UPLOAD");

          const uploadStatus = document.getElementById("upload-status");
          if (uploadStatus) {
            uploadStatus.innerHTML = ``;
          }
          this.dropzone.classList.add("hidden");
          // Update button to show completion
          this.allDocumentsUploadedBtn.innerHTML = `
            <svg class="mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            Documents Submitted ✓
          `;
          this.allDocumentsUploadedBtn.classList.remove("bg-green-600", "hover:bg-green-700");
          this.allDocumentsUploadedBtn.classList.add("bg-gray-600", "cursor-not-allowed");
          this.allDocumentsUploadedBtn.disabled = true;

          // window.location.href = `/project/${this.projectId}?tab=proposal`;
        }
      } catch (error) {
        console.error("Error updating project status:", error);
        this.showError(`Failed to update project status: ${error.message}`);

        // Reset button to original state
        this.allDocumentsUploadedBtn.disabled = false;
        this.allDocumentsUploadedBtn.innerHTML = `
          <svg class="mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
          </svg>
          All Documents Uploaded
        `;
      }
    }

    getFileIcon(fileType) {
      const type = fileType.toLowerCase();

      // PDF files
      if (type.includes("pdf")) {
        return `<svg class="h-6 w-6 text-red-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
      }

      // Image files
      if (
        type.includes("image") ||
        type.includes("png") ||
        type.includes("jpg") ||
        type.includes("jpeg") ||
        type.includes("gif") ||
        type.includes("webp")
      ) {
        return `<svg class="h-6 w-6 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
        </svg>`;
      }

      // CAD files
      if (type.includes("dwg") || type.includes("dxf") || type.includes("cad")) {
        return `<svg class="h-6 w-6 text-green-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
        </svg>`;
      }

      // Document files
      if (
        type.includes("doc") ||
        type.includes("docx") ||
        type.includes("txt") ||
        type.includes("rtf")
      ) {
        return `<svg class="h-6 w-6 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
      }

      // Spreadsheet files
      if (type.includes("xls") || type.includes("xlsx") || type.includes("csv")) {
        return `<svg class="h-6 w-6 text-green-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M8 12h8v2H8zm0 4h8v2H8z"/>
        </svg>`;
      }

      // Archive files
      if (
        type.includes("zip") ||
        type.includes("rar") ||
        type.includes("7z") ||
        type.includes("tar") ||
        type.includes("gz")
      ) {
        return `<svg class="h-6 w-6 text-orange-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z"/>
          <path d="M12 10l-2 2 2 2 2-2-2-2z"/>
        </svg>`;
      }

      // Default file icon
      return `<svg class="h-6 w-6 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
      </svg>`;
    }

    async deleteFile(fileId, fileItem) {
      try {
        console.log("🗑️ [PDF-UPLOAD] Deleting file:", fileId);

        // Show loading state
        const deleteBtn = fileItem.querySelector('button[title="Delete file"]');
        if (deleteBtn) {
          deleteBtn.disabled = true;
          deleteBtn.innerHTML =
            '<svg class="h-4 w-4 animate-spin" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
        }

        const response = await fetch("/api/delete-media-file", {
          method: "DELETE",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ fileId }),
        });

        if (response.ok) {
          const result = await response.json();
          console.log("✅ [PDF-UPLOAD] File deleted successfully:", result);

          // Remove the file item from DOM
          fileItem.remove();

          // Check if there are any files left
          const remainingFiles = this.fileList.querySelectorAll(".file-item");
          if (remainingFiles.length === 0) {
            this.filesContainer.classList.add("hidden");
            this.noFilesMessage.classList.remove("hidden");
          }

          // Show success message
          if (window.showModal) {
            window.showModal("success", "File Deleted", "File has been successfully deleted.");
          }
        } else {
          const errorData = await response.json().catch(() => ({ error: "Unknown error" }));
          console.error("❌ [PDF-UPLOAD] Delete failed:", errorData);

          // Reset button state
          if (deleteBtn) {
            deleteBtn.disabled = false;
            deleteBtn.innerHTML =
              '<svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/></svg>';
          }

          // Show error message
          if (window.showModal) {
            window.showModal(
              "Delete Failed",
              errorData.error || "Failed to delete file. Please try again.",
              "error"
            );
          }
        }
      } catch (error) {
        console.error("❌ [PDF-UPLOAD] Delete error:", error);

        // Reset button state
        const deleteBtn = fileItem.querySelector('button[title="Delete file"]');
        if (deleteBtn) {
          deleteBtn.disabled = false;
          deleteBtn.innerHTML =
            '<svg class="h-4 w-4" fill="currentColor" viewBox="0 0 24 24"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/></svg>';
        }

        // Show error message
        if (window.showModal) {
          window.showModal(
            "Delete Failed",
            "An error occurred while deleting the file. Please try again.",
            "error"
          );
        }
      }
    }
  }

  // Initialize the PDF upload component
  document.addEventListener("DOMContentLoaded", () => {
    console.log("📁 [PDF-UPLOAD] Initializing PDFUpload component for Documents");
    window.pdfUploadDocuments = new PDFUpload();
  });
</script>
