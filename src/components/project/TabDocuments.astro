---
interface Props {
  project: any;
  projectStatus?: number;
  currentUser?: any;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  globalInputClasses?: string;
  statusData?: any;
}

import FileManager from "./FileManager.astro";
import Button from "../common/Button.astro";

const {
  project,
  projectStatus,
  currentUser,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  globalInputClasses,
  statusData,
} = Astro.props;

const projectId = project?.id;

const currentRole = currentUser?.profile?.role;
---

<div id="content-documents" class="tab-content hidden p-4">
  <!-- File Manager for all users - PDF preview works for everyone -->
  <FileManager
    projectId={project.id}
    currentUser={currentUser}
    currentRole={currentUser?.profile?.role}
    projectAuthorId={project.authorId}
    projectStatus={projectStatus}
    globalSecondaryTextClasses={globalSecondaryTextClasses}
    globalPrimaryTextClasses={globalPrimaryTextClasses}
    globalInputClasses={globalInputClasses}
    statusData={statusData}
  />

  <!-- All Documents Uploaded Button (Clients Only) -->
  {
    projectStatus === 10 && (
      <div class="mt-6 border-t border-gray-200 pt-6 dark:border-gray-700">
        <div class="text-center">
          <Button
            id="all-documents-uploaded-btn"
            variant="success"
            size="xl"
            icon="check"
            iconPosition="right"
          >
            Finished Uploading Documents / Request Review
          </Button>
        </div>
      </div>
    )
  }
</div>

<script
  define:vars={{
    project,
    projectId,
    projectStatus,
    globalInputClasses,
    globalSecondaryTextClasses,
    globalPrimaryTextClasses,
    statusData,
  }}
  is:inline
>
  console.log("üîç [TAB-DOCUMENTS] statusData:", statusData);
  // Only initialize if the button exists (projectStatus === 10)
  if (projectStatus === 10) {
    class PDFUpload {
      constructor() {
        this.allDocumentsUploadedBtn = document.getElementById("all-documents-uploaded-btn");
        this.project = project;
        this.projectId = projectId;
        this.projectStatus = projectStatus;
        this.initialized = false;
        this.statusData = statusData;
        this.init();
      }

      init() {
        if (this.initialized) {
          console.log("üì± [PDF-UPLOAD] Already initialized, skipping...");
          return;
        }

        this.setupElements();
        this.setupEventListeners();
        this.loadExistingFiles();
        this.initialized = true;
      }

      setupElements() {
        // Setup any required elements
      }

      setupEventListeners() {
        if (this.allDocumentsUploadedBtn) {
          this.allDocumentsUploadedBtn.addEventListener("click", () => {
            this.markAllDocumentsUploaded();
          });
        }
      }

      loadExistingFiles() {
        // Load existing files if needed
      }

      async markAllDocumentsUploaded() {
        try {
          // Disable button and show loading state
          this.allDocumentsUploadedBtn.disabled = true;
          this.allDocumentsUploadedBtn.innerHTML = `
            <svg class="animate-spin mr-2 h-5 w-5" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Updating Status...
          `;
          this.allDocumentsUploadedBtn.classList.remove("bg-green-600", "hover:bg-green-700");
          this.allDocumentsUploadedBtn.classList.add("bg-gray-600", "cursor-not-allowed");
          this.allDocumentsUploadedBtn.disabled = true;

          const nextStatus = 20;

          window
            .updateStatus(this.project, nextStatus, this.statusData[nextStatus])
            .then((data) => {
              if (data.success) {
                this.allDocumentsUploadedBtn.innerHTML = `
              <svg class="mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              Documents Submitted ‚úì
            `;
                window.handleNewStatusModalAndEmail(data, "PROPOSAL-VIEW");
              } else {
                window.showModal("error", "Error", data.error || "Failed to update project status");
              }
            });
        } catch (error) {
          console.error("Error updating project status:", error);
          window.showModal(
            "error",
            "Status Update Error",
            `Failed to update project status: ${error.message}`
          );

          // Reset button to original state
          this.allDocumentsUploadedBtn.disabled = false;
          this.allDocumentsUploadedBtn.innerHTML = `
            <svg class="mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
            </svg>
            All Documents Uploaded
          `;
        }
      }

      // showModal(type, title, message) {
      //   console.error("PDF Upload Error:", message);
      //   // You can implement a proper error display here
      // }
    }

    // Initialize the PDF upload component
    document.addEventListener("DOMContentLoaded", () => {
      console.log("üìÅ [PDF-UPLOAD] DOMContentLoaded event fired");

      // Check if already initialized
      if (window.pdfUploadDocuments && window.pdfUploadDocuments.initialized) {
        console.log("üìÅ [PDF-UPLOAD] PDFUpload already initialized, skipping");
        return;
      }

      console.log("üìÅ [PDF-UPLOAD] Initializing PDFUpload component for Documents");
      window.pdfUploadDocuments = new PDFUpload();
    });
  }
</script>
