---
import BoxIcon from "../common/BoxIcon.astro";
import { supabase } from "../../lib/supabase";
import Button from "../common/Button.astro";

interface Props {
  projectId: string;
  project: any;
  projectStatus: number;
  currentUser: any;
  globalSecondaryTextClasses: string;
  globalPrimaryTextClasses: string;
  globalInputClasses: string;
  statusData: any;
}
const {
  projectId,
  project,
  projectStatus = 0,
  currentUser,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  globalInputClasses,
  statusData,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const authorProfile = currentUser?.profile;

// Only show to Admin/Staff users
const canManageProposals = currentRole === "Admin" || currentRole === "Staff";

// Check if there's already an invoice for this project
let existingInvoice = null;
try {
  // console.log("üîç [ProposalManager] Checking for existing invoice for project:", projectId);

  if (!supabase) {
    console.error("‚ùå [ProposalManager] Database not configured");
    return;
  }

  const { data: invoices, error } = await supabase
    .from("invoices")
    .select(
      `
      *,
      catalog_line_items
    `
    )
    .eq("project_id", parseInt(projectId))
    .eq("status", "proposal")
    .order("created_at", { ascending: false })
    .limit(1);

  // console.log("üîç [ProposalManager] Invoice query result:", { invoices, error });

  if (!error && invoices && invoices.length > 0) {
    existingInvoice = invoices[0]; // Get the most recent proposal
    // console.log("‚úÖ [ProposalManager] Found existing invoice:", existingInvoice);
    // console.log("üîç [ProposalManager] Invoice catalog_line_items:", existingInvoice.catalog_line_items);
    // console.log("üîç [ProposalManager] Invoice catalog_line_items length:", existingInvoice.catalog_line_items?.length);
    // console.log("üîç [ProposalManager] Invoice catalog_line_items type:", typeof existingInvoice.catalog_line_items);

    // Let's also check if there are line items directly
    if (existingInvoice.id) {
      // console.log("üîç [ProposalManager] Checking for line items directly for invoice ID:", existingInvoice.id);
      let catalogItemIds = [];
      if (existingInvoice.catalog_line_items) {
        for (let i = 0; i < existingInvoice.catalog_line_items.length; i++) {
          catalogItemIds.push(existingInvoice.catalog_line_items[i].catalog_item_id);
        }
      }
      const { data: directLineItems, error: lineItemsError } = await supabase
        .from("line_items_catalog")
        .select("*")
        .in("id", catalogItemIds);

      // console.log("üîç [ProposalManager] Direct line items query:", { directLineItems, lineItemsError });
    }
  } else {
    // console.log("‚ùå [ProposalManager] No existing invoice found:", error);
  }
} catch (error) {
  console.error("‚ùå [ProposalManager] Error checking for existing invoice:", error);
}
---

{
  canManageProposals && !existingInvoice && projectStatus === 20 && (
    <div id="proposal-placeholder" class="py-8">
      <Button
        onclick={`buildProposal('${projectId}')`}
        variant="success"
        size="sm"
        icon="plus"
        iconPosition="left"
      >
        Build Proposal from Specs
      </Button>
    </div>
  )
}

<!-- Generated proposal content (hidden initially) -->
<div id="proposal-content" class={existingInvoice ? "" : "hidden"}>
  <!-- Proposal Header -->
  <div class="mb-6 flex items-start justify-between">
    <div class="flex-1">
      <!-- Editable Subject Line -->
      <div class="mt-3">
        <div id="proposal-subject-display" class="cursor-pointer">
          <p
            class="text-2xl font-medium text-gray-800 transition-colors hover:text-blue-600 dark:text-gray-200 dark:hover:text-blue-400"
          >
            <span
              id="proposal-subject-text"
              class="inline-block h-6 w-64 animate-pulse rounded bg-gray-200 dark:bg-gray-700"
            ></span>
            {
              projectStatus === 20 && (
                <Button
                  type="button"
                  id="edit-subject-btn"
                  variant="ghost"
                  size="sm"
                  icon="edit"
                  class="ml-2 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
                  title="Edit subject"
                />
              )
            }
          </p>
        </div>

        {
          projectStatus === 20 && (
            <div id="proposal-subject-edit" class="hidden">
              <div class="space-y-2">
                <div id="subject-dropdown-container">
                  {/* <!-- Subject dropdown will be inserted here --> */}
                </div>
                <div class="flex items-center space-x-2">
                  <Button
                    type="button"
                    id="save-subject-btn"
                    variant="primary"
                    size="sm"
                    icon="check"
                    iconPosition="left"
                    title="Save subject"
                  >
                    Save
                  </Button>
                  <Button
                    type="button"
                    id="cancel-subject-btn"
                    variant="secondary"
                    size="sm"
                    icon="x"
                    iconPosition="left"
                    title="Cancel"
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            </div>
          )
        }
      </div>

      <p class={`${globalSecondaryTextClasses} text-sm`}>
        Generated on: <span id="proposal-date"></span>
      </p>
    </div>
    <div class="ml-4 text-right">
      <p class="text-2xl font-bold text-green-600 dark:text-green-400">
        $<span id="proposal-total">0.00</span>
      </p>
      <p class="text-sm text-gray-600 dark:text-gray-400">Estimated Total</p>
    </div>
  </div>

  <!-- Project Details -->
  <div class="mb-6 grid grid-cols-1 gap-6 md:grid-cols-2">
    <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
      <h3 class={`${globalPrimaryTextClasses}`}>Project Information</h3>
      <div class={`${globalSecondaryTextClasses} space-y-1 text-sm`}>
        <p><strong>Address:</strong> <span id="proposal-address">{project.address}</span></p>
        <!-- <p>
          <strong>Square Footage:</strong>
          <span id="proposal-sq-ft">{project.sq_ft}</span> sq ft
        </p>
        <p>
          <strong>Construction Type:</strong>
          <span id="proposal-construction-type"
            >{project.new_construction ? "New Construction" : "Existing"}</span
          >
        </p> -->
      </div>
    </div>
    <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
      <h3 class={`${globalPrimaryTextClasses}`}>Contact Information</h3>
      <div class={`${globalSecondaryTextClasses} space-y-1 text-sm`}>
        <p>
          <strong>Prepared for:</strong>
          <span id="proposal-client-name"
            >{authorProfile?.[0]?.company_name || authorProfile?.company_name || "N/A"}</span
          >
        </p>
      </div>
      <!-- <p><strong>Email:</strong> <span id="proposal-client-email">{authorProfile?.email || 'N/A'}</span></p> -->
      <!-- <p><strong>Phone:</strong> <span id="proposal-client-phone">{authorProfile?.phone || 'N/A'}</span></p> -->
    </div>
  </div>
</div>

<!-- Line Items Table -->
<div class="mb-6">
  <h3 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Services & Pricing</h3>
  <!-- Table Container -->
  <div
    class="rounded-lg bg-white shadow-sm ring-1 ring-gray-200 dark:bg-gray-800 dark:ring-gray-700"
  >
    <!-- Table View -->
    <div class="overflow-hidden">
      <div class="overflow-x-auto">
        <table
          class="mt6gkcSf0Bt4MLItXvDJ_ c8dCx6gnV43hTOLV6ks5 PeR2JZ9BZHYIH8Ea3F36 XIIs8ZOri3wm8Wnj9N_y w-full"
        >
          <thead
            class="jtAJHOc7mn7b4IKRO59D gMXmdpOPfqG_3CKkL0VD sdSaZcRa4_We5kKaX4pf PeR2JZ9BZHYIH8Ea3F36 _1jTZ8KXRZul60S6czNi XIIs8ZOri3wm8Wnj9N_y"
          >
            <tr>
              <th
                scope="col"
                class="RZmKBZs1E1eXw8vkE6jY i8v96MUlFwGv9qJUkAx7 yM_AorRf2jSON3pDsdrz"
              >
                TITLE
              </th>
              <th
                scope="col"
                class="RZmKBZs1E1eXw8vkE6jY i8v96MUlFwGv9qJUkAx7 yM_AorRf2jSON3pDsdrz"
              >
                Description
              </th>
              <th
                scope="col"
                class="RZmKBZs1E1eXw8vkE6jY i8v96MUlFwGv9qJUkAx7 yM_AorRf2jSON3pDsdrz"
              >
                Qty
              </th>
              <th
                scope="col"
                class="RZmKBZs1E1eXw8vkE6jY i8v96MUlFwGv9qJUkAx7 yM_AorRf2jSON3pDsdrz"
              >
                Unit Price
              </th>
              <th
                scope="col"
                class="RZmKBZs1E1eXw8vkE6jY i8v96MUlFwGv9qJUkAx7 yM_AorRf2jSON3pDsdrz"
              >
                Total
              </th>
              {
                projectStatus === 20 && (
                  <th
                    scope="col"
                    class="RZmKBZs1E1eXw8vkE6jY i8v96MUlFwGv9qJUkAx7 yM_AorRf2jSON3pDsdrz"
                  >
                    Actions
                  </th>
                )
              }
            </tr>
          </thead>
          <tbody
            id="proposal-line-items"
            class="divide-y divide-gray-200 bg-white dark:divide-gray-700 dark:bg-gray-800"
          >
            <!-- All line items will be generated dynamically via JavaScript -->
          </tbody>
          <tfoot>
            <tr>
              <td
                colspan={projectStatus === 20 ? "5" : "4"}
                class="px-6 py-3 text-right font-semibold text-gray-900 dark:text-white"
              >
                Total:
              </td>
              <td class="px-6 py-3 text-right font-bold text-green-600 dark:text-green-400">
                $<span id="proposal-total-footer">0.00</span>
              </td>
            </tr>
            <tr>
              <td
                class="px-6 py-3 text-right font-semibold text-gray-900 dark:text-white"
                colspan={projectStatus === 20 ? "5" : "4"}
              >
                Total Due (50%):
              </td>
              <td class="px-6 py-3 text-right font-bold text-blue-600 dark:text-blue-400">
                $<span id="proposal-total-due-footer">0.00</span>
              </td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Notes Section -->
<div class="mb-6">
  <h3 class="mb-3 text-lg font-semibold text-gray-900 dark:text-white">Notes</h3>
  <div
    class="rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-600 dark:bg-gray-700"
  >
    <textarea
      id="proposal-notes"
      class="h-32 w-full resize-none border-none bg-transparent text-sm text-gray-700 focus:outline-none focus:ring-0 dark:text-gray-300"
      placeholder="Add any additional notes or comments for this proposal..."></textarea>
  </div>
</div>

<!-- Actions -->
{
  canManageProposals && projectStatus === 20 && (
    <div class="flex justify-between">
      <div class="flex gap-2">
        <span class="button-text">Proposal Saves Automatically</span>
      </div>
      <div class="flex-center flex gap-2">
        <Button
          id="send-proposal-btn"
          onclick="sendProposal()"
          variant="success"
          size="lg"
          icon="send"
          iconPosition="left"
        >
          Send Proposal
        </Button>
      </div>
    </div>
  )
}

{
  projectStatus >= 30 && currentRole === "Client" && projectStatus < 50 && existingInvoice && (
    <div class="mt-8 rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
      <div class="mb-6">
        <p class="text-gray-500 dark:text-gray-400">
          Sign Contract &amp; Submit 50% deposit to approve this proposal and begin work.
        </p>
      </div>

      <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
        <Button
          href={`/project/${projectId}?status=discussion&new=true`}
          variant="secondary"
          size="md"
          icon="pencil"
          iconPosition="left"
        >
          To Request Edits Leave a Comment
        </Button>

        <Button
          variant="success"
          size="md"
          icon="check"
          iconPosition="right"
          onclick="window.acceptProposal()"
        >
          Accept Proposal
        </Button>
      </div>
    </div>
  )
}

<script
  type="module"
  define:vars={{
    project,
    currentUser,
    existingInvoice,
    projectStatus,
    globalInputClasses,
    globalSecondaryTextClasses,
    globalPrimaryTextClasses,
    statusData,
  }}
>
  // Define ProposalManager class directly in the script (following working pattern from PDF uploader)
  class ProposalManager {
    constructor(project, currentUser) {
      console.log("üîß [PROPOSAL-MANAGER] Constructor called with projectId:", project, currentUser);
      this.project = project;
      this.projectId = project.id;
      this.projectAuthor = project.author;
      this.projectStatus = project.status;
      this.currentUser = currentUser;
      console.log("üîß [PROPOSAL-MANAGER] Constructor set this.projectId to:", this.project);
      this.isEditMode = false;
      this.cachedLineItems = null;
      this.projectData = project;
      this.statusData = statusData;
      this.cachedTotal = null;
      this.autocompleteInitialized = false;
      this.invoiceId = null;
      this.saveTimeout = null;
      this.saveBuffer = 1000; // 1 second buffer
    }

    async buildProposal() {
      console.log("üîß [PROPOSAL-MANAGER] Building proposal for project:", this.project);

      if (!this.project) {
        console.error("Project data not available");
        return;
      }

      // Hide placeholder and show proposal content
      const placeholder = document.getElementById("proposal-placeholder");
      const content = document.getElementById("proposal-content");

      if (placeholder) placeholder.style.display = "none";
      if (content) content.style.display = "block";

      // Get or create invoice ID
      await this.ensureInvoiceExists();

      // Load data from database
      await this.loadDataFromDatabase();

      // Initialize proposal form with project data
      this.initializeProposalForm();

      // Initialize autocomplete functionality
      this.initializeAutocomplete();

      // Ensure totals are calculated after everything is loaded
      setTimeout(() => {
        updateProposalTotal();
        console.log("üîß [PROPOSAL-MANAGER] Updated totals after building proposal");
      }, 100);
    }

    async ensureInvoiceExists() {
      try {
        console.log("üîç [PROPOSAL-MANAGER] Ensuring invoice exists for project:", this.project);

        // Check if invoice already exists
        const response = await fetch(`/api/get-project-invoice?projectId=${this.projectId}`);
        const data = await response.json();

        if (data.success && data.invoice) {
          this.invoiceId = parseInt(data.invoice.id);
          console.log("‚úÖ [PROPOSAL-MANAGER] Found existing invoice:", this.invoiceId);
        } else {
          // Create new invoice
          const createResponse = await fetch("/api/create-invoice", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              projectId: this.projectId,
              projectData: {
                title: `Proposal for ${this.project.title}`,
                date: new Date().toISOString().split("T")[0],
                subject: "Fire Protection System Proposal",
                status: "proposal",
              },
            }),
          });

          const createData = await createResponse.json();
          if (createData.success) {
            this.invoiceId = parseInt(createData.invoice.id);
            console.log("‚úÖ [PROPOSAL-MANAGER] Created new invoice:", this.invoiceId);
          } else {
            console.error("‚ùå [PROPOSAL-MANAGER] Failed to create invoice:", createData.error);
          }
        }
      } catch (error) {
        console.error("‚ùå [PROPOSAL-MANAGER] Error ensuring invoice exists:", error);
      }
    }

    async loadDataFromDatabase() {
      if (!this.invoiceId) {
        console.log("‚ùå [PROPOSAL-MANAGER] No invoice ID, cannot load data");
        return;
      }

      try {
        console.log(
          "üîç [PROPOSAL-MANAGER] Loading data from database for invoice:",
          this.invoiceId
        );

        const response = await fetch(`/api/get-invoice-details?id=${this.invoiceId}`);
        const data = await response.json();

        if (data.success && data.invoice) {
          const invoice = data.invoice;

          console.log("üîç [PROPOSAL-MANAGER] Invoice data received:", {
            id: invoice.id,
            created_at: invoice.created_at,
            subject: invoice.subject,
            catalog_line_items: invoice.catalog_line_items?.length || 0,
          });

          // Load line items from catalog_line_items and convert field names
          const dbLineItems = invoice.catalog_line_items || [];
          this.cachedLineItems = dbLineItems.map((item) => ({
            name: item.name || "",
            description: item.description || "",
            quantity: item.quantity || 1,
            unitPrice: item.unit_price || 0, // Convert unit_price to unitPrice
            catalog_item_id: item.catalog_item_id || null,
          }));

          // Load subject from invoice
          const subjectTextElement = document.getElementById("proposal-subject-text");
          const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");

          if (subjectTextElement) {
            if (invoice.subject) {
              // Replace skeleton with actual subject text
              subjectTextElement.className =
                "text-2xl font-medium text-gray-800 dark:text-gray-200"; // Restore original styling
              subjectTextElement.textContent = invoice.subject;
              console.log("‚úÖ [PROPOSAL-MANAGER] Loaded subject:", invoice.subject);
            } else {
              // No subject in database, show default
              subjectTextElement.className =
                "text-2xl font-medium text-gray-800 dark:text-gray-200"; // Restore original styling
              subjectTextElement.textContent = "Fire Protection Services Proposal";
              console.log("‚úÖ [PROPOSAL-MANAGER] No subject in database, using default");
            }

            if (hiddenInput) {
              hiddenInput.value = invoice.subject || "Fire Protection Services Proposal";
            }
          }

          // Load proposal date from invoice
          const proposalDateElement = document.getElementById("proposal-date");
          if (proposalDateElement) {
            let dateToShow;
            if (invoice.created_at) {
              // Use invoice creation date
              const invoiceDate = new Date(invoice.created_at);
              dateToShow = invoiceDate.toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              });
              console.log("‚úÖ [PROPOSAL-MANAGER] Using invoice creation date:", dateToShow);
            } else {
              // No date in database, use current time
              const now = new Date();
              dateToShow = now.toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
              });
              console.log("‚úÖ [PROPOSAL-MANAGER] No invoice date, using current date:", dateToShow);
            }
            proposalDateElement.textContent = dateToShow;
          } else {
            console.log("‚ùå [PROPOSAL-MANAGER] proposal-date element not found");
          }

          // Load proposal notes from invoice
          const notesElement = document.getElementById("proposal-notes");
          if (notesElement) {
            if (invoice.proposal_notes) {
              notesElement.value = invoice.proposal_notes;
              console.log("‚úÖ [PROPOSAL-MANAGER] Loaded notes:", invoice.proposal_notes);
            } else {
              notesElement.value = "";
              console.log("‚úÖ [PROPOSAL-MANAGER] No notes in database, using empty string");
            }
          } else {
            console.log("‚ùå [PROPOSAL-MANAGER] proposal-notes element not found");
          }

          // If no line items, initialize with defaults
          if (this.cachedLineItems.length === 0) {
            this.initializeDefaultLineItems();
            await this.saveToDatabase(); // Save the defaults
          }

          console.log("‚úÖ [PROPOSAL-MANAGER] Loaded line items:", this.cachedLineItems);
        } else {
          // Failed to load data, show default subject
          const subjectTextElement = document.getElementById("proposal-subject-text");
          const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");

          if (subjectTextElement) {
            subjectTextElement.className = "text-2xl font-medium text-gray-800 dark:text-gray-200"; // Restore original styling
            subjectTextElement.textContent = "Fire Protection Services Proposal";
          }

          if (hiddenInput) {
            hiddenInput.value = "Fire Protection Services Proposal";
          }
        }
      } catch (error) {
        console.error("‚ùå [PROPOSAL-MANAGER] Error loading data from database:", error);

        // On error, show default subject
        const subjectTextElement = document.getElementById("proposal-subject-text");
        const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");

        if (subjectTextElement) {
          subjectTextElement.className = "text-2xl font-medium text-gray-800 dark:text-gray-200"; // Restore original styling
          subjectTextElement.textContent = "Fire Protection Services Proposal";
        }

        if (hiddenInput) {
          hiddenInput.value = "Fire Protection Services Proposal";
        }
      }
    }

    initializeProposalForm() {
      console.log("üîß [PROPOSAL-MANAGER] Initializing proposal form...");

      // Set project details in the form

      const projectAddress = document.getElementById("proposal-project-address");
      const clientName = document.getElementById("proposal-client-name");
      const proposalDate = document.getElementById("proposal-date");

      console.log("üîç [PROPOSAL-MANAGER] Found elements:", {
        projectAddress: !!projectAddress,
        clientName: !!clientName,
        proposalDate: !!proposalDate,
      });

      if (projectAddress) projectAddress.textContent = this.project.address || "Project Address";
      if (clientName)
        clientName.textContent =
          this.project.authorProfile?.first_name +
            " " +
            this.project.authorProfile?.last_name +
            " ‚Üí " +
            this.project.authorProfile?.company_name || "Client Name";

      // Date is now handled in loadDataFromDatabase()

      // Render line items from cached data
      this.renderLineItems();
      updateProposalTotal();
    }

    initializeDefaultLineItems() {
      // Add default line items for fire protection system
      const lineItems = [
        {
          name: "Fire Sprinkler System Design",
          description: "Complete fire sprinkler system design and engineering",
          quantity: 1,
          unitPrice: 2500,
        },
        {
          name: "Fire Alarm System",
          description: "Fire detection and alarm system installation",
          quantity: 1,
          unitPrice: 1800,
        },
        {
          name: "Fire Extinguisher Installation",
          description: "Fire extinguisher placement and installation",
          quantity: 6,
          unitPrice: 150,
        },
      ];

      this.cachedLineItems = lineItems;
      this.renderLineItems();
      updateProposalTotal();
    }

    renderLineItems() {
      const tbody = document.getElementById("proposal-line-items");
      if (!tbody || !this.cachedLineItems) {
        console.log("‚ùå [PROPOSAL-MANAGER] Cannot render line items:", {
          tbody: !!tbody,
          cachedLineItems: !!this.cachedLineItems,
        });
        return;
      }

      tbody.innerHTML = "";

      // Render each line item
      this.cachedLineItems.forEach((item, index) => {
        console.log(`üîß [PROPOSAL-MANAGER] Rendering item ${index}:`, {
          name: item.name,
          description: item.description,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
        });

        const row = document.createElement("tr");
        row.className = "proposal-line-item-row";

        if (projectStatus === 20) {
          row.innerHTML = `
            <td class="whitespace-nowrap px-6 py-4">
              <input type="text" value="${item.name || ""}" class="${globalInputClasses} w-40 line-item-name" onchange="window.proposalManager.updateLineItem(${index}, 'name', this.value)">
            </td>
            <td class="whitespace-nowrap px-6 py-4">
              <input type="text" value="${item.description || ""}" class="${globalInputClasses} w-60 line-item-description" onchange="window.proposalManager.updateLineItem(${index}, 'description', this.value)">
            </td>
            <td class="whitespace-nowrap px-6 py-4">
              <input type="number" value="${item.quantity || 1}" class="${globalInputClasses} w-20 line-item-quantity" data-row-index="${index}" data-field="quantity" onchange="window.proposalManager.updateLineItemFromInput(this)">
            </td>
            <td class="whitespace-nowrap px-6 py-4">
              <input type="number" value="${item.unitPrice || 0}" class="${globalInputClasses} w-24 line-item-price" data-row-index="${index}" data-field="unitPrice" onchange="window.proposalManager.updateLineItemFromInput(this)">
            </td>
            <td class="whitespace-nowrap px-6 py-4 text-right line-item-total w-24">$${((item.quantity || 1) * (item.unitPrice || 0)).toFixed(2)}</td>
            <td class="whitespace-nowrap px-6 py-4 text-sm text-center w-12">
              <div class="flex items-center justify-center space-x-2 w-12">
                <button 
                  type="button"
                  id="delete-btn-${index}"
                  onclick="window.proposalManager.confirmDelete(${index})"
                  class="p-1 text-red-600 hover:text-red-800 hover:bg-red-100 rounded transition-colors delete-btn"
                  title="Delete line item"
                  data-state="trash"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            </td>
          `;
        } else {
          row.innerHTML = `
            <td class="whitespace-nowrap px-6 py-4">
              <span class="text-gray-900 dark:text-white w-40">${item.name || ""}</span>
            </td>
            <td class="whitespace-nowrap px-6 py-4">
              <span class="text-gray-600 dark:text-gray-300 w-60">${item.description || ""}</span>
            </td>
            <td class="whitespace-nowrap px-6 py-4 text-right w-20">
              <span class="text-gray-900 dark:text-white">${item.quantity || 1}</span>
            </td>
            <td class="whitespace-nowrap px-6 py-4 text-right w-24">
              <span class="text-gray-900 dark:text-white">$${(item.unitPrice || 0).toFixed(2)}</span>
            </td>
            <td class="whitespace-nowrap px-6 py-4 text-right line-item-total w-24">$${((item.quantity || 1) * (item.unitPrice || 0)).toFixed(2)}</td>
          `;
        }
        tbody.appendChild(row);
      });

      // Add the "Add Line Item" button row
      if (projectStatus === 20) {
        this.addRowButton(tbody);
      }
    }

    addRowButton(tbody) {
      const addRowBtn = document.createElement("tr");
      addRowBtn.innerHTML = `
        <td colspan="5" class="px-4 py-3 text-center border-t border-gray-200 dark:border-gray-600">
          <button id="add-row-btn"
            type="button"
            onclick="window.proposalManager?.addProposalRow()"
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded transition-colors dark:text-blue-400 dark:hover:text-blue-300 dark:hover:bg-blue-900/20"
          >
            <svg class="mr-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add Line Item
          </button>
        </td>
      `;
      addRowBtn.id = "add-row-btn";
      tbody.appendChild(addRowBtn);
    }

    updateLineItem(index, field, value) {
      if (!this.cachedLineItems || !this.cachedLineItems[index]) return;

      if (field === "quantity" || field === "unitPrice") {
        this.cachedLineItems[index][field] = parseFloat(value) || 0;
      } else {
        this.cachedLineItems[index][field] = value;
      }

      console.log(`üîß [PROPOSAL-MANAGER] Updated ${field} for item ${index}:`, value);

      // Update totals after a small delay to ensure DOM is ready
      setTimeout(() => {
        updateProposalTotal();
        console.log("üîß [PROPOSAL-MANAGER] Updated totals after line item change");
      }, 50);

      // Schedule save to database with debounce
      this.scheduleSave();
    }

    updateRowTotal(index) {
      if (!this.cachedLineItems || !this.cachedLineItems[index]) return;

      const item = this.cachedLineItems[index];
      const total = (item.quantity || 0) * (item.unitPrice || 0);

      // Find the total cell for this row and update it
      const tbody = document.getElementById("proposal-line-items");
      if (tbody && tbody.children[index]) {
        const row = tbody.children[index];
        const totalCell = row.querySelector(".line-item-total");
        if (totalCell) {
          totalCell.textContent = `$${total.toFixed(2)}`;
        }
      }
    }

    updateLineItemFromInput(inputElement) {
      const rowIndex = parseInt(inputElement.getAttribute("data-row-index"));
      const field = inputElement.getAttribute("data-field");
      const value = inputElement.value;

      console.log("üîç [PROPOSAL-MANAGER] updateLineItemFromInput:", { rowIndex, field, value });

      if (rowIndex !== null && field && this.cachedLineItems && this.cachedLineItems[rowIndex]) {
        this.updateLineItem(rowIndex, field, value);
      }
    }

    saveCurrentDOMValuesToCache() {
      if (!this.cachedLineItems) return;

      const tbody = document.getElementById("proposal-line-items");
      if (!tbody) return;

      const rows = tbody.querySelectorAll("tr");

      rows.forEach((row, index) => {
        if (this.cachedLineItems[index]) {
          // Get current values from DOM inputs
          const nameInput = row.querySelector(".line-item-name");
          const descriptionInput = row.querySelector(".line-item-description");
          const quantityInput = row.querySelector(".line-item-quantity");
          const priceInput = row.querySelector(".line-item-price");

          // Update cached data with current DOM values
          if (nameInput) this.cachedLineItems[index].name = nameInput.value;
          if (descriptionInput) this.cachedLineItems[index].description = descriptionInput.value;
          if (quantityInput)
            this.cachedLineItems[index].quantity = parseFloat(quantityInput.value) || 0;
          if (priceInput) this.cachedLineItems[index].unitPrice = parseFloat(priceInput.value) || 0;
        }
      });

      console.log("üîç [PROPOSAL-MANAGER] Saved DOM values to cache:", this.cachedLineItems);
    }

    addProposalRow() {
      console.log("‚ûï [PROPOSAL-MANAGER] Adding new line item");

      if (!this.cachedLineItems) this.cachedLineItems = [];

      this.cachedLineItems.push({
        name: "New Item",
        description: "Item description",
        quantity: 1,
        unitPrice: 0,
      });

      // Re-render the table to include the new row
      this.renderLineItems();

      // Update totals after a small delay to ensure DOM is ready
      setTimeout(() => {
        updateProposalTotal();
        console.log("üîß [PROPOSAL-MANAGER] Updated totals after adding new row");
      }, 100);

      // Schedule save to database
      this.scheduleSave();
    }

    confirmDelete(index) {
      const button = document.getElementById(`delete-btn-${index}`);
      if (!button) return;

      const currentState = button.getAttribute("data-state");

      if (currentState === "trash") {
        // First click: Show question mark
        button.innerHTML = '<span class="text-lg font-bold">?</span>';
        button.setAttribute("data-state", "confirm");
        button.title = "Click again to confirm deletion";
        button.className =
          "p-1 text-orange-600 hover:text-orange-800 hover:bg-orange-100 rounded transition-colors delete-btn";

        // Auto-revert after 3 seconds
        setTimeout(() => {
          if (button.getAttribute("data-state") === "confirm") {
            this.revertDeleteButton(index);
          }
        }, 3000);
      } else if (currentState === "confirm") {
        // Second click: Actually delete
        this.deleteProposalRow(index);
      }
    }

    revertDeleteButton(index) {
      const button = document.getElementById(`delete-btn-${index}`);
      if (!button) return;

      button.innerHTML = `
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
      `;
      button.setAttribute("data-state", "trash");
      button.title = "Delete line item";
      button.className =
        "p-1 text-red-600 hover:text-red-800 hover:bg-red-100 rounded transition-colors delete-btn";
    }

    deleteProposalRow(index) {
      console.log("üóëÔ∏è [PROPOSAL-MANAGER] Deleting line item at index:", index);
      console.log("üóëÔ∏è [PROPOSAL-MANAGER] Before deletion, cachedLineItems:", this.cachedLineItems);

      if (!this.cachedLineItems || !this.cachedLineItems[index]) {
        console.log("‚ùå [PROPOSAL-MANAGER] Cannot delete - no item at index:", index);
        return;
      }

      // Delete the line item immediately
      const deletedItem = this.cachedLineItems.splice(index, 1)[0];
      console.log("üóëÔ∏è [PROPOSAL-MANAGER] Deleted item:", deletedItem);
      console.log("üóëÔ∏è [PROPOSAL-MANAGER] After deletion, cachedLineItems:", this.cachedLineItems);

      this.renderLineItems();
      updateProposalTotal();

      // Schedule save to database
      this.scheduleSave();
    }

    updateRowTotal(index) {
      console.log("üîç [PROPOSAL-MANAGER] updateRowTotal called");
      updateProposalTotal();
    }

    async loadExistingInvoice(invoice) {
      console.log("üîß [PROPOSAL-MANAGER] Loading existing invoice:", invoice);

      if (!invoice) {
        console.log("‚ùå [PROPOSAL-MANAGER] No invoice data provided");
        return;
      }

      try {
        // Set the invoice ID
        this.invoiceId = parseInt(invoice.id);
        console.log("‚úÖ [PROPOSAL-MANAGER] Set invoice ID:", this.invoiceId);

        // Show the proposal content (hide placeholder)
        const placeholder = document.getElementById("proposal-placeholder");
        const content = document.getElementById("proposal-content");

        if (placeholder) placeholder.style.display = "none";
        if (content) content.style.display = "block";

        // Load the line items from the database
        await this.loadDataFromDatabase();

        // Initialize the proposal form to show the data
        this.initializeProposalForm();

        // Initialize autocomplete functionality
        this.initializeAutocomplete();

        // Ensure totals are calculated after everything is loaded
        setTimeout(() => {
          updateProposalTotal();
          console.log("üîß [PROPOSAL-MANAGER] Updated totals after loading existing invoice");
        }, 100);

        console.log(
          "‚úÖ [PROPOSAL-MANAGER] Successfully loaded existing invoice and showed proposal"
        );
      } catch (error) {
        console.error("‚ùå [PROPOSAL-MANAGER] Error loading existing invoice:", error);
        throw error;
      }
    }

    regenerateProposal() {
      console.log("üîß [PROPOSAL-MANAGER] Regenerating proposal");
      this.buildProposal();
    }

    sendProposal() {
      console.log("üîß [PROPOSAL-MANAGER] Sending proposal");
      // Implementation for sending proposal
    }

    scheduleSave() {
      // Clear existing timeout
      if (this.saveTimeout) {
        clearTimeout(this.saveTimeout);
      }

      // Set new timeout
      this.saveTimeout = setTimeout(() => {
        this.saveToDatabase();
      }, this.saveBuffer);

      console.log("‚è∞ [PROPOSAL-MANAGER] Save scheduled in", this.saveBuffer, "ms");
    }

    async saveToDatabase() {
      console.log(
        "üîç [PROPOSAL-MANAGER] saveToDatabase called with projectId:",
        this.projectId,
        "invoiceId:",
        this.invoiceId
      );

      if (!this.projectId) {
        console.log("‚ùå [PROPOSAL-MANAGER] No project ID, cannot save");
        return;
      }

      if (!this.invoiceId) {
        console.log("‚ùå [PROPOSAL-MANAGER] No invoice ID, cannot save. Ensuring invoice exists...");
        await this.ensureInvoiceExists();
        if (!this.invoiceId) {
          console.log("‚ùå [PROPOSAL-MANAGER] Failed to create/get invoice ID");
          return;
        }
      }

      try {
        console.log("üíæ [PROPOSAL-MANAGER] Saving to database...");

        const lineItems = this.getLineItemsDataForDatabase();

        // Get proposal notes
        const notesElement = document.getElementById("proposal-notes");
        const notes = notesElement?.value || "";

        console.log("üîç [PROPOSAL-MANAGER] Sending data:", {
          invoiceId: this.invoiceId,
          lineItemsCount: lineItems?.length || 0,
          lineItems: lineItems,
          notes: notes,
        });

        const response = await fetch("/api/update-invoice-line-items", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            invoiceId: this.invoiceId,
            lineItems: lineItems,
            notes: notes,
          }),
        });

        const data = await response.json();

        if (data.success) {
          console.log("‚úÖ [PROPOSAL-MANAGER] Saved successfully to database");
        } else {
          console.error("‚ùå [PROPOSAL-MANAGER] Failed to save:", data.error);
        }
      } catch (error) {
        console.error("‚ùå [PROPOSAL-MANAGER] Error saving to database:", error);
      }
    }

    // Get line items data formatted for database storage
    getLineItemsDataForDatabase() {
      console.log(
        "üîç [PROPOSAL-MANAGER] getLineItemsDataForDatabase - cachedLineItems:",
        this.cachedLineItems
      );

      if (!this.cachedLineItems) {
        console.log("‚ùå [PROPOSAL-MANAGER] No cachedLineItems found");
        return [];
      }

      const result = this.cachedLineItems.map((item) => ({
        name: item.name || "",
        description: item.description || "",
        unit_price: item.unitPrice || 0, // Convert unitPrice to unit_price for database
        quantity: item.quantity || 1,
        catalog_item_id: item.catalog_item_id || null, // Include the ID as the key
      }));

      console.log("üîç [PROPOSAL-MANAGER] getLineItemsDataForDatabase - result:", result);
      return result;
    }

    // Autocomplete functionality
    initializeAutocomplete() {
      console.log("üîç [AUTOCOMPLETE] Initializing autocomplete for ProposalManager");

      // Only set up event delegation once
      if (!this.autocompleteInitialized) {
        this.setupEventDelegation();
        this.autocompleteInitialized = true;
      }
    }

    setupEventDelegation() {
      // Handle focus events for autocomplete
      document.addEventListener(
        "focus",
        (e) => {
          const target = e.target;
          if (target && target.classList && target.classList.contains("line-item-name")) {
            console.log("üîç [AUTOCOMPLETE] Focus on description field detected");
            const row = target.closest("tr");
            if (row) {
              // Look for existing dropdown or create one
              let dropdown = row.querySelector(".autocomplete-dropdown");
              if (!dropdown) {
                // Create dropdown for rows that don't have one
                const inputContainer = target.closest("td");
                if (inputContainer) {
                  dropdown = document.createElement("div");
                  dropdown.className =
                    "autocomplete-dropdown overflow-y-auto absolute z-50 w-66 h-80 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg dark:bg-gray-700 dark:border-gray-600 hidden";
                  inputContainer.appendChild(dropdown);
                  console.log("üîç [AUTOCOMPLETE] Created dropdown for row");
                }
              }

              // Show dropdown and populate with all line items
              if (dropdown) {
                dropdown.classList.remove("hidden");
                this.populateDropdownWithAllItems(dropdown);
              }
            }
          }
        },
        true
      );

      // Handle input events for filtering
      document.addEventListener("input", (e) => {
        const target = e.target;
        if (target && target.classList && target.classList.contains("line-item-name")) {
          console.log("üîç [AUTOCOMPLETE] Input on description field detected:", target);
          const row = target.closest("tr");
          if (row) {
            const dropdown = row.querySelector(".autocomplete-dropdown");
            if (dropdown) {
              console.log("üîç [AUTOCOMPLETE] Filtering catalog items for dropdown");
              this.filterCatalogItemsForRow(dropdown, target.value);
            } else {
              console.log("‚ùå [AUTOCOMPLETE] No dropdown found in row for input");
            }
          }
        }
      });

      // Hide dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const target = e.target;
        if (target && target instanceof HTMLElement) {
          // Check if click is outside any autocomplete dropdown
          const isInsideDropdown = target.closest(".autocomplete-dropdown");
          const isDescriptionInput = target.classList?.contains("line-item-name");

          if (!isInsideDropdown && !isDescriptionInput) {
            // Hide all dropdowns
            const allDropdowns = document.querySelectorAll(".autocomplete-dropdown");
            allDropdowns.forEach((dropdown) => {
              dropdown.classList.add("hidden");
            });
          }
        }
      });

      // Handle notes field changes for automatic saving
      document.addEventListener("input", (e) => {
        const target = e.target;
        if (target && target.id === "proposal-notes") {
          console.log("üîç [PROPOSAL-MANAGER] Notes field changed, scheduling save");
          if (window.proposalManager) {
            window.proposalManager.scheduleSave();
          }
        }
      });
    }

    async populateDropdownWithAllItems(dropdown) {
      try {
        const response = await fetch("/api/line-items-catalog");
        const data = await response.json();

        if (data.success && data.items) {
          this.displaySuggestionsForRow(dropdown, data.items);
        } else {
          console.log("üîç [AUTOCOMPLETE] No catalog items available");
          dropdown.innerHTML =
            '<div class="p-3 text-gray-500 text-sm">No line items available</div>';
        }
      } catch (error) {
        console.error("‚ùå [AUTOCOMPLETE] Error loading catalog items:", error);
        dropdown.innerHTML = '<div class="p-3 text-red-500 text-sm">Error loading line items</div>';
      }
    }

    async filterCatalogItemsForRow(dropdown, searchTerm) {
      if (!searchTerm || searchTerm.length < 2) {
        dropdown.classList.add("hidden");
        return;
      }

      try {
        const response = await fetch(
          `/api/line-items-catalog?search=${encodeURIComponent(searchTerm)}`
        );
        const data = await response.json();

        if (data.success && data.items) {
          const filteredItems = data.items.filter(
            (item) =>
              item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
              item.description.toLowerCase().includes(searchTerm.toLowerCase())
          );

          this.displaySuggestionsForRow(dropdown, filteredItems);
        }
      } catch (error) {
        console.error("Error fetching catalog items:", error);
      }
    }

    displaySuggestionsForRow(dropdown, items) {
      console.log("üîç [AUTOCOMPLETE] displaySuggestionsForRow called with", items.length, "items");
      if (items.length === 0) {
        console.log("üîç [AUTOCOMPLETE] No items to display, hiding dropdown");
        dropdown.classList.add("hidden");
        return;
      }

      dropdown.innerHTML = "";
      items.forEach((item) => {
        const suggestion = document.createElement("div");
        suggestion.className = `px-3 py-2 cursor-pointer hover:bg-blue-50 dark:hover:bg-gray-600 border-b border-gray-100 dark:border-gray-600 last:border-b-0 transition-colors duration-150`;
        suggestion.innerHTML = `
          <div class="font-medium text-gray-900 dark:text-white">${item.name}</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">${item.description || ""}</div>
          <div class="text-sm font-semibold text-green-600 dark:text-green-400">$${item.unit_price}</div>
        `;
        suggestion.onclick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.selectSuggestionForRow(dropdown, item);
        };
        dropdown.appendChild(suggestion);
      });
      console.log("üîç [AUTOCOMPLETE] Showing dropdown with", items.length, "items");
      dropdown.classList.remove("hidden");
    }

    selectSuggestionForRow(dropdown, item) {
      const row = dropdown.closest("tr");
      if (row) {
        console.log("üîç [AUTOCOMPLETE] Selecting suggestion for row:", item);
        console.log("üîç [AUTOCOMPLETE] Item structure:", {
          name: item.name,
          description: item.description,
          unit_price: item.unit_price,
          id: item.id,
        });

        // Find inputs in the row
        const nameInput = row.querySelector(".line-item-name");
        const descriptionInput = row.querySelector(".line-item-description");
        const unitPriceInput = row.querySelector(".line-item-price");
        const quantityInput = row.querySelector(".line-item-quantity");

        console.log("üîç [AUTOCOMPLETE] Found inputs:", {
          name: !!nameInput,
          description: !!descriptionInput,
          unitPrice: !!unitPriceInput,
          quantity: !!quantityInput,
        });

        if (nameInput) {
          nameInput.value = item.name;
          console.log("üîç [AUTOCOMPLETE] Set name to:", item.name);
        }

        if (descriptionInput) {
          descriptionInput.value = item.description || "";
          console.log("üîç [AUTOCOMPLETE] Set description to:", item.description);
        }

        if (unitPriceInput) {
          unitPriceInput.value = item.unit_price || 0;
          console.log("üîç [AUTOCOMPLETE] Set unit price to:", item.unit_price);
        }

        // Also update the cached line items data structure
        const rowIndex = Array.from(row.parentNode.children).indexOf(row);
        if (this.cachedLineItems && this.cachedLineItems[rowIndex]) {
          this.cachedLineItems[rowIndex].name = item.name;
          this.cachedLineItems[rowIndex].description = item.description || "";
          this.cachedLineItems[rowIndex].unitPrice = item.unit_price || 0;
          this.cachedLineItems[rowIndex].catalog_item_id = item.id; // Store the ID as the key
          console.log(
            "üîç [AUTOCOMPLETE] Updated cached line item:",
            this.cachedLineItems[rowIndex]
          );
        }

        if (quantityInput && quantityInput.value === "0") {
          quantityInput.value = "1";
          console.log("üîç [AUTOCOMPLETE] Set quantity to 1");
        }

        // Hide dropdown
        dropdown.classList.add("hidden");

        // Update the total for this row
        this.updateRowTotal();

        console.log("‚úÖ [AUTOCOMPLETE] Item selected and fields populated");
      }
    }
  }

  // Initialize the ProposalManager
  async function initializeProposalManager(project, projectStatus, currentUser) {
    console.log("üîß [PROPOSAL-MANAGER] Initializing ProposalManager for project:", project.id);

    // Create the proposal manager instance
    window.proposalManager = new ProposalManager(project, projectStatus, currentUser);

    console.log("‚úÖ [PROPOSAL-MANAGER] ProposalManager initialized successfully");
  }

  // Define the updateRowTotalDirect function globally first
  function updateRowTotalDirect(inputElement) {
    // console.log("üîç [DIRECT] updateRowTotalDirect called with input:", inputElement, "value:", inputElement.value);
    const row = inputElement.closest("tr");
    if (!row) {
      console.log("‚ùå [DIRECT] No row found for input element");
      return;
    }

    // Use the input element that triggered the event as the primary source
    let qtyInput;
    let priceInput;

    // Determine which input triggered the event and use it directly
    if (
      inputElement.getAttribute("data-field") === "quantity" ||
      inputElement.classList.contains("line-item-quantity")
    ) {
      qtyInput = inputElement;
      priceInput = row.querySelector('input[data-field="unitPrice"], .line-item-unit-price');
    } else if (
      inputElement.getAttribute("data-field") === "unitPrice" ||
      inputElement.classList.contains("line-item-unit-price")
    ) {
      priceInput = inputElement;
      qtyInput = row.querySelector('input[data-field="quantity"], .line-item-quantity');
    } else {
      // Fallback to querying
      qtyInput = row.querySelector('input[data-field="quantity"], .line-item-quantity');
      priceInput = row.querySelector('input[data-field="unitPrice"], .line-item-unit-price');
    }

    const totalSpan = row.querySelector(".row-total, .line-item-total");

    // console.log("üîç [DIRECT] Found elements:", {
    //   qtyInput: !!qtyInput,
    //   priceInput: !!priceInput,
    //   totalSpan: !!totalSpan,
    //   qtyValue: qtyInput?.value,
    //   priceValue: priceInput?.value,
    //   triggeredBy: inputElement.getAttribute('data-field') || inputElement.className
    // });

    if (qtyInput && priceInput && totalSpan) {
      const quantity = parseFloat(qtyInput.value) || 0;
      const unitPrice = parseFloat(priceInput.value) || 0;
      const total = quantity * unitPrice;

      // console.log("üîç [DIRECT] Calculating total:", { quantity, unitPrice, total });
      totalSpan.textContent = `$${total.toFixed(2)}`;

      // Update grand total
      if (window.updateProposalTotal) {
        window.updateProposalTotal();
      }
    } else {
      console.log("‚ùå [DIRECT] Missing required elements for total calculation");
    }
  }

  // Make it available globally immediately
  window.updateRowTotalDirect = updateRowTotalDirect;

  document.addEventListener("DOMContentLoaded", async () => {
    // Get component data from the global variables set by define:vars
    // Set project data on window object for global access
    window.project = project;
    window.currentUser = currentUser;
    window.statusData = statusData;

    // Update proposal total function
    function updateProposalTotal() {
      let total = 0;

      // Use cachedLineItems from the proposal manager if available
      if (window.proposalManager && window.proposalManager.cachedLineItems) {
        console.log(
          "üîç [PROPOSAL-MANAGER] Calculating total from cachedLineItems:",
          window.proposalManager.cachedLineItems.length,
          "items"
        );

        window.proposalManager.cachedLineItems.forEach((item, index) => {
          const quantity = parseFloat(item.quantity) || 0;
          const unitPrice = parseFloat(item.unitPrice) || 0;
          const rowTotal = quantity * unitPrice;
          total += rowTotal;

          console.log(
            `üîç [PROPOSAL-MANAGER] Item ${index}: qty=${quantity}, price=${unitPrice}, total=${rowTotal}`
          );

          // Update the row total display in the DOM
          const tbody = document.getElementById("proposal-line-items");
          if (tbody) {
            const rows = tbody.querySelectorAll("tr");
            if (rows[index]) {
              const totalCell = rows[index].querySelector(".line-item-total");
              if (totalCell) {
                totalCell.textContent = `$${rowTotal.toFixed(2)}`;
              }
            }
          }
        });

        // Store the total in the proposal manager
        window.proposalManager.cachedTotal = total;
      } else {
        // Fallback: calculate from DOM inputs
        console.log("üîç [PROPOSAL-MANAGER] Fallback: calculating total from DOM inputs");
        const lineItemsContainer = document.getElementById("proposal-line-items");
        if (lineItemsContainer) {
          const rows = lineItemsContainer.querySelectorAll("tr");

          rows.forEach((row) => {
            const quantityInput = row.querySelector(".line-item-quantity");
            const unitPriceInput = row.querySelector(".line-item-price");

            if (quantityInput && unitPriceInput) {
              const quantity = parseFloat(quantityInput.value) || 0;
              const unitPrice = parseFloat(unitPriceInput.value) || 0;
              const rowTotal = quantity * unitPrice;
              total += rowTotal;

              const totalDisplay = row.querySelector(".line-item-total");
              if (totalDisplay) {
                totalDisplay.textContent = `$${rowTotal.toFixed(2)}`;
              }
            }
          });
        }
      }

      console.log("üîç [PROPOSAL-MANAGER] Final calculated total:", total);

      // Update total display in header (if exists)
      const totalElement = document.getElementById("proposal-total");
      if (totalElement) {
        totalElement.textContent = total.toFixed(2);
      }

      // Update desktop footer total
      const tfootTotal = document.getElementById("proposal-total-footer");
      if (tfootTotal) {
        tfootTotal.textContent = total.toFixed(2);
      }

      // Update total due footer (1/2 of total)
      const totalDueFooter = document.getElementById("proposal-total-due-footer");
      if (totalDueFooter) {
        const halfTotal = total / 2;
        totalDueFooter.textContent = halfTotal.toFixed(2);
      }
    }

    // Make functions available globally
    window.updateProposalTotal = updateProposalTotal;
    window.createLineItemRow = createLineItemRow;

    // Initialize the global proposal manager
    if (project) {
      await initializeProposalManager(project, projectStatus, currentUser);

      // If there's an existing invoice, load it automatically
      // console.log("üîç [Client] Checking if should load existing invoice:", { existingInvoice, proposalManager: !!window.proposalManager });
      if (existingInvoice && window.proposalManager) {
        // console.log("‚úÖ [Client] Loading existing proposal invoice:", existingInvoice);
        window.proposalManager
          .loadExistingInvoice(existingInvoice)
          .then(() => {
            // Recalculate total after loading existing invoice to ensure interactive elements work
            updateProposalTotal();
          })
          .catch((error) => {
            console.error("‚ùå [Client] Error loading existing invoice:", error);
          });
      } else {
        console.log("‚ùå [Client] Not loading existing invoice - missing data or manager");
      }
    }

    // Make wrapper functions available globally for onclick handlers
    window.buildProposal = (id) => window.proposalManager?.buildProposal();
    window.regenerateProposal = () => window.proposalManager?.regenerateProposal();
    window.sendProposal = async () => {
      console.log("üîß [PROPOSAL-MANAGER] Send proposal button clicked");

      if (!project) {
        console.error("Project ID not available");
        return;
      }

      // Show loading modal
      if (window.showModal) {
        window.showModal(
          "info",
          "Sending Proposal",
          "Saving & sending proposal...",
          0 // No auto-hide
        );
      }

      try {
        // Update project status to 30 (Proposal Shipped)

        const newStatus = 30;
        console.log("üîç [PROPOSAL-MANAGER] Updating status to:", newStatus);
        console.log("üîç [PROPOSAL-MANAGER] Status data:", statusData);
        console.log("üîç [PROPOSAL-MANAGER] Status data:", statusData[newStatus.toString()]);
        const data = await window.updateStatus(
          project,
          newStatus,
          statusData[newStatus.toString()]
        );
        // console.log("üîç [PROPOSAL-MANAGER] Full API response:", data);

        if (data.success) {
          // console.log("‚úÖ [PROPOSAL-MANAGER] Proposal sent successfully");

          // Modal will be auto-destroyed by the system

          // Show notification using centralized notification system
          window.handleNewStatusNotification(data, "PROPOSAL-MANAGER");
        } else {
          console.error("Failed to send proposal:", data.error);
          // Modal will be auto-destroyed by the system
          if (window.showModal) {
            window.showModal("error", "Error", data.error || "Failed to send proposal");
          }
        }
      } catch (error) {
        console.error("Error sending proposal:", error);
        // Modal will be auto-destroyed by the system
        if (window.showModal) {
          window.showModal("error", "Error", "Failed to send proposal");
        }
      }
    };
    window.addProposalRow = () => window.proposalManager?.addProposalRow();
    window.deleteProposalRow = (index) => window.proposalManager?.deleteProposalRow(index);
    window.confirmDelete = (index) => window.proposalManager?.confirmDelete(index);

    // Note: acceptProposal, addNewLineItem, and initializeSubjectEditing
    // are set up by ProposalHelper.setupGlobalFunctions() when instantiated at end of script

    // Initialize existing line items
    initializeExistingLineItems();

    // Calculate initial total
    updateProposalTotal();

    // Generate initial empty row
    generateInitialEmptyRow();

    // Generate initial empty row function
    function generateInitialEmptyRow() {
      // Desktop table view
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (lineItemsContainer && lineItemsContainer.querySelectorAll("tr").length === 0) {
        const initialRow = createLineItemRow({
          name: "",
          description: "",
          quantity: 1,
          unitPrice: 0,
        });
        lineItemsContainer.appendChild(initialRow);
      }
    }

    // Create a line item row with consistent structure (Desktop)
    function createLineItemRow(item = {}) {
      const row = document.createElement("tr");
      row.className = "hover:bg-gray-50 dark:hover:bg-gray-700 line-item-row";
      row.setAttribute("data-catalog-item-id", item.catalog_item_id || "");
      row.setAttribute("data-edited", "false"); // Track if row has been edited

      const currentTotal = (item.quantity || 0) * (item.unitPrice || 0);
      const rowId = `line-item-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

      row.innerHTML = `
        <td class="px-4 py-3 text-sm text-gray-900 dark:text-white">
          <div class="">
            <input
              type="text"
              id="${rowId}-name"
              name="line-item-name"
              class="${globalInputClasses} line-item-name"
              placeholder="Enter line item description..."
              value="${item.name || ""}"
              autocomplete="off"
            />
            <!-- Autocomplete dropdown -->
            <div class="autocomplete-dropdown overflow-y-auto absolute z-50 w-66 h-80 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg dark:bg-gray-700 dark:border-gray-600 hidden">
              <!-- Suggestions will be populated here -->
            </div>
          </div>
          <input
            type="text"
            id="${rowId}-description"
            name="line-item-description"
            class="${globalInputClasses} line-item-description w-full mt-2"
            placeholder="Description (optional)"
              value="${item.description || ""}"
          />
        </td>
        <td class="px-4 py-3 text-sm text-right text-gray-900 dark:text-white">
          <input
            type="number"
            id="${rowId}-quantity"
            name="line-item-quantity"
            class="${globalInputClasses} line-item-quantity w-20"
            value="${item.quantity || 1}"
            min="0"
            step="1"
            oninput="updateRowTotalDirect(this)"
            onchange="updateRowTotalDirect(this)"
          />
        </td>
        <td class="px-4 py-3 text-sm text-right text-gray-900 dark:text-white">
          <input
            type="number"
            id="${rowId}-unit-price"
            name="line-item-unit-price"
            class="${globalInputClasses} line-item-unit-price w-24"
            value="${item.unitPrice || 0}"
            min="0"
            step="1"
            oninput="updateRowTotalDirect(this)"
            onchange="updateRowTotalDirect(this)"
          />
        </td>
        <td class="px-4 py-3 text-sm text-right font-medium text-gray-900 dark:text-white">
          <span class="line-item-total">$${currentTotal.toFixed(2)}</span>
        </td>
        <td class="px-4 py-3 text-center">
          <div class="flex gap-2 justify-center">
            <button
              type="button"
              class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
              onclick="this.closest('tr').remove(); updateProposalTotal();"
              title="Delete line item"
            >
              <i class="bx bx-trash"></i>
            </button>
          </div>
        </td>
      `;

      // Add event listeners to mark row as edited when inputs change
      const inputs = row.querySelectorAll("input");
      // console.log(`üîç [PROPOSAL-MANAGER] Adding edit listeners to ${inputs.length} inputs for row with catalog ID: ${item.catalog_item_id}`);
      inputs.forEach((input, inputIndex) => {
        input.addEventListener("input", () => {
          row.setAttribute("data-edited", "true");
          // console.log(`üîç [PROPOSAL-MANAGER] Row marked as edited (input ${inputIndex})`);
        });
      });

      return row;
    }

    // Initialize existing line items with event listeners
    function initializeExistingLineItems() {
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (!lineItemsContainer) return;

      // Add event listeners to existing line items
      const existingRows = lineItemsContainer.querySelectorAll(".proposal-line-item-row");
      existingRows.forEach((row) => {
        const quantityInput = row.querySelector(".quantity-input, .line-item-quantity");
        const unitPriceInput = row.querySelector(".unit-price-input, .line-item-unit-price");
        const removeBtn = row.querySelector(".remove-item-btn");

        const updateTotal = () => {
          const quantity = parseFloat(quantityInput?.value) || 0;
          const unitPrice = parseFloat(unitPriceInput?.value) || 0;
          const total = quantity * unitPrice;
          const totalDisplay = row.querySelector(".total-display, .line-item-total");
          if (totalDisplay) {
            totalDisplay.textContent = `$${total.toFixed(2)}`;
          }
          updateProposalTotal();
        };

        if (quantityInput) quantityInput.addEventListener("input", updateTotal);
        if (unitPriceInput) unitPriceInput.addEventListener("input", updateTotal);
        if (removeBtn) {
          removeBtn.addEventListener("click", async () => {
            const itemId = removeBtn.dataset.itemId;
            if (itemId) {
              // Delete from database
              try {
                const response = await fetch("/api/delete-line-item", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ itemId }),
                });

                if (response.ok) {
                  row.remove();
                  updateProposalTotal();
                } else {
                  console.error("Failed to delete line item");
                }
              } catch (error) {
                console.error("Error deleting line item:", error);
              }
            } else {
              // Just remove from DOM (new unsaved item)
              row.remove();
              updateProposalTotal();
            }
          });
        }
      });
    }

    // Autocomplete functionality
    function initializeAutocomplete() {
      // console.log("üîç [AUTOCOMPLETE] Initializing autocomplete for all line item rows");

      // Initialize autocomplete for existing rows
      initializeAutocompleteForRows();

      // Set up event delegation for dynamically added rows
      setupEventDelegation();
    }

    // Set up event delegation for dynamically added rows
    function setupEventDelegation() {
      // Listen for focus events on description inputs
      document.addEventListener(
        "focus",
        (e) => {
          const target = e.target;
          // console.log("üîç [AUTOCOMPLETE] Focus event triggered on:", target);

          // Check for both new class names and existing data attributes
          const isDescriptionField =
            target &&
            target instanceof HTMLElement &&
            (target.classList?.contains("line-item-name") ||
              target.getAttribute("data-field") === "description");

          if (isDescriptionField) {
            // console.log("üîç [AUTOCOMPLETE] Focus on description field detected");
            const row = target.closest("tr");
            if (row) {
              // Look for existing dropdown or create one
              let dropdown = row.querySelector(".autocomplete-dropdown");
              if (!dropdown) {
                // Create dropdown for rows that don't have one
                const inputContainer = target.closest("td");
                if (inputContainer) {
                  dropdown = document.createElement("div");
                  dropdown.className =
                    "autocomplete-dropdown overflow-y-auto absolute z-50 w-66 h-80 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg dark:bg-gray-700 dark:border-gray-600 hidden";
                  // inputContainer.style.position = 'relative';
                  inputContainer.appendChild(dropdown);
                  // console.log("üîç [AUTOCOMPLETE] Created dropdown for row");
                }
              }

              if (dropdown) {
                // console.log("üîç [AUTOCOMPLETE] Loading catalog items for dropdown");
                loadAllCatalogItemsForRow(dropdown);
              } else {
                // console.log("‚ùå [AUTOCOMPLETE] Could not create or find dropdown");
              }
            } else {
              // console.log("‚ùå [AUTOCOMPLETE] No row found");
            }
          }
        },
        true
      );

      // Listen for input events on description inputs only
      document.addEventListener("input", (e) => {
        const target = e.target;

        // Check for both new class names and existing data attributes
        const isDescriptionField =
          target &&
          target instanceof HTMLElement &&
          (target.classList?.contains("line-item-name") ||
            target.getAttribute("data-field") === "description");

        if (isDescriptionField) {
          console.log("üîç [AUTOCOMPLETE] Input on description field detected:", target);
          const row = target.closest("tr");
          if (row) {
            const dropdown = row.querySelector(".autocomplete-dropdown");
            if (dropdown) {
              console.log("üîç [AUTOCOMPLETE] Filtering catalog items for dropdown");
              filterCatalogItemsForRow(dropdown, target.value);
            } else {
              console.log("‚ùå [AUTOCOMPLETE] No dropdown found in row for input");
            }
          } else {
            console.log("‚ùå [AUTOCOMPLETE] No row found for input");
          }
        }
        // Don't interfere with other input events - let them bubble normally
      });

      // Hide dropdown when clicking outside
      document.addEventListener("click", (e) => {
        const target = e.target;
        if (target && target instanceof HTMLElement) {
          // Check if click is outside any autocomplete dropdown
          const isInsideDropdown = target.closest(".autocomplete-dropdown");
          const isDescriptionInput =
            target.classList?.contains("line-item-name") ||
            target.getAttribute("data-field") === "description";

          if (!isInsideDropdown && !isDescriptionInput) {
            // Hide all dropdowns
            const allDropdowns = document.querySelectorAll(".autocomplete-dropdown");
            allDropdowns.forEach((dropdown) => {
              dropdown.classList.add("hidden");
            });
          }
        }
      });
    }

    // Global variables for catalog items (shared across all rows)
    let globalCatalogItems = [];

    // Load all catalog items (shared function)
    async function loadAllCatalogItemsForRow(dropdown) {
      console.log("üîç [AUTOCOMPLETE] loadAllCatalogItemsForRow called");
      if (globalCatalogItems.length === 0) {
        console.log("üîç [AUTOCOMPLETE] Loading catalog items from API");
        try {
          const url = `/api/line-items-catalog?limit=50`;
          const response = await fetch(url, { credentials: "include" });
          if (response.ok) {
            const result = await response.json();
            globalCatalogItems = result.items || result;
            console.log("üîç [AUTOCOMPLETE] Loaded", globalCatalogItems.length, "catalog items");
          } else {
            console.error("‚ùå [AUTOCOMPLETE] API error:", response.status);
          }
        } catch (error) {
          console.error("‚ùå [AUTOCOMPLETE] Error loading catalog items:", error);
        }
      } else {
        console.log("üîç [AUTOCOMPLETE] Using cached catalog items:", globalCatalogItems.length);
      }
      displaySuggestionsForRow(dropdown, globalCatalogItems);
    }

    // Filter catalog items for a specific row
    function filterCatalogItemsForRow(dropdown, query) {
      if (!query || query.length === 0) {
        displaySuggestionsForRow(dropdown, globalCatalogItems);
        return;
      }

      const filteredItems = globalCatalogItems.filter(
        (item) =>
          item.name.toLowerCase().includes(query.toLowerCase()) ||
          (item.name && item.name.toLowerCase().includes(query.toLowerCase()))
      );

      displaySuggestionsForRow(dropdown, filteredItems);
    }

    // Display suggestions for a specific row
    function displaySuggestionsForRow(dropdown, items) {
      console.log("üîç [AUTOCOMPLETE] displaySuggestionsForRow called with", items.length, "items");
      if (items.length === 0) {
        console.log("üîç [AUTOCOMPLETE] No items to display, hiding dropdown");
        dropdown.classList.add("hidden");
        return;
      }

      dropdown.innerHTML = "";
      items.forEach((item) => {
        const suggestion = document.createElement("div");
        suggestion.className = `px-3 py-2 cursor-pointer hover:bg-blue-50 dark:hover:bg-gray-600 border-b border-gray-100 dark:border-gray-600 last:border-b-0 transition-colors duration-150`;
        suggestion.innerHTML = `
          <div class="font-medium text-gray-900 dark:text-white">${item.name}</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">${item.description || ""}</div>
          <div class="text-sm font-semibold text-green-600 dark:text-green-400">$${item.unit_price}</div>
        `;
        suggestion.onclick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          selectSuggestionForRow(dropdown, item);
        };
        dropdown.appendChild(suggestion);
      });
      console.log("üîç [AUTOCOMPLETE] Showing dropdown with", items.length, "items");
      dropdown.classList.remove("hidden");
    }

    // Select suggestion for a specific row
    function selectSuggestionForRow(dropdown, item) {
      const row = dropdown.closest("tr");
      if (row) {
        console.log("üîç [AUTOCOMPLETE] Selecting suggestion for row:", item);

        // Try to find inputs using both new class names and existing data attributes
        const nameInput = row.querySelector('.line-item-name, input[data-field="name"]');
        const descriptionInput = row.querySelector(
          '.line-item-description, input[data-field="description"]'
        );
        const unitPriceInput = row.querySelector(
          '.line-item-unit-price, input[data-field="unitPrice"]'
        );
        const quantityInput = row.querySelector(
          '.line-item-quantity, input[data-field="quantity"]'
        );

        console.log("üîç [AUTOCOMPLETE] Found inputs:", {
          name: !!nameInput,
          description: !!descriptionInput,
          unitPrice: !!unitPriceInput,
          quantity: !!quantityInput,
        });

        if (nameInput) {
          nameInput.value = item.name;
          console.log("üîç [AUTOCOMPLETE] Set name to:", item.name);
        }

        if (descriptionInput && item.description) {
          descriptionInput.value = item.description;
          console.log("üîç [AUTOCOMPLETE] Set description to:", item.description);
        }

        if (unitPriceInput) {
          unitPriceInput.value = item.unit_price.toString();
          console.log("üîç [AUTOCOMPLETE] Set unit price to:", item.unit_price);
        }

        // Update total - try to find total display using both methods
        const totalDisplay = row.querySelector(".line-item-total, .total-display");
        if (quantityInput && totalDisplay) {
          const quantity = parseFloat(quantityInput.value) || 0;
          const unitPrice = parseFloat(unitPriceInput?.value || "0") || 0;
          const total = quantity * unitPrice;
          totalDisplay.textContent = `$${total.toFixed(2)}`;
          console.log("üîç [AUTOCOMPLETE] Updated total to:", total);
        }

        // Trigger input events to update any other calculations
        // Use a small delay to ensure the value is set before triggering events
        setTimeout(() => {
          if (unitPriceInput) {
            unitPriceInput.dispatchEvent(new Event("input", { bubbles: true }));
          }
          if (quantityInput) {
            quantityInput.dispatchEvent(new Event("input", { bubbles: true }));
          }
        }, 10);
      }
      dropdown.classList.add("hidden");
    }
  });

  // Proposal Helper Class - manages all proposal-related functionality
  class ProposalHelper {
    constructor() {
      this.initialize();
    }

    // Initialize the helper
    initialize() {
      this.initializeSubjectEditing();
      this.setupGlobalFunctions();
    }

    // Setup global functions for backward compatibility
    setupGlobalFunctions() {
      window.addNewLineItem = () => this.addNewLineItem();
      window.initializeSubjectEditing = () => this.initializeSubjectEditing();
      window.acceptProposal = () => this.acceptProposal();
      console.log("üîß [PROPOSAL-HELPER] Global functions set up:", {
        addNewLineItem: !!window.addNewLineItem,
        initializeSubjectEditing: !!window.initializeSubjectEditing,
        acceptProposal: !!window.acceptProposal,
      });
    }

    // Add new line item method
    addNewLineItem() {
      console.log("‚ûï [PROPOSAL-MANAGER] Adding new line item");

      // Create new row for desktop view
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (lineItemsContainer) {
        const newRow = window.createLineItemRow
          ? window.createLineItemRow({
              name: "",
              description: "",
              quantity: 1,
              unitPrice: 0,
            })
          : null;

        // Add the new row to the table
        if (newRow) {
          lineItemsContainer.appendChild(newRow);
          console.log("‚úÖ [PROPOSAL-MANAGER] Added new row to desktop table");
        }
      }

      // Update proposal total
      if (window.updateProposalTotal) {
        window.updateProposalTotal();
      }
    }
    // Global variable assignment removed - using existingInvoice directly

    // Subject editing functionality
    initializeSubjectEditing() {
      const editBtn = document.getElementById("edit-subject-btn");
      const saveBtn = document.getElementById("save-subject-btn");
      const cancelBtn = document.getElementById("cancel-subject-btn");
      const displayDiv = document.getElementById("proposal-subject-display");
      const editDiv = document.getElementById("proposal-subject-edit");
      const subjectText = document.getElementById("proposal-subject-text");
      const dropdownContainer = document.getElementById("subject-dropdown-container");

      if (
        !editBtn ||
        !saveBtn ||
        !cancelBtn ||
        !displayDiv ||
        !editDiv ||
        !subjectText ||
        !dropdownContainer
      ) {
        return; // Elements not found, proposal not generated yet
      }

      let subjectDropdown = null;

      // Create subject dropdown dynamically
      function createSubjectDropdown() {
        const currentSubject = subjectText?.textContent?.trim() || "";

        if (dropdownContainer) {
          dropdownContainer.innerHTML = `
            <div class="grid grid-cols-1 gap-2">
              <label class="text-sm font-medium text-zinc-900 dark:text-zinc-300">
                Proposal Subject
              </label>
              <div class="relative w-full">
                <div class="relative">
                  <input
                    type="text"
                    id="proposal-subject-dropdown-search"
                    placeholder="Search and select or create subject..."
                    class="_1jTZ8KXRZul60S6czNi w-full rounded-lg border border-border-light px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-border-dark dark:text-white dark:focus:border-primary-400 w-full pl-8 pr-10"
                    autocomplete="off"
                    value="${currentSubject}"
                  />
                  <svg class="absolute left-2.5 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                  <button
                    type="button"
                    id="proposal-subject-dropdown-clear"
                    class="absolute right-2.5 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 ${currentSubject ? "" : "hidden"}"
                  >
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                <div
                  class="absolute left-0 right-0 z-50 mt-1 bg-white rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-700 hidden"
                  id="proposal-subject-dropdown-menu"
                  role="listbox"
                >
                  <div class="px-3 py-2 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50">
                    <div class="text-xs text-gray-500 dark:text-gray-400">
                      <span id="proposal-subject-dropdown-results-count">0</span> subjects available
                    </div>
                  </div>
                  <div class="max-h-64 overflow-y-auto">
                    <div id="proposal-subject-dropdown-options">
                      <!-- Options will be loaded dynamically -->
                    </div>
                    <div id="proposal-subject-dropdown-create-new" class="hidden border-t border-gray-200 dark:border-gray-700">
                      <button
                        type="button"
                        class="group flex w-full items-center px-3 py-3 text-sm hover:bg-blue-50 dark:hover:bg-blue-900/30 transition-colors text-blue-600 dark:text-blue-400"
                        id="proposal-subject-dropdown-create-btn"
                      >
                        <svg class="w-4 h-4 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        <div class="flex-1 text-left">
                          <div class="font-medium">Create new subject:</div>
                          <div class="text-xs opacity-75" id="proposal-subject-dropdown-create-preview"></div>
                        </div>
                      </button>
                    </div>
                    <div id="proposal-subject-dropdown-no-results" class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                      </svg>
                      <div class="mt-2">No subjects found</div>
                      <div class="text-xs">Try a different search or create a new subject</div>
                    </div>
                    <div id="proposal-subject-dropdown-loading" class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                      <div class="animate-spin mx-auto h-6 w-6 border-2 border-blue-500 border-t-transparent rounded-lg"></div>
                      <div class="mt-2">Loading subjects...</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="proposal-subject-dropdown-hidden" value="${currentSubject}" />
              </div>
            </div>
          `;

          // Initialize the dropdown functionality
          initializeDropdownFunctionality();
        }
      }

      // Initialize dropdown functionality
      function initializeDropdownFunctionality() {
        const searchInput = document.getElementById("proposal-subject-dropdown-search");
        const menuElement = document.getElementById("proposal-subject-dropdown-menu");
        const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");
        const optionsContainer = document.getElementById("proposal-subject-dropdown-options");
        const resultsCountElement = document.getElementById(
          "proposal-subject-dropdown-results-count"
        );
        const noResultsElement = document.getElementById("proposal-subject-dropdown-no-results");
        const loadingElement = document.getElementById("proposal-subject-dropdown-loading");
        const createNewElement = document.getElementById("proposal-subject-dropdown-create-new");
        const createBtn = document.getElementById("proposal-subject-dropdown-create-btn");
        const createPreview = document.getElementById("proposal-subject-dropdown-create-preview");
        const clearButton = document.getElementById("proposal-subject-dropdown-clear");

        if (!searchInput || !menuElement || !hiddenInput || !optionsContainer) return;

        let subjects = [];
        let isDropdownVisible = false;
        let searchTimeout = null;

        // Load subjects from API
        async function loadSubjects(searchTerm = "") {
          if (loadingElement) loadingElement.classList.remove("hidden");
          if (noResultsElement) noResultsElement.classList.add("hidden");
          if (createNewElement) createNewElement.classList.add("hidden");

          try {
            const params = new URLSearchParams();
            if (searchTerm) params.append("search", searchTerm);
            params.append("limit", "20");

            const response = await fetch(`/api/invoice-subject-util?${params}`, {
              credentials: "include",
            });

            if (response.ok) {
              const data = await response.json();
              subjects = data.subjects || [];
              renderSubjects(searchTerm);
            } else {
              console.error("Failed to load subjects");
              subjects = [];
              renderSubjects(searchTerm);
            }
          } catch (error) {
            console.error("Error loading subjects:", error);
            subjects = [];
            renderSubjects(searchTerm);
          } finally {
            if (loadingElement) loadingElement.classList.add("hidden");
          }
        }

        // Render subjects in dropdown
        function renderSubjects(searchTerm = "") {
          if (!optionsContainer) return;

          const term = searchTerm.toLowerCase().trim();
          let visibleCount = 0;

          // Clear existing options
          optionsContainer.innerHTML = "";

          // Filter and render subjects
          subjects.forEach((subject) => {
            const matches =
              !term ||
              subject.subject.toLowerCase().includes(term) ||
              (subject.description && subject.description.toLowerCase().includes(term)) ||
              (subject.category && subject.category.toLowerCase().includes(term));

            if (matches) {
              const option = createSubjectOption(subject);
              optionsContainer.appendChild(option);
              visibleCount++;
            }
          });

          // Update results count
          if (resultsCountElement) {
            resultsCountElement.textContent = visibleCount.toString();
          }

          // Show/hide create new option
          if (createNewElement && createPreview) {
            if (term && !subjects.some((s) => s.subject.toLowerCase() === term)) {
              createPreview.textContent = `"${searchTerm}"`;
              createNewElement.classList.remove("hidden");
            } else {
              createNewElement.classList.add("hidden");
            }
          }

          // Show/hide no results message
          if (noResultsElement) {
            if (visibleCount === 0 && term && createNewElement?.classList.contains("hidden")) {
              noResultsElement.classList.remove("hidden");
            } else {
              noResultsElement.classList.add("hidden");
            }
          }
        }

        // Create subject option element
        function createSubjectOption(subject) {
          const button = document.createElement("button");
          button.type = "button";
          button.className =
            "group flex w-full items-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300 subject-option";
          button.setAttribute("data-subject-id", subject.id);
          button.setAttribute("data-subject-text", subject.subject);

          button.innerHTML = `
              <span class="flex items-center flex-1 min-w-0">
                <svg class="w-4 h-4 mr-3 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                </svg>
                <div class="flex-1 min-w-0">
                  <div class="truncate font-medium">${subject.subject}</div>
                  ${subject.description ? `<div class="text-xs text-gray-500 dark:text-gray-400 truncate">${subject.description}</div>` : ""}
                  <div class="flex items-center mt-1 text-xs text-gray-400">
                    ${subject.category ? `<span class="mr-2">${subject.category}</span>` : ""}
                    <span class="flex items-center">
                      <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                      </svg>
                      ${subject.usage_count} uses
                    </span>
                  </div>
                </div>
              </span>
            `;

          return button;
        }

        // Show/hide clear button
        function toggleClearButton() {
          if (clearButton && searchInput) {
            if (searchInput.value.trim()) {
              clearButton.classList.remove("hidden");
            } else {
              clearButton.classList.add("hidden");
            }
          }
        }

        // Show/hide dropdown
        function showDropdown() {
          if (!isDropdownVisible && menuElement) {
            menuElement.classList.remove("hidden");
            isDropdownVisible = true;
          }
        }

        function hideDropdown() {
          if (isDropdownVisible && menuElement) {
            menuElement.classList.add("hidden");
            isDropdownVisible = false;
          }
        }

        // Event listeners
        searchInput.addEventListener("input", (e) => {
          const value = e.target.value;
          hiddenInput.value = value;
          toggleClearButton();

          // Debounce search
          if (searchTimeout) clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => {
            loadSubjects(value);
            if (value.trim() && !isDropdownVisible) {
              showDropdown();
            }
          }, 300);
        });

        searchInput.addEventListener("focus", () => {
          showDropdown();
          if (subjects.length === 0) {
            loadSubjects(searchInput.value);
          }
        });

        searchInput.addEventListener("blur", () => {
          setTimeout(() => {
            hideDropdown();
          }, 150);
        });

        if (clearButton) {
          clearButton.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            searchInput.value = "";
            hiddenInput.value = "";
            toggleClearButton();
            searchInput.focus();
            loadSubjects("");
          });
        }

        // Handle option selection
        optionsContainer.addEventListener("click", (e) => {
          const option = e.target.closest("button[data-subject-text]");
          if (!option) return;

          const subjectText = option.getAttribute("data-subject-text");
          if (subjectText) {
            searchInput.value = subjectText;
            hiddenInput.value = subjectText;
          }
          toggleClearButton();
          hideDropdown();
        });

        // Handle create new subject
        if (createBtn) {
          createBtn.addEventListener("click", async () => {
            const newSubject = searchInput.value.trim();
            if (newSubject) {
              try {
                const response = await fetch("/api/invoice-subject-util", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  credentials: "include",
                  body: JSON.stringify({
                    subject: newSubject,
                    category: "General",
                  }),
                });

                const data = await response.json();

                if (data.success) {
                  searchInput.value = newSubject;
                  hiddenInput.value = newSubject;
                  hideDropdown();
                  window.showModal(
                    "Success",
                    data.isNew ? "New subject created!" : "Subject selected!",
                    "success"
                  );
                  loadSubjects("");
                } else {
                  console.error("Failed to create subject:", data.error);
                  window.showModal("error", "Error", "Failed to create subject");
                }
              } catch (error) {
                console.error("Error creating subject:", error);
                window.showModal("error", "Error", "Failed to create subject");
              }
            }
          });
        }

        // Prevent dropdown from closing when clicking inside
        menuElement.addEventListener("mousedown", (e) => {
          e.preventDefault();
        });

        // Close dropdown when clicking outside
        document.addEventListener("click", (e) => {
          if (!searchInput.contains(e.target) && !menuElement.contains(e.target)) {
            hideDropdown();
          }
        });

        // Initialize
        toggleClearButton();
        loadSubjects("");
      }

      // Edit button click
      editBtn.addEventListener("click", () => {
        displayDiv.classList.add("hidden");
        editDiv.classList.remove("hidden");
        createSubjectDropdown();
      });

      // Save button click
      saveBtn.addEventListener("click", async () => {
        const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");
        const newSubject = hiddenInput ? hiddenInput.value.trim() : "";

        if (!newSubject) {
          window.showModal("error", "Error", "Please select or enter a subject");
          return;
        }

        try {
          // Save to database
          const response = await fetch("/api/save-proposal-subject", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            credentials: "include",
            body: JSON.stringify({
              subject: newSubject,
            }),
          });

          const data = await response.json();

          if (data.success) {
            // Update UI
            subjectText.textContent = newSubject;
            editDiv.classList.add("hidden");
            displayDiv.classList.remove("hidden");

            // Show success message
            window.showModal("Success", "Proposal subject updated successfully!", "success");
          } else {
            // Check if it's a migration required error
            if (data.migration_required) {
              window.showModal(
                "error",
                "Database Error",
                "Database column 'subject' not found in invoices table"
              );
              console.error("Column missing:", data.details);
            } else {
              throw new Error(data.error || "Failed to update subject");
            }
          }
        } catch (error) {
          console.error("Error updating proposal subject:", error);
          window.showModal("error", "Error", "Failed to update proposal subject");
        }
      });

      // Cancel button click
      cancelBtn.addEventListener("click", () => {
        editDiv.classList.add("hidden");
        displayDiv.classList.remove("hidden");
      });
    }

    // Accept Proposal method
    async acceptProposal() {
      console.log("üîß [ACCEPT-PROPOSAL] Method called");
      const button = document.querySelector('[onclick="window.acceptProposal()"]');
      if (!button) {
        console.error("‚ùå [ACCEPT-PROPOSAL] Button not found");
        return;
      }
      console.log("üîß [ACCEPT-PROPOSAL] Button found:", button);

      window.showModal("info", "", "Processing Proposal & Generating Contract...", 5000);

      const originalText = button.innerHTML;

      try {
        // Show loading state
        button.disabled = true;
        button.innerHTML = `
          <svg class="animate-spin h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Accepting Proposal...
        `;

        // Get project data from global variables
        const project = window.project;
        const projectId = project?.id;
        const projectStatus = project?.status;

        console.log("üîî [PROPOSAL-MANAGER] Accepting proposal for project:", projectId);
        console.log("üîî [PROPOSAL-MANAGER] Project status:", projectStatus);
        console.log("üîî [PROPOSAL-MANAGER] Full project object:", project);

        // Validate projectId
        if (!projectId) {
          console.error("‚ùå [PROPOSAL-MANAGER] No projectId found!");
          console.error("‚ùå [PROPOSAL-MANAGER] project:", project);

          // Show error to user
          if (window.showModal) {
            window.showModal(
              "error",
              "Error",
              "Project ID not found. Please refresh the page and try again."
            );
          }

          // Reset button
          button.disabled = false;
          button.innerHTML = originalText;
          return;
        }

        const parsedProjectId = parseInt(projectId);
        if (isNaN(parsedProjectId)) {
          console.error("‚ùå [PROPOSAL-MANAGER] Invalid projectId:", projectId);

          // Show error to user
          if (window.showModal) {
            window.showModal(
              "error",
              "Error",
              "Invalid project ID. Please refresh the page and try again."
            );
          }

          // Reset button
          button.disabled = false;
          button.innerHTML = originalText;
          return;
        }

        // Make API call to update status to 45 (Proposal Accepted)
        const nextStatus = 45;
        const result = await window.updateStatus(
          project,
          nextStatus,
          statusData[nextStatus.toString()]
        );

        if (result.success) {
          console.log("‚úÖ [PROPOSAL-MANAGER] Proposal accepted successfully");

          // Show notification using new modal system
          window.handleNewStatusNotification(result, "PROPOSAL-MANAGER");
        } else {
          console.error("‚ùå [PROPOSAL-MANAGER] Failed to accept proposal:", result.error);

          // Show error message
          if (typeof window.showModal === "function") {
            window.showModal(
              "Error",
              result.error || "Failed to accept proposal. Please try again.",
              "error"
            );
          }

          // Restore button
          button.disabled = false;
          button.innerHTML = originalText;
        }
      } catch (error) {
        console.error("‚ùå [PROPOSAL-MANAGER] Error accepting proposal:", error);

        // Show error message
        if (typeof window.showModal === "function") {
          window.showModal(
            "Error",
            "An error occurred while accepting the proposal. Please try again.",
            "error"
          );
        }
      } finally {
        // Restore button
        button.disabled = false;
        button.innerHTML = originalText;
      }
    }
  }
  // Initialize the ProposalHelper class
  window.proposalHelper = new ProposalHelper();
</script>
