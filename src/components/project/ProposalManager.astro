---
import BoxIcon from "../common/BoxIcon.astro";
import LineItemSelector from "../form/LineItemSelector.astro";
import PaymentForm from "./PaymentForm.astro";
import { supabase } from "../../lib/supabase";

interface Props {
  projectId: string;
  project: any;
  projectAuthor?: any;
  role?: string;
}

const { projectId, project, projectAuthor, role } = Astro.props;

// Only show to Admin/Staff users
const canManageProposals = role === "Admin" || role === "Staff";

// Check if there's already an invoice for this project
let existingInvoice = null;
try {
  const { data: invoice, error } = await supabase
    .from("invoices")
    .select("*")
    .eq("project_id", parseInt(projectId))
    .eq("type", "proposal")
    .single();
  
  if (!error && invoice) {
    existingInvoice = invoice;
  }
} catch (error) {
  console.log("No existing proposal invoice found for project:", projectId);
}

const hasExistingInvoice = !!existingInvoice;
---

<div class="rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
  <!-- Initial state: No proposal generated -->
  <div id="proposal-placeholder" class={hasExistingInvoice ? "hidden" : "py-8 text-center"}>
    <BoxIcon name="file-pdf" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
    <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal</h3>
    <p class="mb-4 text-gray-500 dark:text-gray-400">
      {
        canManageProposals ? (
          <span
            set:html={`Generate a project proposal for <b>${projectAuthor.company_name}</b> for <b>${project.address}</b> based on the project form data.`}
          />
        ) : (   
          <span
            set:html={`Your project proposal is being generated.<br>You will be notified at <b>${projectAuthor?.email}</b> when it is ready.`}
          />
        )
      }
    </p>
    {
      canManageProposals && (
        <button
          onclick={`buildProposal('${projectId}')`}
          class="inline-flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700"
        >
          <BoxIcon name="plus" class="mr-2 h-4 w-4" />
          Build Proposal
        </button>
      )
    }
  </div>

  <!-- Generated proposal content (hidden initially) -->
  <div id="proposal-content" class={hasExistingInvoice ? "" : "hidden"}>
    <!-- Proposal Header -->
    <div class="mb-6 flex items-start justify-between">
      <div class="flex-1">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Project Proposal</h1>

        <!-- Editable Subject Line -->
        <div class="mt-3">
          <div id="proposal-subject-display" class="cursor-pointer">
            <p
              class="text-lg font-medium text-gray-800 transition-colors hover:text-blue-600 dark:text-gray-200 dark:hover:text-blue-400"
            >
              <span id="proposal-subject-text">Fire Protection Services Proposal</span>
              <button
                type="button"
                id="edit-subject-btn"
                class="ml-2 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
                title="Edit subject"
              >
                <i class="bx bx-edit text-sm"></i>
              </button>
            </p>
          </div>

          <div id="proposal-subject-edit" class="hidden">
            <div class="space-y-2">
              <div id="subject-dropdown-container">
                <!-- Subject dropdown will be inserted here -->
              </div>
              <div class="flex items-center space-x-2">
                <button
                  type="button"
                  id="save-subject-btn"
                  class="rounded-lg bg-blue-600 px-3 py-2 text-sm text-white transition-colors hover:bg-blue-700"
                  title="Save subject"
                >
                  <i class="bx bx-check mr-1"></i>
                  Save
                </button>
                <button
                  type="button"
                  id="cancel-subject-btn"
                  class="rounded-lg bg-gray-500 px-3 py-2 text-sm text-white transition-colors hover:bg-gray-600"
                  title="Cancel"
                >
                  <i class="bx bx-x mr-1"></i>
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>

        <p class="mt-2 text-gray-600 dark:text-gray-400">
          <span id="proposal-project-title">Project Title</span>
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-500">
          Generated on: <span id="proposal-date"></span>
        </p>
      </div>
      <div class="ml-4 text-right">
        <p class="text-2xl font-bold text-green-600 dark:text-green-400">
          $<span id="proposal-total">0.00</span>
        </p>
        <p class="text-sm text-gray-600 dark:text-gray-400">Estimated Total</p>
      </div>
    </div>

    <!-- Project Details -->
    <div class="mb-6 grid grid-cols-1 gap-6 md:grid-cols-2">
      <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
        <h3 class="mb-2 font-semibold text-gray-900 dark:text-white">Project Information</h3>
        <div class="space-y-1 text-sm">
          <p><strong>Address:</strong> <span id="proposal-address">-</span></p>
          <p><strong>Square Footage:</strong> <span id="proposal-sq-ft">-</span> sq ft</p>
          <p><strong>Construction Type:</strong> <span id="proposal-construction-type">-</span></p>
        </div>
      </div>
      <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
        <h3 class="mb-2 font-semibold text-gray-900 dark:text-white">Contact Information</h3>
        <div class="space-y-1 text-sm">
          <p><strong>Client:</strong> <span id="proposal-client-name">-</span></p>
          <p><strong>Email:</strong> <span id="proposal-client-email">-</span></p>
          <p><strong>Phone:</strong> <span id="proposal-client-phone">-</span></p>
        </div>
      </div>
    </div>

    <!-- Line Items Table -->
    <div class="mb-6">
      <h3 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Services & Pricing</h3>
      <div class="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-600">
        <table class="w-full">
          <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th
                class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Description
              </th>
              <th
                class="px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Quantity
              </th>
              <th
                class="px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Unit Price
              </th>
              <th
                class="px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Total
              </th>
            </tr>
          </thead>
          <tbody
            id="proposal-line-items"
            class="divide-y divide-gray-200 bg-white dark:divide-gray-600 dark:bg-gray-800"
          >
            <!-- Line items will be inserted here dynamically -->
          </tbody>
          <tfoot class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <td
                colspan="3"
                class="px-4 py-3 text-right font-semibold text-gray-900 dark:text-white"
              >
                Total:
              </td>
              <td class="px-4 py-3 text-right font-bold text-green-600 dark:text-green-400">
                $<span id="proposal-total-footer">0.00</span>
              </td>
            </tr>
          </tfoot>
        </table>
      </div>

      <!-- Line Item Selector for Proposals -->
      <div class="mt-6" id="proposal-line-item-selector-container" style="display: none;">
        <h3 class="mb-3 text-lg font-semibold text-gray-900 dark:text-white">Add Line Items</h3>
        <LineItemSelector onItemAdded="onProposalLineItemSelected" showAddToInvoice={false} />
      </div>
    </div>

    <!-- Notes Section -->
    <div class="mb-6">
      <h3 class="mb-3 text-lg font-semibold text-gray-900 dark:text-white">Notes</h3>
      <div class="rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-600 dark:bg-gray-700">
        <div id="proposal-notes" class="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
          <!-- Notes will be populated here -->
        </div>
      </div>
    </div>

    <!-- Actions -->
    {
      canManageProposals && (
        <div class="flex justify-between">
          <div class="flex gap-2">
            <button
              onclick={`editProposal('${projectId}')`}
              class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-blue-700"
            >
              <BoxIcon name="edit" class="mr-2 h-4 w-4" />
              Edit Proposal
            </button>

            <button
              id="show-proposal-selector-btn"
              onclick="toggleProposalSelector()"
              class="inline-flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700"
            >
              <BoxIcon name="plus" class="mr-2 h-4 w-4" />
              Add Line Items
            </button>
          </div>

          <div class="flex gap-2">
            <button
              onclick="regenerateProposal()"
              class="inline-flex items-center rounded-lg bg-gray-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-700"
            >
              <BoxIcon name="refresh" class="mr-2 h-4 w-4" />
              Regenerate
            </button>
            <button
              id="send-proposal-btn"
              onclick="sendProposal()"
              class="inline-flex items-center rounded-lg bg-purple-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-purple-700"
            >
              <BoxIcon name="send" class="mr-2 h-4 w-4" />
              Send Proposal
            </button>
            <button
              onclick="convertToInvoice()"
              class="inline-flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700"
            >
              <BoxIcon name="receipt" class="mr-2 h-4 w-4" />
              Convert to Invoice
            </button>
          </div>
        </div>
      )
    }
    
    <!-- Payment Section for Proposal (50% Deposit) -->
    {
      canManageProposals === false && (
        <div class="mt-8 rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
          <div class="mb-6">
            <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal Payment - 50% Deposit</h3>
            <p class="text-gray-500 dark:text-gray-400">
              Pay 50% deposit to approve this proposal and begin work.
            </p>
          </div>
          
          <!-- Import PaymentForm component -->
          <PaymentForm 
            invoiceId={parseInt(projectId)} 
            amount={0}
            currency="usd"
            paymentType="deposit"
            clientProfile={projectAuthor}
          />
        </div>
      )
    }
  </div>
</div>

<script>
  import { initializeProposalManager } from "../../lib/proposal-manager";

  document.addEventListener("DOMContentLoaded", () => {
    // Get component data from the global variables set by define:vars
    const projectId = window.PROPOSAL_PROJECT_ID;
    const project = window.PROPOSAL_PROJECT_DATA;
    const projectAuthor = window.PROPOSAL_PROJECT_AUTHOR;
    const existingInvoice = window.PROPOSAL_EXISTING_INVOICE;
    const hasExistingInvoice = window.PROPOSAL_HAS_EXISTING_INVOICE;

    // Initialize the global proposal manager
    if (projectId && project) {
      initializeProposalManager(projectId, project, projectAuthor);
      
      // If there's an existing invoice, load it automatically
      if (hasExistingInvoice && existingInvoice && window.proposalManager) {
        console.log("Loading existing proposal invoice:", existingInvoice);
        window.proposalManager.loadExistingInvoice(existingInvoice);
      }
    }

    // Make wrapper functions available globally for onclick handlers
    window.buildProposal = (id) => window.proposalManager?.buildProposal();
    window.editProposal = (id) => window.proposalManager?.editProposal();
    window.regenerateProposal = () => window.proposalManager?.regenerateProposal();
    window.sendProposal = () => window.proposalManager?.sendProposal();
    window.convertToInvoice = () => window.proposalManager?.convertToInvoice();
    window.updateRowTotal = (index) => window.proposalManager?.updateRowTotal(index);
    window.addProposalRow = () => window.proposalManager?.addProposalRow();
    window.deleteProposalRow = (index) => window.proposalManager?.deleteProposalRow(index);
    // toggleProposalSelector will be defined in the define:vars script below

    // Initialize subject editing functionality
    (window as any).initializeSubjectEditing();

    // Proposal line item selector callback
    (window as any).onProposalLineItemSelected = function (item: any) {
      console.log("Proposal line item selected:", item);
      // Add logic to handle selected catalog item for proposals
      // This would integrate with the proposal manager to add the item
    };
  });
</script>

<script define:vars={{ projectId, project, projectAuthor, existingInvoice, hasExistingInvoice }}>
  // Make data available globally for the proposal functions
  window.PROPOSAL_PROJECT_ID = projectId;
  window.PROPOSAL_PROJECT_DATA = project;
  window.PROPOSAL_PROJECT_AUTHOR = projectAuthor;
  window.PROPOSAL_EXISTING_INVOICE = existingInvoice;
  window.PROPOSAL_HAS_EXISTING_INVOICE = hasExistingInvoice;

  // Subject editing functionality
  function initializeSubjectEditing() {
    const editBtn = document.getElementById("edit-subject-btn");
    const saveBtn = document.getElementById("save-subject-btn");
    const cancelBtn = document.getElementById("cancel-subject-btn");
    const displayDiv = document.getElementById("proposal-subject-display");
    const editDiv = document.getElementById("proposal-subject-edit");
    const subjectText = document.getElementById("proposal-subject-text");
    const dropdownContainer = document.getElementById("subject-dropdown-container");

    if (
      !editBtn ||
      !saveBtn ||
      !cancelBtn ||
      !displayDiv ||
      !editDiv ||
      !subjectText ||
      !dropdownContainer
    ) {
      return; // Elements not found, proposal not generated yet
    }

    let subjectDropdown = null;

    // Create subject dropdown dynamically
    function createSubjectDropdown() {
      const currentSubject = subjectText.textContent.trim();

      dropdownContainer.innerHTML = `
            <div class="grid grid-cols-1 gap-2">
              <label class="text-sm font-medium text-zinc-900 dark:text-zinc-300">
                Proposal Subject
              </label>
              <div class="relative w-full">
                <div class="relative">
                  <input
                    type="text"
                    id="proposal-subject-dropdown-search"
                    placeholder="Search and select or create subject..."
                    class="w-full px-3 py-2 pl-8 pr-10 text-sm text-left border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400"
                    autocomplete="off"
                    value="${currentSubject}"
                  />
                  <svg class="absolute left-2.5 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                  <button
                    type="button"
                    id="proposal-subject-dropdown-clear"
                    class="absolute right-2.5 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 ${currentSubject ? "" : "hidden"}"
                  >
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                <div
                  class="absolute left-0 right-0 z-50 mt-1 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-700 hidden"
                  id="proposal-subject-dropdown-menu"
                  role="listbox"
                >
                  <div class="px-3 py-2 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50">
                    <div class="text-xs text-gray-500 dark:text-gray-400">
                      <span id="proposal-subject-dropdown-results-count">0</span> subjects available
                    </div>
                  </div>
                  <div class="max-h-64 overflow-y-auto">
                    <div id="proposal-subject-dropdown-options">
                      <!-- Options will be loaded dynamically -->
                    </div>
                    <div id="proposal-subject-dropdown-create-new" class="hidden border-t border-gray-200 dark:border-gray-700">
                      <button
                        type="button"
                        class="group flex w-full items-center px-3 py-3 text-sm hover:bg-blue-50 dark:hover:bg-blue-900/30 transition-colors text-blue-600 dark:text-blue-400"
                        id="proposal-subject-dropdown-create-btn"
                      >
                        <svg class="w-4 h-4 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        <div class="flex-1 text-left">
                          <div class="font-medium">Create new subject:</div>
                          <div class="text-xs opacity-75" id="proposal-subject-dropdown-create-preview"></div>
                        </div>
                      </button>
                    </div>
                    <div id="proposal-subject-dropdown-no-results" class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                      </svg>
                      <div class="mt-2">No subjects found</div>
                      <div class="text-xs">Try a different search or create a new subject</div>
                    </div>
                    <div id="proposal-subject-dropdown-loading" class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                      <div class="animate-spin mx-auto h-6 w-6 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                      <div class="mt-2">Loading subjects...</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="proposal-subject-dropdown-hidden" value="${currentSubject}" />
              </div>
            </div>
          `;

      // Initialize the dropdown functionality
      initializeDropdownFunctionality();
    }

    // Initialize dropdown functionality
    function initializeDropdownFunctionality() {
      const searchInput = document.getElementById("proposal-subject-dropdown-search");
      const menuElement = document.getElementById("proposal-subject-dropdown-menu");
      const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");
      const optionsContainer = document.getElementById("proposal-subject-dropdown-options");
      const resultsCountElement = document.getElementById(
        "proposal-subject-dropdown-results-count"
      );
      const noResultsElement = document.getElementById("proposal-subject-dropdown-no-results");
      const loadingElement = document.getElementById("proposal-subject-dropdown-loading");
      const createNewElement = document.getElementById("proposal-subject-dropdown-create-new");
      const createBtn = document.getElementById("proposal-subject-dropdown-create-btn");
      const createPreview = document.getElementById("proposal-subject-dropdown-create-preview");
      const clearButton = document.getElementById("proposal-subject-dropdown-clear");

      if (!searchInput || !menuElement || !hiddenInput || !optionsContainer) return;

      let subjects = [];
      let isDropdownVisible = false;
      let searchTimeout = null;

      // Load subjects from API
      async function loadSubjects(searchTerm = "") {
        if (loadingElement) loadingElement.classList.remove("hidden");
        if (noResultsElement) noResultsElement.classList.add("hidden");
        if (createNewElement) createNewElement.classList.add("hidden");

        try {
          const params = new URLSearchParams();
          if (searchTerm) params.append("search", searchTerm);
          params.append("limit", "20");

          const response = await fetch(`/api/subject-catalog?${params}`, {
            credentials: "include",
          });

          if (response.ok) {
            const data = await response.json();
            subjects = data.subjects || [];
            renderSubjects(searchTerm);
          } else {
            console.error("Failed to load subjects");
            subjects = [];
            renderSubjects(searchTerm);
          }
        } catch (error) {
          console.error("Error loading subjects:", error);
          subjects = [];
          renderSubjects(searchTerm);
        } finally {
          if (loadingElement) loadingElement.classList.add("hidden");
        }
      }

      // Render subjects in dropdown
      function renderSubjects(searchTerm = "") {
        if (!optionsContainer) return;

        const term = searchTerm.toLowerCase().trim();
        let visibleCount = 0;

        // Clear existing options
        optionsContainer.innerHTML = "";

        // Filter and render subjects
        subjects.forEach((subject) => {
          const matches =
            !term ||
            subject.subject.toLowerCase().includes(term) ||
            (subject.description && subject.description.toLowerCase().includes(term)) ||
            (subject.category && subject.category.toLowerCase().includes(term));

          if (matches) {
            const option = createSubjectOption(subject);
            optionsContainer.appendChild(option);
            visibleCount++;
          }
        });

        // Update results count
        if (resultsCountElement) {
          resultsCountElement.textContent = visibleCount;
        }

        // Show/hide create new option
        if (createNewElement && createPreview) {
          if (term && !subjects.some((s) => s.subject.toLowerCase() === term)) {
            createPreview.textContent = `"${searchTerm}"`;
            createNewElement.classList.remove("hidden");
          } else {
            createNewElement.classList.add("hidden");
          }
        }

        // Show/hide no results message
        if (noResultsElement) {
          if (visibleCount === 0 && term && createNewElement?.classList.contains("hidden")) {
            noResultsElement.classList.remove("hidden");
          } else {
            noResultsElement.classList.add("hidden");
          }
        }
      }

      // Create subject option element
      function createSubjectOption(subject) {
        const button = document.createElement("button");
        button.type = "button";
        button.className =
          "group flex w-full items-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300 subject-option";
        button.setAttribute("data-subject-id", subject.id);
        button.setAttribute("data-subject-text", subject.subject);

        button.innerHTML = `
              <span class="flex items-center flex-1 min-w-0">
                <svg class="w-4 h-4 mr-3 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                </svg>
                <div class="flex-1 min-w-0">
                  <div class="truncate font-medium">${subject.subject}</div>
                  ${subject.description ? `<div class="text-xs text-gray-500 dark:text-gray-400 truncate">${subject.description}</div>` : ""}
                  <div class="flex items-center mt-1 text-xs text-gray-400">
                    ${subject.category ? `<span class="mr-2">${subject.category}</span>` : ""}
                    <span class="flex items-center">
                      <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                      </svg>
                      ${subject.usage_count} uses
                    </span>
                  </div>
                </div>
              </span>
            `;

        return button;
      }

      // Show/hide clear button
      function toggleClearButton() {
        if (clearButton) {
          if (searchInput.value.trim()) {
            clearButton.classList.remove("hidden");
          } else {
            clearButton.classList.add("hidden");
          }
        }
      }

      // Show/hide dropdown
      function showDropdown() {
        if (!isDropdownVisible) {
          menuElement.classList.remove("hidden");
          isDropdownVisible = true;
        }
      }

      function hideDropdown() {
        if (isDropdownVisible) {
          menuElement.classList.add("hidden");
          isDropdownVisible = false;
        }
      }

      // Event listeners
      searchInput.addEventListener("input", (e) => {
        const value = e.target.value;
        hiddenInput.value = value;
        toggleClearButton();

        // Debounce search
        if (searchTimeout) clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          loadSubjects(value);
          if (value.trim() && !isDropdownVisible) {
            showDropdown();
          }
        }, 300);
      });

      searchInput.addEventListener("focus", () => {
        showDropdown();
        if (subjects.length === 0) {
          loadSubjects(searchInput.value);
        }
      });

      searchInput.addEventListener("blur", () => {
        setTimeout(() => {
          hideDropdown();
        }, 150);
      });

      if (clearButton) {
        clearButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          searchInput.value = "";
          hiddenInput.value = "";
          toggleClearButton();
          searchInput.focus();
          loadSubjects("");
        });
      }

      // Handle option selection
      optionsContainer.addEventListener("click", (e) => {
        const option = e.target.closest("button[data-subject-text]");
        if (!option) return;

        const subjectText = option.getAttribute("data-subject-text");
        searchInput.value = subjectText;
        hiddenInput.value = subjectText;
        toggleClearButton();
        hideDropdown();
      });

      // Handle create new subject
      if (createBtn) {
        createBtn.addEventListener("click", async () => {
          const newSubject = searchInput.value.trim();
          if (newSubject) {
            try {
              const response = await fetch("/api/subject-catalog", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify({
                  subject: newSubject,
                  category: "General",
                }),
              });

              const data = await response.json();

              if (data.success) {
                searchInput.value = newSubject;
                hiddenInput.value = newSubject;
                hideDropdown();
                showToast(data.isNew ? "New subject created!" : "Subject selected!", "success");
                loadSubjects("");
              } else {
                console.error("Failed to create subject:", data.error);
                showToast("Failed to create subject", "error");
              }
            } catch (error) {
              console.error("Error creating subject:", error);
              showToast("Failed to create subject", "error");
            }
          }
        });
      }

      // Prevent dropdown from closing when clicking inside
      menuElement.addEventListener("mousedown", (e) => {
        e.preventDefault();
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        if (!searchInput.contains(e.target) && !menuElement.contains(e.target)) {
          hideDropdown();
        }
      });

      // Initialize
      toggleClearButton();
      loadSubjects("");
    }

    // Edit button click
    editBtn.addEventListener("click", () => {
      displayDiv.classList.add("hidden");
      editDiv.classList.remove("hidden");
      createSubjectDropdown();
    });

    // Save button click
    saveBtn.addEventListener("click", async () => {
      const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");
      const newSubject = hiddenInput ? hiddenInput.value.trim() : "";

      if (!newSubject) {
        showToast("Please select or enter a subject", "error");
        return;
      }

      try {
        // Save to database
        const response = await fetch("/api/update-proposal-subject", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify({
            projectId: projectId,
            subject: newSubject,
          }),
        });

        const data = await response.json();

        if (data.success) {
          // Update UI
          subjectText.textContent = newSubject;
          editDiv.classList.add("hidden");
          displayDiv.classList.remove("hidden");

          // Show success message
          showToast("Proposal subject updated successfully!", "success");
        } else {
          // Check if it's a migration required error
          if (data.migration_required) {
            showToast("Database column 'subject' not found in invoices table", "error");
            console.error("Column missing:", data.details);
          } else {
            throw new Error(data.error || "Failed to update subject");
          }
        }
      } catch (error) {
        console.error("Error updating proposal subject:", error);
        showToast("Failed to update proposal subject", "error");
      }
    });

    // Cancel button click
    cancelBtn.addEventListener("click", () => {
      editDiv.classList.add("hidden");
      displayDiv.classList.remove("hidden");
    });
  }

  // Toggle proposal line item selector
  function toggleProposalSelector() {
    const container = document.getElementById("proposal-line-item-selector-container");
    const btn = document.getElementById("show-proposal-selector-btn");

    if (!container || !btn) return;

    if (container.style.display === "none") {
      container.style.display = "block";
      btn.innerHTML = '<i class="bx bx-minus mr-2 h-4 w-4"></i>Hide Line Items';
    } else {
      container.style.display = "none";
      btn.innerHTML = '<i class="bx bx-plus mr-2 h-4 w-4"></i>Add Line Items';
    }
  }

  // Mobile-friendly toast notification function
  function showToast(message, type = "info") {
    const toast = document.createElement("div");

    // Mobile-first responsive positioning
    toast.className = `fixed z-50 transition-all duration-300 rounded-lg text-white shadow-lg
          top-4 left-4 right-4 mx-auto max-w-sm
          sm:top-4 sm:right-4 sm:left-auto sm:mx-0 sm:max-w-none sm:w-auto
          px-4 py-3 text-sm font-medium
          ${type === "success" ? "bg-green-600" : type === "error" ? "bg-red-600" : "bg-blue-600"}`;

    // Add icon based on type
    const icons = {
      success: "✓",
      error: "✕",
      info: "ℹ",
    };

    toast.innerHTML = `
          <div class="flex items-center space-x-2">
            <span class="flex-shrink-0 text-lg font-bold">${icons[type] || icons.info}</span>
            <span class="flex-1">${message}</span>
          </div>
        `;

    document.body.appendChild(toast);

    // Auto-dismiss after 4 seconds (longer for mobile users to read)
    setTimeout(() => {
      toast.style.opacity = "0";
      toast.style.transform = "translateY(-10px)";
      setTimeout(() => {
        if (document.body.contains(toast)) {
          document.body.removeChild(toast);
        }
      }, 300);
    }, 4000);

    // Allow manual dismiss by tapping
    toast.addEventListener("click", () => {
      toast.style.opacity = "0";
      toast.style.transform = "translateY(-10px)";
      setTimeout(() => {
        if (document.body.contains(toast)) {
          document.body.removeChild(toast);
        }
      }, 300);
    });
  }

  // Make functions globally available
  window.initializeSubjectEditing = initializeSubjectEditing;
  window.toggleProposalSelector = toggleProposalSelector;
  window.showToast = showToast;
</script>
