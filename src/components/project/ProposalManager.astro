---
import BoxIcon from "../common/BoxIcon.astro";
import PaymentForm from "./PaymentForm.astro";
import { supabase } from "../../lib/supabase";
import DigitalSignature from "./DigitalSignature.astro";

interface Props {
  projectId: string;
  project: any;
  authorProfile?: any;
  projectStatus?: number;
  currentRole?: string;
}
const { projectId, project, authorProfile, projectStatus, currentRole } = Astro.props;

// Only show to Admin/Staff users
const canManageProposals = currentRole === "Admin" || currentRole === "Staff";

// Check if there's already an invoice for this project
let existingInvoice = null;
try {
  console.log("üîç [ProposalManager] Checking for existing invoice for project:", projectId);

  if (!supabase) {
    console.error("‚ùå [ProposalManager] Database not configured");
    return;
  }

  const { data: invoices, error } = await supabase
    .from("invoices")
    .select(`
      *,
      catalog_line_items
    `)
    .eq("project_id", parseInt(projectId))
    .eq("status", "proposal")
    .order("created_at", { ascending: false })
    .limit(1);
  
  // console.log("üîç [ProposalManager] Invoice query result:", { invoices, error });
  
  if (!error && invoices && invoices.length > 0) {
    existingInvoice = invoices[0]; // Get the most recent proposal
    // console.log("‚úÖ [ProposalManager] Found existing invoice:", existingInvoice);
    // console.log("üîç [ProposalManager] Invoice catalog_line_items:", existingInvoice.catalog_line_items);
    // console.log("üîç [ProposalManager] Invoice catalog_line_items length:", existingInvoice.catalog_line_items?.length);
    // console.log("üîç [ProposalManager] Invoice catalog_line_items type:", typeof existingInvoice.catalog_line_items);
    
    // Let's also check if there are line items directly
    if (existingInvoice.id) {
      // console.log("üîç [ProposalManager] Checking for line items directly for invoice ID:", existingInvoice.id);
      const { data: directLineItems, error: lineItemsError } = await supabase
        .from("line_items_catalog")
        .select("*")
        .in("id", existingInvoice.catalog_line_items?.map((item: any) => item.catalog_item_id) || []);
      
      // console.log("üîç [ProposalManager] Direct line items query:", { directLineItems, lineItemsError });
    }
  } else {
    console.log("‚ùå [ProposalManager] No existing invoice found:", error);
  }
} catch (error) {
  console.log("‚ùå [ProposalManager] Error checking for existing invoice:", error);
}

const hasExistingInvoice = !!existingInvoice;
---

{projectStatus !== 20 && ( <style>#content-proposal {pointer-events: none; #add-row-btn, .add-line-item-btn, .delete-line-item-btn {display: none;}}</style>)}

<div class="rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
  <!-- Initial state: No proposal generated -->
  <div id="proposal-placeholder" class={hasExistingInvoice ? "hidden" : "py-8 text-center"}>
    <BoxIcon name="file-pdf" class="mx-auto mb-4 h-12 w-12 text-gray-400" />
    <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal</h3>
    <p class="mb-4 text-gray-500 dark:text-gray-400">
      {
        canManageProposals ? (
          <span
            set:html={`Generate a project proposal for <b>${authorProfile?.company_name || 'Client'}</b> for <b>${project.address}</b> based on the project form data.`}
          />
        ) : (   
          <span
            set:html={`Your project proposal is being generated.<br>You will be notified at <b>${authorProfile?.email}</b> when it is ready.`}
          />
        )
      }
    </p>
    {
      canManageProposals && (
        <button
          onclick={`buildProposal('${projectId}')`}
          class="inline-flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700"
        >
          <BoxIcon name="plus" class="mr-2 h-4 w-4" />
          Build Proposal
        </button>
      )
    }
  </div>

  <!-- Generated proposal content (hidden initially) -->
  <div id="proposal-content" class={hasExistingInvoice ? "" : "hidden"}>
    <!-- Proposal Header -->
    <div class="mb-6 flex items-start justify-between">
      <div class="flex-1">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Project Proposal</h1>

        <!-- Editable Subject Line -->
        <div class="mt-3">
          <div id="proposal-subject-display" class="cursor-pointer">
            <p
              class="text-lg font-medium text-gray-800 transition-colors hover:text-blue-600 dark:text-gray-200 dark:hover:text-blue-400"
            >
              <span id="proposal-subject-text">Fire Protection Services Proposal</span>
              <button
                type="button"
                id="edit-subject-btn"
                class="ml-2 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
                title="Edit subject"
              >
                <i class="bx bx-edit text-sm"></i>
              </button>
            </p>
          </div>

          <div id="proposal-subject-edit" class="hidden">
            <div class="space-y-2">
              <div id="subject-dropdown-container">
                <!-- Subject dropdown will be inserted here -->
              </div>
              <div class="flex items-center space-x-2">
                <button
                  type="button"
                  id="save-subject-btn"
                  class="rounded-lg bg-blue-600 px-3 py-2 text-sm text-white transition-colors hover:bg-blue-700"
                  title="Save subject"
                >
                  <i class="bx bx-check mr-1"></i>
                  Save
                </button>
                <button
                  type="button"
                  id="cancel-subject-btn"
                  class="rounded-lg bg-gray-500 px-3 py-2 text-sm text-white transition-colors hover:bg-gray-600"
                  title="Cancel"
                >
                  <i class="bx bx-x mr-1"></i>
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>

        <p class="mt-2 text-gray-600 dark:text-gray-400">
          <span id="proposal-project-title">Project Title</span>
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-500">
          Generated on: <span id="proposal-date"></span>
        </p>
      </div>
      <div class="ml-4 text-right">
        <p class="text-2xl font-bold text-green-600 dark:text-green-400">
          $<span id="proposal-total">0.00</span>
        </p>
        <p class="text-sm text-gray-600 dark:text-gray-400">Estimated Total</p>
      </div>
    </div>

    <!-- Project Details -->
    <div class="mb-6 grid grid-cols-1 gap-6 md:grid-cols-2">
      <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
        <h3 class="mb-2 font-semibold text-gray-900 dark:text-white">Project Information</h3>
        <div class="space-y-1 text-sm">
          <p><strong>Address:</strong> <span id="proposal-address">{project.address}</span></p>
          <p><strong>Square Footage:</strong> <span id="proposal-sq-ft">{project.sq_ft}</span> sq ft</p>
          <p><strong>Construction Type:</strong> <span id="proposal-construction-type">{project.new_construction ? "New Construction" :  "Existing"}</span></p>
        </div>
      </div>
      <div class="rounded-lg bg-gray-50 p-4 dark:bg-gray-700">
        <h3 class="mb-2 font-semibold text-gray-900 dark:text-white">Contact Information</h3>
        <div class="space-y-1 text-sm">
          
          <p><strong>Client:</strong> <span id="proposal-client-name">{authorProfile?.company_name || 'N/A'}</span></p>
          <p><strong>Email:</strong> <span id="proposal-client-email">{authorProfile?.email || 'N/A'}</span></p>
          <p><strong>Phone:</strong> <span id="proposal-client-phone">{authorProfile?.phone || 'N/A'}</span></p>
        </div>
      </div>
    </div>

    <!-- Line Items Table -->
    <div class="mb-6">
      <h3 class="mb-4 text-lg font-semibold text-gray-900 dark:text-white">Services & Pricing</h3>
      <div class="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-600">
        <table class="w-full">
          <thead class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <th
                class="px-4 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Description
              </th>
              <th
                class="px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Quantity
              </th>
              <th
                class="px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Unit Price
              </th>
              <th
                class="px-4 py-3 text-right text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Total
              </th>
              <th
                class="px-4 py-3 text-center text-xs font-medium uppercase tracking-wider text-gray-500 dark:text-gray-300"
              >
                Actions
              </th>
            </tr>
          </thead>
          <tbody
            id="proposal-line-items"
            class="divide-y divide-gray-200 bg-white dark:divide-gray-600 dark:bg-gray-800"
          >
            <!-- All line items will be generated dynamically via JavaScript -->
          </tbody>
          <tfoot class="bg-gray-50 dark:bg-gray-700">
            <tr>
              <td
                colspan="4"
                class="px-4 py-3 text-right font-semibold text-gray-900 dark:text-white"
              >
                Total:
              </td>
              <td class="px-4 py-3 text-right font-bold text-green-600 dark:text-green-400">
                $<span id="proposal-total-footer">0.00</span>
              </td>
            </tr>
          </tfoot>
        </table>
      </div>

    </div>

    <!-- Notes Section -->
    <div class="mb-6">
      <h3 class="mb-3 text-lg font-semibold text-gray-900 dark:text-white">Notes</h3>
      <div class="rounded-lg border border-gray-200 bg-gray-50 p-4 dark:border-gray-600 dark:bg-gray-700">
        <div id="proposal-notes" class="text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap">
          <!-- Notes will be populated here -->
        </div>
      </div>
    </div>

    <!-- Actions -->
    {
      canManageProposals && projectStatus === 20 && (
        <div class="flex justify-between">
          <div class="flex gap-2">
          </div>

          <div class="flex gap-2">
            <button
              onclick="saveProposal()"
              class="inline-flex items-center rounded-lg bg-gray-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-gray-700"
            >
              <BoxIcon name="save" class="mr-2 h-4 w-4" />
              Save Proposal
            </button>
            <button
              id="send-proposal-btn"
              onclick="sendProposal()"
              class="inline-flex items-center rounded-lg bg-purple-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-purple-700"
            >
              <BoxIcon name="send" class="mr-2 h-4 w-4" />
              Send Proposal
            </button>
            <button
              onclick="convertToInvoice()"
              class="inline-flex items-center rounded-lg bg-green-600 px-4 py-2 text-sm font-medium text-white transition-colors hover:bg-green-700"
            >
              <BoxIcon name="receipt" class="mr-2 h-4 w-4" />
              Convert to Invoice
            </button>
          </div>
        </div>
      )
    }
 
 
    {projectStatus === 30 && currentRole === "Client" && (

      <div class="mt-8 rounded-lg border border-gray-200 bg-white p-6 dark:border-gray-700 dark:bg-gray-800">
        <div class="mb-6">
          <h3 class="mb-2 text-lg font-medium text-gray-900 dark:text-white">Proposal Payment - 50% Deposit</h3>
          <p class="text-gray-500 dark:text-gray-400">
            Pay 50% deposit to approve this proposal and begin work.
          </p>
        </div>   <!-- Import PaymentForm component -->
        <DigitalSignature id="proposal-signature" required={true} width={1200} height={580} placeholder="Proposal Signature" />  

        <PaymentForm 
          invoiceId={parseInt(projectId)} 
          amount={0}
          currency="usd"
          paymentType="deposit"
          clientProfile={authorProfile}
        />
      </div>
    )}

  </div>
</div>

<script>
  import { initializeProposalManager } from "../../lib/proposal-manager";

  // Define the updateRowTotalDirect function globally first
  function updateRowTotalDirect(inputElement: HTMLInputElement) {
    console.log("üîç [DIRECT] updateRowTotalDirect called with input:", inputElement, "value:", inputElement.value);
    const row = inputElement.closest('tr');
    if (!row) {
      console.log("‚ùå [DIRECT] No row found for input element");
      return;
    }

    // Use the input element that triggered the event as the primary source
    let qtyInput: HTMLInputElement;
    let priceInput: HTMLInputElement;
    
    // Determine which input triggered the event and use it directly
    if (inputElement.getAttribute('data-field') === 'quantity' || inputElement.classList.contains('line-item-quantity')) {
      qtyInput = inputElement;
      priceInput = row.querySelector('input[data-field="unitPrice"], .line-item-unit-price') as HTMLInputElement;
    } else if (inputElement.getAttribute('data-field') === 'unitPrice' || inputElement.classList.contains('line-item-unit-price')) {
      priceInput = inputElement;
      qtyInput = row.querySelector('input[data-field="quantity"], .line-item-quantity') as HTMLInputElement;
    } else {
      // Fallback to querying
      qtyInput = row.querySelector('input[data-field="quantity"], .line-item-quantity') as HTMLInputElement;
      priceInput = row.querySelector('input[data-field="unitPrice"], .line-item-unit-price') as HTMLInputElement;
    }

    const totalSpan = row.querySelector('.row-total, .line-item-total');

    console.log("üîç [DIRECT] Found elements:", {
      qtyInput: !!qtyInput,
      priceInput: !!priceInput,
      totalSpan: !!totalSpan,
      qtyValue: qtyInput?.value,
      priceValue: priceInput?.value,
      triggeredBy: inputElement.getAttribute('data-field') || inputElement.className
    });

    if (qtyInput && priceInput && totalSpan) {
      const quantity = parseFloat(qtyInput.value) || 0;
      const unitPrice = parseFloat(priceInput.value) || 0;
      const total = quantity * unitPrice;

      console.log("üîç [DIRECT] Calculating total:", { quantity, unitPrice, total });
      totalSpan.textContent = `$${total.toFixed(2)}`;

      // Update grand total
      if ((window as any).updateProposalTotal) {
        (window as any).updateProposalTotal();
      }
    } else {
      console.log("‚ùå [DIRECT] Missing required elements for total calculation");
    }
  }

  // Make it available globally immediately
  (window as any).updateRowTotalDirect = updateRowTotalDirect;

  document.addEventListener("DOMContentLoaded", () => {
    // Get component data from the global variables set by define:vars
    const projectId = window.PROPOSAL_PROJECT_ID;
    const project = window.PROPOSAL_PROJECT_DATA;
    const authorProfile = window.PROPOSAL_PROJECT_AUTHOR;
    const existingInvoice = window.PROPOSAL_EXISTING_INVOICE;
    const hasExistingInvoice = window.PROPOSAL_HAS_EXISTING_INVOICE;

    // Update proposal total function
    function updateProposalTotal() {
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (!lineItemsContainer) return;

      let total = 0;
      const rows = lineItemsContainer.querySelectorAll("tr");
      
      rows.forEach((row) => {
        // Check for both old and new class names to support existing rows
        const quantityInput = row.querySelector(".quantity-input, .line-item-quantity") as HTMLInputElement;
        const unitPriceInput = row.querySelector(".unit-price-input, .line-item-unit-price") as HTMLInputElement;
        
        if (quantityInput && unitPriceInput) {
          const quantity = parseFloat(quantityInput.value) || 0;
          const unitPrice = parseFloat(unitPriceInput.value) || 0;
          const rowTotal = quantity * unitPrice;
          total += rowTotal;
          
          // Update individual row total (check for both old and new class names)
          const totalDisplay = row.querySelector(".total-display, .line-item-total");
          if (totalDisplay) {
            totalDisplay.textContent = `$${rowTotal.toFixed(2)}`;
          }
        }
      });

      // Update total display in header
      const totalElement = document.getElementById("proposal-total");
      if (totalElement) {
        totalElement.textContent = total.toFixed(2);
      }
      
      // Update total display in footer
      const tfootTotal = document.getElementById("proposal-total-footer");
      if (tfootTotal) {
        tfootTotal.textContent = total.toFixed(2);
      }
    }

    // Make updateProposalTotal available globally
    (window as any).updateProposalTotal = updateProposalTotal;


    // Initialize the global proposal manager
    if (projectId && project) {
      initializeProposalManager(projectId, project, authorProfile);
      
      // If there's an existing invoice, load it automatically
      // console.log("üîç [Client] Checking if should load existing invoice:", { hasExistingInvoice, existingInvoice, proposalManager: !!window.proposalManager });
      if (hasExistingInvoice && existingInvoice && window.proposalManager) {
        // console.log("‚úÖ [Client] Loading existing proposal invoice:", existingInvoice);
        window.proposalManager.loadExistingInvoice(existingInvoice).then(() => {
          // Recalculate total after loading existing invoice to ensure interactive elements work
          updateProposalTotal();
        }).catch(error => {
          console.error("‚ùå [Client] Error loading existing invoice:", error);
        });
      } else {
        console.log("‚ùå [Client] Not loading existing invoice - missing data or manager");
      }
    }

    // Make wrapper functions available globally for onclick handlers
    window.buildProposal = (id) => window.proposalManager?.buildProposal();
    window.regenerateProposal = () => window.proposalManager?.regenerateProposal();
    window.sendProposal = () => window.proposalManager?.sendProposal();
    window.convertToInvoice = () => window.proposalManager?.convertToInvoice();
    window.updateRowTotal = (index) => window.proposalManager?.updateRowTotal(index);
    window.addProposalRow = () => window.proposalManager?.addProposalRow();
    window.deleteProposalRow = (index) => window.proposalManager?.deleteProposalRow(index);
    window.saveProposal = () => window.proposalManager?.saveCurrentProposalData();
    // toggleProposalSelector will be defined in the define:vars script below

    // Initialize subject editing functionality
    (window as any).initializeSubjectEditing();

    // Initialize existing line items
    initializeExistingLineItems();
    
    // Calculate initial total
    updateProposalTotal();
    
    // Initialize autocomplete functionality
    initializeAutocomplete();

    // Generate initial empty row
    generateInitialEmptyRow();

    // Generate initial empty row function
    function generateInitialEmptyRow() {
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (!lineItemsContainer) return;

      // Only add initial row if there are no existing rows
      if (lineItemsContainer.querySelectorAll("tr").length === 0) {
        const initialRow = createLineItemRow({
          description: "",
          details: "",
          quantity: 1,
          unitPrice: 0
        });
        lineItemsContainer.appendChild(initialRow);
      }
    }

    // Create a line item row with consistent structure
    function createLineItemRow(item: any = {}) {
      const row = document.createElement("tr");
      row.className = "hover:bg-gray-50 dark:hover:bg-gray-700 line-item-row";
      
      const currentTotal = (item.quantity || 0) * (item.unitPrice || 0);
      
      row.innerHTML = `
        <td class="px-4 py-3 text-sm text-gray-900 dark:text-white">
          <div class="">
            <input
              type="text"
              class="line-item-description w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              placeholder="Enter line item description..."
              value="${item.description || ""}"
              autocomplete="off"
            />
            <!-- Autocomplete dropdown -->
            <div class="autocomplete-dropdown overflow-y-auto absolute z-50 w-66 h-80 mt-1 bg-white border border-gray-300 rounded-md shadow-lg dark:bg-gray-700 dark:border-gray-600 hidden">
              <!-- Suggestions will be populated here -->
            </div>
          </div>
          <input
            type="text"
            class="line-item-details w-full mt-2 px-3 py-1 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            placeholder="Details (optional)"
            value="${item.details || ""}"
          />
        </td>
        <td class="px-4 py-3 text-sm text-right text-gray-900 dark:text-white">
          <input
            type="number"
            class="line-item-quantity w-20 px-2 py-1 text-right border border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            value="${item.quantity || 1}"
            min="0"
            step="1"
            oninput="updateRowTotalDirect(this)"
            onchange="updateRowTotalDirect(this)"
          />
        </td>
        <td class="px-4 py-3 text-sm text-right text-gray-900 dark:text-white">
          <input
            type="number"
            class="line-item-unit-price w-24 px-2 py-1 text-right border border-gray-300 rounded dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            value="${item.unitPrice || 0}"
            min="0"
            step="1"
            oninput="updateRowTotalDirect(this)"
            onchange="updateRowTotalDirect(this)"
          />
        </td>
        <td class="px-4 py-3 text-sm text-right font-medium text-gray-900 dark:text-white">
          <span class="line-item-total">$${currentTotal.toFixed(2)}</span>
        </td>
        <td class="px-4 py-3 text-center">
          <div class="flex gap-2 justify-center">
            <button
              type="button"
              class="add-line-item-btn px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
            >
              Add
            </button>
            <button
              type="button"
              class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300"
              onclick="this.closest('tr').remove(); updateProposalTotal();"
              title="Delete line item"
            >
              <i class="bx bx-trash"></i>
            </button>
          </div>
        </td>
      `;
      
      return row;
    }

    // Initialize existing line items with event listeners
    function initializeExistingLineItems() {
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (!lineItemsContainer) return;

      // Add event listeners to existing line items
      const existingRows = lineItemsContainer.querySelectorAll(".proposal-line-item-row");
      existingRows.forEach((row) => {
        const quantityInput = row.querySelector(".quantity-input, .line-item-quantity") as HTMLInputElement;
        const unitPriceInput = row.querySelector(".unit-price-input, .line-item-unit-price") as HTMLInputElement;
        const removeBtn = row.querySelector(".remove-item-btn") as HTMLButtonElement;
        
        const updateTotal = () => {
          const quantity = parseFloat(quantityInput?.value) || 0;
          const unitPrice = parseFloat(unitPriceInput?.value) || 0;
          const total = quantity * unitPrice;
          const totalDisplay = row.querySelector(".total-display, .line-item-total") as HTMLSpanElement;
          if (totalDisplay) {
            totalDisplay.textContent = `$${total.toFixed(2)}`;
          }
          updateProposalTotal();
        };

        if (quantityInput) quantityInput.addEventListener("input", updateTotal);
        if (unitPriceInput) unitPriceInput.addEventListener("input", updateTotal);
        if (removeBtn) {
          removeBtn.addEventListener("click", async () => {
            const itemId = removeBtn.dataset.itemId;
            if (itemId) {
              // Delete from database
              try {
                const response = await fetch("/api/delete-line-item", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ itemId }),
                });
                
                if (response.ok) {
                  row.remove();
                  updateProposalTotal();
                } else {
                  console.error("Failed to delete line item");
                }
              } catch (error) {
                console.error("Error deleting line item:", error);
              }
            } else {
              // Just remove from DOM (new unsaved item)
              row.remove();
              updateProposalTotal();
            }
          });
        }
      });
    }

    // Autocomplete functionality
    function initializeAutocomplete() {
      console.log("üîç [AUTOCOMPLETE] Initializing autocomplete for all line item rows");
      
      // Initialize autocomplete for existing rows
      initializeAutocompleteForRows();
      
      // Set up event delegation for dynamically added rows
      setupEventDelegation();
    }

    // Initialize autocomplete for specific rows
    function initializeAutocompleteForRows() {
      const lineItemRows = document.querySelectorAll('.line-item-row');
      console.log("üîç [AUTOCOMPLETE] Found", lineItemRows.length, "line item rows");
      
      lineItemRows.forEach((row, index) => {
        const descriptionInput = row.querySelector('.line-item-description') as HTMLInputElement;
        const dropdown = row.querySelector('.autocomplete-dropdown') as HTMLDivElement;
        const quantityInput = row.querySelector('.line-item-quantity') as HTMLInputElement;
        const unitPriceInput = row.querySelector('.line-item-unit-price') as HTMLInputElement;
        const totalDisplay = row.querySelector('.line-item-total') as HTMLSpanElement;
        const addButton = row.querySelector('.add-line-item-btn') as HTMLButtonElement;

        if (descriptionInput && dropdown && addButton) {
          console.log("üîç [AUTOCOMPLETE] Setting up autocomplete for row", index);
          setupAutocompleteForRow(row, descriptionInput, dropdown, quantityInput, unitPriceInput, totalDisplay, addButton);
        }
      });
    }

    // Setup autocomplete for a specific row (simplified - just for the initial row)
    function setupAutocompleteForRow(row: Element, descriptionInput: HTMLInputElement, dropdown: HTMLDivElement, quantityInput: HTMLInputElement, unitPriceInput: HTMLInputElement, totalDisplay: HTMLSpanElement, addButton: HTMLButtonElement) {
      // The autocomplete functionality is now handled by event delegation
      // This function is kept for compatibility but the real work is done in setupEventDelegation
      console.log("üîç [AUTOCOMPLETE] Setting up row (delegated to event handlers)");
    }

    // Set up event delegation for dynamically added rows
    function setupEventDelegation() {
      // Listen for clicks on add buttons
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (target && target instanceof HTMLElement && target.classList && target.classList.contains('add-line-item-btn')) {
          const row = target.closest('.line-item-row');
          if (row) {
            addLineItemFromRow(row as HTMLElement);
          }
        }
      });

      // Listen for focus events on description inputs
      document.addEventListener('focus', (e) => {
        const target = e.target;
        console.log("üîç [AUTOCOMPLETE] Focus event triggered on:", target);
        
        // Check for both new class names and existing data attributes
        const isDescriptionField = (target && target instanceof HTMLElement && 
          (target.classList?.contains('line-item-description') || 
           target.getAttribute('data-field') === 'description'));
           
        if (isDescriptionField) {
          console.log("üîç [AUTOCOMPLETE] Focus on description field detected");
          const row = target.closest('tr');
          if (row) {
            // Look for existing dropdown or create one
            let dropdown = row.querySelector('.autocomplete-dropdown') as HTMLDivElement;
            if (!dropdown) {
              // Create dropdown for rows that don't have one
              const inputContainer = target.closest('td');
              if (inputContainer) {
                dropdown = document.createElement('div');
                dropdown.className = 'autocomplete-dropdown overflow-y-auto absolute z-50 w-66 h-80 mt-1 bg-white border border-gray-300 rounded-md shadow-lg dark:bg-gray-700 dark:border-gray-600 hidden';
                // inputContainer.style.position = 'relative';
                inputContainer.appendChild(dropdown);
                console.log("üîç [AUTOCOMPLETE] Created dropdown for row");
              }
            }
            
            if (dropdown) {
              console.log("üîç [AUTOCOMPLETE] Loading catalog items for dropdown");
              loadAllCatalogItemsForRow(dropdown);
            } else {
              console.log("‚ùå [AUTOCOMPLETE] Could not create or find dropdown");
            }
          } else {
            console.log("‚ùå [AUTOCOMPLETE] No row found");
          }
        }
      }, true);

      // Listen for input events on description inputs only
      document.addEventListener('input', (e) => {
        const target = e.target;
        
        // Check for both new class names and existing data attributes
        const isDescriptionField = (target && target instanceof HTMLElement && 
          (target.classList?.contains('line-item-description') || 
           target.getAttribute('data-field') === 'description'));
           
        if (isDescriptionField) {
          console.log("üîç [AUTOCOMPLETE] Input on description field detected:", target);
          const row = target.closest('tr');
          if (row) {
            const dropdown = row.querySelector('.autocomplete-dropdown') as HTMLDivElement;
            if (dropdown) {
              console.log("üîç [AUTOCOMPLETE] Filtering catalog items for dropdown");
              filterCatalogItemsForRow(dropdown, (target as HTMLInputElement).value);
            } else {
              console.log("‚ùå [AUTOCOMPLETE] No dropdown found in row for input");
            }
          } else {
            console.log("‚ùå [AUTOCOMPLETE] No row found for input");
          }
        }
        // Don't interfere with other input events - let them bubble normally
      });

      // Hide dropdown when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target && target instanceof HTMLElement) {
          // Check if click is outside any autocomplete dropdown
          const isInsideDropdown = target.closest('.autocomplete-dropdown');
          const isDescriptionInput = target.classList?.contains('line-item-description') || 
                                   target.getAttribute('data-field') === 'description';
          
          if (!isInsideDropdown && !isDescriptionInput) {
            // Hide all dropdowns
            const allDropdowns = document.querySelectorAll('.autocomplete-dropdown');
            allDropdowns.forEach(dropdown => {
              dropdown.classList.add('hidden');
            });
          }
        }
      });
    }

    // Add line item from a specific row
    async function addLineItemFromRow(row: HTMLElement) {
      const descriptionInput = row.querySelector('.line-item-description') as HTMLInputElement;
      const detailsInput = row.querySelector('.line-item-details') as HTMLInputElement;
      const quantityInput = row.querySelector('.line-item-quantity') as HTMLInputElement;
      const unitPriceInput = row.querySelector('.line-item-unit-price') as HTMLInputElement;
      const dropdown = row.querySelector('.autocomplete-dropdown') as HTMLDivElement;

      if (!descriptionInput || !quantityInput || !unitPriceInput) return;

      const description = descriptionInput.value.trim();
      const details = detailsInput?.value.trim() || "";
      const quantity = parseFloat(quantityInput.value) || 0;
      const unitPrice = parseFloat(unitPriceInput.value) || 0;

      if (!description) {
        alert("Please enter a description for the line item");
        return;
      }

      if (quantity <= 0) {
        alert("Please enter a valid quantity");
        return;
      }

      if (unitPrice < 0) {
        alert("Please enter a valid unit price");
        return;
      }

      // Check if this is a new item (not from catalog)
      const isNewItem = !globalCatalogItems.some(item => item.name === description);

      // If it's a new item, save it to the catalog first
      if (isNewItem) {
        try {
          const response = await fetch("/api/line-items-catalog", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: 'include',
            body: JSON.stringify({
              name: description,
              description: details,
              unit_price: unitPrice,
              category: "General"
            })
          });

          if (!response.ok) {
            console.error("Failed to save new catalog item");
          }
        } catch (error) {
          console.error("Error saving new catalog item:", error);
        }
      }

      // Add the line item to the proposal
      const lineItemsContainer = document.getElementById("proposal-line-items");
      if (lineItemsContainer) {
        // Create new row using the consistent function
        const newRow = createLineItemRow({
          description: description,
          details: details,
          quantity: quantity,
          unitPrice: unitPrice
        });

        // Insert before the last row (the input row)
        const inputRow = lineItemsContainer.querySelector("tr:last-child");
        if (inputRow) {
          lineItemsContainer.insertBefore(newRow, inputRow);
        } else {
          lineItemsContainer.appendChild(newRow);
        }
      }

      // Clear the input fields
      descriptionInput.value = "";
      if (detailsInput) detailsInput.value = "";
      quantityInput.value = "1";
      unitPriceInput.value = "0";
      if (dropdown) dropdown.classList.add("hidden");

      // Update proposal total
      updateProposalTotal();
    }

    // Global variables for catalog items (shared across all rows)
    let globalCatalogItems: any[] = [];

    // Load all catalog items (shared function)
    async function loadAllCatalogItemsForRow(dropdown: HTMLDivElement) {
      console.log("üîç [AUTOCOMPLETE] loadAllCatalogItemsForRow called");
      if (globalCatalogItems.length === 0) {
        console.log("üîç [AUTOCOMPLETE] Loading catalog items from API");
        try {
          const url = `/api/line-items-catalog?limit=50`;
          const response = await fetch(url, { credentials: 'include' });
          if (response.ok) {
            const result = await response.json();
            globalCatalogItems = result.items || result;
            console.log("üîç [AUTOCOMPLETE] Loaded", globalCatalogItems.length, "catalog items");
          } else {
            console.error("‚ùå [AUTOCOMPLETE] API error:", response.status);
          }
        } catch (error) {
          console.error("‚ùå [AUTOCOMPLETE] Error loading catalog items:", error);
        }
      } else {
        console.log("üîç [AUTOCOMPLETE] Using cached catalog items:", globalCatalogItems.length);
      }
      displaySuggestionsForRow(dropdown, globalCatalogItems);
    }

    // Filter catalog items for a specific row
    function filterCatalogItemsForRow(dropdown: HTMLDivElement, query: string) {
      if (!query || query.length === 0) {
        displaySuggestionsForRow(dropdown, globalCatalogItems);
        return;
      }

      const filteredItems = globalCatalogItems.filter(item => 
        item.name.toLowerCase().includes(query.toLowerCase()) ||
        (item.description && item.description.toLowerCase().includes(query.toLowerCase()))
      );
      
      displaySuggestionsForRow(dropdown, filteredItems);
    }

    // Display suggestions for a specific row
    function displaySuggestionsForRow(dropdown: HTMLDivElement, items: any[]) {
      console.log("üîç [AUTOCOMPLETE] displaySuggestionsForRow called with", items.length, "items");
      if (items.length === 0) {
        console.log("üîç [AUTOCOMPLETE] No items to display, hiding dropdown");
        dropdown.classList.add("hidden");
        return;
      }

      dropdown.innerHTML = "";
      items.forEach((item) => {
        const suggestion = document.createElement("div");
        suggestion.className = `px-3 py-2 cursor-pointer hover:bg-blue-50 dark:hover:bg-gray-600 border-b border-gray-100 dark:border-gray-600 last:border-b-0 transition-colors duration-150`;
        suggestion.innerHTML = `
          <div class="font-medium text-gray-900 dark:text-white">${item.name}</div>
          <div class="text-sm text-gray-500 dark:text-gray-400">${item.description || ""}</div>
          <div class="text-sm font-semibold text-green-600 dark:text-green-400">$${item.unit_price}</div>
        `;
        suggestion.onclick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          selectSuggestionForRow(dropdown, item);
        };
        dropdown.appendChild(suggestion);
      });
      console.log("üîç [AUTOCOMPLETE] Showing dropdown with", items.length, "items");
      dropdown.classList.remove("hidden");
    }

    // Select suggestion for a specific row
    function selectSuggestionForRow(dropdown: HTMLDivElement, item: any) {
      const row = dropdown.closest('tr');
      if (row) {
        console.log("üîç [AUTOCOMPLETE] Selecting suggestion for row:", item);
        
        // Try to find inputs using both new class names and existing data attributes
        const descriptionInput = row.querySelector('.line-item-description, input[data-field="description"]') as HTMLInputElement;
        const detailsInput = row.querySelector('.line-item-details, input[data-field="details"]') as HTMLInputElement;
        const unitPriceInput = row.querySelector('.line-item-unit-price, input[data-field="unitPrice"]') as HTMLInputElement;
        const quantityInput = row.querySelector('.line-item-quantity, input[data-field="quantity"]') as HTMLInputElement;
        
        console.log("üîç [AUTOCOMPLETE] Found inputs:", {
          description: !!descriptionInput,
          details: !!detailsInput,
          unitPrice: !!unitPriceInput,
          quantity: !!quantityInput
        });

        if (descriptionInput) {
          descriptionInput.value = item.name;
          console.log("üîç [AUTOCOMPLETE] Set description to:", item.name);
        }
        
        if (detailsInput && item.description) {
          detailsInput.value = item.description;
          console.log("üîç [AUTOCOMPLETE] Set details to:", item.description);
        }
        
        if (unitPriceInput) {
          unitPriceInput.value = item.unit_price.toString();
          console.log("üîç [AUTOCOMPLETE] Set unit price to:", item.unit_price);
        }
        
        // Update total - try to find total display using both methods
        const totalDisplay = row.querySelector('.line-item-total, .total-display') as HTMLSpanElement;
        if (quantityInput && totalDisplay) {
          const quantity = parseFloat(quantityInput.value) || 0;
          const unitPrice = parseFloat(unitPriceInput?.value || "0") || 0;
          const total = quantity * unitPrice;
          totalDisplay.textContent = `$${total.toFixed(2)}`;
          console.log("üîç [AUTOCOMPLETE] Updated total to:", total);
        }
        
        // Trigger input events to update any other calculations
        // Use a small delay to ensure the value is set before triggering events
        setTimeout(() => {
          if (unitPriceInput) {
            unitPriceInput.dispatchEvent(new Event('input', { bubbles: true }));
          }
          if (quantityInput) {
            quantityInput.dispatchEvent(new Event('input', { bubbles: true }));
          }
        }, 10);
      }
      dropdown.classList.add("hidden");
    }


  });
</script>

<script define:vars={{ projectId, project, authorProfile, existingInvoice, hasExistingInvoice }}>
  // Make data available globally for the proposal functions
  window.PROPOSAL_PROJECT_ID = projectId;
  window.PROPOSAL_PROJECT_DATA = project;
  window.PROPOSAL_PROJECT_AUTHOR = authorProfile;
  window.PROPOSAL_EXISTING_INVOICE = existingInvoice;
  window.PROPOSAL_HAS_EXISTING_INVOICE = hasExistingInvoice;

  // Subject editing functionality
  function initializeSubjectEditing() {
    const editBtn = document.getElementById("edit-subject-btn");
    const saveBtn = document.getElementById("save-subject-btn");
    const cancelBtn = document.getElementById("cancel-subject-btn");
    const displayDiv = document.getElementById("proposal-subject-display");
    const editDiv = document.getElementById("proposal-subject-edit");
    const subjectText = document.getElementById("proposal-subject-text");
    const dropdownContainer = document.getElementById("subject-dropdown-container");

    if (
      !editBtn ||
      !saveBtn ||
      !cancelBtn ||
      !displayDiv ||
      !editDiv ||
      !subjectText ||
      !dropdownContainer
    ) {
      return; // Elements not found, proposal not generated yet
    }

    let subjectDropdown = null;

    // Create subject dropdown dynamically
    function createSubjectDropdown() {
      const currentSubject = subjectText.textContent.trim();

      dropdownContainer.innerHTML = `
            <div class="grid grid-cols-1 gap-2">
              <label class="text-sm font-medium text-zinc-900 dark:text-zinc-300">
                Proposal Subject
              </label>
              <div class="relative w-full">
                <div class="relative">
                  <input
                    type="text"
                    id="proposal-subject-dropdown-search"
                    placeholder="Search and select or create subject..."
                    class="w-full px-3 py-2 pl-8 pr-10 text-sm text-left border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400"
                    autocomplete="off"
                    value="${currentSubject}"
                  />
                  <svg class="absolute left-2.5 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                  <button
                    type="button"
                    id="proposal-subject-dropdown-clear"
                    class="absolute right-2.5 top-2.5 h-4 w-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 ${currentSubject ? "" : "hidden"}"
                  >
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                <div
                  class="absolute left-0 right-0 z-50 mt-1 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-700 hidden"
                  id="proposal-subject-dropdown-menu"
                  role="listbox"
                >
                  <div class="px-3 py-2 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700/50">
                    <div class="text-xs text-gray-500 dark:text-gray-400">
                      <span id="proposal-subject-dropdown-results-count">0</span> subjects available
                    </div>
                  </div>
                  <div class="max-h-64 overflow-y-auto">
                    <div id="proposal-subject-dropdown-options">
                      <!-- Options will be loaded dynamically -->
                    </div>
                    <div id="proposal-subject-dropdown-create-new" class="hidden border-t border-gray-200 dark:border-gray-700">
                      <button
                        type="button"
                        class="group flex w-full items-center px-3 py-3 text-sm hover:bg-blue-50 dark:hover:bg-blue-900/30 transition-colors text-blue-600 dark:text-blue-400"
                        id="proposal-subject-dropdown-create-btn"
                      >
                        <svg class="w-4 h-4 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        <div class="flex-1 text-left">
                          <div class="font-medium">Create new subject:</div>
                          <div class="text-xs opacity-75" id="proposal-subject-dropdown-create-preview"></div>
                        </div>
                      </button>
                    </div>
                    <div id="proposal-subject-dropdown-no-results" class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                      </svg>
                      <div class="mt-2">No subjects found</div>
                      <div class="text-xs">Try a different search or create a new subject</div>
                    </div>
                    <div id="proposal-subject-dropdown-loading" class="hidden px-4 py-8 text-center text-sm text-gray-500 dark:text-gray-400">
                      <div class="animate-spin mx-auto h-6 w-6 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                      <div class="mt-2">Loading subjects...</div>
                    </div>
                  </div>
                </div>
                <input type="hidden" id="proposal-subject-dropdown-hidden" value="${currentSubject}" />
              </div>
            </div>
          `;

      // Initialize the dropdown functionality
      initializeDropdownFunctionality();
    }

    // Initialize dropdown functionality
    function initializeDropdownFunctionality() {
      const searchInput = document.getElementById("proposal-subject-dropdown-search");
      const menuElement = document.getElementById("proposal-subject-dropdown-menu");
      const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");
      const optionsContainer = document.getElementById("proposal-subject-dropdown-options");
      const resultsCountElement = document.getElementById(
        "proposal-subject-dropdown-results-count"
      );
      const noResultsElement = document.getElementById("proposal-subject-dropdown-no-results");
      const loadingElement = document.getElementById("proposal-subject-dropdown-loading");
      const createNewElement = document.getElementById("proposal-subject-dropdown-create-new");
      const createBtn = document.getElementById("proposal-subject-dropdown-create-btn");
      const createPreview = document.getElementById("proposal-subject-dropdown-create-preview");
      const clearButton = document.getElementById("proposal-subject-dropdown-clear");

      if (!searchInput || !menuElement || !hiddenInput || !optionsContainer) return;

      let subjects = [];
      let isDropdownVisible = false;
      let searchTimeout = null;

      // Load subjects from API
      async function loadSubjects(searchTerm = "") {
        if (loadingElement) loadingElement.classList.remove("hidden");
        if (noResultsElement) noResultsElement.classList.add("hidden");
        if (createNewElement) createNewElement.classList.add("hidden");

        try {
          const params = new URLSearchParams();
          if (searchTerm) params.append("search", searchTerm);
          params.append("limit", "20");

          const response = await fetch(`/api/subject-catalog?${params}`, {
            credentials: "include",
          });

          if (response.ok) {
            const data = await response.json();
            subjects = data.subjects || [];
            renderSubjects(searchTerm);
          } else {
            console.error("Failed to load subjects");
            subjects = [];
            renderSubjects(searchTerm);
          }
        } catch (error) {
          console.error("Error loading subjects:", error);
          subjects = [];
          renderSubjects(searchTerm);
        } finally {
          if (loadingElement) loadingElement.classList.add("hidden");
        }
      }

      // Render subjects in dropdown
      function renderSubjects(searchTerm = "") {
        if (!optionsContainer) return;

        const term = searchTerm.toLowerCase().trim();
        let visibleCount = 0;

        // Clear existing options
        optionsContainer.innerHTML = "";

        // Filter and render subjects
        subjects.forEach((subject) => {
          const matches =
            !term ||
            subject.subject.toLowerCase().includes(term) ||
            (subject.description && subject.description.toLowerCase().includes(term)) ||
            (subject.category && subject.category.toLowerCase().includes(term));

          if (matches) {
            const option = createSubjectOption(subject);
            optionsContainer.appendChild(option);
            visibleCount++;
          }
        });

        // Update results count
        if (resultsCountElement) {
          resultsCountElement.textContent = visibleCount;
        }

        // Show/hide create new option
        if (createNewElement && createPreview) {
          if (term && !subjects.some((s) => s.subject.toLowerCase() === term)) {
            createPreview.textContent = `"${searchTerm}"`;
            createNewElement.classList.remove("hidden");
          } else {
            createNewElement.classList.add("hidden");
          }
        }

        // Show/hide no results message
        if (noResultsElement) {
          if (visibleCount === 0 && term && createNewElement?.classList.contains("hidden")) {
            noResultsElement.classList.remove("hidden");
          } else {
            noResultsElement.classList.add("hidden");
          }
        }
      }

      // Create subject option element
      function createSubjectOption(subject) {
        const button = document.createElement("button");
        button.type = "button";
        button.className =
          "group flex w-full items-left px-3 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300 subject-option";
        button.setAttribute("data-subject-id", subject.id);
        button.setAttribute("data-subject-text", subject.subject);

        button.innerHTML = `
              <span class="flex items-center flex-1 min-w-0">
                <svg class="w-4 h-4 mr-3 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                </svg>
                <div class="flex-1 min-w-0">
                  <div class="truncate font-medium">${subject.subject}</div>
                  ${subject.description ? `<div class="text-xs text-gray-500 dark:text-gray-400 truncate">${subject.description}</div>` : ""}
                  <div class="flex items-center mt-1 text-xs text-gray-400">
                    ${subject.category ? `<span class="mr-2">${subject.category}</span>` : ""}
                    <span class="flex items-center">
                      <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                      </svg>
                      ${subject.usage_count} uses
                    </span>
                  </div>
                </div>
              </span>
            `;

        return button;
      }

      // Show/hide clear button
      function toggleClearButton() {
        if (clearButton) {
          if (searchInput.value.trim()) {
            clearButton.classList.remove("hidden");
          } else {
            clearButton.classList.add("hidden");
          }
        }
      }

      // Show/hide dropdown
      function showDropdown() {
        if (!isDropdownVisible) {
          menuElement.classList.remove("hidden");
          isDropdownVisible = true;
        }
      }

      function hideDropdown() {
        if (isDropdownVisible) {
          menuElement.classList.add("hidden");
          isDropdownVisible = false;
        }
      }

      // Event listeners
      searchInput.addEventListener("input", (e) => {
        const value = e.target.value;
        hiddenInput.value = value;
        toggleClearButton();

        // Debounce search
        if (searchTimeout) clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          loadSubjects(value);
          if (value.trim() && !isDropdownVisible) {
            showDropdown();
          }
        }, 300);
      });

      searchInput.addEventListener("focus", () => {
        showDropdown();
        if (subjects.length === 0) {
          loadSubjects(searchInput.value);
        }
      });

      searchInput.addEventListener("blur", () => {
        setTimeout(() => {
          hideDropdown();
        }, 150);
      });

      if (clearButton) {
        clearButton.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          searchInput.value = "";
          hiddenInput.value = "";
          toggleClearButton();
          searchInput.focus();
          loadSubjects("");
        });
      }

      // Handle option selection
      optionsContainer.addEventListener("click", (e) => {
        const option = e.target.closest("button[data-subject-text]");
        if (!option) return;

        const subjectText = option.getAttribute("data-subject-text");
        searchInput.value = subjectText;
        hiddenInput.value = subjectText;
        toggleClearButton();
        hideDropdown();
      });

      // Handle create new subject
      if (createBtn) {
        createBtn.addEventListener("click", async () => {
          const newSubject = searchInput.value.trim();
          if (newSubject) {
            try {
              const response = await fetch("/api/subject-catalog", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify({
                  subject: newSubject,
                  category: "General",
                }),
              });

              const data = await response.json();

              if (data.success) {
                searchInput.value = newSubject;
                hiddenInput.value = newSubject;
                hideDropdown();
                window.showSuccess("Success", data.isNew ? "New subject created!" : "Subject selected!");
                loadSubjects("");
              } else {
                console.error("Failed to create subject:", data.error);
                window.showError("Error", "Failed to create subject");
              }
            } catch (error) {
              console.error("Error creating subject:", error);
              window.showError("Error", "Failed to create subject");
            }
          }
        });
      }

      // Prevent dropdown from closing when clicking inside
      menuElement.addEventListener("mousedown", (e) => {
        e.preventDefault();
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", (e) => {
        if (!searchInput.contains(e.target) && !menuElement.contains(e.target)) {
          hideDropdown();
        }
      });

      // Initialize
      toggleClearButton();
      loadSubjects("");
    }

    // Edit button click
    editBtn.addEventListener("click", () => {
      displayDiv.classList.add("hidden");
      editDiv.classList.remove("hidden");
      createSubjectDropdown();
    });

    // Save button click
    saveBtn.addEventListener("click", async () => {
      const hiddenInput = document.getElementById("proposal-subject-dropdown-hidden");
      const newSubject = hiddenInput ? hiddenInput.value.trim() : "";

      if (!newSubject) {
        window.showError("Error", "Please select or enter a subject");
        return;
      }

      try {
        // Save to database
        const response = await fetch("/api/update-proposal-subject", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
          body: JSON.stringify({
            projectId: projectId,
            subject: newSubject,
          }),
        });

        const data = await response.json();

        if (data.success) {
          // Update UI
          subjectText.textContent = newSubject;
          editDiv.classList.add("hidden");
          displayDiv.classList.remove("hidden");

          // Show success message
          window.showSuccess("Success", "Proposal subject updated successfully!");
        } else {
          // Check if it's a migration required error
          if (data.migration_required) {
            window.showError("Database Error", "Database column 'subject' not found in invoices table");
            console.error("Column missing:", data.details);
          } else {
            throw new Error(data.error || "Failed to update subject");
          }
        }
      } catch (error) {
        console.error("Error updating proposal subject:", error);
        window.showError("Error", "Failed to update proposal subject");
      }
    });

    // Cancel button click
    cancelBtn.addEventListener("click", () => {
      editDiv.classList.add("hidden");
      displayDiv.classList.remove("hidden");
    });
  }

  // Toggle proposal line item selector
  // function toggleProposalSelector() {
  //   const container = document.getElementById("proposal-line-item-selector-container");
  //   const btn = document.getElementById("show-proposal-selector-btn");

  //   if (!container || !btn) return;

  //   if (container.style.display === "none") {
  //     container.style.display = "block";
  //     btn.innerHTML = '<i class="bx bx-minus mr-2 h-4 w-4"></i>Hide Line Items';
  //   } else {
  //     container.style.display = "none";
  //     btn.innerHTML = '<i class="bx bx-plus mr-2 h-4 w-4"></i>Add Line Items';
  //   }
  // }


  // Make functions globally available
  window.initializeSubjectEditing = initializeSubjectEditing;
  // window.toggleProposalSelector = toggleProposalSelector;
</script>
