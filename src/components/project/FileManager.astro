---
// File Manager Component with Checkout System - EXTENSIVE DEBUGGING
// A complete file management solution with checkout/assignment capabilities

import Tooltip from "../common/Tooltip.astro";

interface Props {
  projectId: number;
  currentUser: any;
  currentRole: string;
  projectStatus?: number;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
  globalInputClasses?: string;
  statusData?: any;
}

const {
  projectId,
  currentUser,
  currentRole,
  projectStatus = 0,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
  globalInputClasses,
  statusData,
} = Astro.props;

// Debug logging for props
import StickyActions from "./StickyActions.astro";
import LucideIcon from "../common/LucideIcon.astro";
import Button from "../common/Button.astro";
import LoadingSpinner from "../common/LoadingSpinner.astro";

// Only show for Admin/Staff
// Storage bucket configuration
const bucket = "project-media";

// Allowed file types
const allowedFileTypes = [
  ".pdf",
  ".png",
  ".jpg",
  ".jpeg",
  ".gif",
  ".webp",
  ".bmp",
  ".tiff",
  ".svg",
  ".dwg",
  ".dxf",
  ".dwt",
  ".dws",
  ".dwf",
  ".doc",
  ".docx",
  ".xls",
  ".xlsx",
  ".ppt",
  ".pptx",
  ".txt",
  ".csv",
  ".zip",
  ".rar",
  ".7z",
  ".tar",
  ".gz",
  ".image/*",
  ".application/pdf",
  ".application/msword",
  ".application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  ".application/vnd.ms-excel",
  ".application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  ".application/vnd.ms-powerpoint",
  ".application/vnd.openxmlformats-officedocument.presentationml.presentation",
  ".text/plain",
  ".text/csv",
  ".application/acad",
  ".application/x-acad",
  ".application/autocad",
  ".application/x-autocad",
  ".application/dwg",
  ".application/x-dwg",
  ".image/vnd.dwg",
  ".drawing/dwg",
  ".application/dxf",
  ".application/x-dxf",
  ".image/vnd.dxf",
  ".drawing/dxf",
  ".application/dwt",
  ".application/x-dwt",
  ".application/dws",
  ".application/x-dws",
  ".application/dwf",
  ".application/x-dwf",
  ".model/vnd.dwf",
  ".application/zip",
  ".application/x-rar-compressed",
  ".application/x-7z-compressed",
  ".application/x-tar",
  ".application/gzip",
];
// Project status-based restrictions
const canCheckoutFiles = projectStatus > 10 && (currentRole === "Admin" || currentRole === "Staff");
const canUploadFiles = projectStatus >= 10;
const canDeleteFiles =
  currentRole === "Admin" ||
  currentRole === "Staff" ||
  (currentRole === "Client" && projectStatus <= 10); // Clients can delete at initial status (10)
---

<div id="file-manager">
  <!-- Header -->
  <div class="flex hidden items-center justify-between h-64">
    <h3 class="text-xl font-semibold text-gray-900 dark:text-white">Project Files</h3>
    <div class="hidden text-sm text-gray-500 dark:text-gray-400">
      <span id="file-count">Loading...</span>
    </div>
  </div>

  <!-- Upload Section (Clients only, status <= 40) -->
  {
    (currentRole === "Client" && projectStatus < 41) ||
    currentRole === "Admin" ||
    currentRole === "Staff" ? (
      <div
        id="upload-dropzone"
        class="mb-6 cursor-pointer rounded-lg border-2 border-dashed border-gray-300 p-6 text-center transition-colors hover:border-primary-400 dark:border-gray-600 dark:hover:border-primary-500"
      >
        <div class="space-y-4">
          <div class="mx-auto h-12 w-12 text-gray-400">
            <svg class="h-full w-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
              />
            </svg>
          </div>
          <div>
            <p class="font-medium text-gray-600 dark:text-gray-300">
              Drop files here or click to browse
            </p>
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Upload supports PDF, images, CAD files, and documents (max 10MB each)
            </p>
          </div>
          <Button id="browse-files-btn" icon="folder-open" iconPosition="left" variant="outline">
            Browse Files
          </Button>
        </div>
        <input
          type="file"
          id="file-input"
          multiple
          accept={allowedFileTypes.join(",")}
          class="hidden"
        />{" "}
      </div>
    ) : null
  }

  <!-- Upload Progress -->
  <div id="upload-progress" class="hidden h-10 flex-col items-center justify-center">
    <div class="h-2 rounded-lg bg-gray-200 dark:bg-gray-700">
      <div
        id="progress-bar"
        class="h-2 rounded-lg bg-primary-600 transition-all duration-300"
        style="width: 0%"
      >
      </div>
    </div>
    <p id="upload-status" class="mt-2 text-sm text-gray-600 dark:text-gray-400">Uploading...</p>
  </div>

  <!-- File List -->
  <div id="files-container" class="space-y-3">
    <!-- <div class="py-8 text-center text-gray-500 dark:text-gray-400">Loading files...</div> -->
    <LoadingSpinner />
  </div>

  <!-- Management Panel (Admin/Staff only, Status 20+) -->
  {
    canCheckoutFiles && (
      <StickyActions columns="2" id="management-panel">
        {/* <h4 class="mb-4 text-sm font-medium text-gray-700 dark:text-gray-300">File Management</h4> */}

        {/* <!-- Quick Actions --> */}
        {/* <!-- Checkout Status --> */}
        <div class="flex items-center space-x-2">
          <div id="overall-status-indicator" class="h-3 w-3 rounded-full bg-gray-400" />
          <span id="overall-status-text" class="text-sm text-gray-600 dark:text-gray-300">
            Loading status...
          </span>
        </div>
        <div class="flex items-center space-x-2">
          <LucideIcon name="alert-circle" class="bx-lg mx-auto" />
          <p class={`${globalPrimaryTextClasses} mb-4`}>
            Keep File Names the Same to Check In File.
          </p>
        </div>
      </StickyActions>
    )
  }
</div>

<script
  define:vars={{
    projectId,
    currentUser,
    currentRole,
    canCheckoutFiles,
    projectStatus,
    canUploadFiles,
    canDeleteFiles,
    globalInputClasses,
    globalSecondaryTextClasses,
    globalPrimaryTextClasses,
    statusData,
    bucket,
  }}
  is:inline
>
  let files = [];
  let currentProjectId = projectId;
  let currentUserId = currentUser?.id;

  function initializeFileManager() {
    loadProjectFiles();
    // No need to load staff users for simplified workflow
  }

  // Load files for the project
  async function loadProjectFiles() {
    try {
      const url = `/api/files/get?projectId=${currentProjectId}&targetLocation=documents&bucketName=${bucket}&_t=${Date.now()}`;

      const response = await fetch(url, {
        cache: "no-cache",
        headers: {
          "Cache-Control": "no-cache, no-store, must-revalidate",
          Pragma: "no-cache",
          Expires: "0",
        },
      });

      const data = await response.json();

      if (data.success) {
        files = data.data || [];

        // Debug: Check for any files with invalid URLs
        files.forEach((file, index) => {
          if ((file.publicUrl && file.publicUrl.includes("undefined")) || file.publicUrl === "") {
            console.warn(`‚ö†Ô∏è [FILE-MANAGER] File ${index} has invalid URL:`, file);
          }
        });

        updateFileCount();
        renderFiles();
        if (canCheckoutFiles) {
          updateManagementPanel();
        }
      } else {
        console.error("‚ùå [FILE-MANAGER] Failed to load files:", data.error);
        console.log("üîß [FILE-MANAGER] Full API response:", data);
        window.showModal(
          "error",
          "Failed to load project files: " + data.error,
          "24refWQ3reqfewc4Q#"
        );
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error loading files:", error);
      console.error("üîß [FILE-MANAGER] Error details:", {
        message: error.message,
        stack: error.stack,
        name: error.name,
      });
      window.showModal(
        "error",
        "Error loading project files: " + error.message,
        "24refWQ3reqfewc4Q#"
      );
    }
  }
  // Update file count display
  function updateFileCount() {
    const fileCountElement = document.getElementById("file-count");
    if (fileCountElement) {
      fileCountElement.textContent = `${files.length} file${files.length !== 1 ? "s" : ""}`;
    } else {
      console.error("‚ùå [FILE-MANAGER] File count element not found");
    }
  }

  // Render files with extensive debugging
  function renderFiles(currentRole) {
    const container = document.getElementById("files-container");

    if (!container) {
      console.error("‚ùå [FILE-MANAGER] Files container not found");
      return;
    }

    if (files.length === 0) {
      container.innerHTML = `
        <div class="py-8 text-center text-gray-500 dark:text-gray-400">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <p class="mt-2">No files uploaded yet</p>
        </div>
      `;
      return;
    }

    const fileCards = files.map((file, index) => {
      return createFileCard(file, currentRole);
    });

    container.innerHTML = fileCards.join("");

    // Initialize accordions after rendering (using Accordion partial structure)
    initAccordions();

    // Load button partials for each file
    loadButtonPartials();
  }

  // Create save buttons directly in the client
  function loadButtonPartials() {
    for (const file of files) {
      try {
        const buttonContainer = document.getElementById(`save-button-${file.id}`);
        if (buttonContainer) {
          buttonContainer.innerHTML = `
            <button
              type="button"
              onclick="saveFileDetails(${file.id})"
              class="inline-flex items-center justify-center rounded-lg bg-primary-600 px-4 py-2 text-sm font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-4 focus:ring-primary-300 dark:bg-primary-700 dark:hover:bg-primary-800 dark:focus:ring-primary-800"
            >
              Save Changes
            </button>
          `;
        }
      } catch (error) {
        console.error(`‚ùå [FILE-MANAGER] Error creating button for file ${file.id}:`, error);
      }
    }
  }

  // Helper function to create accordion HTML using Accordion partial structure
  function createAccordionHTML(id, title, description, content, open = false) {
    return `
      <div class="border border-gray-200 dark:border-gray-700 rounded-lg relative">
        <!-- Accordion Header -->
        <div class="flex items-center justify-between  cursor-pointer rounded-lg transition-colors hover:bg-gray-50 dark:hover:bg-gray-700">
          <!-- Clickable header area -->
          <div 
            class="flex-1"
            data-accordion-target="#accordion-${id}"
            aria-expanded="${open}"
            aria-controls="accordion-${id}"
            role="button"
            tabindex="0"
            onkeydown="if(event.key==='Enter'||event.key===' '){event.preventDefault();this.click();}"
          >
            <div class="p-4">
              <h3 class="text-lg font-medium ${globalPrimaryTextClasses} truncate">
                ${title}
              </h3>
              ${description ? `<p class="mt-1 ${globalSecondaryTextClasses} truncate">${description}</p>` : ""}
            </div>
          </div>

          <!-- Accordion Toggle Button -->
          <button
            class="hidden text-gray-400 transition-colors hover:text-gray-600 dark:hover:text-gray-300 p-4"
            data-accordion-target="#accordion-${id}"
            aria-expanded="${open}"
            aria-controls="accordion-${id}"
            type="button"
          >
            <svg
              class="w-3 h-3 transition-transform duration-200 ${open ? "rotate-180" : ""}"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
        </div>

        <!-- Accordion Content -->
        <div
          id="accordion-${id}"
          class="${open ? "" : "hidden"}"
          aria-labelledby="accordion-${id}"
        >
          <div class="border-t border-gray-200 px-4 pb-4 dark:border-gray-700">
            <div class="pt-4">
              ${content}
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Create file card with accordion structure using Accordion partial
  function createFileCard(file, role) {
    // Enable checkout system - SQL migration should be run
    const hasCheckoutColumns = true; // Enable checkout system
    const isCheckedOut = file.checkedOutBy !== null;
    const isCheckedOutByMe = file.checkedOutBy === currentUserId;

    let statusBadge = "";
    let statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";

    if (isCheckedOut) {
      if (isCheckedOutByMe) {
        statusBadge = "Checked out by you";
        statusColor = "bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300";
      } else {
        statusBadge = `Checked out by ${file.checked_out_by_name || "Unknown"}`;
        statusColor = "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      }
    } else {
      statusBadge = "Available";
      statusColor = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
    }

    // Create accordion content with slide toggle
    const accordionContent = `
      <div class="space-y-4">
        <!-- File Title -->
        <div>
          <label for="file-title-${file.id}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Title</label>
          <input 
            type="text" 
            id="file-title-${file.id}"
            class="${globalInputClasses}"
            value="${file.title || ""}"
            placeholder="Enter file title..."
          />
        </div>
        
        <!-- File Description -->
        <div>
          <label for="file-comments-${file.id}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Description</label>
          <textarea 
            id="file-comments-${file.id}"
            class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
            rows="3"
            placeholder="Enter file description..."
          >${file.comments || ""}</textarea>
        </div>

        ${
          role === "Admin" || role === "Staff"
            ? `
        
        <!-- Private Toggle using SlideToggle partial structure -->
        <div class="flex items-center justify-between">
          <div>
            <label for="file-private-${file.id}" class="text-sm font-medium text-gray-700 dark:text-gray-300">Private</label>
            <p class="text-xs text-gray-500 dark:text-gray-400">Hide this file from clients</p>
          </div>
          <label class="toggle-wrapper flex cursor-pointer items-center gap-3">
            <div class="relative">
              <input
                type="checkbox"
                id="file-private-${file.id}"
                class="toggle-input peer sr-only"
                ${file.isPrivate ? "checked" : ""}
                data-file-id="${file.id}"
              />
              <div class="h-6 w-11 rounded-full bg-gray-200 after:absolute after:left-[2px] after:top-[2px] after:h-5 after:w-5 after:rounded-full after:border after:border-gray-300 after:bg-gray-100 after:transition-all after:content-[''] peer-checked:bg-primary-600 peer-checked:after:translate-x-full peer-checked:after:border-white peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 dark:border-gray-600 dark:bg-gray-700 dark:peer-focus:ring-primary-800">
              </div>
            </div>
          </label>
        </div>
        `
            : ""
        } 
        
        <!-- Save Button -->
        <div class="flex justify-end">
          <div id="save-button-${file.id}"></div>
        </div>
      </div>
    `;

    // Create file title with icon and status
    const fileTitle = `
      <div class="flex items-center space-x-3">
        <div class="flex-shrink-0">
          ${getFileIcon(file.fileType)}
        </div>
        <div class="flex-1 min-w-0">
          <div class="flex items-center space-x-2">
            <span class="text-lg font-medium ${globalPrimaryTextClasses} truncate">
              ${getDisplayFileName(file)}
            </span>
            
          </div>
          <p class="text-sm truncate ${globalSecondaryTextClasses}">
            ${formatFileSize(file.fileSize)} ‚Ä¢ Uploaded ${new Date(file.uploadedAt).toLocaleDateString()} at ${new Date(file.uploadedAt).toLocaleTimeString()}${file.uploaded_by_name ? ` ‚Ä¢ by ${file.uploaded_by_name}` : ""}
          </p>
        </div>
     
      </div>
    `;

    // Create action buttons
    const actionButtons = `
      <div class="flex items-center space-x-2 absolute top-0 right-0 bg-white dark:bg-gray-800 rounded-lg p-2" onclick="event.stopPropagation()">
        <!-- Download/Checkout button -->
       
          <div class="relative group">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColor}">
              ${statusBadge}
            </span>
          </div>

        <!-- Preview button -->
        <div class="relative group">
           
          <button 
            class="${isCheckedOut ? "text-gray-300 cursor-not-allowed" : "text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"}"
            onclick="${isCheckedOut ? "" : `downloadFile('${file.publicUrl || ""}', '${file.fileName}', ${file.id})`}"
            ${isCheckedOut || !file.publicUrl ? "disabled" : ""}
          >
            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </button>
          
          <!-- Custom tooltip -->
          <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
            ${isCheckedOut ? "File checked out" : canCheckoutFiles ? "Download & Check Out File" : "Download File"}
            <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
          </div>
        </div>

        <!-- Preview button -->
        <div class="relative group">
          <button 
            class="text-primary-400 hover:text-primary-600 dark:hover:text-primary-300"
            onclick="previewFile('${file.publicUrl || ""}', '${file.fileName}', '${file.fileType || ""}', ${file.id})"
            title="Preview file"
            ${!file.publicUrl ? "disabled" : ""}
          >
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
          </button>
          
          <!-- Custom tooltip -->
          <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
            Preview file
            <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
          </div>
        </div>

        ${
          canDeleteFiles
            ? `
          <div class="relative group">
            <button 
              class="text-red-400 hover:text-red-600 dark:hover:text-red-300"
              onclick="deleteFile(${file.id}, '${file.fileName}')"
              title="Delete file"
            >
              <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
            
            <!-- Custom tooltip -->
            <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
              Delete file
              <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
            </div>
          </div>
        `
            : ""
        }
      </div>
    `;

    // Create accordion using the Accordion partial structure
    const fileCard = createAccordionHTML(
      `file-${file.id}`,
      fileTitle,
      null, // No description since it's in the title
      accordionContent,
      false
    );

    // Add action buttons to the accordion header
    const fileCardWithActions = fileCard.replace(
      "<!-- Accordion Toggle Button -->",
      `${actionButtons}
      <!-- Accordion Toggle Button -->`
    );

    return fileCardWithActions;
  }

  // Upload functionality with extensive debugging
  function initializeUpload() {
    // Only initialize upload if allowed
    if (!canUploadFiles) {
      return;
    }

    const uploadArea = document.querySelector("#file-manager .rounded-lg.border-dashed");
    const fileInput = document.getElementById("file-input");
    const browseBtn = document.getElementById("browse-files-btn");
    const progressDiv = document.getElementById("upload-progress");
    const progressBar = document.getElementById("progress-bar");
    const statusText = document.getElementById("upload-status");

    // Click to browse
    browseBtn?.addEventListener("click", (e) => {
      e.stopPropagation();
      fileInput?.click();
    });

    uploadArea?.addEventListener("click", () => {
      fileInput?.click();
    });

    // Drag and drop
    uploadArea?.addEventListener("dragover", (e) => {
      e.preventDefault();
      uploadArea.classList.add("border-primary-400", "bg-primary-50");
    });

    uploadArea?.addEventListener("dragleave", (e) => {
      e.preventDefault();
      uploadArea.classList.remove("border-primary-400", "bg-primary-50");
    });

    uploadArea?.addEventListener("drop", (e) => {
      e.preventDefault();
      uploadArea.classList.remove("border-primary-400", "bg-primary-50");

      const files = Array.from(e.dataTransfer.files);

      if (files.length > 0) {
        handleFileUpload(files);
      }
    });

    // File input change
    fileInput?.addEventListener("change", (e) => {
      const files = Array.from(e.target.files);

      if (files.length > 0) {
        handleFileUpload(files);
      }
    });

    // File validation function
    function validateFiles(files) {
      const errors = [];
      const maxSize = 50 * 1024 * 1024; // 50MB

      // Define allowed file types for documents
      const allowedTypes = [
        // Images
        "image/jpeg",
        "image/jpg",
        "image/png",
        "image/gif",
        "image/webp",
        "image/bmp",
        "image/tiff",
        "image/svg+xml",
        // Documents
        "application/pdf",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.ms-powerpoint",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "text/plain",
        "text/csv",
        // CAD files
        "application/acad",
        "application/x-acad",
        "application/autocad",
        "application/x-autocad",
        "application/dwg",
        "application/x-dwg",
        "image/vnd.dwg",
        "drawing/dwg",
        "application/dxf",
        "application/x-dxf",
        "image/vnd.dxf",
        "drawing/dxf",
        "application/dwt",
        "application/x-dwt",
        "application/dws",
        "application/x-dws",
        "application/dwf",
        "application/x-dwf",
        "model/vnd.dwf",
        // Archives
        "application/zip",
        "application/x-rar-compressed",
        "application/x-7z-compressed",
        "application/x-tar",
        "application/gzip",
        // Generic binary for CAD files
        "application/octet-stream",
      ];

      for (const file of files) {
        // Check file type
        const isAllowedType =
          allowedTypes.includes(file.type) ||
          (file.type === "application/octet-stream" &&
            /\.(dwg|dxf|dwt|dws|dwf)$/i.test(file.name)) ||
          (file.type === "" && /\.(dwg|dxf|dwt|dws|dwf)$/i.test(file.name)) ||
          /\.(pdf|png|jpg|jpeg|gif|webp|bmp|tiff|svg|dwg|dxf|dwt|dws|dwf|doc|docx|xls|xlsx|ppt|pptx|txt|csv|zip|rar|7z|tar|gz)$/i.test(
            file.name
          );

        if (!isAllowedType) {
          errors.push(`${file.name}: File type "${file.type || "unknown"}" is not supported`);
        }

        // Check file size
        if (file.size > maxSize) {
          errors.push(
            `${file.name}: File size (${(file.size / 1024 / 1024).toFixed(1)}MB) exceeds maximum allowed size (50MB)`
          );
        }
      }

      return {
        valid: errors.length === 0,
        errors: errors,
      };
    }

    async function handleFileUpload(files) {
      if (!files || files.length === 0) {
        return;
      }

      // Validate files before upload
      const validationResult = validateFiles(files);
      if (!validationResult.valid) {
        console.error("‚ùå [FILE-MANAGER] File validation failed:", validationResult.errors);
        showError(`Upload failed: ${validationResult.errors.join(", ")}`);
        return;
      }

      // Show progress
      progressDiv?.classList.remove("hidden");
      progressBar.style.width = "0%";
      statusText.textContent = "Preparing upload...";

      let uploadedCount = 0;
      let failedCount = 0;
      const totalFiles = files.length;
      const uploadErrors = [];

      for (let i = 0; i < files.length; i++) {
        const file = files[i];

        try {
          statusText.textContent = `Uploading ${file.name}...`;

          // Convert file to base64
          const reader = new FileReader();
          const fileData = await new Promise((resolve, reject) => {
            reader.onload = () => {
              console.log(
                "‚úÖ [FILE-MANAGER] File converted to base64, length:",
                reader.result?.length
              );
              resolve(reader.result);
            };
            reader.onerror = (error) => {
              console.error("‚ùå [FILE-MANAGER] FileReader error:", error);
              reject(error);
            };
            reader.readAsDataURL(file);
          });

          // Upload using files system
          const response = await fetch("/api/files/upload", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({
              mediaData: fileData,
              fileName: file.name,
              fileType: file.type,
              projectId: currentProjectId.toString(),
              targetLocation: "documents",
              bucketName: bucket,
              title: file.name,
              description: ``,
            }),
          });

          if (!response.ok) {
            const errorData = await response.json();
            console.error("‚ùå [FILE-MANAGER] Upload failed:", errorData);
            throw new Error(errorData.error || "Upload failed");
          }

          const result = await response.json();

          uploadedCount++;
          const progress = (uploadedCount / totalFiles) * 100;
          progressBar.style.width = `${progress}%`;
          statusText.textContent = `Uploaded ${uploadedCount}/${totalFiles} files...`;

          // Immediately refresh files and render to show the new file card
          await loadProjectFiles();
          renderFiles(currentRole);
          if (canCheckoutFiles) {
            updateManagementPanel();
          }

          // Show individual success notification
          if (window.showModal) {
            window.showModal("success", `Uploaded ${file.name}`, "", 2000);
          }
        } catch (error) {
          console.error(`‚ùå [FILE-MANAGER] Error uploading ${file.name}:`, error);
          console.error("üîß [FILE-MANAGER] Error details:", {
            message: error.message,
            stack: error.stack,
            name: error.name,
          });
          failedCount++;
          uploadErrors.push(`${file.name}: ${error.message}`);

          // Show individual error notification
          if (window.showModal) {
            window.showModal("error", `Failed to upload ${file.name}`, error.message, 3000);
          }
        }
      }

      // Hide progress and show final summary
      setTimeout(() => {
        progressDiv?.classList.add("hidden");

        // Auto-check-in (unlock) any previously checked out files when new version is uploaded
        if (canCheckoutFiles && uploadedCount > 0) {
          // Get the uploaded filenames to match against
          const uploadedFilenames = files.map((f) => f.name);
          autoCheckInPreviousVersions(uploadedFilenames);
        }

        // Show final summary only if there were mixed results or all failures
        if (uploadedCount > 0 && failedCount > 0) {
          // Some files uploaded, some failed - show summary
          const errorMessage = `Upload complete: ${uploadedCount} succeeded, ${failedCount} failed`;
          if (window.showModal) {
            window.showModal("warning", "Upload Summary", errorMessage, 3000);
          }
        } else if (uploadedCount === 0 && failedCount > 0) {
          // All files failed - show summary
          const errorMessage = `All ${failedCount} file(s) failed to upload`;
          if (window.showModal) {
            window.showModal("error", "Upload Failed", errorMessage, 3000);
          }
        }
        // If all succeeded, individual success messages were already shown
      }, 1000);
    }
  }

  // Update management panel
  function updateManagementPanel() {
    // Only update management panel if project status allows it
    if (projectStatus < 20) {
      return;
    }

    const checkedOutCount = files.filter((f) => f.checkedOutBy).length;

    const statusTextElement = document.getElementById("overall-status-text");
    const statusIndicatorElement = document.getElementById("overall-status-indicator");

    // Update status text and indicator
    if (statusTextElement) {
      if (checkedOutCount > 0) {
        statusTextElement.textContent = `${checkedOutCount} file${checkedOutCount !== 1 ? "s" : ""} checked out`;
        if (statusIndicatorElement) {
          statusIndicatorElement.className = "h-3 w-3 rounded-full bg-yellow-400";
        }
      } else {
        statusTextElement.textContent = "All files available";
        if (statusIndicatorElement) {
          statusIndicatorElement.className = "h-3 w-3 rounded-full bg-green-400";
        }
      }
    } else {
      console.error("‚ùå [FILE-MANAGER] Status text element not found");
    }
  }

  // Utility functions
  function formatFileSize(bytes) {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }

  function getDisplayFileName(file) {
    // Version badge CSS classes
    const versionBadgeClass =
      "absolute top-0 left-0 inline-flex items-center px-2.5 py-0.5 rounded-br-lg text-xs font-medium";

    // If no version number or version 1, show original filename
    if (!file.versionNumber || file.versionNumber === 1) {
      return `<span class="${versionBadgeClass} bg-green-500">SRC</span> ${window.truncateString ? window.truncateString(file.fileName, 40) : file.fileName}`;
    }
    if (file.versionNumber === 999) {
      return `<span class="${versionBadgeClass} bg-red-500">FNL</span> ${file.fileName ? window.truncateString(file.fileName, 40) : file.fileName}`;
    }
    // For version 2+, show "filename | v2", "filename | v3", etc.
    return `<span class="${versionBadgeClass} bg-primary-500">V${file.versionNumber}</span> ${file.fileName ? window.truncateString(file.fileName, 40) : file.fileName}`;
  }

  function getFileIcon(fileType) {
    const type = (fileType || "").toLowerCase();

    if (type.includes("pdf")) {
      return `<svg class="h-6 w-6 text-red-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
        <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
      </svg>`;
    }

    if (
      type.includes("image") ||
      type.includes("png") ||
      type.includes("jpg") ||
      type.includes("jpeg")
    ) {
      return `<svg class="h-6 w-6 text-primary-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
      </svg>`;
    }

    return `<svg class="h-6 w-6 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
      <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
    </svg>`;
  }

  async function downloadFile(publicUrl, fileName, fileId) {
    if (!publicUrl) {
      console.error("‚ùå [FILE-MANAGER] No public URL provided for download");
      showError("File download URL not available");
      return;
    }

    // Check if the URL contains 'undefined' or is empty
    if (publicUrl.includes("undefined") || publicUrl === "") {
      console.error("‚ùå [FILE-MANAGER] Invalid file URL:", publicUrl);
      showError("File is no longer available for download");
      return;
    }

    try {
      // Auto-checkout the file when downloading (if project status allows)
      if (canCheckoutFiles && currentUser?.id) {
        await handleFileCheckout(fileId, "checkout");
      }

      // Create a form to submit to the download endpoint
      const form = document.createElement("form");
      form.method = "POST";
      form.action = "/api/file/download";
      form.style.display = "none";

      // Add URL input
      const urlInput = document.createElement("input");
      urlInput.type = "hidden";
      urlInput.name = "url";
      urlInput.value = publicUrl;
      form.appendChild(urlInput);

      // Add filename input
      const filenameInput = document.createElement("input");
      filenameInput.type = "hidden";
      filenameInput.name = "filename";
      filenameInput.value = fileName;
      form.appendChild(filenameInput);

      // Submit form
      document.body.appendChild(form);
      form.submit();

      // Remove form after a delay
      setTimeout(() => {
        document.body.removeChild(form);
      }, 100);
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error downloading file:", error);
      showError(`Failed to download ${fileName}`);
    }
  }

  function showError(message) {
    console.error("‚ùå [FILE-MANAGER] Error:", message);
    if (window.showError) {
      window.showError("File Upload Error", message, 0);
    } else {
      console.error("üîî [File Upload Error] " + message);
    }
  }

  // Auto-check-in previous versions when new files are uploaded
  async function autoCheckInPreviousVersions(uploadedFilenames = []) {
    // Strip any timestamp prefixes from uploaded filenames
    const strippedUploadedFilenames = uploadedFilenames.map((filename) => {
      // Remove timestamp prefix if it exists (e.g., "1759866754296-1758747302707-" or "1758585285576-")
      return filename.replace(/^\d+-(\d+-)?/, "");
    });

    console.log("üîß [FILE-MANAGER] Checking for matches between:", {
      uploadedFilenames,
      strippedUploadedFilenames,
    });

    // Find checked out files that match the uploaded filenames (after stripping prefixes)
    const checkedOutFiles = files.filter((f) => {
      if (!f.checkedOutBy) return false;

      // Strip prefix from existing file name
      const strippedFileName = f.fileName.replace(/^\d+-(\d+-)?/, "");

      const isMatch = strippedUploadedFilenames.includes(strippedFileName);
      if (isMatch) {
        console.log("üîß [FILE-MANAGER] Found matching file:", {
          original: f.fileName,
          stripped: strippedFileName,
        });
      }
      return isMatch;
    });

    console.log(
      `üîß [FILE-MANAGER] Found ${checkedOutFiles.length} matching checked out files to check in`
    );

    for (const file of checkedOutFiles) {
      try {
        await handleFileCheckout(file.id, "checkin");
      } catch (error) {
        console.error(`‚ùå [FILE-MANAGER] Error auto-checking in file ${file.fileName}:`, error);
      }
    }
  }

  // Simplified checkout - no modal needed

  // Accordion functionality
  function initAccordions() {
    const accordionButtons = document.querySelectorAll("[data-accordion-target]");
    accordionButtons.forEach((button) => {
      button.addEventListener("click", function () {
        const targetId = this.getAttribute("data-accordion-target");
        const target = document.querySelector(targetId);
        const isExpanded = this.getAttribute("aria-expanded") === "true";

        if (target) {
          if (isExpanded) {
            target.classList.add("hidden");
            this.setAttribute("aria-expanded", "false");
            // Update both the main header and the toggle button
            const svg = this.querySelector("svg");
            if (svg) svg.style.transform = "rotate(0deg)";
            // Also update the toggle button if it exists
            const toggleButton = document.querySelector(
              `button[data-accordion-target="${targetId}"]`
            );
            if (toggleButton && toggleButton !== this) {
              const toggleSvg = toggleButton.querySelector("svg");
              if (toggleSvg) toggleSvg.style.transform = "rotate(0deg)";
              toggleButton.setAttribute("aria-expanded", "false");
            }
          } else {
            target.classList.remove("hidden");
            this.setAttribute("aria-expanded", "true");
            // Update both the main header and the toggle button
            const svg = this.querySelector("svg");
            if (svg) svg.style.transform = "rotate(180deg)";
            // Also update the toggle button if it exists
            const toggleButton = document.querySelector(
              `button[data-accordion-target="${targetId}"]`
            );
            if (toggleButton && toggleButton !== this) {
              const toggleSvg = toggleButton.querySelector("svg");
              if (toggleSvg) toggleSvg.style.transform = "rotate(180deg)";
              toggleButton.setAttribute("aria-expanded", "true");
            }
          }
        }
      });
    });
  }

  // Save file details function
  window.saveFileDetails = async function (fileId) {
    const title = document.getElementById(`file-title-${fileId}`)?.value || "";
    const comments = document.getElementById(`file-comments-${fileId}`)?.value || "";
    const isPrivate = document.getElementById(`file-private-${fileId}`)?.checked || false;

    // Find the file data to get required fields
    const fileData = files.find((f) => f.id === parseInt(fileId));
    if (!fileData) {
      console.error("‚ùå [FILE-MANAGER] File not found:", fileId);
      return;
    }

    try {
      const response = await fetch("/api/files/upsert", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: parseInt(fileId),
          projectId: fileData.projectId,
          fileName: fileData.fileName,
          filePath: fileData.filePath,
          authorId: fileData.authorId,
          bucketName: bucket,
          title: title,
          comments: comments,
          isPrivate: isPrivate,
        }),
      });

      const data = await response.json();

      if (data.success && window.showModal) {
        window.showModal("success", "File details saved successfully", "", 2000);
      } else {
        console.error("‚ùå [FILE-MANAGER] Failed to save file details:", data.error);
        window.showModal(
          "error",
          "Failed to save file details",
          "Please leave feedback via the feedback form button on the bottom right of the screen",
          2000
        );
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error saving file details:", error);
      showError("Error saving file details: " + error.message);
    }
  };

  window.downloadFile = downloadFile;

  // Handle file checkout operations (simplified - no modal)
  window.handleFileCheckout = async function (fileId, action) {
    try {
      const response = await fetch("/api/files/checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: action,
          fileId: fileId,
          userId: currentUserId,
          bucketName: bucket,
          notes: `Auto-${action} on ${new Date().toLocaleString()}`,
        }),
      });

      const data = await response.json();

      if (data.success) {
        // Refresh file list
        await loadProjectFiles();
        renderFiles(currentRole);
        if (canCheckoutFiles) {
          updateManagementPanel();
        }
      } else {
        console.error("‚ùå [FILE-MANAGER] Checkout failed:", data.error);
        showError(data.error || `Failed to ${action} file`);
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] File checkout error:", error);
      showError(`Error ${action}ing file: ${error.message}`);
    }
  };

  // Delete file function (Admin only) - using same pattern as project deletion
  let isDeletingFile = false; // Flag to prevent multiple delete operations

  window.deleteFile = function (fileId, fileName) {
    // Prevent multiple delete operations
    if (isDeletingFile) {
      console.log("Delete operation already in progress, ignoring request");
      return;
    }

    // Validate file ID
    if (!fileId || fileId <= 0) {
      console.error("Invalid file ID for deletion:", fileId);
      if (window.showModal) {
        window.showModal(
          "error",
          "Delete Failed",
          "Invalid file ID. Cannot delete this file.",
          5000
        );
      }
      return;
    }

    // Show confirmation modal with action buttons (same pattern as project deletion)
    if (window.showModal) {
      const truncatedFileName = window.truncateString
        ? window.truncateString(fileName, 30)
        : fileName;
      window.showModal(
        "error",
        "Delete File",
        `Are you sure you want to delete "${truncatedFileName}"? This action cannot be undone.`,
        10000, // 6000 seconds timeout
        [
          {
            label: "Cancel",
            action: () => {
              console.log("‚ùå [FILE-MANAGER] File deletion cancelled by user");
            },
          },
          {
            label: "Delete",
            action: () => {
              // Set deleting flag to prevent multiple operations
              isDeletingFile = true;

              // Show loading state on delete button
              const deleteBtn = document.querySelector(
                `button[onclick="deleteFile(${fileId}, '${fileName}')"]`
              );
              if (deleteBtn) {
                deleteBtn.disabled = true;
                deleteBtn.innerHTML =
                  '<svg class="h-5 w-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg>';
              }

              // Make API call to delete file
              fetch("/api/files/delete", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                credentials: "include",
                body: JSON.stringify({
                  fileId: fileId,
                  projectId: currentProjectId,
                  bucketName: bucket,
                }),
              })
                .then(async (response) => {
                  const data = await response.json();

                  if (!response.ok) {
                    throw new Error(data.error || "Failed to delete file");
                  }

                  // Show success modal
                  if (window.showModal) {
                    window.showModal(
                      "success",
                      "File Deleted!",
                      data.message || `"${fileName}" has been deleted successfully.`,
                      3000
                    );
                  }

                  // Reset deleting flag
                  isDeletingFile = false;

                  // Refresh the file list after a short delay
                  setTimeout(async () => {
                    // Clear any cached file references
                    files = [];

                    // Clear any cached file references in the DOM
                    const filesContainer = document.getElementById("files-container");
                    if (filesContainer) {
                      filesContainer.innerHTML = "";
                    }

                    // Force reload the file list
                    await loadProjectFiles();
                    renderFiles(currentRole);
                    if (canCheckoutFiles) {
                      updateManagementPanel();
                    }
                  }, 1000);
                })
                .catch((error) => {
                  console.error("‚ùå [FILE-MANAGER] Error deleting file:", error);

                  // Show error modal with specific error message
                  if (window.showModal) {
                    window.showModal(
                      "error",
                      "Delete Failed",
                      error.message || "Failed to delete file. Please try again.",
                      6000000 // 6000 seconds timeout
                    );
                  }

                  // Reset deleting flag and button state
                  isDeletingFile = false;
                  if (deleteBtn) {
                    deleteBtn.disabled = false;
                    deleteBtn.innerHTML =
                      '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>';
                  }
                });
            },
          },
        ]
      );
    }
  };

  // Preview file function - make it globally accessible
  window.previewFile = async function previewFile(fileUrl, fileName, fileType, fileId) {
    try {
      // Show loading modal
      // if (window.showModal) {
      //   window.showModal("info", "Loading preview...", "", 0);
      // }

      // Fetch preview content from enhanced API
      const response = await fetch("/api/files/preview", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          fileUrl: fileUrl,
          fileName: fileName,
          fileType: fileType,
          bucketName: bucket,
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Create and show preview modal
        showPreviewModal(result.htmlContent, result.documentName, result.fileType);
      } else {
        console.error("‚ùå [FILE-MANAGER] Failed to load preview:", result.message);
        if (window.showModal) {
          window.showModal("error", "Failed to load preview: " + result.message, "", 3000);
        }
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error loading preview:", error);
      if (window.showModal) {
        window.showModal("error", "Failed to load preview: " + error.message, "", 3000);
      }
    }
  };

  // Show preview modal - make it globally accessible
  window.showPreviewModal = function showPreviewModal(htmlContent, documentName, fileType = null) {
    // Create modal HTML
    const modalHTML = `
      <div id="previewModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
        <div class="bg-gray-100 dark:bg-gray-800 rounded-lg shadow-xl max-w-6xl w-full mx-4 max-h-[90vh] flex flex-col">
          <!-- Modal Header -->
          <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
              üìÑ ${documentName}
            </h3>
            <button 
              id="closePreviewModal" 
              class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              title="Close preview"
            >
              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Modal Body -->
          <div class="flex-1 overflow-hidden">
            <div id="previewContainer" class="h-full">
              <!-- Enhanced file preview will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    `;

    // Add modal to page
    document.body.insertAdjacentHTML("beforeend", modalHTML);

    // Load enhanced preview
    loadEnhancedPreview(htmlContent, documentName);

    // Add close event listener
    document.getElementById("closePreviewModal")?.addEventListener("click", closePreviewModal);

    // Close on backdrop click
    document.getElementById("previewModal")?.addEventListener("click", (e) => {
      if (e.target.id === "previewModal") {
        closePreviewModal();
      }
    });

    // Close on Escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        closePreviewModal();
      }
    });
  };

  // Load enhanced preview - make it globally accessible
  window.loadEnhancedPreview = async function loadEnhancedPreview(htmlContent, documentName) {
    try {
      console.log("üîß [ENHANCED-PREVIEW] Loading enhanced preview for:", documentName);

      const previewContainer = document.getElementById("previewContainer");
      if (!previewContainer) {
        console.error("üîß [ENHANCED-PREVIEW] Preview container not found");
        return;
      }

      // Create a blob URL for the HTML content
      const blob = new Blob([htmlContent], { type: "text/html" });
      const blobUrl = URL.createObjectURL(blob);

      // Create iframe for the enhanced preview
      previewContainer.innerHTML = `
        <iframe 
          id="enhancedPreviewIframe"
          src="${blobUrl}" 
          class="w-full h-full border-0"
          style="width: 100%; height: 100%;"
          sandbox="allow-same-origin allow-scripts allow-forms"
        ></iframe>
      `;

      const iframe = document.getElementById("enhancedPreviewIframe");
      if (iframe) {
        console.log("üîß [ENHANCED-PREVIEW] Enhanced preview iframe created successfully");

        // Clean up blob URL after iframe loads
        iframe.onload = () => {
          console.log("üîß [ENHANCED-PREVIEW] Enhanced preview iframe loaded successfully");
          setTimeout(() => URL.revokeObjectURL(blobUrl), 1000);
        };
      } else {
        console.error("üîß [ENHANCED-PREVIEW] Failed to create enhanced preview iframe");
        URL.revokeObjectURL(blobUrl);
      }
    } catch (error) {
      console.error("‚ùå [ENHANCED-PREVIEW] Error loading enhanced preview:", error);
    }
  };

  // Load PDF preview partial - make it globally accessible (legacy support)
  window.loadPDFPreviewPartial = async function loadPDFPreviewPartial(htmlContent, documentName) {
    try {
      // Create a temporary div to render the partial
      const tempDiv = document.createElement("div");
      tempDiv.innerHTML = `
        <div class="pdf-preview-container" data-document-name="${documentName}">
          <div id="zoomControls" class="mb-4 flex items-center justify-between rounded-lg bg-gray-50 p-3 dark:bg-gray-800">
            <div class="flex items-center space-x-2">
              <button id="zoomOut" class="rounded bg-gray-200 px-3 py-1 text-sm hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600" title="Zoom Out">‚àí</button>
              <span id="zoomLevel" class="px-3 py-1 text-sm font-medium text-gray-700 dark:text-gray-300">100%</span>
              <button id="zoomIn" class="rounded bg-gray-200 px-3 py-1 text-sm hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600" title="Zoom In">+</button>
              <button id="resetZoom" class="rounded bg-primary-500 px-3 py-1 text-sm text-white hover:bg-primary-600" title="Reset Zoom">Reset</button>
            </div>
            <div class="flex items-center space-x-2">
              <button id="fitToWidth" class="rounded bg-green-500 px-3 py-1 text-sm text-white hover:bg-green-600" title="Fit to Width">Fit Width</button>
              <button id="fitToPage" class="rounded bg-purple-500 px-3 py-1 text-sm text-white hover:bg-purple-600" title="Fit to Page">Fit Page</button>
            </div>
          </div>
          <div id="previewArea" class="overflow-auto border-0 rounded-lg" style="height: 600px; background: #f5f5f5;">
            <div class="py-8 text-center text-gray-500 dark:text-gray-400">
              <div class="mx-auto mb-4 h-8 w-8 animate-spin rounded-full border-b-2 border-primary-600"></div>
              <p>Loading PDF preview...</p>
            </div>
          </div>
        </div>
      `;

      // Insert into modal
      const previewContainer = document.getElementById("previewContainer");
      if (previewContainer) {
        previewContainer.innerHTML = tempDiv.innerHTML;

        // Initialize preview
        initializePDFPreview(htmlContent);
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error loading PDF preview:", error);
    }
  };

  // Initialize PDF preview - make it globally accessible
  window.initializePDFPreview = function initializePDFPreview(htmlContent) {
    let currentZoom = 100;
    let previewIframe = null;

    function showPreview(htmlContent) {
      const previewArea = document.getElementById("previewArea");
      if (!previewArea) return;

      // Create blob URL
      const blob = new Blob([htmlContent], { type: "text/html" });
      const blobUrl = URL.createObjectURL(blob);

      previewArea.innerHTML = `
        <div id="previewContainer" class="overflow-auto border-0 rounded-lg" style="height: 100%; background: #f5f5f5;">
          <iframe 
            id="previewIframe"
            src="${blobUrl}" 
            class="border-0"
            style="width: 100%; height: 100%; transform-origin: top left;"
            sandbox="allow-same-origin allow-scripts"
          ></iframe>
        </div>
      `;

      previewIframe = document.getElementById("previewIframe");
      if (previewIframe) {
        updateZoom();
        previewIframe.onload = () => {
          setTimeout(() => URL.revokeObjectURL(blobUrl), 1000);
        };
      } else {
        URL.revokeObjectURL(blobUrl);
      }
    }

    function updateZoom() {
      if (previewIframe) {
        previewIframe.style.transform = `scale(${currentZoom / 100})`;
        previewIframe.style.width = `${100 / (currentZoom / 100)}%`;
        previewIframe.style.height = `${600 / (currentZoom / 100)}px`;
        const zoomLevel = document.getElementById("zoomLevel");
        if (zoomLevel) {
          zoomLevel.textContent = `${currentZoom}%`;
        }
      }
    }

    function zoomIn() {
      if (currentZoom < 300) {
        currentZoom += 25;
        updateZoom();
      }
    }

    function zoomOut() {
      if (currentZoom > 25) {
        currentZoom -= 25;
        updateZoom();
      }
    }

    function resetZoom() {
      currentZoom = 100;
      updateZoom();
    }

    function fitToWidth() {
      if (previewIframe) {
        const container = document.getElementById("previewContainer");
        if (container) {
          const containerWidth = container.clientWidth;
          currentZoom = Math.round((containerWidth / 800) * 100);
          updateZoom();
        }
      }
    }

    function fitToPage() {
      if (previewIframe) {
        const container = document.getElementById("previewContainer");
        if (container) {
          const containerWidth = container.clientWidth;
          const containerHeight = container.clientHeight;
          const widthZoom = (containerWidth / 800) * 100;
          const heightZoom = (containerHeight / 600) * 100;
          currentZoom = Math.round(Math.min(widthZoom, heightZoom));
          updateZoom();
        }
      }
    }

    // Add event listeners
    document.getElementById("zoomIn")?.addEventListener("click", zoomIn);
    document.getElementById("zoomOut")?.addEventListener("click", zoomOut);
    document.getElementById("resetZoom")?.addEventListener("click", resetZoom);
    document.getElementById("fitToWidth")?.addEventListener("click", fitToWidth);
    document.getElementById("fitToPage")?.addEventListener("click", fitToPage);

    // Initialize preview
    showPreview(htmlContent);
  };

  // Close preview modal - make it globally accessible
  window.closePreviewModal = function closePreviewModal() {
    const modal = document.getElementById("previewModal");
    if (modal) {
      modal.remove();
    }
  };

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    initializeFileManager();
    initializeUpload();
  });
</script>
