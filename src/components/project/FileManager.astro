---
// File Manager Component with Checkout System - EXTENSIVE DEBUGGING
// A complete file management solution with checkout/assignment capabilities

interface Props {
  projectId: number;
  currentUser: any;
  currentRole: string;
  projectAuthorId?: string;
}

import BoxIcon from "../common/BoxIcon.astro";
const { projectId, currentUser, currentRole, projectAuthorId } = Astro.props;

// Only show for Admin/Staff
const showManagement = currentRole === "Admin" || currentRole === "Staff";

console.log("üîß [FILE-MANAGER] Component initialized with props:", {
  projectId,
  currentUser: currentUser ? {
    id: currentUser.id,
    email: currentUser.email,
    profile: currentUser.profile
  } : null,
  currentRole,
  projectAuthorId,
  showManagement
});
---

<div id="file-manager" class="space-y-6">
  <!-- Debug Info Panel -->
  <div class="rounded-lg bg-yellow-50 border border-yellow-200 p-4 dark:bg-yellow-900/20 dark:border-yellow-800">
    <h4 class="text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2">üêõ Debug Info</h4>
    <div class="text-xs text-yellow-700 dark:text-yellow-300 space-y-1">
      <div><strong>Project ID:</strong> {projectId}</div>
      <div><strong>User ID:</strong> {currentUser?.id || "None"}</div>
      <div><strong>User Role:</strong> {currentRole || "None"}</div>
      <div><strong>Project Author ID:</strong> {projectAuthorId || "None"}</div>
      <div><strong>Show Management:</strong> {showManagement ? "Yes" : "No"}</div>
      <div><strong>User Profile:</strong> {currentUser?.profile ? "Present" : "Missing"}</div>
    </div>
  </div>

  <!-- Header -->
  <div class="flex items-center justify-between">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Project Files</h3>
    <div class="text-sm text-gray-500 dark:text-gray-400">
      <span id="file-count">Loading...</span>
    </div>
  </div>

  <!-- Upload Section -->
  <div 
    id="upload-dropzone"
    class="rounded-lg border-2 border-dashed border-gray-300 p-6 text-center transition-colors hover:border-blue-400 dark:border-gray-600 dark:hover:border-blue-500 cursor-pointer"
  >
    <div class="space-y-4">
      <div class="mx-auto h-12 w-12 text-gray-400">
        <svg class="h-full w-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
        </svg>
      </div>
      <div>
        <p class="font-medium text-gray-600 dark:text-gray-300">
          Drop files here or click to browse 
          
        </p>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
          Upload supports PDF, images, CAD files, and documents (max 10MB each)
        </p>
        <BoxIcon name="alert-triangle" class="bx-lg mx-auto" />
        <p>Do Not Change File Names</p>
          
        </p>
      </div>
      <button
        id="browse-files-btn"
        class="inline-flex items-center rounded-lg bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
      >
        <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v4H8V5z"></path>
        </svg>
        Browse Files
      </button>
    </div>
  </div>

  <!-- Hidden file input -->
  <input
    type="file"
    id="file-input"
    multiple
    accept=".pdf,.png,.jpg,.jpeg,.gif,.webp,.dwg,.doc,.docx,.xls,.xlsx,.txt"
    class="hidden"
  />

  <!-- Upload Progress -->
  <div id="upload-progress" class="hidden">
    <div class="h-2 rounded-lg bg-gray-200 dark:bg-gray-700">
      <div
        id="progress-bar"
        class="h-2 rounded-lg bg-blue-600 transition-all duration-300"
        style="width: 0%"
      ></div>
    </div>
    <p id="upload-status" class="mt-2 text-sm text-gray-600 dark:text-gray-400">
      Uploading...
    </p>
  </div>

  <!-- File List -->
  <div id="files-container" class="space-y-3">
    <div class="py-8 text-center text-gray-500 dark:text-gray-400">Loading files...</div>
  </div>

  <!-- Management Panel (Admin/Staff only) -->
  {showManagement && (
    <div id="management-panel" class="mt-6 rounded-lg bg-gray-50 p-4 dark:bg-gray-800">
      <h4 class="mb-4 text-sm font-medium text-gray-700 dark:text-gray-300">File Management</h4>
      
      <!-- Quick Actions -->
      <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
        <!-- Checkout Status -->
        <div class="rounded-lg bg-white p-3 shadow-sm dark:bg-gray-700">
          <div class="flex items-center space-x-2">
            <div id="overall-status-indicator" class="h-3 w-3 rounded-full bg-gray-400"></div>
            <span id="overall-status-text" class="text-sm text-gray-600 dark:text-gray-300">
              Loading status...
            </span>
          </div>
        </div>

        <!-- Quick Stats -->
        <div class="rounded-lg bg-white p-3 shadow-sm dark:bg-gray-700">
          <div class="text-sm text-gray-600 dark:text-gray-300">
            <span id="checked-out-count">0</span> checked out ‚Ä¢ 
            <span id="assigned-count">0</span> assigned
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<script define:vars={{ projectId, currentUser, currentRole, showManagement, projectAuthorId }}>
  // File Manager Component with Checkout System - EXTENSIVE DEBUGGING
  console.log("üîß [FILE-MANAGER] Script initialized with variables:", {
    projectId,
    currentUser: currentUser ? {
      id: currentUser.id,
      email: currentUser.email,
      profile: currentUser.profile
    } : null,
    currentRole,
    projectAuthorId,
    showManagement
  });

  let files = [];
  let staffUsers = [];
  let currentProjectId = projectId;
  let currentUserId = currentUser?.id;

  function initializeFileManager() {
    console.log("üöÄ [FILE-MANAGER] Initializing file manager");
    console.log("üîß [FILE-MANAGER] Current project ID:", currentProjectId);
    console.log("üîß [FILE-MANAGER] Current user ID:", currentUserId);
    console.log("üîß [FILE-MANAGER] Current role:", currentRole);
    console.log("üîß [FILE-MANAGER] Show management:", showManagement);
    
    // Check if required elements exist
    const uploadArea = document.getElementById('upload-dropzone');
    const fileInput = document.getElementById('file-input');
    const browseBtn = document.getElementById('browse-files-btn');
    const filesContainer = document.getElementById('files-container');

    loadProjectFiles();
    
    // Load users for assignment (only Admin and Staff can assign files)
    if (currentRole === "Admin" || currentRole === "Staff") {
      console.log("üîß [FILE-MANAGER] Loading users for assignment for role:", currentRole);
      loadStaffUsers();
    } else {
      console.log("üîß [FILE-MANAGER] Assignment disabled for role:", currentRole);
    }
    
    if (showManagement) {
      console.log("üîß [FILE-MANAGER] Management panel enabled for role:", currentRole);
    } else {
      console.log("üîß [FILE-MANAGER] Management panel disabled for role:", currentRole);
    }
  }

  // Load files for the project
  async function loadProjectFiles() {
    console.log("üìÅ [FILE-MANAGER] Loading project files for project:", currentProjectId);
    
    try {
      const url = `/api/media?projectId=${currentProjectId}&targetLocation=documents`;
      console.log("üîß [FILE-MANAGER] Fetching from URL:", url);
      
      const response = await fetch(url);
      console.log("üîß [FILE-MANAGER] Response status:", response.status);
      console.log("üîß [FILE-MANAGER] Response headers:", Object.fromEntries(response.headers.entries()));
      
      const data = await response.json();
      console.log("üîß [FILE-MANAGER] Response data:", data);
      
      if (data.success) {
        files = data.media || [];
        console.log("‚úÖ [FILE-MANAGER] Files loaded successfully:", files.length, "files");
        console.log("üîß [FILE-MANAGER] Files data:", files);
        updateFileCount();
        renderFiles();
        if (showManagement) {
          updateManagementPanel();
        }
      } else {
        console.error("‚ùå [FILE-MANAGER] Failed to load files:", data.error);
        showError("Failed to load project files: " + data.error);
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error loading files:", error);
      console.error("üîß [FILE-MANAGER] Error details:", {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
      showError("Error loading project files: " + error.message);
    }
  }

  // Load users for assignment dropdown (Admin and Staff can assign to all user types)
  async function loadStaffUsers() {
    console.log("üë• [FILE-MANAGER] Loading users for assignment");
    console.log("üîß [FILE-MANAGER] Project author ID:", projectAuthorId);
    
    try {
      // Admin and Staff can assign files to Admin, Staff, and Client users
      const rolesToLoad = ["Admin", "Staff", "Client"];
      
      console.log("üîß [FILE-MANAGER] Loading users for roles:", rolesToLoad);
      
      const response = await fetch("/api/get-user-emails-by-role", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ roles: rolesToLoad }),
      });
      
      console.log("üîß [FILE-MANAGER] Users response status:", response.status);
      const data = await response.json();
      console.log("üîß [FILE-MANAGER] Users response data:", data);
      
      if (data.success) {
        let allUsers = data.staffUsers || [];
        console.log("üîß [FILE-MANAGER] All users loaded:", allUsers.length, "users");
        
        // Filter users based on role and project author ID
        staffUsers = allUsers.filter(user => {
          // Always include Admin and Staff users
          if (user.role === "Admin" || user.role === "Staff") {
            console.log("‚úÖ [FILE-MANAGER] Including Admin/Staff user:", user.email, "Role:", user.role);
            return true;
          }
          
          // For Client users, only include the project author
          if (user.role === "Client") {
            const isProjectAuthor = user.id === projectAuthorId;

            if (isProjectAuthor) {
              console.log("‚úÖ [FILE-MANAGER] Including project author client:", user.email);
              return true;
            } else {
              console.log("‚ùå [FILE-MANAGER] Excluding non-author client:", user.email);
              return false;
            }
          }
          
          return false;
        });
        
        console.log("‚úÖ [FILE-MANAGER] Filtered users loaded:", staffUsers.length, "users");
        console.log("üîß [FILE-MANAGER] Final users data:", staffUsers);
      } else {
        console.error("‚ùå [FILE-MANAGER] Failed to load users:", data.error);
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error loading users:", error);
      console.error("üîß [FILE-MANAGER] Error details:", {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
    }
  }

  // Update file count display
  function updateFileCount() {
    console.log("üî¢ [FILE-MANAGER] Updating file count:", files.length);
    const fileCountElement = document.getElementById("file-count");
    if (fileCountElement) {
      fileCountElement.textContent = `${files.length} file${files.length !== 1 ? 's' : ''}`;
      console.log("‚úÖ [FILE-MANAGER] File count updated to:", fileCountElement.textContent);
    } else {
      console.error("‚ùå [FILE-MANAGER] File count element not found");
    }
  }

  // Render files with extensive debugging
  function renderFiles() {
    console.log("üé® [FILE-MANAGER] Rendering files");
    const container = document.getElementById("files-container");
    
    if (!container) {
      console.error("‚ùå [FILE-MANAGER] Files container not found");
      return;
    }
    
    console.log("üîß [FILE-MANAGER] Files container found, rendering", files.length, "files");

    if (files.length === 0) {
      console.log("üì≠ [FILE-MANAGER] No files to display, showing empty state");
      container.innerHTML = `
        <div class="py-8 text-center text-gray-500 dark:text-gray-400">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <p class="mt-2">No files uploaded yet</p>
        </div>
      `;
      return;
    }

    console.log("üîß [FILE-MANAGER] Creating file cards for", files.length, "files");
    const fileCards = files.map((file, index) => {
      console.log(`üîß [FILE-MANAGER] Creating card for file ${index + 1}:`, file);
      return createFileCard(file);
    });
    
    container.innerHTML = fileCards.join('');
    console.log("‚úÖ [FILE-MANAGER] Files rendered successfully");
  }

  // Create file card with extensive debugging
  function createFileCard(file) {
    console.log("üé¥ [FILE-MANAGER] Creating file card for:", file.fileName);
    console.log("üîß [FILE-MANAGER] File data:", file);
    
    // Enable checkout system - SQL migration should be run
    const hasCheckoutColumns = true; // Enable checkout system
    const isCheckedOut = file.checked_out_by !== null;
    const isAssigned = file.assigned_to !== null;
    const isCheckedOutByMe = file.checked_out_by === currentUserId;

    let statusBadge = "";
    let statusColor = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";

    if (isCheckedOut) {
      if (isCheckedOutByMe) {
        statusBadge = "Checked out by you";
        statusColor = "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300";
      } else {
        statusBadge = `Checked out by ${file.checked_out_by_name || "Unknown"}`;
        statusColor = "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      }
    } else if (isAssigned) {
      statusBadge = `Assigned to ${file.assigned_to_name || "Unknown"}`;
      statusColor = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
    } else {
      statusBadge = "Available";
      statusColor = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
    }

    const fileCard = `
      <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow">
        <div class="flex items-start justify-between">
          <div class="flex-1 min-w-0">
            <div class="flex items-center space-x-3">
              <div class="flex-shrink-0">
                ${getFileIcon(file.fileType)}
              </div>
              <div class="flex-1 min-w-0">
                <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">
                  ${file.fileName}
                  ${file.version_number && file.version_number > 1 ? `<span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">v${file.version_number}</span>` : ''}
                </h4>
                <p class="text-xs text-gray-500 dark:text-gray-400">
                  ${formatFileSize(file.fileSize)} ‚Ä¢ Uploaded ${new Date(file.uploadedAt).toLocaleDateString()}
                  ${file.version_number && file.version_number > 1 ? ` ‚Ä¢ Version ${file.version_number}` : ''}
                </p>
              </div>
            </div>
          </div>
          
          <div class="flex items-center space-x-2">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColor}">
              ${statusBadge}
            </span>
            
            <!-- Download button -->
            <button 
              class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              onclick="downloadFile('${file.publicUrl || ""}', '${file.fileName}', ${file.id})"
              title="Download File"
              ${!file.publicUrl ? "disabled" : ""}
            >
              <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </button>
            
            ${showManagement ? `
              <button 
                class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                onclick="openFileCheckout(${file.id})"
                title="Manage file checkout"
              >
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
              </button>
            ` : ''}
          </div>
        </div>
      </div>
    `;
    
    console.log("‚úÖ [FILE-MANAGER] File card created for:", file.fileName);
    return fileCard;
  }

  // Upload functionality with extensive debugging
  function initializeUpload() {
    console.log("üì§ [FILE-MANAGER] Initializing upload functionality");
    
    const uploadArea = document.querySelector('#file-manager .rounded-lg.border-dashed');
    const fileInput = document.getElementById('file-input');
    const browseBtn = document.getElementById('browse-files-btn');
    const progressDiv = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const statusText = document.getElementById('upload-status');

    // Click to browse
    browseBtn?.addEventListener('click', (e) => {
      console.log("üñ±Ô∏è [FILE-MANAGER] Browse button clicked");
      e.stopPropagation();
      fileInput?.click();
    });

    uploadArea?.addEventListener('click', () => {
      console.log("üñ±Ô∏è [FILE-MANAGER] Upload area clicked");
      fileInput?.click();
    });

    // Drag and drop
    uploadArea?.addEventListener('dragover', (e) => {
      console.log("üéØ [FILE-MANAGER] File dragged over upload area");
      e.preventDefault();
      uploadArea.classList.add('border-blue-400', 'bg-blue-50');
    });

    uploadArea?.addEventListener('dragleave', (e) => {
      console.log("üéØ [FILE-MANAGER] File dragged away from upload area");
      e.preventDefault();
      uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
    });

    uploadArea?.addEventListener('drop', (e) => {
      console.log("üéØ [FILE-MANAGER] Files dropped on upload area");
      e.preventDefault();
      uploadArea.classList.remove('border-blue-400', 'bg-blue-50');
      
      const files = Array.from(e.dataTransfer.files);
      console.log("üîß [FILE-MANAGER] Dropped files:", files.length, "files");
      files.forEach((file, index) => {
        console.log(`üîß [FILE-MANAGER] Dropped file ${index + 1}:`, {
          name: file.name,
          size: file.size,
          type: file.type
        });
      });
      
      if (files.length > 0) {
        handleFileUpload(files);
      }
    });

    // File input change
    fileInput?.addEventListener('change', (e) => {
      console.log("üìÅ [FILE-MANAGER] File input changed");
      const files = Array.from(e.target.files);
      console.log("üîß [FILE-MANAGER] Selected files:", files.length, "files");
      files.forEach((file, index) => {
        console.log(`üîß [FILE-MANAGER] Selected file ${index + 1}:`, {
          name: file.name,
          size: file.size,
          type: file.type
        });
      });
      
      if (files.length > 0) {
        handleFileUpload(files);
      }
    });

    async function handleFileUpload(files) {
      console.log("üì§ [FILE-MANAGER] Starting file upload process");
      console.log("üîß [FILE-MANAGER] Files to upload:", files.length);
      
      if (!files || files.length === 0) {
        console.log("‚ö†Ô∏è [FILE-MANAGER] No files to upload");
        return;
      }

      // Show progress
      progressDiv?.classList.remove('hidden');
      progressBar.style.width = '0%';
      statusText.textContent = 'Preparing upload...';
      console.log("üîß [FILE-MANAGER] Progress UI shown");

      let uploadedCount = 0;
      const totalFiles = files.length;

      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        console.log(`üì§ [FILE-MANAGER] Processing file ${i + 1}/${totalFiles}:`, file.name);
        
        try {
          statusText.textContent = `Uploading ${file.name}...`;
          console.log("üîß [FILE-MANAGER] Converting file to base64:", file.name);
          
          // Convert file to base64
          const reader = new FileReader();
          const fileData = await new Promise((resolve, reject) => {
            reader.onload = () => {
              console.log("‚úÖ [FILE-MANAGER] File converted to base64, length:", reader.result?.length);
              resolve(reader.result);
            };
            reader.onerror = (error) => {
              console.error("‚ùå [FILE-MANAGER] FileReader error:", error);
              reject(error);
            };
            reader.readAsDataURL(file);
          });

          console.log("üîß [FILE-MANAGER] Uploading to media API:", file.name);
          
          // Upload using media system
          const response = await fetch("/api/media", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify({
              mediaData: fileData,
              fileName: file.name,
              fileType: file.type,
              projectId: currentProjectId.toString(),
              targetLocation: "documents",
              title: file.name,
              description: `Uploaded file`
            })
          });

          console.log("üîß [FILE-MANAGER] Upload response status:", response.status);
          
          if (!response.ok) {
            const errorData = await response.json();
            console.error("‚ùå [FILE-MANAGER] Upload failed:", errorData);
            throw new Error(errorData.error || "Upload failed");
          }

          const result = await response.json();
          console.log("‚úÖ [FILE-MANAGER] Upload successful:", result);

          uploadedCount++;
          const progress = (uploadedCount / totalFiles) * 100;
          progressBar.style.width = `${progress}%`;
          statusText.textContent = `Uploaded ${uploadedCount}/${totalFiles} files...`;
          console.log(`üîß [FILE-MANAGER] Progress: ${uploadedCount}/${totalFiles} files (${progress.toFixed(1)}%)`);

        } catch (error) {
          console.error(`‚ùå [FILE-MANAGER] Error uploading ${file.name}:`, error);
          console.error("üîß [FILE-MANAGER] Error details:", {
            message: error.message,
            stack: error.stack,
            name: error.name
          });
          showError(`Failed to upload ${file.name}: ${error.message}`);
        }
      }

      // Hide progress and refresh files
      setTimeout(() => {
        console.log("üîß [FILE-MANAGER] Upload process completed, hiding progress");
        progressDiv?.classList.add('hidden');
        loadProjectFiles();
        renderFiles();
        if (showManagement) {
          updateManagementPanel();
        }
        if (window.showModal) {
          window.showModal(
            "success",
            `Successfully uploaded ${uploadedCount} file(s)`,
            "",
            1500
          );
        } else {
          showSuccess(`Successfully uploaded ${uploadedCount} file(s)`);
        }
        console.log("‚úÖ [FILE-MANAGER] Upload process finished successfully");
      }, 1000);
    }
  }

  // Update management panel
  function updateManagementPanel() {
    console.log("üìä [FILE-MANAGER] Updating management panel");
    const checkedOutCount = files.filter(f => f.checked_out_by).length;
    const assignedCount = files.filter(f => f.assigned_to).length;

    const checkedOutElement = document.getElementById("checked-out-count");
    const assignedElement = document.getElementById("assigned-count");
    const statusTextElement = document.getElementById("overall-status-text");
    const statusIndicatorElement = document.getElementById("overall-status-indicator");
    
    if (checkedOutElement) {
      checkedOutElement.textContent = checkedOutCount;
      console.log("‚úÖ [FILE-MANAGER] Checked out count updated");
    } else {
      console.error("‚ùå [FILE-MANAGER] Checked out count element not found");
    }
    
    if (assignedElement) {
      assignedElement.textContent = assignedCount;
      console.log("‚úÖ [FILE-MANAGER] Assigned count updated");
    } else {
      console.error("‚ùå [FILE-MANAGER] Assigned count element not found");
    }
    
    // Update status text and indicator
    if (statusTextElement) {
      if (checkedOutCount > 0) {
        statusTextElement.textContent = `${checkedOutCount} file${checkedOutCount !== 1 ? 's' : ''} checked out`;
        if (statusIndicatorElement) {
          statusIndicatorElement.className = "h-3 w-3 rounded-full bg-yellow-400";
        }
      } else if (assignedCount > 0) {
        statusTextElement.textContent = `${assignedCount} file${assignedCount !== 1 ? 's' : ''} assigned`;
        if (statusIndicatorElement) {
          statusIndicatorElement.className = "h-3 w-3 rounded-full bg-blue-400";
        }
      } else {
        statusTextElement.textContent = "All files available";
        if (statusIndicatorElement) {
          statusIndicatorElement.className = "h-3 w-3 rounded-full bg-green-400";
        }
      }
      console.log("‚úÖ [FILE-MANAGER] Status text updated:", statusTextElement.textContent);
    } else {
      console.error("‚ùå [FILE-MANAGER] Status text element not found");
    }
  }

  // Utility functions
  function formatFileSize(bytes) {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  }

  function getFileIcon(fileType) {
    const type = (fileType || "").toLowerCase();

    if (type.includes("pdf")) {
      return `<svg class="h-6 w-6 text-red-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
        <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
      </svg>`;
    }

    if (type.includes("image") || type.includes("png") || type.includes("jpg") || type.includes("jpeg")) {
      return `<svg class="h-6 w-6 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
      </svg>`;
    }

    return `<svg class="h-6 w-6 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
      <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
    </svg>`;
  }

  function downloadFile(publicUrl, fileName, fileId) {
    console.log("üì• [FILE-MANAGER] Download requested:", { publicUrl, fileName, fileId });
    
    if (!publicUrl) {
      console.error("‚ùå [FILE-MANAGER] No public URL provided for download");
      showError("File download URL not available");
      return;
    }

    try {
      console.log("üîß [FILE-MANAGER] Creating download link");
      const link = document.createElement("a");
      link.href = publicUrl;
      link.download = fileName;
      // Remove target="_blank" to prevent new tab opening
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      console.log("‚úÖ [FILE-MANAGER] Download initiated successfully");
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] Error downloading file:", error);
      showError(`Failed to download ${fileName}`);
    }
  }

  function showError(message) {
    console.error("‚ùå [FILE-MANAGER] Error:", message);
    if (window.showError) {
      window.showError("File Upload Error", message, 0);
    } else {
      console.error("üîî [File Upload Error] " + message);
    }
  }

  // Make functions globally available
  window.openFileCheckout = function(fileId) {
    console.log("üîß [FILE-MANAGER] File checkout requested for file:", fileId);
    
    // Find the file data
    const file = files.find(f => f.id === fileId);
    if (!file) {
      console.error("‚ùå [FILE-MANAGER] File not found:", fileId);
      showError("File not found");
      return;
    }
    
    console.log("üîß [FILE-MANAGER] Opening checkout modal for file:", file.fileName);
    
    // Create checkout modal
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
      <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Manage File</h3>
          <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">File:</label>
            <p class="text-sm text-gray-600 dark:text-gray-400">${file.fileName}</p>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Notes:</label>
            <textarea 
              id="checkout-notes-${fileId}"
              class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
              rows="3"
              placeholder="Add notes about this checkout..."
            ></textarea>
          </div>
          
          <div class="flex space-x-2">
            <button 
              onclick="handleFileCheckout(${fileId}, 'checkout')"
              class="flex-1 rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
            >
              Check Out File
            </button>
            <button 
              onclick="handleFileCheckout(${fileId}, 'checkin')"
              class="flex-1 rounded-lg bg-green-600 px-4 py-2 text-white hover:bg-green-700"
            >
              Check In File
            </button>
          </div>
          
          ${(currentRole === "Admin" || currentRole === "Staff") ? `
            <div class="space-y-2">
              <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Assign to:</label>
              <select id="assign-select-${fileId}" class="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm dark:border-gray-600 dark:bg-gray-700 dark:text-white">
                <option value="">Select user...</option>
                ${staffUsers.map(user => `
                  <option value="${user.id}">
                    ${user.company_name || user.email} 
                    <span class="text-xs text-gray-500">(${user.role || 'Unknown'})</span>
                  </option>
                `).join('')}
              </select>
              <button 
                onclick="handleFileCheckout(${fileId}, 'assign')"
                class="w-full rounded-lg bg-purple-600 px-4 py-2 text-white hover:bg-purple-700"
              >
                Assign File
              </button>
            </div>
          ` : ''}
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
  };
  
  window.downloadFile = downloadFile;
  
  // Handle file checkout operations
  window.handleFileCheckout = async function(fileId, action) {
    console.log("üîß [FILE-MANAGER] Handling file checkout:", { fileId, action });
    
    const notes = document.getElementById(`checkout-notes-${fileId}`)?.value || "";
    const assignedTo = document.getElementById(`assign-select-${fileId}`)?.value;
    
    if (action === "assign" && !assignedTo) {
      showError("Please select a user to assign to");
      return;
    }
    
    try {
      const response = await fetch("/api/file-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: action,
          file_id: fileId,
          user_id: currentUserId,
          assigned_to: assignedTo,
          notes: notes
        })
      });
      
      const data = await response.json();
      console.log("üîß [FILE-MANAGER] Checkout response:", data);
      
      if (data.success) {
        if (window.showModal) {
          window.showModal("success", `File ${action} successful`, "", 2000);
        } else {
          showSuccess(`File ${action} successful`);
        }
        
        // Close modal and refresh
        document.querySelector('.fixed')?.remove();
        await loadProjectFiles();
        renderFiles();
        if (showManagement) {
          updateManagementPanel();
        }
      } else {
        showError(data.error || `Failed to ${action} file`);
      }
    } catch (error) {
      console.error("‚ùå [FILE-MANAGER] File checkout error:", error);
      showError(`Error ${action}ing file: ${error.message}`);
    }
  };

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    console.log("üöÄ [FILE-MANAGER] DOM loaded, initializing components");
    initializeFileManager();
    initializeUpload();
    console.log("‚úÖ [FILE-MANAGER] All components initialized");
  });
</script>