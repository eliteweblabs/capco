---
import SlotMachinePicker from "../common/SlotMachinePicker.astro";

// Staff Select Component - for assigning projects to staff members
// Only visible to admin users

interface Props {
  id?: string;
  company_name?: string;
  label?: string;
  value?: string;
  required?: boolean;
  placeholder?: string;
  projectId?: string;
  autoSave?: boolean;
  address?: string;
  currentRole?: string;
}

// Auth props will be passed from parent component
const { currentRole } = Astro.props;

// Only show select for admin and staff users
const canAssignStaff = currentRole === "Admin" || currentRole === "Staff";

const {
  id = "staff-select",
  company_name = "assigned_to_id",
  label = "Assign To",
  value = "",
  required = false,
  placeholder = "Select team member...",
  projectId = "",
  autoSave = false,
  address = "",
} = Astro.props;
---

{canAssignStaff ? (
  <div class="ml-4 flex-shrink-0">
    <SlotMachinePicker
      id={id}
      title="Assign Team Member"
      options={[]}
      selectedValue={value}
      theme="blue"
      placeholder={placeholder}
    />
  </div>
) : (
  <div class="space-y-2">
    <label for={id} class="block text-sm font-medium text-gray-700 dark:text-gray-300">
      {label}
      {required && <span class="ml-1 text-red-500">*</span>}
    </label>

    <select
      id={id}
      name={company_name}
      value={value}
      required={required}
      class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 dark:focus:border-blue-400"
    >
      <option value="">{placeholder}</option>
      <!-- Options will be populated by JavaScript -->
    </select>

    <div id={`${id}-loading`} class="hidden">
      <p class="text-sm text-gray-500 dark:text-gray-400">Loading staff members...</p>
    </div>

    <div id={`${id}-error`} class="hidden">
      <p class="text-sm text-red-600 dark:text-red-400">Failed to load staff members</p>
    </div>
  </div>
)}

<script define:vars={{ id, projectId, autoSave, value, address }}>
  // Function to update project staff assignment
  async function updateProjectStaff(projectId, staffId, staffName) {
    try {
      // console.log("üßë‚Äçüíº [STAFF-SELECT] Updating project staff:", { projectId, staffId, staffName });

      const response = await fetch("/api/update-project", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                projectId: projectId,
          assigned_to_id: staffId,
              }),
            });

      const result = await response.json();

      if (result.success) {
        // console.log("üßë‚Äçüíº [STAFF-SELECT] Staff assignment updated successfully");
        
        // Show success notification
        if (typeof window.showModal === 'function') {
          window.showModal('success', `Project assigned to ${staffName}`, 'Staff assignment updated successfully');
        }
      } else {
        console.error("üßë‚Äçüíº [STAFF-SELECT] Failed to update staff assignment:", result.error);
        
        // Show error notification
        if (typeof window.showModal === 'function') {
          window.showModal('error', 'Failed to update staff assignment', result.error || 'An error occurred');
        }
      }
    } catch (error) {
      console.error("üßë‚Äçüíº [STAFF-SELECT] Error updating project staff:", error);
      
      // Show error notification
      if (typeof window.showModal === 'function') {
        window.showModal('error', 'Failed to update staff assignment', 'Network error occurred');
      }
    }
  }

  // Function to load staff members and populate the slot machine picker
  async function loadStaffMembers() {
    try {
      // console.log("üßë‚Äçüíº [STAFF-SELECT] Fetching staff members...");

      // Fetch staff members from API
      const response = await fetch("/api/get-team-users");
      const result = await response.json();

      if (result.success && result.staffUsers) {
        // console.log(`üßë‚Äçüíº [STAFF-SELECT] Loaded ${result.staffUsers.length} staff members`);

        // Create options array for slot machine picker
        const options = [
          { value: "", label: "Unassigned" },
          ...result.staffUsers.map(staff => ({
            value: staff.id,
            label: staff.company_name
          }))
        ];

        // Update the slot machine picker options
        const trigger = document.getElementById(`${id}-trigger`);
        if (trigger) {
          // Store options in data attribute for the slot machine picker to use
          trigger.setAttribute('data-options', JSON.stringify(options));

        // Set initial display text
          const currentValue = value;
        if (currentValue) {
          const selectedStaff = result.staffUsers.find(s => s.id === currentValue);
          if (selectedStaff) {
              trigger.textContent = selectedStaff.company_name;
            }
          } else {
            trigger.textContent = "Unassigned";
          }
        }

        // console.log("üßë‚Äçüíº [STAFF-SELECT] Staff options populated successfully");
      } else {
        console.error("üßë‚Äçüíº [STAFF-SELECT] Failed to load staff:", result.error);
      }
    } catch (error) {
      console.error("üßë‚Äçüíº [STAFF-SELECT] Error loading staff:", error);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", loadStaffMembers);
  } else {
    loadStaffMembers();
  }

  // Set up the selection callback for the slot machine picker
  window[`${id}_onSelect`] = function(selectedValue, selectedLabel) {
    // console.log("üßë‚Äçüíº [STAFF-SELECT] Staff selected:", selectedValue, selectedLabel);
    
    // Auto-save if enabled
    if (autoSave && projectId) {
      updateProjectStaff(projectId, selectedValue, selectedLabel);
    }
  };
</script>