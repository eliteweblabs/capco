---
// Staff Select Component - for assigning projects to staff members
// Only visible to admin users
import { checkAuth } from "../../lib/auth";

// Get current user for authentication and role
const { isAuth, user, role } = await checkAuth(Astro.cookies);

// Only show select for admin and staff users
const canAssignStaff = role === "Admin" || role === "Staff";


interface Props {
  id?: string;
  company_name?: string;
  label?: string;
  value?: string;
  required?: boolean;
  placeholder?: string;
  projectId?: string;
  autoSave?: boolean;
  variant?: "default" | "hero";
}

const {
  id = "staff-select",
  company_name = "assigned_to_id",
  label = "Assign To",
  value = "",
  required = false,
  placeholder = "Select staff member...",
  projectId = "",
  autoSave = false,
  variant = "default",
} = Astro.props;
---

{canAssignStaff ? (
  <div class="ml-4 flex-shrink-0 relative">
    <div class="relative inline-block text-left">
      <button
        type="button"
        class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium cursor-pointer transition-colors
          bg-blue-100 text-blue-800 hover:bg-blue-200 
          dark:bg-blue-900/30 dark:text-blue-400 dark:hover:bg-blue-900/50"
        id={`${id}-button`}
        aria-expanded="false"
        aria-haspopup="true"
      >
        <span id={`${id}-selected-text`}>{placeholder}</span>
        <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>

      <div
        class="absolute right-0 z-50 mt-2 w-64 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 dark:ring-gray-700 hidden"
        id={`${id}-menu`}
        role="menu"
        aria-orientation="vertical"
        aria-labelledby={`${id}-button`}
      >
        <div class="py-1" role="none">
          <div class="px-4 py-2 text-sm text-gray-700 dark:text-gray-300 border-b border-gray-200 dark:border-gray-700">
            <div class="font-medium">Assign Staff Member</div>
            <div class="text-xs text-gray-500 dark:text-gray-400">Project #{projectId}</div>
          </div>
          
          <div id={`${id}-loading`} class="px-4 py-2 text-sm text-gray-500 dark:text-gray-400 hidden">
            Loading staff members...
          </div>

          <div id={`${id}-error`} class="px-4 py-2 text-sm text-red-600 dark:text-red-400 hidden">
            Error loading staff
          </div>

          <div id={`${id}-options`}>
            <!-- Options will be populated by JavaScript -->
          </div>
        </div>
      </div>
    </div>
  </div>
) : (
  <div class="space-y-2">
    <label for={id} class="block text-sm font-medium text-gray-700 dark:text-gray-300">
      {label}
      {required && <span class="ml-1 text-red-500">*</span>}
    </label>

    <select
      id={id}
      name={company_name}
      value={value}
      required={required}
      class="w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-100 dark:focus:border-blue-400"
    >
      <option value="">{placeholder}</option>
      <!-- Options will be populated by JavaScript -->
    </select>

    <div id={`${id}-loading`} class="hidden">
      <p class="text-sm text-gray-500 dark:text-gray-400">Loading staff members...</p>
    </div>

    <div id={`${id}-error`} class="hidden">
      <p class="text-sm text-red-600 dark:text-red-400">Failed to load staff members</p>
    </div>
  </div>
)}

<script define:vars={{ id, projectId, autoSave, value }}>
  document.addEventListener("DOMContentLoaded", async () => {
    const buttonElement = document.getElementById(`${id}-button`);
    const menuElement = document.getElementById(`${id}-menu`);
    const selectedTextElement = document.getElementById(`${id}-selected-text`);
    const optionsContainer = document.getElementById(`${id}-options`);
    const loadingElement = document.getElementById(`${id}-loading`);
    const errorElement = document.getElementById(`${id}-error`);

    if (!buttonElement || !menuElement || !selectedTextElement || !optionsContainer) return;

    // Toggle dropdown
    buttonElement.addEventListener("click", (e) => {
      e.stopPropagation();
      const isHidden = menuElement.classList.contains("hidden");
      if (isHidden) {
        menuElement.classList.remove("hidden");
        buttonElement.setAttribute("aria-expanded", "true");
      } else {
        menuElement.classList.add("hidden");
        buttonElement.setAttribute("aria-expanded", "false");
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", () => {
      menuElement.classList.add("hidden");
      buttonElement.setAttribute("aria-expanded", "false");
    });

    // Function to handle staff selection
    function selectStaff(staffId, staffName) {
      console.log("üßë‚Äçüíº [STAFF-SELECT] Staff selected:", { staffId, staffName });
      
      // Update button text
      selectedTextElement.textContent = staffName;
      
      // Close dropdown
      menuElement.classList.add("hidden");
      buttonElement.setAttribute("aria-expanded", "false");
      
      // Update options highlighting
      optionsContainer.querySelectorAll("button").forEach(option => {
        option.classList.remove("bg-blue-50", "text-blue-700", "dark:bg-blue-900/30", "dark:text-blue-400");
        option.classList.add("text-gray-700", "dark:text-gray-300");
        // Remove checkmark
        const checkmark = option.querySelector("svg:last-child");
        if (checkmark && checkmark.getAttribute("fill") === "currentColor") {
          checkmark.remove();
        }
      });
      
      // Highlight selected option
      if (staffId) {
        const selectedOption = Array.from(optionsContainer.querySelectorAll("button")).find(btn => 
          btn.innerHTML.includes(staffName) && !btn.innerHTML.includes("Unassigned"));
        if (selectedOption) {
          selectedOption.classList.remove("text-gray-700", "dark:text-gray-300");
          selectedOption.classList.add("bg-blue-50", "text-blue-700", "dark:bg-blue-900/30", "dark:text-blue-400");
          // Add checkmark
          const checkmark = document.createElement("svg");
          checkmark.className = "w-4 h-4 text-blue-600";
          checkmark.setAttribute("fill", "currentColor");
          checkmark.setAttribute("viewBox", "0 0 20 20");
          checkmark.innerHTML = '<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>';
          selectedOption.appendChild(checkmark);
        }
      }
      
      // Auto-save if enabled and projectId is provided
      if (autoSave && projectId) {
        updateStaffAssignment(staffId, staffName);
      }
    }

    // Function to update staff assignment and send notifications
    async function updateStaffAssignment(staffId, staffName) {
      try {
        console.log("üßë‚Äçüíº [STAFF-SELECT] Updating staff assignment:", { staffId, staffName, projectId });

        // Update project assignment
        const response = await fetch(`/api/update-project/${projectId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            assigned_to_id: staffId || null,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to update assignment");
        }

        const result = await response.json();
        console.log("üßë‚Äçüíº [STAFF-SELECT] Assignment updated successfully:", result);

        // Show success toast immediately (don't wait for email)
        if (typeof window !== "undefined" && window.showSuccess) {
          window.showSuccess(
            "Assignment Updated",
            staffId 
              ? `Project assigned to ${staffName}` 
              : "Project unassigned",
            3000
          );
        }

        // Send staff assignment email notification in the background (only for assignments, not unassignments)
        if (staffId) {
          try {
            console.log("üßë‚Äçüíº [STAFF-SELECT] Sending assignment notification email...");
            
            // Prepare users to notify - notify admins and the assigned staff member
            const usersToNotify = [
              { role: "Admin" }, // Notify all admins
              { id: staffId }     // Notify the assigned staff member
            ];

            console.log("üßë‚Äçüíº [STAFF-SELECT] Email request payload:", {
              projectId: projectId,
              emailType: "staff_assignment",
              usersToNotify: usersToNotify,
              newStatus: null,
              assigned_to_id: staffId,
              assigned_to_name: staffName
            });

            const emailResponse = await fetch("/api/email-delivery", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                projectId: projectId,
                emailType: "staff_assignment",
                usersToNotify: usersToNotify,
                newStatus: null, // Not a status change, just assignment
                assigned_to_id: staffId,
                assigned_to_name: staffName,
                email_content: `A project has been assigned to ${staffName}. Please review the project details and take appropriate action.`,
                custom_subject: `Project Assignment - ${staffName}`
              }),
            });

            console.log("üßë‚Äçüíº [STAFF-SELECT] Email API response status:", emailResponse.status);

            if (emailResponse.ok) {
              const emailResult = await emailResponse.json();
              console.log("üßë‚Äçüíº [STAFF-SELECT] Email notification sent successfully:", emailResult);
            } else {
              const errorText = await emailResponse.text();
              console.error("üßë‚Äçüíº [STAFF-SELECT] Email API failed:", {
                status: emailResponse.status,
                statusText: emailResponse.statusText,
                errorBody: errorText
              });
            }
          } catch (emailError) {
            console.error("üßë‚Äçüíº [STAFF-SELECT] Email notification error:", emailError);
            // Don't fail the assignment update if email fails
          }
        }

      } catch (error) {
        console.error("üßë‚Äçüíº [STAFF-SELECT] Assignment update failed:", error);
        
        // Show error toast
        if (typeof window !== "undefined" && window.showError) {
          window.showError(
            "Assignment Failed",
            error.message || "Failed to update staff assignment",
            5000
          );
        }
      }
    }

    // Show loading state
    if (loadingElement) loadingElement.classList.remove("hidden");
    if (errorElement) errorElement.classList.add("hidden");

    try {
      console.log("üßë‚Äçüíº [STAFF-SELECT] Fetching staff members...");

      // Fetch staff members from API
      const response = await fetch("/api/get-staff-users");
      const result = await response.json();

      if (result.success && result.staffUsers) {
        console.log(`üßë‚Äçüíº [STAFF-SELECT] Loaded ${result.staffUsers.length} staff members`);

        // Store current value to preserve it
        const currentValue = value; // Use the Astro prop value instead of DOM value
        console.log("üßë‚Äçüíº [STAFF-SELECT] Initial value:", currentValue);
        console.log("üßë‚Äçüíº [STAFF-SELECT] Props value:", value);
        console.log("üßë‚Äçüíº [STAFF-SELECT] Project ID:", projectId);

        // Clear existing options
        optionsContainer.innerHTML = "";

        // Add unassigned option
        const unassignedOption = document.createElement("button");
        unassignedOption.type = "button";
        unassignedOption.className = "group flex w-full items-center px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300";
        unassignedOption.innerHTML = `
          <span class="flex items-center">
            <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            Unassigned
          </span>
        `;
        unassignedOption.addEventListener("click", () => selectStaff("", "Unassigned"));
        optionsContainer.appendChild(unassignedOption);

        // Add staff options
        result.staffUsers.forEach((staff) => {
          const option = document.createElement("button");
          option.type = "button";
          option.className = `group flex w-full items-center px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors
            ${staff.id === currentValue ? 'bg-blue-50 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'}`;
          option.innerHTML = `
            <span class="flex items-center">
              <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              ${staff.company_name}
            </span>
            ${staff.id === currentValue ? '<svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>' : ''}
          `;
          option.addEventListener("click", () => selectStaff(staff.id, staff.company_name));
          optionsContainer.appendChild(option);
        });

        // Set initial display text
        if (currentValue) {
          const selectedStaff = result.staffUsers.find(s => s.id === currentValue);
          if (selectedStaff) {
            selectedTextElement.textContent = selectedStaff.company_name;
          }
          console.log("üßë‚Äçüíº [STAFF-SELECT] Restored value:", currentValue);
        } else {
          selectedTextElement.textContent = "Unassigned";
          console.log("üßë‚Äçüíº [STAFF-SELECT] No value to restore");
        }

        console.log("üßë‚Äçüíº [STAFF-SELECT] Staff options populated successfully");
      } else {
        console.error("üßë‚Äçüíº [STAFF-SELECT] Failed to load staff:", result.error);
        if (errorElement) {
          errorElement.classList.remove("hidden");
          const errorText = errorElement.querySelector("p");
          if (errorText) errorText.textContent = result.error || "Failed to load staff members";
        }
      }
    } catch (error) {
      console.error("üßë‚Äçüíº [STAFF-SELECT] Error fetching staff:", error);
      if (errorElement) {
        errorElement.classList.remove("hidden");
      }
    } finally {
      // Hide loading state
      if (loadingElement) loadingElement.classList.add("hidden");
    }

    // Selection is now handled by the updateStaffAssignment function
    // which is called from the selectStaff function when dropdown options are clicked
    
  });
</script>
