---
import SimpleIcon from "../common/SimpleIcon.astro";
import SlotMachineModalStaff from "../form/SlotMachineModalStaff.astro";
import Tooltip from "../common/Tooltip.astro";
import UserIcon from "../common/UserIcon.astro";
interface Props {
  project: {
    punchlistItems?: { completed: number; total: number };
    incompleteDiscussions: any;
    id: any;
    authorId?: any;
    title?: any;
    address: any;
    description: any;
    sqFt: any;
    newConstruction: any;
    status: any;
    createdAt: any;
    updatedAt: any;
    elapsedTime?: any;
    assignedToId?: any;
    commentCount?: any;
    dueDate?: any;
    generated_document_count?: any;
    authorProfile?: any;
    assignedToProfile?: any;
    featuredImageData?: {
      id: any;
      filePath: string;
      fileName: string;
      fileType: string;
      publicUrl: string;
    };
    // New document data fields
    projectFiles?: Array<{
      id: number;
      projectId: number;
      authorId: string;
      filePath: string;
      fileName: string;
      fileSize: number;
      fileType: string;
      title?: string;
      comments?: string;
      status: string;
      uploadedAt: string;
      createdAt: string;
      updatedAt: string;
    }>;
    generatedDocuments?: Array<{
      id: number;
      projectId: number;
      templateId?: number;
      documentName: string;
      filePath?: string;
      fileSize?: number;
      generationStatus: string;
      errorMessage?: string;
      generationStartedAt?: string;
      generation_completed_at?: string;
      createdAt: string;
      createdBy: string;
    }>;
  };
  statusData?: any;
  currentRole?: string;
  statuses?: any;
  currentStatusName?: string;
  currentStatusInt?: string;
  currentStatusTab?: string;
  currentStatusColor?: string;
  currentStatusEstTime?: string;
  staffOptions?: any;
  dueDateOptions?: any;
  currentUser?: any;
  globalInputClasses?: string;
}

const {
  project,
  currentUser,
  statusData,
  currentStatusName,
  currentStatusInt,
  currentStatusTab,
  currentStatusColor,
  currentStatusEstTime,
  staffOptions,
  dueDateOptions,
  globalInputClasses,
} = Astro.props;

const currentRole = currentUser?.profile?.role;

const description = project?.description || "No description";

// console.log("üîç [PROJECT-feater] Project:", project.featuredImageData);
// console.log("üîç [PROJECT-featured=imaage] Project:", project.featuredImage);
// return if user is staff and project is not assigned to them
// if (currentRole === "Staff" && project.assignedToId !== user?.id) {
//   return null;
// }

// if (currentRole === "Client" && project.authorId !== user?.id) {
//   return null;
// }

const statusSlugOrId =
  currentRole && currentRole === "Client" ? currentStatusTab : currentStatusInt;
// Debug logging removed for performance

// Function to limit description to 200 words
function limitDescription(text: string, wordLimit: number = 50): string {
  if (!text) return "";
  const words = text.trim().split(/\s+/);
  if (words.length <= wordLimit) return text;
  return words.slice(0, wordLimit).join(" ") + "...";
}

// Get project status info from passed statuses or fallback to default
// Status color is now provided by the get-project-statuses API

// Use the pre-calculated elapsedTime from the database
const elapsedTime = project.createdAt;
let projectAgeColor = "rgb(209, 213, 219)"; // Default gray
let projectAlertIconCount = 0;
let elapsedHours = 0; // Initialize outside the if block

// Function to format elapsed time into hours and minutes
function formatElapsedTime(elapsedTime: any): string {
  if (!elapsedTime) return "0h 0m";

  let totalMinutes = 0;

  if (typeof elapsedTime === "string") {
    // Parse interval string (e.g., "2 days 5:30:45")
    const match = elapsedTime.match(/(\d+) days? (\d+):(\d+):(\d+)/);
    if (match) {
      const days = parseInt(match[1]);
      const hours = parseInt(match[2]);
      const minutes = parseInt(match[3]);
      totalMinutes = days * 24 * 60 + hours * 60 + minutes;
    } else {
      // Try to parse as just hours:minutes:seconds
      const timeMatch = elapsedTime.match(/(\d+):(\d+):(\d+)/);
      if (timeMatch) {
        const hours = parseInt(timeMatch[1]);
        const minutes = parseInt(timeMatch[2]);
        totalMinutes = hours * 60 + minutes;
      }
    }
  } else if (elapsedTime.total_seconds) {
    // If it's an object with total_seconds
    totalMinutes = Math.floor(elapsedTime.total_seconds / 60);
  } else if (elapsedTime.days !== undefined) {
    // If it's an object with days, hours, minutes, seconds
    totalMinutes =
      (elapsedTime.days || 0) * 24 * 60 +
      (elapsedTime.hours || 0) * 60 +
      (elapsedTime.minutes || 0);
  }

  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;

  return `${hours}h ${minutes}m`;
}

// Calculate time since last update
function getTimeSinceUpdate(updatedAt: string): string {
  const now = new Date();
  const updated = new Date(updatedAt);
  const diffMs = now.getTime() - updated.getTime();

  const seconds = Math.floor(diffMs / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  const weeks = Math.floor(days / 7);
  const months = Math.floor(days / 30);
  const years = Math.floor(days / 365);

  if (years > 0) {
    return `${years} year${years > 1 ? "s" : ""} ago`;
  } else if (months > 0) {
    return `${months} month${months > 1 ? "s" : ""} ago`;
  } else if (weeks > 0) {
    return `${weeks} week${weeks > 1 ? "s" : ""} ago`;
  } else if (days > 0) {
    return `${days} day${days > 1 ? "s" : ""} ago`;
  } else if (hours > 0) {
    return `${hours} hour${hours > 1 ? "s" : ""} ago`;
  } else if (minutes > 0) {
    return `${minutes} minute${minutes > 1 ? "s" : ""} ago`;
  } else {
    return "Just now";
  }
}

const timeSinceUpdate = getTimeSinceUpdate(project.updatedAt);

if (elapsedTime) {
  // Convert PostgreSQL interval to hours
  // elapsedTime is a string like "2 days 5:30:45" or an object with properties

  if (typeof elapsedTime === "string") {
    // Parse interval string (e.g., "2 days 5:30:45")
    const match = elapsedTime.match(/(\d+) days? (\d+):(\d+):(\d+)/);
    if (match) {
      const days = parseInt(match[1]);
      const hours = parseInt(match[2]);
      elapsedHours = days * 24 + hours;
    }
  } else if (elapsedTime.total_seconds) {
    // If it's an object with total_seconds
    elapsedHours = elapsedTime.total_seconds / 3600;
  } else if (elapsedTime.days !== undefined) {
    // If it's an object with days, hours, minutes, seconds
    elapsedHours =
      (elapsedTime.days || 0) * 24 + (elapsedTime.hours || 0) + (elapsedTime.minutes || 0) / 60;
  }

  const isOver48Hours = elapsedHours > 48;

  if (isOver48Hours) {
    // Calculate how many 12-hour periods have passed since 48 hours
    const hoursPast48 = elapsedHours - 48;
    const colorLevel = Math.floor(hoursPast48 / 12); // Every 12 hours = new color level

    // Progressive red color scale (using standard red colors)
    switch (colorLevel) {
      case 0:
        projectAgeColor = "rgb(254, 242, 242)";
        projectAlertIconCount = 1;
        break; // 48-60 hours
      case 1:
        projectAgeColor = "rgb(254, 226, 226)";
        projectAlertIconCount = 2;
        break; // 60-72 hours
      case 2:
        projectAgeColor = "rgb(252, 202, 202)";
        projectAlertIconCount = 3;
        break; // 72-84 hours
      case 3:
        projectAgeColor = "rgb(251, 173, 173)";
        projectAlertIconCount = 4;
        break; // 84-96 hours
      case 4:
        projectAgeColor = "rgb(239, 68, 68)";
        projectAlertIconCount = 5;
        break; // 96-108 hours
      default:
        projectAgeColor = "rgb(220, 38, 38)";
        projectAlertIconCount = 6;
        break; // 108+ hours
    }
  }
}

// Simple function to render alert icons as HTML
function renderAlertIcons(count: number) {
  let html = "";
  for (let i = 0; i < count; i++) {
    html +=
      '<i data-lucide="alert-circle" class="text-red-500 w-3 h-3 rounded-full bg-gray-100 color-background block"></i>';
  }
  return html;
}

const statusColor = currentStatusColor || "gray";

// // Convert to days, hours, and minutes
// const days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
// const hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
// const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));

// Format the duration
// const createdAt = `${days}d ${hours}h ${minutes}m`;
---

<tr
  class="border-b hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-gray-800"
  data-project-status={statusSlugOrId}
  data-project-id={project.id}
>
  {
    currentRole !== "Client" && (
      <td class="E9GV5sZJIbfO_GEQ_moc px-4 py-2">
        <div class="align-center flex">
          <SimpleIcon
            name="trash"
            class="text-red-500"
            size="xs"
            dataAttributes={{
              "data-project-id": project.id,
              onclick: `event.stopPropagation(); deleteProject(${project.id})`,
            }}
          />
        </div>
      </td>
    )
  }
  <th scope="row" class="whitespace-nowrap px-4 py-2"
    ><a
      href={`/project/${project.id}`}
      class="oJZU4OQzzfXeLbF7UKZ_ relative font-medium text-gray-900 dark:text-white"
      >{project.address || "No address"}

      {
        currentRole !== "Client" && (
          <span
            class={`font-large z-1 absolute right-0 top-0 mb-4 cursor-pointer`}
            set:html={renderAlertIcons(projectAlertIconCount)}
          />
        )
      }
    </a></th
  >

  {
    currentRole !== "Client" && (
      <td class="whitespace-nowrap px-4 py-2">
        {project?.authorProfile?.companyName || "Unknown Author"}
      </td>
    )
  }

  <td class="whitespace-nowrap px-4 py-2">
    <a
      href={`/project/${project.id}?status=${currentStatusTab}`}
      style={`background-color: ${statusColor};`}
      class="rounded-sm YccXYy5sNIz6FJlLxw0D Zs2BLzUMh0_yTpU6xCcU mbOxN7eW74XygTKQC_r3 V9HgZms3_2W5sanRatci block w-full px-2.5 text-center text-xs font-medium text-black"
      >{currentStatusName || "Unknown Status"}</a
    >
  </td>
  <td class="whitespace-nowrap px-4 py-2">
    <div class="IxVXJAn2ZWxXpcIHvPnh XrB0f1gZzjK6cEODacjg flex">
      <a href={`/project/${project.id}?status=documents`} class="text-sm text-gray-600">
        {
          project.projectFiles?.length && project.projectFiles?.length > 0 ? (
            <div
              class="flex flex-wrap items-center gap-2"
              id="project-files-{project.id}"
              data-project-files={JSON.stringify(project.projectFiles || [])}
            />
          ) : (
            <span class="text-gray-600">No files</span>
          )
        }
      </a>
    </div>
    {
      currentRole !== "Client" && (
        <td class="whitespace-nowrap px-4 py-2 font-medium">
          <div class="flex">
            <SlotMachineModalStaff
              id={`assign-staff-slot-machine-${project.id}`}
              title="Assign Staff Member"
              options={staffOptions}
              selectedValue={project?.assignedToId || ""}
              placeholder="Assign staff..."
              buttonText={(() => {
                if (!project?.assignedToId) return "Unassigned";
                const assignedStaff = staffOptions.find(
                  (staff: any) => staff.value === project.assignedToId
                );
                return assignedStaff?.label || "Unknown Staff";
              })()}
              saveApiEndpoint="utils/assign-staff"
              showCloseButton={true}
              showCancelButton={true}
              project={project}
              showNotification={true}
              icon="user"
              component="UserIcon"
              componentProps={{
                users: [project?.assignedToProfile],
              }}
              searchText="Search staff..."
              buttonVariant="anchor"
              currentUser={currentUser}
              globalInputClasses={globalInputClasses}
            />
          </div>
        </td>
      )
    }

    <td class="whitespace-nowrap px-4 py-2 font-medium">
      <div class="flex">
        <span class="text-xs font-medium text-gray-500 dark:text-gray-400"
          >{((project.status / 220) * 100).toFixed(0)}%</span
        >
      </div>
      <div class="w-full dark:bg-gray-700">
        <div class="" style=`width: ${((project.status / 220) * 100).toFixed(0)}%`></div>
      </div>
    </td>
    <td class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
      {project.punchlistItems?.completed || 0} / {project.punchlistItems?.total || 0}
    </td>
    <td class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
      {
        formatElapsedTime({
          total_seconds: (Date.now() - new Date(project.createdAt).getTime()) / 1000,
        })
      }
    </td>
    <td class="whitespace-nowrap px-4 py-2 text-gray-900 dark:text-white">
      <div
        class="align-center inline-flex rounded-md border bg-gray-100 text-xs font-medium dark:border-gray-600 dark:bg-gray-700"
      >
        {timeSinceUpdate}
      </div>
    </td>
    <td class="whitespace-nowrap px-4 py-2 text-xs font-medium text-gray-900 dark:text-white">
      {
        currentRole === "Admin" || currentRole === "Staff" ? (
          <span>
            {project?.dueDate
              ? new Date(project.dueDate).toLocaleDateString("en-US", {
                  weekday: "short",
                  month: "short",
                  day: "numeric",
                  hour: "numeric",
                  minute: "2-digit",
                  hour12: true,
                })
              : ""}{" "}
          </span>
        ) : (
          <span>
            {new Date(project?.dueDate).toLocaleDateString(undefined, {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}
          </span>
        )
      }
    </td>

    <script>
      // Update time display every minute
      function updateTimeDisplay() {
        const timeElements = document.querySelectorAll("[data-time-since-update]");

        timeElements.forEach((element) => {
          const updatedAt = element.getAttribute("data-updated-at");
          if (updatedAt) {
            const now = new Date();
            const updated = new Date(updatedAt);
            const diffMs = now.getTime() - updated.getTime();
            const seconds = Math.floor(diffMs / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);
            const weeks = Math.floor(days / 7);
            const months = Math.floor(days / 30);
            const years = Math.floor(days / 365);

            let timeText;
            if (years > 0) {
              timeText = `${years} year${years > 1 ? "s" : ""} ago`;
            } else if (months > 0) {
              timeText = `${months} month${months > 1 ? "s" : ""} ago`;
            } else if (weeks > 0) {
              timeText = `${weeks} week${weeks > 1 ? "s" : ""} ago`;
            } else if (days > 0) {
              timeText = `${days} day${days > 1 ? "s" : ""} ago`;
            } else if (hours > 0) {
              timeText = `${hours} hour${hours > 1 ? "s" : ""} ago`;
            } else if (minutes > 0) {
              timeText = `${minutes} minute${minutes > 1 ? "s" : ""} ago`;
            } else {
              timeText = "Just now";
            }

            element.textContent = timeText;
          }
        });
      }

      // Update immediately and then every minute
      updateTimeDisplay();
      setInterval(updateTimeDisplay, 60000); // 60000ms = 1 minute

      // Render file icons for this project
      renderFileIcons();

      // File icon function for displaying file type icons
      function getFileIcon(fileType: string) {
        const type = (fileType || "").toLowerCase();

        if (type.includes("pdf")) {
          return `<svg class="h-3 w-3 text-red-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
        }

        if (
          type.includes("image") ||
          type.includes("png") ||
          type.includes("jpg") ||
          type.includes("jpeg") ||
          type.includes("gif") ||
          type.includes("webp") ||
          type.includes("svg")
        ) {
          return `<svg class="h-3 w-3 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
        </svg>`;
        }

        if (type.includes("word") || type.includes("doc")) {
          return `<svg class="h-3 w-3 text-blue-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
        }

        if (type.includes("excel") || type.includes("sheet")) {
          return `<svg class="h-3 w-3 text-green-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
        }

        if (type.includes("powerpoint") || type.includes("presentation")) {
          return `<svg class="h-3 w-3 text-orange-600" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
        }

        if (type.includes("zip") || type.includes("rar") || type.includes("archive")) {
          return `<svg class="h-3 w-3 text-purple-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
          <path d="M9 12h6v2H9zm0 4h6v2H9z"/>
        </svg>`;
        }

        if (
          type.includes("video") ||
          type.includes("mp4") ||
          type.includes("avi") ||
          type.includes("mov")
        ) {
          return `<svg class="h-3 w-3 text-pink-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM8 15V9l5 3-5 3z"/>
        </svg>`;
        }

        if (type.includes("audio") || type.includes("mp3") || type.includes("wav")) {
          return `<svg class="h-3 w-3 text-indigo-500" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z"/>
        </svg>`;
        }

        // Default file icon
        return `<svg class="h-3 w-3 text-gray-500" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6zm-1 1v5h5v10H6V3h7z"/>
      </svg>`;
      }

      // Render file icons with tooltips
      function renderFileIcons() {
        // Find all project file containers
        const containers = document.querySelectorAll('[id^="project-files-"]');

        containers.forEach((container) => {
          const projectFilesData = container.getAttribute("data-project-files");
          if (!projectFilesData) {
            return;
          }

          const projectFiles = JSON.parse(projectFilesData);

          if (!projectFiles || projectFiles.length === 0) {
            return;
          }

          // Clear existing content
          container.innerHTML = "";

          // Create file icons with tooltips
          projectFiles.forEach((file: any) => {
            const fileIconContainer = document.createElement("div");
            fileIconContainer.className = "relative group";
            fileIconContainer.innerHTML = `
            <div class="cursor-pointer">
              ${getFileIcon(file.fileType)}
            </div>
            <!-- CSS Tooltip -->
            <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50">
              ${file.title || file.fileName}
              <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
            </div>
          `;

            container.appendChild(fileIconContainer);
          });
        });
      }
    </script>
  </td>
</tr>
