---
import SectionContainer from "./SectionContainer.astro";
// Import global services and types
import {
  PROJECT_STATUS_LABELS,
  formatTimeSinceUpdate,
  showNotification,
  useGlobalEvents,
  type ProjectStatusCode,
} from "../lib/global-services";
---

<!-- Projects Display Section -->
<div class="mt-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow">
  <div class="flex justify-between items-center mb-4">
    <h3 class="text-lg font-semibold">My Projects</h3>
    <button
      id="refresh-staff-btn"
      type="button"
      class="px-3 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
      title="Refresh staff list for assignments"
    >
      <i class="bx bx-refresh mr-1"></i>
      Refresh Staff
    </button>
  </div>

  <!-- Text Filter Input -->
  <div class="mb-4">
    <input
      type="text"
      id="project-search-input"
      placeholder="Filter projects..."
      class="w-full px-4 py-2 text-sm border border-gray-300 rounded-lg bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
    />
  </div>

  <!-- Projects List Container -->
  <div id="projects-list" class="mt-4">
    <!-- Projects will be populated here dynamically -->
  </div>
</div>

<script>
  // Import necessary functions and types
  import {
    PROJECT_STATUS_LABELS,
    formatTimeSinceUpdate,
    showNotification,
    type ProjectStatusCode,
  } from "../lib/global-services";

  // Projects List Management Class
  class ProjectsList {
    private currentProjectId: string | null = null;
    private currentProjectStatus: number | null = null;
    private staffUsers: any[] = [];

    constructor() {
      this.setupFormHandlers();
      this.setupAssignmentHandlers();
      this.setupRefreshButton();
      this.loadStaffUsers();
      this.exposeGlobalMethods();
      // Automatically load projects when component initializes
      this.loadProjects();
    }

    // Function to automatically load projects
    async loadProjects() {
      try {
        const response = await fetch("/api/get-user-projects");
        const result = await response.json();

        if (result.success && result.projects) {
          this.displayUserProjects(result.projects);

          showNotification({
            type: "success",
            title: "Projects Loaded",
            message: `Found ${result.projects.length} project(s)`,
            duration: 3000,
          });

          console.log(`Loaded ${result.projects.length} projects`);
        } else {
          console.error("Failed to load projects:", result.error);
          showNotification({
            type: "error",
            title: "Failed to Load Projects",
            message: result.error || "Could not fetch your projects",
            duration: 5000,
          });
        }
      } catch (error) {
        console.error("Error loading projects:", error);
        showNotification({
          type: "error",
          title: "Failed to Load Projects",
          message: "Could not connect to server",
          duration: 5000,
        });
      }
    }

    // Function to load staff users from API
    async loadStaffUsers() {
      try {
        const response = await fetch("/api/get-staff-users");
        const result = await response.json();

        if (result.success) {
          this.staffUsers = result.staffUsers || [];
          console.log(`Loaded ${this.staffUsers.length} staff users`);
        } else {
          console.error("Failed to load staff users:", result.error);
          this.staffUsers = [];
        }
      } catch (error) {
        console.error("Error loading staff users:", error);
        this.staffUsers = [];
      }
    }

    // Function to setup refresh button event listener
    private setupRefreshButton() {
      // Use event delegation since the button might not exist yet
      document.addEventListener("click", async (e) => {
        const target = e.target as HTMLElement;
        if (
          target.id === "refresh-staff-btn" ||
          target.closest("#refresh-staff-btn")
        ) {
          e.preventDefault();
          await this.refreshStaffUsers();
        }
      });
    }

    // Function to refresh staff users and update all dropdowns
    async refreshStaffUsers() {
      console.log("Refreshing staff users...");
      await this.loadStaffUsers();

      // Re-populate all staff assignment dropdowns with updated data
      const staffSelects = document.querySelectorAll(
        ".staff-assignment-select"
      );
      staffSelects.forEach((select) => {
        const selectElement = select as HTMLSelectElement;
        const projectId = selectElement.dataset.projectId;
        const currentValue = selectElement.value;

        // Clear and repopulate options
        selectElement.innerHTML = '<option value="">Unassigned</option>';

        this.staffUsers.forEach((staff) => {
          const option = document.createElement("option");
          option.value = staff.id;
          option.textContent = staff.name;

          // Restore previous selection if it still exists
          if (staff.id === currentValue) {
            option.selected = true;
          }

          selectElement.appendChild(option);
        });
      });

      showNotification({
        type: "success",
        title: "Staff List Updated",
        message: `Refreshed staff list - found ${this.staffUsers.length} staff members`,
        duration: 3000,
      });
    }

    // Function to populate staff assignment dropdowns
    private populateStaffAssignments(projects: any[]) {
      projects.forEach((project) => {
        const selectElement = document.getElementById(
          `staff-assignment-${project.id}`
        ) as HTMLSelectElement;
        if (!selectElement) return;

        // Clear existing options except "Unassigned"
        selectElement.innerHTML = '<option value="">Unassigned</option>';

        // Add staff users as options
        this.staffUsers.forEach((staff) => {
          const option = document.createElement("option");
          option.value = staff.id;
          option.textContent = staff.name;

          // Select current assignment if it matches
          if (project.assigned_to_id === staff.id) {
            option.selected = true;
          }

          selectElement.appendChild(option);
        });
      });
    }

    // Function to handle staff assignment changes
    private setupAssignmentHandlers() {
      document.addEventListener("change", async (e) => {
        const target = e.target as HTMLSelectElement;
        if (!target.classList.contains("staff-assignment-select")) return;

        const projectId = target.dataset.projectId;
        const assignedToId = target.value || null;

        if (!projectId) return;

        try {
          const response = await fetch("/api/assign-project", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              projectId,
              assignedToId,
            }),
          });

          const result = await response.json();

          if (result.success) {
            const assignedName = assignedToId
              ? this.staffUsers.find((s) => s.id === assignedToId)?.name ||
                "Unknown"
              : "Unassigned";

            showNotification({
              type: "success",
              title: "Assignment Updated",
              message: `Project ${projectId} assigned to ${assignedName}`,
              duration: 3000,
            });

            console.log("Assignment updated:", result);
          } else {
            showNotification({
              type: "error",
              title: "Assignment Failed",
              message: result.error || "Could not update assignment",
              duration: 5000,
            });

            // Reset dropdown to previous value on error
            target.selectedIndex = 0;
          }
        } catch (error) {
          console.error("Error updating assignment:", error);
          showNotification({
            type: "error",
            title: "Assignment Error",
            message: "Could not connect to server",
            duration: 5000,
          });

          // Reset dropdown to previous value on error
          target.selectedIndex = 0;
        }
      });
    }

    // Function to display user projects in the projects list
    displayUserProjects(projects: any[]) {
      const projectsList = document.getElementById("projects-list");
      if (!projectsList) return;

      // Preserve the search input if it exists
      const existingSearchInput = projectsList.querySelector(
        "#project-search-input"
      );
      const searchInputHTML = existingSearchInput
        ? existingSearchInput.outerHTML
        : "";

      if (projects.length === 0) {
        projectsList.innerHTML = `
          ${searchInputHTML}
          <div class="p-4 text-center text-gray-500 dark:text-gray-400">
            <p>No projects found</p>
            <p class="text-sm mt-1">Create a test project to see it listed here</p>
          </div>
        `;
        return;
      }

      // Sort projects by update time (most recent first)
      const sortedProjects = [...projects].sort((a, b) => {
        const timeA = new Date(a.updated_at || a.created).getTime();
        const timeB = new Date(b.updated_at || b.created).getTime();
        return timeB - timeA; // Descending order (newest first)
      });

      // Generate accordion HTML for projects
      const accordionId = "projects-accordion";
      projectsList.innerHTML = `
        ${searchInputHTML}
        <div id="${accordionId}" data-accordion="collapse">
          ${sortedProjects
            .map((project, index) => {
              // Calculate time since last update
              const timeSinceUpdate = formatTimeSinceUpdate(
                project.updated_at || project.created
              );

              const isFirst = index === 0;
              const isLast = index === sortedProjects.length - 1;
              const projectTitle =
                project.address || project.title || `Project ${project.id}`;
              const projectDescription =
                project.description || "Project created from PDF upload";

              return `
                <!-- Accordion Item ${index} -->
                <div data-project-status="${project.status || 10}">
                  <!-- Accordion Header -->
                  <div id="accordion-collapse-heading-${index}" class="accordion-header">
                    <button
                      class="relative flex items-center justify-between w-full p-5 font-medium rtl:text-right text-gray-500 border ${isLast ? "" : "border-b-0"} ${isFirst ? "rounded-t-xl" : ""} border-gray-200 focus:ring-1 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 gap-3"
                      data-accordion-target="#accordion-collapse-body-${index}"
                      aria-expanded="false"
                      aria-controls="accordion-collapse-body-${index}"
                      type="button"
                    >
                      <!-- Project Icon -->
                      <div class="rounded-lg border size-9 flex items-center justify-center border-gray-600 dark:border-gray-500 dark:bg-gray-800 overflow-hidden text-white dark:text-gray-300 bg-gray-700">
                        <i class="bx bx-file-blank"></i>
                      </div>

                      <!-- Project Info -->
                      <div class="pl-4 flex flex-col justify-start flex-1 text-left">
                        <h2 class="font-medium text-base text-gray-800 dark:text-gray-200" data-search-text>
                          ${projectTitle}
                        </h2>
                    

                       
                        <div class="flex items-center gap-2 mt-1">
                             

                          <!-- Status badge -->
                          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-cyan-600 text-white"  data-search-text>
                            ${PROJECT_STATUS_LABELS[(project.status || 10) as unknown as ProjectStatusCode] || "Unknown"}
                          </span>
                          <!-- Email/contact if available -->
                          ${
                            project.author_email &&
                            project.author_email !== "Unknown" &&
                            project.author_email !== "Unassigned"
                              ? `<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-600 text-white"  data-search-text>
                            ${project.author_email}
                          </span>`
                              : project.author_email === "Unassigned"
                                ? `<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-500 text-white">
                            Unassigned
                          </span>`
                                : ""
                          }
                                <i class="bx bx-time"></i>${timeSinceUpdate}

                        </div>
                      </div>

                      <!-- Accordion Arrow -->
                      <svg
                        data-accordion-icon
                        class="w-3 h-3 rotate-180 shrink-0"
                        aria-hidden="true"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 10 6"
                      >
                        <path
                          stroke="currentColor"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5 5 1 1 5"></path>
                      </svg>
                    </button>
                  </div>

                  <!-- Accordion Body -->
                  <div
                    id="accordion-collapse-body-${index}"
                    class="hidden"
                    aria-labelledby="accordion-collapse-heading-${index}"
                  >
                                      <div class="p-5 border ${isLast ? "rounded-b-xl border-t-0" : "border-b-0"} border-gray-200 dark:border-gray-700 dark:bg-gray-900">
                      <!-- Project Edit Form -->
                      <form class="space-y-4" data-project-id="${project.id}">
                        <div class="project-form-container" data-project-index="${index}"></div>

                        <!-- Project Status -->
                        <div class="relative">
                          <label for="status-${index}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Project Status</label>
                          <select
                            id="status-${index}"
                            name="status"
                            class="w-full py-2 px-3 text-sm border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400"
                          >
                            ${Object.entries(PROJECT_STATUS_LABELS)
                              .map(
                                ([statusCode, statusLabel]) =>
                                  `<option value="${statusCode}" ${project.status == statusCode ? "selected" : ""}>${statusLabel}</option>`
                              )
                              .join("")}
                          </select>
                        </div>

                        <!-- Project Metadata (readonly) -->
                        <div class="grid grid-cols-2 gap-4 pt-2 border-t border-gray-200 dark:border-gray-600">
                          <div>
                            <span class="text-xs text-gray-500 dark:text-gray-400">Project ID:</span>
                            <div class="text-sm text-gray-800 dark:text-gray-200">${project.id}</div>
                          </div>
                          <div>
                            <span class="text-xs text-gray-500 dark:text-gray-400">Last Updated:</span>
                            <div class="text-sm text-gray-800 dark:text-gray-200">${timeSinceUpdate}</div>
                          </div>
                          <div>
                            <span class="text-xs text-gray-500 dark:text-gray-400">Assigned to:</span>
                            <select
                              id="staff-assignment-${project.id}"
                              data-project-id="${project.id}"
                              class="text-sm bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded px-2 py-1 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 staff-assignment-select"
                            >
                              <option value="">Unassigned</option>
                              <!-- Staff options will be populated dynamically -->
                            </select>
                          </div>
                          <div>
                            <span class="text-xs text-gray-500 dark:text-gray-400">Created:</span>
                            <div class="text-sm text-gray-800 dark:text-gray-200">${new Date(project.created || project.created_at).toLocaleDateString()}</div>
                          </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex flex-wrap gap-2 pt-4 border-t border-gray-200 dark:border-gray-600">
                          <button 
                            type="submit"
                            class="px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-lg hover:bg-green-700 transition-colors"
                          >
                            <i class="bx bx-save mr-1"></i>
                            Save Changes
                          </button>
                         
                          <button 
                            type="button"
                            class="px-4 py-2 bg-gray-600 text-white text-sm font-medium rounded-lg hover:bg-gray-700 transition-colors"
                            onclick="window.projectsList.resetProjectForm('${project.id}')"
                          >
                            <i class="bx bx-refresh mr-1"></i>
                            Reset
                          </button>
                          
                          <button 
                            type="button"
                            class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors pdf-generate-btn"
                            data-project-id="${project.id}"
                            data-template-type="project-agreement"
                            data-project-data='${JSON.stringify({
                              title: project.title || project.address,
                              address: project.address,
                              owner: project.owner,
                              architect: project.architect,
                              description: project.description,
                              sq_ft: project.sq_ft,
                              status:
                                PROJECT_STATUS_LABELS[
                                  (project.status ||
                                    10) as unknown as ProjectStatusCode
                                ] || "Unknown",
                            }).replace(/'/g, "&#39;")}'
                          >
                            <i class="bx bx-file-pdf mr-1"></i>
                            Generate PDF
                          </button>

                          <button 
                            type="button"
                            class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors pdf-generate-btn"
                            data-project-id="${project.id}"
                            data-template-type="affidavit"
                            data-project-data='${JSON.stringify({
                              title: project.title || project.address,
                              address: project.address,
                              owner: project.owner,
                              architect: project.architect,
                              description: project.description,
                              sq_ft: project.sq_ft,
                              status:
                                PROJECT_STATUS_LABELS[
                                  (project.status ||
                                    10) as unknown as ProjectStatusCode
                                ] || "Unknown",
                            }).replace(/'/g, "&#39;")}'
                          >
                            <i class="bx bx-file-pdf mr-1"></i>
                            Generate Affidavit
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              `;
            })
            .join("")}
        </div>
      `;

      // Initialize accordion functionality
      setTimeout(() => {
        this.initializeAccordion(accordionId);
        this.populateFormContainers(sortedProjects);
        this.populateStaffAssignments(sortedProjects);

        // Initialize button groups AFTER form containers are populated
        console.log("Initializing button groups after form population");
        this.initializeButtonGroups(accordionId);
      }, 100);

      // Show the project filter after projects are loaded
      if ((window as any).projectFilter) {
        (window as any).projectFilter.show();
        (window as any).projectFilter.updateCountBubbles();
        (window as any).projectFilter.updateProjectCount();
      }

      // Initialize text filter functionality
      this.initializeTextFilter(accordionId);

      // Re-initialize search filter in ProjectsNav if it exists
      if ((window as any).projectSearchFilter) {
        // Add a small delay to ensure DOM is updated
        setTimeout(() => {
          (window as any).projectSearchFilter.setupEventListeners();
        }, 200);
      }
    }

    // Function to initialize accordion functionality
    private initializeAccordion(accordionId: string) {
      const accordionElement = document.getElementById(accordionId);
      if (!accordionElement) return;

      // Find all accordion buttons
      const buttons = accordionElement.querySelectorAll(
        "[data-accordion-target]"
      );

      buttons.forEach((button) => {
        button.addEventListener("click", function (this: HTMLElement) {
          const targetId = this.getAttribute("data-accordion-target");
          const targetElement = document.querySelector(targetId as string);
          const icon = this.querySelector("[data-accordion-icon]");

          if (!targetElement) return;

          // Check if this accordion is currently open
          const isOpen = !targetElement.classList.contains("hidden");

          if (isOpen) {
            // Close this accordion
            targetElement.classList.add("hidden");
            this.setAttribute("aria-expanded", "false");
            // Remove sticky class from header
            const header = this.closest(".accordion-header");
            if (header) {
              header.classList.remove(
                "sticky",
                "top-16",
                "z-20",
                "bg-white",
                "dark:bg-gray-800"
              );
            }
            if (icon) {
              icon.classList.add("rotate-180");
            }
          } else {
            // Close all other accordions first (optional - remove if you want multiple open)
            buttons.forEach((otherButton) => {
              if (otherButton !== this) {
                const otherTargetId = otherButton.getAttribute(
                  "data-accordion-target"
                );
                const otherTarget = document.querySelector(
                  otherTargetId as string
                );
                const otherIcon = otherButton.querySelector(
                  "[data-accordion-icon]"
                );

                if (otherTarget && !otherTarget.classList.contains("hidden")) {
                  otherTarget.classList.add("hidden");
                  (otherButton as HTMLElement).setAttribute(
                    "aria-expanded",
                    "false"
                  );
                  // Remove sticky class from other headers
                  const otherHeader = otherButton.closest(".accordion-header");
                  if (otherHeader) {
                    otherHeader.classList.remove(
                      "sticky",
                      "top-16",
                      "z-20",
                      "bg-white",
                      "dark:bg-gray-800"
                    );
                  }
                  if (otherIcon) {
                    otherIcon.classList.add("rotate-180");
                  }
                }
              }
            });

            // Open this accordion
            targetElement.classList.remove("hidden");
            this.setAttribute("aria-expanded", "true");
            // Add sticky class to header when opened
            const header = this.closest(".accordion-header");
            if (header) {
              header.classList.add(
                "sticky",
                "top-16",
                "z-20",
                "bg-white",
                "dark:bg-gray-800"
              );
            }
            if (icon) {
              icon.classList.remove("rotate-180");
            }
          }
        });
      });

      console.log(`Initialized accordion with ${buttons.length} items`);
    }

    // Function to initialize text filter functionality
    private initializeTextFilter(accordionId: string) {
      const searchInput = document.getElementById(
        "project-search-input"
      ) as HTMLInputElement;
      const accordionElement = document.getElementById(accordionId);

      if (!searchInput || !accordionElement) return;

      let debounceTimer: ReturnType<typeof setTimeout>;

      searchInput.addEventListener("input", (e) => {
        clearTimeout(debounceTimer);

        debounceTimer = setTimeout(() => {
          const searchTerm = (e.target as HTMLInputElement).value
            .trim()
            .toLowerCase();

          // Filter immediately on any input
          this.filterAccordionItems(accordionId, searchTerm);
        }, 300); // Small debounce delay for better performance
      });

      console.log("Initialized text filter for accordion");
    }

    // Function to filter accordion items based on search term
    private filterAccordionItems(accordionId: string, searchTerm: string) {
      const accordionElement = document.getElementById(accordionId);
      if (!accordionElement) return;

      const accordionItems = accordionElement.querySelectorAll(
        "[data-project-status]"
      );
      let visibleCount = 0;

      accordionItems.forEach((item) => {
        const htmlItem = item as HTMLElement;

        if (searchTerm === "") {
          // Show all items when search is empty
          htmlItem.style.display = "block";
          visibleCount++;
        } else {
          // Get all text content from the accordion item with data-search-text attribute
          const textElements = htmlItem.querySelectorAll("[data-search-text]");
          let textContent = "";
          textElements.forEach((el) => {
            textContent += " " + (el.textContent || "").toLowerCase();
          });

          // Check if the search term is found in the text content
          if (textContent.includes(searchTerm)) {
            htmlItem.style.display = "block";
            visibleCount++;
          } else {
            htmlItem.style.display = "none";
          }
        }
      });

      // Update the search input placeholder with results count
      const searchInput = document.getElementById(
        "project-search-input"
      ) as HTMLInputElement;
      if (searchInput && searchTerm !== "") {
        searchInput.placeholder = `Showing ${visibleCount} of ${accordionItems.length} projects`;
      } else if (searchInput) {
        searchInput.placeholder = "Filter projects...";
      }

      console.log(
        `Text filter applied: "${searchTerm}" - ${visibleCount}/${accordionItems.length} items visible`
      );
    }

    // Function to load a project from the list
    loadProject(projectId: string, status: number) {
      this.currentProjectId = projectId;
      this.currentProjectStatus = status;

      // Call updateProjectButtons if it exists globally
      if ((window as any).updateProjectButtons) {
        (window as any).updateProjectButtons();
      }

      showNotification({
        type: "info",
        title: "Project Loaded",
        message: `Project ${projectId} is now active`,
        duration: 3000,
      });

      // Log event if available
      if ((window as any).logEvent) {
        (window as any).logEvent("project:loaded", { projectId, status });
      }
    }

    // Function to view project details (placeholder for future implementation)
    viewProjectDetails(projectId: string) {
      showNotification({
        type: "info",
        title: "Project Details",
        message: `Viewing details for project ${projectId}`,
        duration: 3000,
      });

      // Log event if available
      if ((window as any).logEvent) {
        (window as any).logEvent("project:details-viewed", { projectId });
      }
    }

    // Function to reset project form to original values
    resetProjectForm(projectId: string) {
      const form = document.querySelector(
        `form[data-project-id="${projectId}"]`
      ) as HTMLFormElement;
      if (!form) return;

      // Find the original project data and repopulate
      showNotification({
        type: "info",
        title: "Form Reset",
        message: `Form reset to original values for project ${projectId}`,
        duration: 2000,
      });

      // Log event if available
      if ((window as any).logEvent) {
        (window as any).logEvent("project:form-reset", { projectId });
      }
    }

    // Function to populate form containers with generated HTML
    private populateFormContainers(projects: any[]) {
      projects.forEach((project, index) => {
        const container = document.querySelector(
          `[data-project-index="${index}"]`
        ) as HTMLElement;
        if (container && (window as any).generateCompleteFormHTML) {
          container.innerHTML = (window as any).generateCompleteFormHTML(
            index,
            project
          );
        }
      });
    }

    // Function to handle form submission
    private setupFormHandlers() {
      // Use event delegation for dynamically created forms
      document.addEventListener("submit", async (e) => {
        const form = e.target as HTMLFormElement;
        if (!form.matches("form[data-project-id]")) return;

        e.preventDefault();
        const projectId = form.dataset.projectId;

        try {
          // Collect form data
          const formData = new FormData(form);
          const projectData: any = {};

          for (const [key, value] of formData.entries()) {
            if (key === "new_construction") {
              projectData[key] = true; // Checkbox is checked
            } else if (key === "sq_ft" || key === "units" || key === "status") {
              projectData[key] = parseInt(value as string) || 0;
            } else {
              projectData[key] = value;
            }
          }

          // Handle unchecked checkbox
          if (!formData.has("new_construction")) {
            projectData.new_construction = false;
          }

          // Convert units slider to actual value
          const unitsSlider = form.querySelector(
            `input[name="units"]`
          ) as HTMLInputElement;
          if (unitsSlider) {
            const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
            const sliderIndex = parseInt(unitsSlider.value);
            projectData.units = values[sliderIndex] || 1;
          }

          // Collect button group data
          const buttonGroups = [
            "building",
            "project",
            "service",
            "requested_docs",
          ];

          buttonGroups.forEach((groupName) => {
            const groupButtons = form.querySelectorAll(
              `[data-group="${groupName}"]`
            );
            const groupType =
              groupButtons.length > 0
                ? (groupButtons[0] as HTMLElement).dataset.type
                : null;

            if (groupType === "radio") {
              // Single select - find the selected button
              const selectedButton = Array.from(groupButtons).find((btn) =>
                btn.classList.contains("bg-blue-500")
              );
              if (selectedButton) {
                projectData[groupName] = (
                  selectedButton as HTMLElement
                ).dataset.value;
              }
            } else if (groupType === "multi-select") {
              // Multi-select - collect all selected buttons
              const selectedButtons = Array.from(groupButtons).filter((btn) =>
                btn.classList.contains("bg-blue-500")
              );
              if (selectedButtons.length > 0) {
                projectData[groupName] = selectedButtons.map(
                  (btn) => (btn as HTMLElement).dataset.value
                );
              }
            }
          });

          console.log("Saving project data:", projectData);

          // Make API call to update project
          const requestPayload = {
            projectId,
            ...projectData,
          };
          console.log("Sending to API:", requestPayload);

          const response = await fetch("/api/update-project-status", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestPayload),
          });

          if (!response.ok) {
            const errorText = await response.text();
            console.error("API Error Response:", errorText);
            try {
              const errorJson = JSON.parse(errorText);
              throw new Error(
                `API Error: ${errorJson.error || "Unknown error"}`
              );
            } catch {
              throw new Error(
                `HTTP error! status: ${response.status} - ${errorText}`
              );
            }
          }

          const result = await response.json();
          console.log("API Response:", result);

          showNotification({
            type: "success",
            title: "Project Updated",
            message: `Project ${projectId} has been successfully updated`,
            duration: 3000,
          });

          // Log event if available
          if ((window as any).logEvent) {
            (window as any).logEvent("project:updated", {
              projectId,
              changes: projectData,
            });
          }

          // Refresh project list to show updated data
          setTimeout(() => {
            document.getElementById("get-projects")?.click();
          }, 1000);
        } catch (error: unknown) {
          console.error("Error updating project:", error);
          showNotification({
            type: "error",
            title: "Update Failed",
            message: (error as Error)?.message || "Could not update project",
            duration: 0,
          });
        }
      });

      // Handle units slider changes
      document.addEventListener("input", (e) => {
        const slider = e.target as HTMLInputElement;
        if (!slider.matches('input[name="units"]')) return;

        const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 30, 40, 50];
        const sliderIndex = parseInt(slider.value);
        const actualValue = values[sliderIndex] || 1;

        const projectIndex = slider.dataset.projectIndex;
        const valueDisplay = document.getElementById(
          `units-value-${projectIndex}`
        );
        if (valueDisplay) {
          valueDisplay.textContent = actualValue.toString();
        }
      });
    }

    // Function to initialize button group functionality
    private initializeButtonGroups(accordionId: string) {
      const accordionElement = document.getElementById(accordionId);
      if (!accordionElement) {
        console.error("Accordion element not found:", accordionId);
        return;
      }

      // Check how many buttons we found
      const allButtons = accordionElement.querySelectorAll(
        ".building-type-radio, .consulting-service-btn, .fire-service-radio, .fire-safety-service-btn"
      );
      console.log(`Found ${allButtons.length} form buttons in accordion`);

      // Handle button group clicks
      accordionElement.addEventListener("click", (e) => {
        const button = (e.target as HTMLElement).closest(
          ".building-type-radio, .consulting-service-btn, .fire-service-radio, .fire-safety-service-btn"
        );
        if (!button) return;

        e.preventDefault();

        const value = (button as HTMLElement).dataset.value;
        const group = (button as HTMLElement).dataset.group;
        const type = (button as HTMLElement).dataset.type;

        if (!value || !group || !type) return;

        if (type === "radio") {
          // Single select - clear all other buttons in this group
          const groupButtons = accordionElement.querySelectorAll(
            `[data-group="${group}"]`
          );
          groupButtons.forEach((btn) => {
            btn.classList.remove(
              "bg-blue-500",
              "text-white",
              "border-blue-500"
            );
            btn.classList.add(
              "bg-white",
              "dark:bg-gray-700",
              "text-gray-700",
              "dark:text-gray-300",
              "border-gray-300",
              "dark:border-gray-600"
            );
          });

          // Set this button as selected
          button.classList.add("bg-blue-500", "text-white", "border-blue-500");
          button.classList.remove(
            "bg-white",
            "dark:bg-gray-700",
            "text-gray-700",
            "dark:text-gray-300",
            "border-gray-300",
            "dark:border-gray-600"
          );

          // Store the value for form submission
          (button as any)._selectedValue = value;
        } else if (type === "multi-select") {
          // Multi-select - toggle this button's selection
          if (button.classList.contains("bg-blue-500")) {
            // Deselect
            button.classList.remove(
              "bg-blue-500",
              "text-white",
              "border-blue-500"
            );
            button.classList.add(
              "bg-white",
              "dark:bg-gray-700",
              "text-gray-700",
              "dark:text-gray-300",
              "border-gray-300",
              "dark:border-gray-600"
            );
          } else {
            // Select
            button.classList.add(
              "bg-blue-500",
              "text-white",
              "border-blue-500"
            );
            button.classList.remove(
              "bg-white",
              "dark:bg-gray-700",
              "text-gray-700",
              "dark:text-gray-300",
              "border-gray-300",
              "dark:border-gray-600"
            );
          }
        }

        console.log(`Button ${type} selection changed:`, {
          group,
          value,
          selected: button.classList.contains("bg-blue-500"),
        });
      });
    }

    // Expose methods globally for external access
    private exposeGlobalMethods() {
      // Create global instance
      (window as any).projectsList = this;

      // Expose individual methods for backward compatibility
      (window as any).displayUserProjects = this.displayUserProjects.bind(this);
      (window as any).loadProject = this.loadProject.bind(this);
      (window as any).viewProjectDetails = this.viewProjectDetails.bind(this);
      (window as any).resetProjectForm = this.resetProjectForm.bind(this);
      (window as any).refreshStaffUsers = this.refreshStaffUsers.bind(this);
    }
  }

  // Initialize the projects list when DOM is loaded (single instance)
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new ProjectsList();
    });
  } else {
    new ProjectsList();
  }
</script>
