---
// Reusable Accordion component following Flowbite design
export const partial = true;

// Detect if this is being used as a partial
const isPartial = Astro.request.headers.has("x-accordion-id");

let id, title, description, content, open, className, headerClass, contentClass;

if (isPartial) {
  // Extract props from headers when used as partial
  id = Astro.request.headers.get("x-accordion-id") || "";
  title = Astro.request.headers.get("x-accordion-title") || "";
  description = Astro.request.headers.get("x-accordion-description") || "";
  content = Astro.request.headers.get("x-accordion-content") || "";
  open = Astro.request.headers.get("x-accordion-open") === "true";
  className = Astro.request.headers.get("x-accordion-class") || "";
  headerClass = Astro.request.headers.get("x-accordion-header-class") || "";
  contentClass = Astro.request.headers.get("x-accordion-content-class") || "";
} else {
  // Use regular props when used as a component
  const props = Astro.props;
  id = props.id;
  title = props.title;
  description = props.description;
  content = props.content;
  open = props.open || false;
  className = props.class || "";
  headerClass = props.headerClass || "";
  contentClass = props.contentClass || "";
}
---

<div
  class={`bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg ${className}`}
>
  <!-- Accordion Header -->
  <div class={`flex items-center justify-between ${headerClass}`}>
    <!-- Clickable header area -->
    <div
      class="flex-1 cursor-pointer rounded-lg p-4 transition-colors hover:bg-gray-50 dark:hover:bg-gray-700"
      data-accordion-target={`#accordion-${id}`}
      aria-expanded={open}
      aria-controls={`accordion-${id}`}
      role="button"
      tabindex="0"
      onkeydown="if(event.key==='Enter'||event.key===' '){event.preventDefault();this.click();}"
    >
      <h3 class="text-lg font-medium text-gray-900 dark:text-white">
        {title}
      </h3>
      {description && <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">{description}</p>}
    </div>

    <!-- Accordion Toggle Button -->
    <!-- <button
      class="text-gray-400 transition-colors hover:text-gray-600 dark:hover:text-gray-300"
      data-accordion-target={`#accordion-${id}`}
      aria-expanded={open}
      aria-controls={`accordion-${id}`}
      type="button"
      popover-target={`#accordion-${id}-popover`}
    >
      <svg
        class={`w-3 h-3 transition-transform duration-200 ${open ? "rotate-180" : ""}`}
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"
        ></path>
      </svg>
    </button>
    <div id={`accordion-${id}-popover`} class="hidden">
      <div class="p-4">
        <div set:html={"Open for editing"} />
      </div>
    </div> -->
  </div>

  <!-- Accordion Content -->
  <div
    id={`accordion-${id}`}
    class={`${open ? "" : "hidden"} ${contentClass}`}
    aria-labelledby={`accordion-${id}`}
  >
    <div class="border-t border-gray-200 px-4 pb-4 dark:border-gray-700">
      <div class="pt-4">
        <div set:html={content} />
      </div>
    </div>
  </div>

  <script>
    // Accordion functionality
    document.addEventListener("DOMContentLoaded", function () {
      const accordionButtons = document.querySelectorAll("[data-accordion-target]");

      accordionButtons.forEach((button) => {
        button.addEventListener("click", function (this: HTMLElement) {
          const targetId = this.getAttribute("data-accordion-target");
          const target = document.querySelector(targetId as string);
          const isExpanded = this.getAttribute("aria-expanded") === "true";

          if (target) {
            // Toggle visibility
            if (isExpanded) {
              target.classList.add("hidden");
              this.setAttribute("aria-expanded", "false");
            } else {
              target.classList.remove("hidden");
              this.setAttribute("aria-expanded", "true");
            }

            // Update both the main header and the toggle button
            const arrow = this.querySelector("svg");
            if (arrow) {
              arrow.classList.toggle("rotate-180");
            }

            // Also update the toggle button if it exists and is different from this element
            const toggleButton = document.querySelector(
              `button[data-accordion-target="${targetId}"]`
            );
            if (toggleButton && toggleButton !== this) {
              const toggleArrow = toggleButton.querySelector("svg");
              if (toggleArrow) {
                toggleArrow.classList.toggle("rotate-180");
              }
              toggleButton.setAttribute("aria-expanded", String(!isExpanded));
            }
          }
        });
      });
    });
  </script>
</div>
