---
// Shared discussion partial that works for both global and project discussions
export const partial = true;

interface Props {
  project?: any; // Optional project object - if null, it's a global discussion
  currentUser?: any;
  authorProfile?: any;
  globalInputClasses?: string;
  globalSecondaryTextClasses?: string;
  globalPrimaryTextClasses?: string;
}

const {
  project = null,
  currentUser,
  authorProfile,
  globalInputClasses,
  globalSecondaryTextClasses,
  globalPrimaryTextClasses,
} = Astro.props;

const currentRole = currentUser?.profile?.role;
const projectId = project?.id || null;
const isGlobalDiscussion = !project;

const placeholder =
  currentRole === "Admin" || currentRole === "Staff"
    ? "Write your comment here... (Use @username to mention users)"
    : "Write your comment here...";
---

<div id="content-discussion" class="tab-content" data-project-id={projectId}>
  <div class="mb-6 flex items-center justify-between">
    <h3 class="text-lg font-medium text-gray-900 dark:text-white">
      {isGlobalDiscussion ? "Global Discussion" : "Project Discussion"}
    </h3>

    <button
      id="new-comment-btn"
      class="inline-flex items-center gap-2 rounded-lg bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50"
    >
      <i class="bx bx-plus text-lg"></i>
      New Comment
    </button>
  </div>

  <!-- Discussion Form -->
  <div
    id="discussion-form"
    class="mb-6 hidden rounded-lg border border-gray-200 bg-gray-100 p-6 dark:border-gray-700 dark:bg-gray-800"
  >
    <div class="mb-4">
      <label
        for="discussion-message"
        class="mb-2 block text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        Your Comment
      </label>
      <textarea
        id="discussion-message"
        rows="4"
        class={`w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white ${globalInputClasses || ""}`}
        placeholder={placeholder}></textarea>
    </div>

    <!-- Internal/Public Toggle (Admin/Staff only) -->
    {
      currentRole === "Admin" || currentRole === "Staff" ? (
        <div class="mb-4 flex items-center gap-4">
          <label class="flex items-center gap-2">
            <input
              type="checkbox"
              id="internal-discussion"
              class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span class="text-sm text-gray-700 dark:text-gray-300">Internal Discussion</span>
          </label>
          <label class="flex items-center gap-2">
            <input
              type="checkbox"
              id="sms-alert"
              class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span class="text-sm text-gray-700 dark:text-gray-300">SMS Alert</span>
          </label>
        </div>
      ) : null
    }

    <!-- Action Buttons -->
    <div class="flex gap-3">
      <button
        id="submit-discussion"
        class="inline-flex items-center gap-2 rounded-lg bg-primary-500 px-4 py-2 text-sm font-medium text-white hover:bg-primary-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 disabled:opacity-50"
      >
        <i class="bx bx-send text-lg"></i>
        Post Comment
      </button>
      <button
        id="cancel-discussion"
        class="inline-flex items-center gap-2 rounded-lg border border-gray-300 bg-gray-100 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
      >
        <i class="bx bx-x text-lg"></i>
        Cancel
      </button>
    </div>
  </div>

  <!-- Discussion List -->
  <div id="discussions-list" class="space-y-4">
    <!-- Discussions will be loaded here -->
  </div>

  <!-- Loading Spinner -->
  <div id="discussions-loading" class="hidden py-8 text-center">
    <div class="inline-flex items-center gap-2 text-gray-500">
      <div class="h-4 w-4 animate-spin rounded-full border-2 border-gray-300 border-t-primary-500">
      </div>
      Loading discussions...
    </div>
  </div>

  <!-- Empty State -->
  <div id="discussions-empty" class="hidden py-8 text-center">
    <div class="text-gray-500">
      <i class="bx bx-message-square-dots mb-2 text-4xl"></i>
      <p>No discussions yet.</p>
      <p class="text-sm">Be the first to start a conversation!</p>
    </div>
  </div>
</div>

<script define:vars={{ projectId, currentUser, isGlobalDiscussion }}>
  // Shared discussion functionality
  let discussions = [];
  let currentProjectId = projectId;
  let currentUserId = currentUser?.id;
  let isGlobal = isGlobalDiscussion;

  // Initialize discussion system
  document.addEventListener("DOMContentLoaded", function () {
    initializeDiscussionSystem();
  });

  function initializeDiscussionSystem() {
    console.log(
      `ðŸ’¬ [DISCUSSIONS] Initializing ${isGlobal ? "global" : "project"} discussion system`
    );

    // Load discussions
    loadDiscussions();

    // Setup form handlers
    setupDiscussionForm();

    // Setup event listeners
    setupEventListeners();
  }

  async function loadDiscussions() {
    try {
      showLoading(true);

      const params = new URLSearchParams();
      if (currentProjectId) {
        params.append("projectId", currentProjectId);
      }
      params.append("limit", "50");
      params.append("offset", "0");

      const response = await fetch(`/api/discussions?${params}`, {
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        discussions = data.discussions || [];
        renderDiscussions();
      } else {
        console.error("Failed to load discussions:", data.error);
        showError("Failed to load discussions");
      }
    } catch (error) {
      console.error("Error loading discussions:", error);
      showError("Failed to load discussions");
    } finally {
      showLoading(false);
    }
  }

  function renderDiscussions() {
    const container = document.getElementById("discussions-list");
    const emptyState = document.getElementById("discussions-empty");

    if (!container) return;

    if (discussions.length === 0) {
      container.innerHTML = "";
      if (emptyState) emptyState.classList.remove("hidden");
      return;
    }

    if (emptyState) emptyState.classList.add("hidden");

    // Group discussions by parent_id
    const topLevelDiscussions = discussions.filter((d) => !d.parent_id);
    const replies = discussions.filter((d) => d.parent_id);

    container.innerHTML = topLevelDiscussions
      .map((discussion) => {
        const discussionReplies = replies.filter((r) => r.parent_id === discussion.id);
        return renderDiscussionItem(discussion, discussionReplies);
      })
      .join("");
  }

  function renderDiscussionItem(discussion, replies = []) {
    const isInternal = discussion.internal;
    const isCompleted = discussion.mark_completed;
    const isReply = discussion.parent_id;
    const canEdit = currentUserId === discussion.author_id || currentRole === "Admin";
    const canMarkCompleted = currentRole === "Admin" || currentRole === "Staff";

    return `
      <div class="rounded-lg border border-gray-200 bg-gray-100 p-4 dark:border-gray-700 dark:bg-gray-800 ${isInternal ? "border-orange-200 bg-orange-50 dark:border-orange-800 dark:bg-orange-900/20" : ""} ${isCompleted ? "opacity-75" : ""}">
        <!-- Discussion Header -->
        <div class="mb-3 flex items-start justify-between">
          <div class="flex items-start gap-3">
            <div class="flex h-8 w-8 items-center justify-center rounded-full bg-primary-100 text-primary-600 dark:bg-primary-900 dark:text-primary-400">
              <i class="bx bx-user text-sm"></i>
            </div>
            <div>
              <div class="flex items-center gap-2">
                <span class="font-medium text-gray-900 dark:text-white">${discussion.author_name}</span>
                ${isInternal ? '<span class="rounded-full bg-orange-100 px-2 py-1 text-xs text-orange-800 dark:bg-orange-900 dark:text-orange-200">Internal</span>' : ""}
                ${isCompleted ? '<span class="rounded-full bg-green-100 px-2 py-1 text-xs text-green-800 dark:bg-green-900 dark:text-green-200">Completed</span>' : ""}
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">
                ${new Date(discussion.created_at).toLocaleString()}
                ${!isGlobal ? ` â€¢ ${discussion.project_address}` : ""}
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex items-center gap-2">
            ${
              canMarkCompleted && !isCompleted
                ? `
              <button onclick="markDiscussionCompleted(${discussion.id})" class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-200" title="Mark as completed">
                <i class="bx bx-check text-lg"></i>
              </button>
            `
                : ""
            }
            ${
              canEdit
                ? `
              <button onclick="editDiscussion(${discussion.id})" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200" title="Edit">
                <i class="bx bx-edit text-lg"></i>
              </button>
            `
                : ""
            }
            <button onclick="replyToDiscussion(${discussion.id})" class="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200" title="Reply">
              <i class="bx bx-reply text-lg"></i>
            </button>
          </div>
        </div>

        <!-- Discussion Content -->
        <div class="mb-3 text-gray-700 dark:text-gray-300">
          ${discussion.message}
        </div>

        <!-- Replies -->
        ${
          replies.length > 0
            ? `
          <div class="ml-4 border-l-2 border-gray-200 pl-4 dark:border-gray-700">
            ${replies.map((reply) => renderDiscussionItem(reply)).join("")}
          </div>
        `
            : ""
        }
      </div>
    `;
  }

  function setupDiscussionForm() {
    const newCommentBtn = document.getElementById("new-comment-btn");
    const form = document.getElementById("discussion-form");
    const submitBtn = document.getElementById("submit-discussion");
    const cancelBtn = document.getElementById("cancel-discussion");
    const messageInput = document.getElementById("discussion-message");

    if (newCommentBtn && form) {
      newCommentBtn.addEventListener("click", () => {
        form.classList.remove("hidden");
        messageInput?.focus();
      });
    }

    if (cancelBtn && form) {
      cancelBtn.addEventListener("click", () => {
        form.classList.add("hidden");
        messageInput.value = "";
      });
    }

    if (submitBtn) {
      submitBtn.addEventListener("click", submitDiscussion);
    }
  }

  async function submitDiscussion() {
    const messageInput = document.getElementById("discussion-message") as HTMLTextAreaElement;
    const internalCheckbox = document.getElementById("internal-discussion") as HTMLInputElement;
    const smsCheckbox = document.getElementById("sms-alert") as HTMLInputElement;

    if (!messageInput || !messageInput.value.trim()) {
      alert("Please enter a message");
      return;
    }

    try {
      const submitBtn = document.getElementById("submit-discussion") as HTMLButtonElement;
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="bx bx-loader-alt bx-spin text-lg"></i> Posting...';

      const response = await fetch("/api/discussions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          projectId: currentProjectId,
          message: messageInput.value.trim(),
          internal: internalCheckbox?.checked || false,
          sms_alert: smsCheckbox?.checked || false,
        }),
        credentials: "include",
      });

      const data = await response.json();

      if (data.success) {
        // Reset form
        messageInput.value = "";
        if (internalCheckbox) internalCheckbox.checked = false;
        if (smsCheckbox) smsCheckbox.checked = false;

        // Hide form
        const form = document.getElementById("discussion-form");
        if (form) form.classList.add("hidden");

        // Reload discussions
        await loadDiscussions();

        // Show success message
        if (window.showModal) {
          window.showModal(
            "success",
            "Comment Posted",
            "Your comment has been posted successfully.",
            3000
          );
        }
      } else {
        alert("Failed to post comment: " + data.error);
      }
    } catch (error) {
      console.error("Error submitting discussion:", error);
      alert("Failed to post comment");
    } finally {
      const submitBtn = document.getElementById("submit-discussion") as HTMLButtonElement;
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="bx bx-send text-lg"></i> Post Comment';
      }
    }
  }

  function setupEventListeners() {
    // Add any additional event listeners here
  }

  function showLoading(show) {
    const loading = document.getElementById("discussions-loading");
    if (loading) {
      loading.classList.toggle("hidden", !show);
    }
  }

  function showError(message) {
    const container = document.getElementById("discussions-list");
    if (container) {
      container.innerHTML = `
        <div class="text-center py-8 text-red-500">
          <i class="bx bx-error-circle mx-auto mb-4 text-4xl"></i>
          <p>${message}</p>
        </div>
      `;
    }
  }

  // Global functions for discussion actions
  (window as any).markDiscussionCompleted = async function (discussionId) {
    try {
      const response = await fetch("/api/update-discussion-completed", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ discussionId, completed: true }),
        credentials: "include",
      });

      if (response.ok) {
        await loadDiscussions();
        if (window.showModal) {
          window.showModal(
            "success",
            "Discussion Updated",
            "Discussion marked as completed.",
            3000
          );
        }
      }
    } catch (error) {
      console.error("Error marking discussion as completed:", error);
    }
  };

  (window as any).editDiscussion = function (discussionId) {
    // TODO: Implement edit functionality
    console.log("Edit discussion:", discussionId);
  };

  (window as any).replyToDiscussion = function (parentId) {
    // TODO: Implement reply functionality
    console.log("Reply to discussion:", parentId);
  };
</script>
