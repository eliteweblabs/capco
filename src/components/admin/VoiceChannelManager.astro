---
// Voice Channel Management Component for Fire Protection System
import { checkAuth } from "../../lib/auth";
import { createMessageBirdVoiceAPI } from "../../lib/messagebird-voice";
import { createVoiceInboundWebhook, listWebhookSubscriptions, deleteWebhookSubscription } from "../../lib/messagebird-webhooks";

const { currentUser, isAuth } = await checkAuth(Astro.cookies);

if (!currentUser || !isAuth || currentUser.role !== "Admin") {
  return Astro.redirect("/login");
}

let voiceConnectors = [];
let error = null;
let success = null;

try {
  const api = createMessageBirdVoiceAPI();
  voiceConnectors = await api.listVoiceConnectors();
} catch (err) {
  error = err.message;
}

// Handle form submissions
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const action = formData.get("action");

  if (action === "create_connector") {
    try {
      const api = createMessageBirdVoiceAPI();
      const connector = await api.createVoiceConnector({
        name: formData.get("name") as string,
        phoneNumberId: formData.get("phoneNumberId") as string,
      });
      success = `Voice connector created: ${connector.id}`;
      // Refresh the page to show new connector
      return Astro.redirect(Astro.url.pathname);
    } catch (err) {
      error = err.message;
    }
  }

  if (action === "create_webhook") {
    try {
      const channelId = formData.get("channelId") as string;
      const accessKey = import.meta.env.BIRD_ACCESS_KEY;
      const siteUrl = import.meta.env.SITE_URL;
      
      if (!accessKey || !siteUrl) {
        error = "MessageBird API key or site URL not configured";
      } else {
        const result = await createVoiceInboundWebhook(accessKey, siteUrl, channelId || undefined);
        if (result.success) {
          success = `Webhook created successfully: ${result.webhook.id}`;
        } else {
          error = result.error;
        }
      }
      return Astro.redirect(Astro.url.pathname);
    } catch (err) {
      error = err.message;
    }
  }

  if (action === "delete_webhook") {
    try {
      const webhookId = formData.get("webhookId") as string;
      const accessKey = import.meta.env.BIRD_ACCESS_KEY;
      
      if (!accessKey) {
        error = "MessageBird API key not configured";
      } else {
        const result = await deleteWebhookSubscription(accessKey, webhookId);
        if (result.success) {
          success = `Webhook deleted successfully`;
        } else {
          error = result.error;
        }
      }
      return Astro.redirect(Astro.url.pathname);
    } catch (err) {
      error = err.message;
    }
  }
}
---

<div class="max-w-6xl mx-auto p-6">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Voice Channel Management</h1>
    <p class="text-gray-600 dark:text-gray-400">
      Manage MessageBird voice channels for fire protection system AI assistant
    </p>
  </div>

  <!-- Status Messages -->
  {
    error && (
      <div class="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Error</h3>
            <div class="mt-2 text-sm text-red-700">{error}</div>
          </div>
        </div>
      </div>
    )
  }

  {
    success && (
      <div class="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-green-800">Success</h3>
            <div class="mt-2 text-sm text-green-700">{success}</div>
          </div>
        </div>
      </div>
    )
  }

  <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
    <!-- Create New Voice Connector -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
        Create Voice Connector
      </h2>

      <form method="POST" class="space-y-4">
        <input type="hidden" name="action" value="create_connector" />

        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Connector Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            placeholder="CAPCo Fire Protection Voice"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          />
        </div>

        <div>
          <label
            for="phoneNumberId"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
          >
            Phone Number ID
          </label>
          <input
            type="text"
            id="phoneNumberId"
            name="phoneNumberId"
            required
            placeholder="2cffb55c-120e-91a8-8f10-ed9d1b412d29"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white"
          />
          <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">
            Get this from your MessageBird dashboard
          </p>
        </div>

        <button
          type="submit"
          class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-150 ease-in-out"
        >
          Create Voice Connector
        </button>
      </form>
    </div>

    <!-- Existing Voice Connectors -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
        Existing Voice Connectors
      </h2>

      {
        voiceConnectors.length === 0 ? (
          <p class="text-gray-500 dark:text-gray-400 text-center py-8">
            No voice connectors found. Create one to get started.
          </p>
        ) : (
          <div class="space-y-4">
            {voiceConnectors.map((connector) => (
              <div class="border border-gray-200 dark:border-gray-600 rounded-lg p-4">
                <div class="flex items-center justify-between">
                  <div>
                    <h3 class="font-medium text-gray-900 dark:text-white">{connector.name}</h3>
                    <p class="text-sm text-gray-500 dark:text-gray-400">ID: {connector.id}</p>
                    {connector.channel?.channelId && (
                      <p class="text-sm text-green-600 dark:text-green-400">
                        Channel ID: {connector.channel.channelId}
                      </p>
                    )}
                    {connector.number?.phoneNumber && (
                      <p class="text-sm text-blue-600 dark:text-blue-400">
                        Phone: {connector.number.phoneNumber}
                      </p>
                    )}
                  </div>
                  <div class="text-right">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                      Active
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )
      }
    </div>
  </div>

  <!-- Webhook Information -->
  <div
    class="mt-8 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6"
  >
    <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-3">
      Webhook Configuration
    </h3>
    <div class="space-y-2 text-sm">
      <p class="text-blue-800 dark:text-blue-200">
        <strong>Incoming Call Webhook:</strong>
        <code class="bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded">
          {import.meta.env.SITE_URL}/api/webhook/incoming-call
        </code>
      </p>
      <p class="text-blue-800 dark:text-blue-200">
        <strong>Voice Recording Webhook:</strong>
        <code class="bg-blue-100 dark:bg-blue-800 px-2 py-1 rounded">
          {import.meta.env.SITE_URL}/api/webhook/voice-recording
        </code>
      </p>
      <p class="text-blue-800 dark:text-blue-200">
        <strong>n8n Integration:</strong> Configure your n8n webhook to receive voice data for Claude
        + ElevenLabs processing
      </p>
    </div>
  </div>

  <!-- Webhook Management -->
  <div class="mt-8 bg-white dark:bg-gray-800 shadow rounded-lg p-6">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
      Webhook Management
    </h3>
    
    <!-- Create Webhook Form -->
    <div class="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
      <h4 class="text-md font-medium text-gray-900 dark:text-white mb-3">Create Voice Webhook</h4>
      <form method="POST" class="space-y-4">
        <input type="hidden" name="action" value="create_webhook" />
        <div>
          <label for="channelId" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Channel ID (Optional)
          </label>
          <input
            type="text"
            id="channelId"
            name="channelId"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-600 dark:text-white"
            placeholder="Leave empty for all channels"
          />
          <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
            Leave empty to receive webhooks for all voice channels, or specify a channel ID to filter
          </p>
        </div>
        <button
          type="submit"
          class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
        >
          Create Voice Webhook
        </button>
      </form>
    </div>

    <!-- Existing Webhooks -->
    <div>
      <h4 class="text-md font-medium text-gray-900 dark:text-white mb-3">Existing Webhooks</h4>
      <div class="text-sm text-gray-600 dark:text-gray-400">
        <p>Webhook management will be available after creating your first webhook.</p>
        <p class="mt-2">
          <strong>Note:</strong> Webhooks are created via the MessageBird API and will automatically 
          send voice call events to your webhook endpoint at 
          <code class="bg-gray-100 dark:bg-gray-600 px-2 py-1 rounded">
            {import.meta.env.SITE_URL}/api/webhook/incoming-call
          </code>
        </p>
      </div>
    </div>
  </div>
</div>
