# Use Node.js 22.18.0 to address security vulnerabilities
FROM node:22.18.0-alpine

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S astro -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with legacy peer deps to resolve conflicts
RUN npm install --legacy-peer-deps

# Copy source code
COPY . .

# Ensure the production startup script has execute permissions and verify it exists
RUN ls -la start-production.sh && chmod +x start-production.sh && ls -la start-production.sh

# Change ownership of all files to non-root user
RUN chown -R astro:nodejs /app

# Switch to non-root user
USER astro

# Build the application with environment variables
# Accept build-time arguments (Railway passes these automatically)
ARG TWILIO_ACCOUNT_SID
ARG TWILIO_AUTH_TOKEN
ARG TWILIO_PHONE_NUMBER
ARG AGORA_APP_ID
ARG AGORA_APP_CERTIFICATE
ARG BIRD_ACCESS_KEY
ARG BIRD_IDENTITY_SIGNING_KEY
ARG BIRD_ISSUER
ARG BIRD_ORIGIN
ARG BIRD_WORKSPACE_ID
ARG N8N_WEBHOOK_URL
ARG N8N_WEBHOOK_TOKEN
ARG CHAT_PORT
ARG COMPANY_LOGO_DARK
ARG COMPANY_LOGO_LIGHT
ARG EMAIL_API_KEY
ARG EMAIL_LOGO_LIGHT
ARG EMAIL_PROVIDER
ARG FALLBACK_MODE
ARG FROM_EMAIL
ARG FROM_NAME
ARG GLOBAL_COMPANY_NAME
ARG GLOBAL_COMPANY_SLOGAN
ARG GOOGLE_MAPS_API_KEY
ARG GOOGLE_PLACES_API_KEY
ARG GOOGLE_PLACES_API_SECRET_KEY
ARG GOOGLE_VOICE
ARG MAILGUN_API
ARG MAILGUN_BASE_URL
ARG MAILGUN_SANDBOX_DOMAIN
ARG MAILGUN_WEBHOOK_SIGNING_KEY
ARG GLOBAL_COLOR_PRIMARY
ARG STRIPE_PUBLISHABLE_KEY
ARG SUPABASE_ANON_KEY
ARG SUPABASE_SERVICE_ROLE_KEY
ARG SUPABASE_URL
ARG RESEND_WEBHOOK_SECRET
ARG GLOBAL_COLOR_SECONDARY
ARG SITE_URL
ARG STRIPE_DOMAIN_ID
ARG STRIPE_SECRET_KEY
ARG SUPABASE_ANON_KEY
ARG SUPABASE_ANON_KEY
ARG SUPABASE_URL
ARG YEAR

# Set environment variables for build (required for Astro build)
ENV TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID
ENV TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN
ENV TWILIO_PHONE_NUMBER=$TWILIO_PHONE_NUMBER
ENV AGORA_APP_ID=$AGORA_APP_ID
ENV AGORA_APP_CERTIFICATE=$AGORA_APP_CERTIFICATE
ENV BIRD_ACCESS_KEY=$BIRD_ACCESS_KEY
ENV BIRD_IDENTITY_SIGNING_KEY=$BIRD_IDENTITY_SIGNING_KEY
ENV BIRD_ISSUER=$BIRD_ISSUER
ENV BIRD_ORIGIN=$BIRD_ORIGIN
ENV BIRD_WORKSPACE_ID=$BIRD_WORKSPACE_ID
ENV N8N_WEBHOOK_URL=$N8N_WEBHOOK_URL
ENV N8N_WEBHOOK_TOKEN=$N8N_WEBHOOK_TOKEN
ENV CHAT_PORT=$CHAT_PORT
ENV COMPANY_LOGO_DARK=$COMPANY_LOGO_DARK
ENV COMPANY_LOGO_LIGHT=$COMPANY_LOGO_LIGHT
ENV EMAIL_API_KEY=$EMAIL_API_KEY
ENV EMAIL_LOGO_LIGHT=$EMAIL_LOGO_LIGHT
ENV EMAIL_PROVIDER=$EMAIL_PROVIDER
ENV FALLBACK_MODE=$FALLBACK_MODE
ENV FROM_EMAIL=$FROM_EMAIL
ENV FROM_NAME=$FROM_NAME
ENV GLOBAL_COMPANY_NAME=$GLOBAL_COMPANY_NAME
ENV GLOBAL_COMPANY_SLOGAN=$GLOBAL_COMPANY_SLOGAN
ENV GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY
ENV GOOGLE_PLACES_API_KEY=$GOOGLE_PLACES_API_KEY
ENV GOOGLE_PLACES_API_SECRET_KEY=$GOOGLE_PLACES_API_SECRET_KEY
ENV GOOGLE_VOICE=$GOOGLE_VOICE
ENV MAILGUN_API=$MAILGUN_API
ENV MAILGUN_BASE_URL=$MAILGUN_BASE_URL
ENV MAILGUN_SANDBOX_DOMAIN=$MAILGUN_SANDBOX_DOMAIN
ENV MAILGUN_WEBHOOK_SIGNING_KEY=$MAILGUN_WEBHOOK_SIGNING_KEY
ENV GLOBAL_COLOR_PRIMARY=$GLOBAL_COLOR_PRIMARY
ENV STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY
ENV SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY
ENV SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
ENV SUPABASE_URL=$SUPABASE_URL
ENV RESEND_WEBHOOK_SECRET=$RESEND_WEBHOOK_SECRET
ENV GLOBAL_COLOR_SECONDARY=$GLOBAL_COLOR_SECONDARY
ENV SITE_URL=$SITE_URL
ENV STRIPE_DOMAIN_ID=$STRIPE_DOMAIN_ID
ENV STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY
ENV SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY
ENV SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY
ENV SUPABASE_URL=$SUPABASE_URL
ENV YEAR=$YEAR

# Debug: Print environment variables during build
# RUN echo "üîç BUILD-TIME ENV CHECK:"
# RUN echo "SITE_URL: $SITE_URL"
# RUN echo "NODE_ENV: $NODE_ENV"
# RUN echo "SUPABASE_URL: $SUPABASE_URL"
# RUN echo "COMPANY_LOGO_LIGHT: $COMPANY_LOGO_LIGHT"
# RUN echo "COMPANY_LOGO_DARK: $COMPANY_LOGO_DARK"
# RUN echo "GLOBAL_COLOR_PRIMARY: $GLOBAL_COLOR_PRIMARY"
# RUN echo "GLOBAL_COMPANY_NAME: $GLOBAL_COMPANY_NAME"
# RUN echo "GLOBAL_COMPANY_SLOGAN: $GLOBAL_COMPANY_SLOGAN"
# RUN echo "YEAR: $YEAR"
# RUN echo "GLOBAL_SECONDARY_TEXT_CLASSES: $GLOBAL_SECONDARY_TEXT_CLASSES"
# RUN echo "GLOBAL_PRIMARY_TEXT_CLASSES: $GLOBAL_PRIMARY_TEXT_CLASSES"
# RUN echo "EMAIL_LOGO_LIGHT: $EMAIL_LOGO_LIGHT"
# RUN echo "GLOBAL_COLOR_SECONDARY: $GLOBAL_COLOR_SECONDARY"

# Build the application with Railway-specific settings
RUN npm run build:railway

# Expose ports (Railway uses dynamic PORT at runtime)
# Note: Railway ignores EXPOSE and uses PORT env var
EXPOSE 3000

# Set environment variables for production
ENV NODE_ENV=production
ENV HOST=0.0.0.0
# Note: PORT is provided by Railway at runtime, do not set it here

# Start both the Astro application and Socket.io server
CMD ["/bin/sh", "./start-production.sh"] 