-- Improved invoices table with proper constraints and structure
-- Drop existing table if needed (be careful with data!)
DROP TABLE IF EXISTS public.invoices CASCADE;
DROP TABLE IF EXISTS public.invoice_line_items CASCADE;

CREATE TABLE public.invoices (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  
  -- Project relationship
  project_id bigint NOT NULL,
  created_by uuid NULL DEFAULT auth.uid(),
  
  -- Invoice details
  subject text NULL,
  status text NOT NULL DEFAULT 'draft',
  invoice_date date NOT NULL DEFAULT current_date,
  due_date date NULL,
  sent_at timestamp with time zone NULL,
  
  -- Financial fields
  subtotal numeric(10,2) NULL DEFAULT 0,
  tax_rate numeric(5,4) NULL DEFAULT 0,
  tax_amount numeric(10,2) NULL DEFAULT 0,
  discount_amount numeric(10,2) NULL DEFAULT 0,
  total_amount numeric(10,2) NULL DEFAULT 0,
  
  -- Additional fields
  payment_terms text NULL DEFAULT '30 days',
  notes text NULL,
  
  -- Primary key
  CONSTRAINT invoices_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Add foreign key constraints after table creation
ALTER TABLE invoices 
  ADD CONSTRAINT invoices_project_id_fkey 
  FOREIGN KEY (project_id) REFERENCES projects (id) ON DELETE CASCADE;

ALTER TABLE invoices 
  ADD CONSTRAINT invoices_created_by_fkey 
  FOREIGN KEY (created_by) REFERENCES auth.users (id) ON DELETE SET NULL;

-- Add check constraints
ALTER TABLE invoices 
  ADD CONSTRAINT invoices_status_check 
  CHECK (status IN ('draft', 'sent', 'paid', 'cancelled', 'overdue', 'proposal'));

ALTER TABLE invoices 
  ADD CONSTRAINT invoices_total_amount_check 
  CHECK (total_amount >= 0);

ALTER TABLE invoices 
  ADD CONSTRAINT invoices_tax_rate_check 
  CHECK (tax_rate >= 0 AND tax_rate <= 1);

ALTER TABLE invoices 
  ADD CONSTRAINT invoices_discount_check 
  CHECK (discount_amount >= 0);

-- Create indexes for performance
CREATE INDEX idx_invoices_project_id ON invoices (project_id);
CREATE INDEX idx_invoices_status ON invoices (status);
CREATE INDEX idx_invoices_created_by ON invoices (created_by);
CREATE INDEX idx_invoices_due_date ON invoices (due_date);
CREATE INDEX idx_invoices_created_at ON invoices (created_at);

-- Enable RLS
ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Users can view their own invoices" ON invoices
FOR SELECT USING (
  created_by = auth.uid() OR
  project_id IN (
    SELECT id FROM projects WHERE author_id = auth.uid()
  ) OR
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = auth.uid() AND role IN ('Admin', 'Staff')
  )
);

CREATE POLICY "Users can create invoices for their projects" ON invoices
FOR INSERT WITH CHECK (
  project_id IN (
    SELECT id FROM projects WHERE author_id = auth.uid()
  ) OR
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = auth.uid() AND role IN ('Admin', 'Staff')
  )
);

CREATE POLICY "Users can update their own invoices" ON invoices
FOR UPDATE USING (
  created_by = auth.uid() OR
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = auth.uid() AND role IN ('Admin', 'Staff')
  )
);

CREATE POLICY "Admin/Staff can delete invoices" ON invoices
FOR DELETE USING (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = auth.uid() AND role IN ('Admin', 'Staff')
  )
);

-- Add trigger to automatically update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_invoices_updated_at 
    BEFORE UPDATE ON invoices 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Create invoice_line_items table
CREATE TABLE public.invoice_line_items (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  
  -- Invoice relationship
  invoice_id bigint NOT NULL,
  
  -- Line item details
  description text NOT NULL,
  quantity numeric(10,3) NOT NULL DEFAULT 1,
  unit_price numeric(10,2) NOT NULL DEFAULT 0,
  total_price numeric(10,2) NOT NULL DEFAULT 0,
  sortOrder integer NOT NULL DEFAULT 1,
  
  -- Optional fields
  notes text NULL,
  
  -- Constraints
  CONSTRAINT invoice_line_items_pkey PRIMARY KEY (id),
  CONSTRAINT invoice_line_items_invoice_id_fkey FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE CASCADE,
  CONSTRAINT invoice_line_items_quantity_check CHECK (quantity > 0),
  CONSTRAINT invoice_line_items_unit_price_check CHECK (unit_price >= 0),
  CONSTRAINT invoice_line_items_total_price_check CHECK (total_price >= 0)
) TABLESPACE pg_default;

-- Create indexes for line items
CREATE INDEX idx_invoice_line_items_invoice_id ON invoice_line_items (invoice_id);
CREATE INDEX idx_invoice_line_items_sortOrder ON invoice_line_items (invoice_id, sortOrder);

-- Enable RLS for line items
ALTER TABLE invoice_line_items ENABLE ROW LEVEL SECURITY;

-- RLS Policies for line items
CREATE POLICY "Users can view line items for their invoices" ON invoice_line_items
FOR SELECT USING (
  invoice_id IN (
    SELECT id FROM invoices WHERE 
      created_by = auth.uid() OR
      project_id IN (SELECT id FROM projects WHERE author_id = auth.uid()) OR
      EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('Admin', 'Staff'))
  )
);

CREATE POLICY "Users can create line items for their invoices" ON invoice_line_items
FOR INSERT WITH CHECK (
  invoice_id IN (
    SELECT id FROM invoices WHERE 
      created_by = auth.uid() OR
      project_id IN (SELECT id FROM projects WHERE author_id = auth.uid()) OR
      EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('Admin', 'Staff'))
  )
);

CREATE POLICY "Users can update line items for their invoices" ON invoice_line_items
FOR UPDATE USING (
  invoice_id IN (
    SELECT id FROM invoices WHERE 
      created_by = auth.uid() OR
      EXISTS (SELECT 1 FROM profiles WHERE id = auth.uid() AND role IN ('Admin', 'Staff'))
  )
);

CREATE POLICY "Admin/Staff can delete line items" ON invoice_line_items
FOR DELETE USING (
  EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = auth.uid() AND role IN ('Admin', 'Staff')
  )
);

-- Add trigger for line items updated_at
CREATE TRIGGER update_invoice_line_items_updated_at 
    BEFORE UPDATE ON invoice_line_items 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Function to recalculate invoice totals when line items change
CREATE OR REPLACE FUNCTION recalculate_invoice_totals()
RETURNS TRIGGER AS $$
BEGIN
    -- Recalculate totals for the affected invoice
    UPDATE invoices 
    SET 
        subtotal = (
            SELECT COALESCE(SUM(total_price), 0) 
            FROM invoice_line_items 
            WHERE invoice_id = COALESCE(NEW.invoice_id, OLD.invoice_id)
        ),
        tax_amount = ROUND((
            SELECT COALESCE(SUM(total_price), 0) 
            FROM invoice_line_items 
            WHERE invoice_id = COALESCE(NEW.invoice_id, OLD.invoice_id)
        ) * COALESCE(tax_rate, 0), 2),
        total_amount = ROUND((
            SELECT COALESCE(SUM(total_price), 0) 
            FROM invoice_line_items 
            WHERE invoice_id = COALESCE(NEW.invoice_id, OLD.invoice_id)
        ) * (1 + COALESCE(tax_rate, 0)) - COALESCE(discount_amount, 0), 2),
        updated_at = now()
    WHERE id = COALESCE(NEW.invoice_id, OLD.invoice_id);
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Triggers to auto-recalculate invoice totals
CREATE TRIGGER recalculate_totals_on_line_item_insert
    AFTER INSERT ON invoice_line_items
    FOR EACH ROW
    EXECUTE FUNCTION recalculate_invoice_totals();

CREATE TRIGGER recalculate_totals_on_line_item_update
    AFTER UPDATE ON invoice_line_items
    FOR EACH ROW
    EXECUTE FUNCTION recalculate_invoice_totals();

CREATE TRIGGER recalculate_totals_on_line_item_delete
    AFTER DELETE ON invoice_line_items
    FOR EACH ROW
    EXECUTE FUNCTION recalculate_invoice_totals();

-- Comments for documentation
COMMENT ON TABLE invoices IS 'Invoice records for projects with financial tracking';
COMMENT ON COLUMN invoices.subject IS 'Invoice subject/title for proposals and invoices';
COMMENT ON COLUMN invoices.status IS 'Invoice status: draft, sent, paid, cancelled, overdue, proposal';
COMMENT ON COLUMN invoices.payment_terms IS 'Payment terms like "30 days", "Net 15", etc.';

COMMENT ON TABLE invoice_line_items IS 'Individual line items that make up an invoice';
COMMENT ON COLUMN invoice_line_items.total_price IS 'Calculated as quantity * unit_price';
COMMENT ON COLUMN invoice_line_items.sortOrder IS 'Display order of line items in the invoice';
